{
  "name": "mbpp_611_max_of_nth",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp7ccy35na.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpep04bdob.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = test_list.get(0).get((int)N);\n        for (int i = 1; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpsq08bt9b.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp2h0bomb4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpjw5cptzh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpjw5cptzh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++){\n            if(test_list.get(i).get((int)N) > max){\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp7fff0_8a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int) N) > max) {\n                max = row.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpxr_rs05r.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int) N) > max) {\n                max = row.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpykawfhhs.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp10zoft2s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp0mv90sjd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp68ok7qud.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int) N) > max) {\n                max = row.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpxr_rs05r.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp792w9x_p.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream()\n            .map(x -> x.get((int)N))\n            .max(Long::compareTo)\n            .get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpg8_swv0v.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp10zoft2s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Comparator.naturalOrder()).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmp_3klj844.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpjw5cptzh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp10zoft2s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        return test_list.stream().map(x -> x.get((int)N)).max(Comparator.naturalOrder()).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmp_odrl2r8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++){\n            if(test_list.get(i).get((int)N) > max){\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpuxj80rwv.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp2h0bomb4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++){\n            if(test_list.get(i).get((int)N) > max){\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp7fff0_8a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp792w9x_p.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp2h0bomb4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp2h0bomb4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            ArrayList<Long> row = test_list.get(i);\n            if(row.get((int)N) > max) {\n                max = row.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpkgiqqmvx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpep04bdob.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmp8e5l25v1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp2h0bomb4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpplj375m1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpwgxnwu6i.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp2h0bomb4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++){\n            if(test_list.get(i).get((int)N) > max){\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp7fff0_8a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpixz_6v_m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp10zoft2s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.get((int)N) > max) {\n                max = list.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmp970kesoi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compareTo).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpsv_f3qwt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x->x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmp1gqr9auv.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().mapToLong(x -> x.get((int)N)).max().getAsLong();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmptauchled.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++){\n            if(test_list.get(i).get((int)N) > max){\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp7fff0_8a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpep04bdob.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().mapToLong(x -> x.get((int)N)).max().getAsLong();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmptauchled.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpnib9n0nz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp2h0bomb4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code goes here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmp4ukfbo6x.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpjw5cptzh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp2h0bomb4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpixz_6v_m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpixz_6v_m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpjw5cptzh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compareTo).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpsv_f3qwt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp2h0bomb4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().mapToLong(x -> x.get((int) N)).max().getAsLong();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpe8y8h_ht.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpplj375m1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compareTo).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpsv_f3qwt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(e -> e.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmprk8elyvp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().mapToLong(x -> x.get((int)N)).max().getAsLong();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmptauchled.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(l -> l.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpl_gme_q5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream()\n            .map(x -> x.get((int)N))\n            .max(Long::compare)\n            .get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpogibpzn_.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp2h0bomb4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpplj375m1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmp089nv4yz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return test_list.stream().map(l -> l.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpvhnl2d2u.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp0mv90sjd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++){\n            if(test_list.get(i).get((int)N) > max){\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp7fff0_8a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp10zoft2s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpixz_6v_m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp2h0bomb4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp792w9x_p.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpep04bdob.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpcg7z83p4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpplj375m1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpplj375m1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return test_list.stream()\n                .map(x -> x.get((int)N))\n                .max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpzkjd59jt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpixz_6v_m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().mapToLong(x -> x.get((int)N)).max().getAsLong();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmptauchled.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpplj375m1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpjw5cptzh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp2h0bomb4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp10zoft2s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp10zoft2s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp2h0bomb4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp792w9x_p.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> list: test_list) {\n            if (list.get((int) N) > max) {\n                max = list.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "/tmp/tmp9meuble0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i=0;i<test_list.size();i++){\n            if(test_list.get(i).get((int)N)>max){\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "/tmp/tmposuko92y.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpixz_6v_m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.get((int) N) > max) {\n                max = list.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "/tmp/tmpru35r3wn.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = test_list.get(0).get((int)N);\n        for (int i = 1; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "/tmp/tmpp90ncry3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpjw5cptzh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "/tmp/tmp8flci9we.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().mapToLong(x -> x.get((int)N)).max().getAsLong();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmptauchled.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpplj375m1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp0mv90sjd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.get((int) N) > max) {\n                max = list.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "/tmp/tmpvpwrvbcm.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compareTo).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpsv_f3qwt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpjw5cptzh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp2h0bomb4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream()\n            .map(row -> row.get((int) N))\n            .max(Long::compareTo)\n            .get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "/tmp/tmp6dak007r.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpjw5cptzh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().mapToLong(x -> x.get((int)N)).max().getAsLong();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmptauchled.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp2h0bomb4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return test_list.stream()\n                .map(x -> x.get((int)N))\n                .max(Long::compareTo)\n                .get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "/tmp/tmpbzd3te49.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().mapToLong(x -> x.get((int)N)).max().getAsLong();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmptauchled.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpwgxnwu6i.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.get((int) N) > max) {\n                max = list.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "/tmp/tmpvpwrvbcm.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code goes here.\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "/tmp/tmp0rqb8nbe.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int)N) > max) {\n                max = row.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "/tmp/tmppskkgx2r.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp2h0bomb4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpjw5cptzh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Comparator.naturalOrder()).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmp_3klj844.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int) N) > max) {\n                max = row.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "/tmp/tmpvyfxduqa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int)N) > max) {\n                max = row.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "/tmp/tmpqe5rbbum.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int)N) > max) {\n                max = row.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "/tmp/tmppskkgx2r.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream()\n                        .map(x -> x.get((int)N))\n                        .max(Long::compare)\n                        .get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "/tmp/tmp8cmu1ru0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpixz_6v_m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for(ArrayList<Long> list : test_list) {\n            if(list.get((int)N) > max) {\n                max = list.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "/tmp/tmp31veqfo6.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpixz_6v_m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpjw5cptzh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpjw5cptzh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Comparator.naturalOrder()).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmp_3klj844.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Comparator.naturalOrder()).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmp_3klj844.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int) N)).max(Comparator.naturalOrder()).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "/tmp/tmpwmzy4qnt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmp0mv90sjd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpcg7z83p4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpp46b98fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpjw5cptzh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510313,
      "stdout": "",
      "stderr": "/tmp/tmpep04bdob.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "/tmp/tmpixz_6v_m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}