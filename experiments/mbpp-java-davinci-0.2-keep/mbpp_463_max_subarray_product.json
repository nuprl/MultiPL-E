{
  "name": "mbpp_463_max_subarray_product",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    public static long maxSubarrayProduct(ArrayList<Long> arr) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(maxSubarrayProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)0l, (long)7l, (long)-8l, (long)-2l)))) == (112l));\n    assert(maxSubarrayProduct((new ArrayList<Long>(Arrays.asList((long)6l, (long)-3l, (long)-10l, (long)0l, (long)2l)))) == (180l));\n    assert(maxSubarrayProduct((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-40l, (long)0l, (long)-2l, (long)-3l)))) == (80l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long res = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < 0) {\n                long tmp = max;\n                max = min;\n                min = tmp;\n            }\n            max = Math.max(arr.get(i), max * arr.get(i));\n            min = Math.min(arr.get(i), min * arr.get(i));\n            res = Math.max(res, max);\n        }\n        return res;",
    "        long maxProduct = arr.get(0);\n        long minProduct = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long current = arr.get(i);\n            long tempMax = maxProduct;\n            maxProduct = Math.max(Math.max(maxProduct * current, minProduct * current), current);\n            minProduct = Math.min(Math.min(tempMax * current, minProduct * current), current);\n            result = Math.max(result, maxProduct);\n        }\n        return result;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_so_far = arr.get(0);\n        long min_so_far = arr.get(0);\n        long max_ending_here = arr.get(0);\n        long min_ending_here = arr.get(0);\n        long max_product = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long x = arr.get(i);\n            max_ending_here = Math.max(Math.max(x, x * max_so_far), x * min_so_far);\n            min_ending_here = Math.min(Math.min(x, x * max_so_far), x * min_so_far);\n            max_so_far = max_ending_here;\n            min_so_far = min_ending_here;\n            max_product = Math.max(max_product, max_so_far);\n        }\n        return max_product;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long ans = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long curr = arr.get(i);\n            long tempMax = max;\n            max = Math.max(Math.max(max * curr, min * curr), curr);\n            min = Math.min(Math.min(tempMax * curr, min * curr), curr);\n            ans = Math.max(ans, max);\n        }\n        return ans;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_so_far = arr.get(0);\n        long min_so_far = arr.get(0);\n        long max_ending_here = arr.get(0);\n        long min_ending_here = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = Math.max(max_ending_here * arr.get(i), arr.get(i));\n                min_ending_here = Math.min(min_ending_here * arr.get(i), arr.get(i));\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), arr.get(i));\n                min_ending_here = Math.min(temp * arr.get(i), arr.get(i));\n            }\n            max_so_far = Math.max(max_so_far, max_ending_here);\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long curr = arr.get(i);\n            long tempMax = max;\n            max = Math.max(Math.max(curr, curr * max), curr * min);\n            min = Math.min(Math.min(curr, curr * tempMax), curr * min);\n            result = Math.max(result, max);\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long maxProduct = arr.get(0);\n        long minProduct = arr.get(0);\n        long maxSoFar = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long curr = arr.get(i);\n            long tempMax = Math.max(Math.max(maxProduct * curr, minProduct * curr), curr);\n            minProduct = Math.min(Math.min(maxProduct * curr, minProduct * curr), curr);\n            maxProduct = tempMax;\n            maxSoFar = Math.max(maxSoFar, maxProduct);\n        }\n        return maxSoFar;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long maxProduct = arr.get(0);\n        long minProduct = arr.get(0);\n        long maxSoFar = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long current = arr.get(i);\n            long tempMax = maxProduct;\n            maxProduct = Math.max(Math.max(maxProduct * current, minProduct * current), current);\n            minProduct = Math.min(Math.min(tempMax * current, minProduct * current), current);\n            maxSoFar = Math.max(maxSoFar, maxProduct);\n        }\n        return maxSoFar;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.max(arr.get(i), max * arr.get(i));\n            min = Math.min(arr.get(i), min * arr.get(i));\n            result = Math.max(result, max);\n        }\n        return result;",
    "        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                maxProduct = maxProduct * arr.get(i);\n                minProduct = Math.min(minProduct * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.max(minProduct * arr.get(i), 1);\n                minProduct = temp * arr.get(i);\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        // Write your code here.\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.max(arr.get(i), max * arr.get(i));\n            min = Math.min(arr.get(i), min * arr.get(i));\n            result = Math.max(result, max);\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long maxProduct = arr.get(0);\n        long minProduct = arr.get(0);\n        long result = arr.get(0);\n        for(int i = 1; i < arr.size(); i++) {\n            long curr = arr.get(i);\n            long tempMax = maxProduct;\n            maxProduct = Math.max(Math.max(maxProduct * curr, minProduct * curr), curr);\n            minProduct = Math.min(Math.min(tempMax * curr, minProduct * curr), curr);\n            result = Math.max(result, maxProduct);\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long maxProduct = arr.get(0);\n        long minProduct = arr.get(0);\n        long maxSoFar = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long curr = arr.get(i);\n            long tempMax = Math.max(Math.max(maxProduct * curr, minProduct * curr), curr);\n            minProduct = Math.min(Math.min(maxProduct * curr, minProduct * curr), curr);\n            maxProduct = tempMax;\n            maxSoFar = Math.max(maxSoFar, maxProduct);\n        }\n        return maxSoFar;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                maxProduct = maxProduct * arr.get(i);\n                minProduct = Math.min(minProduct * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.max(minProduct * arr.get(i), 1);\n                minProduct = temp * arr.get(i);\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_so_far = 1;\n        long min_so_far = 1;\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_product = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (min_so_far > min_ending_here) {\n                min_so_far = min_ending_here;\n            }\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long max_so_far = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            max_so_far = Math.max(max, max_so_far);\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = Long.MIN_VALUE;\n        long min = Long.MAX_VALUE;\n        long result = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.max(arr.get(i), max * arr.get(i));\n            min = Math.min(arr.get(i), min * arr.get(i));\n            result = Math.max(result, max);\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long maxProduct = arr.get(0);\n        long minProduct = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long curr = arr.get(i);\n            long temp = maxProduct;\n            maxProduct = Math.max(Math.max(maxProduct * curr, minProduct * curr), curr);\n            minProduct = Math.min(Math.min(temp * curr, minProduct * curr), curr);\n            result = Math.max(result, maxProduct);\n        }\n        return result;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long res = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            res = Math.max(res, max);\n        }\n        return res;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                maxProduct = maxProduct * arr.get(i);\n                minProduct = Math.min(minProduct * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.max(minProduct * arr.get(i), 1);\n                minProduct = temp * arr.get(i);\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;",
    "        long max_so_far = arr.get(0);\n        long min_so_far = arr.get(0);\n        long max_ending_here = arr.get(0);\n        long min_ending_here = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long x = arr.get(i);\n            max_ending_here = Math.max(x, Math.max(x * max_ending_here, x * min_ending_here));\n            min_ending_here = Math.min(x, Math.min(x * max_ending_here, x * min_ending_here));\n            max_so_far = Math.max(max_so_far, max_ending_here);\n            min_so_far = Math.min(min_so_far, min_ending_here);\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = 1;\n        long min = 1;\n        long result = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max = max * arr.get(i);\n                min = Math.min(min * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max = 1;\n                min = 1;\n            } else {\n                long temp = max;\n                max = Math.max(min * arr.get(i), 1);\n                min = temp * arr.get(i);\n            }\n            if (result < max) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.max(arr.get(i), max * arr.get(i));\n            min = Math.min(arr.get(i), min * arr.get(i));\n            result = Math.max(result, max);\n        }\n        return result;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                maxProduct = maxProduct * arr.get(i);\n                minProduct = Math.min(minProduct * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.max(minProduct * arr.get(i), 1);\n                minProduct = temp * arr.get(i);\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long maxProduct = 0;\n        long currentProduct = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            currentProduct *= arr.get(i);\n            maxProduct = Math.max(maxProduct, currentProduct);\n            if (currentProduct == 0) {\n                currentProduct = 1;\n            }\n        }\n        currentProduct = 1;\n        for (int i = arr.size() - 1; i >= 0; i--) {\n            currentProduct *= arr.get(i);\n            maxProduct = Math.max(maxProduct, currentProduct);\n            if (currentProduct == 0) {\n                currentProduct = 1;\n            }\n        }\n        return maxProduct;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long ans = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > ans)\n                ans = max;\n        }\n        return ans;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.max(arr.get(i), max * arr.get(i));\n            min = Math.min(arr.get(i), min * arr.get(i));\n            result = Math.max(result, max);\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_so_far = 1;\n        long min_so_far = 1;\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_product = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (min_so_far > min_ending_here) {\n                min_so_far = min_ending_here;\n            }\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.max(arr.get(i), max * arr.get(i));\n            min = Math.min(arr.get(i), min * arr.get(i));\n            result = Math.max(result, max);\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_so_far = 1;\n        long min_so_far = 1;\n        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_product = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (min_so_far > min_ending_here) {\n                min_so_far = min_ending_here;\n            }\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_so_far = arr.get(0);\n        long min_so_far = arr.get(0);\n        long max_ending_here = arr.get(0);\n        long min_ending_here = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = Math.max(arr.get(i), max_ending_here * arr.get(i));\n                min_ending_here = Math.min(arr.get(i), min_ending_here * arr.get(i));\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(arr.get(i), min_ending_here * arr.get(i));\n                min_ending_here = Math.min(arr.get(i), temp * arr.get(i));\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                maxProduct = maxProduct * arr.get(i);\n                minProduct = Math.min(minProduct * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.max(minProduct * arr.get(i), 1);\n                minProduct = temp * arr.get(i);\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long maxProduct = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            maxProduct = Math.max(max, maxProduct);\n        }\n        return maxProduct;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;",
    "        long max_so_far = arr.get(0);\n        long min_so_far = arr.get(0);\n        long max_ending_here = arr.get(0);\n        long min_ending_here = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = Math.max(arr.get(i), max_ending_here * arr.get(i));\n                min_ending_here = Math.min(arr.get(i), min_ending_here * arr.get(i));\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(arr.get(i), min_ending_here * arr.get(i));\n                min_ending_here = Math.min(arr.get(i), temp * arr.get(i));\n            }\n            if (max_ending_here > max_so_far) {\n                max_so_far = max_ending_here;\n            }\n            if (min_ending_here < min_so_far) {\n                min_so_far = min_ending_here;\n            }\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                maxProduct = maxProduct * arr.get(i);\n                minProduct = Math.min(minProduct * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.max(minProduct * arr.get(i), 1);\n                minProduct = temp * arr.get(i);\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;",
    "        long maxProduct = 1;\n        long minProduct = 1;\n        long maxSoFar = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                maxProduct = maxProduct * arr.get(i);\n                minProduct = Math.min(minProduct * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                maxProduct = 1;\n                minProduct = 1;\n            } else {\n                long temp = maxProduct;\n                maxProduct = Math.max(minProduct * arr.get(i), 1);\n                minProduct = temp * arr.get(i);\n            }\n            if (maxSoFar < maxProduct) {\n                maxSoFar = maxProduct;\n            }\n        }\n        return maxSoFar;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = 1;\n        long min = 1;\n        long result = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max = max * arr.get(i);\n                min = Math.min(min * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max = 1;\n                min = 1;\n            } else {\n                long temp = max;\n                max = Math.max(min * arr.get(i), 1);\n                min = temp * arr.get(i);\n            }\n            if (result < max) {\n                result = max;\n            }\n        }\n        return result;"
  ]
}