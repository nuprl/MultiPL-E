{
  "name": "mbpp_595_min_Swaps",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int n = str1.length();\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmp8z7s6fnk.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp8z7s6fnk.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp8z7s6fnk.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp8z7s6fnk.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int n = str1.length();\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmp8z7s6fnk.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp8z7s6fnk.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp8z7s6fnk.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp8z7s6fnk.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmp89_hj5ue.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp89_hj5ue.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp89_hj5ue.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp89_hj5ue.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        int len = str1.length();\n        for (int i = 0; i < len; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmptg8u81jr.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmptg8u81jr.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmptg8u81jr.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmptg8u81jr.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmp89_hj5ue.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp89_hj5ue.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp89_hj5ue.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp89_hj5ue.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int len = str1.length();\n        int count = 0;\n        for (int i = 0; i < len; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmp0iak70h3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp0iak70h3.java:24: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp0iak70h3.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp0iak70h3.java:26: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        int len = str1.length();\n        for (int i = 0; i < len; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmpjwzy9qzh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpjwzy9qzh.java:22: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpjwzy9qzh.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpjwzy9qzh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmpy4o6qhrs.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpy4o6qhrs.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpy4o6qhrs.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpy4o6qhrs.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) return -1;\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) count++;\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmpiezeqdij.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiezeqdij.java:19: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiezeqdij.java:20: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiezeqdij.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmp2cbaanc0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2cbaanc0.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp2cbaanc0.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp2cbaanc0.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmpok0xz7uh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpok0xz7uh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpok0xz7uh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpok0xz7uh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i))\n                count++;\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmp0fnvgh7e.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp0fnvgh7e.java:19: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp0fnvgh7e.java:20: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp0fnvgh7e.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmpy4o6qhrs.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpy4o6qhrs.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpy4o6qhrs.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpy4o6qhrs.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return (count / 2);\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmpsa_rogrs.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpsa_rogrs.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpsa_rogrs.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpsa_rogrs.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        int len = str1.length();\n        for (int i = 0; i < len; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmptg8u81jr.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmptg8u81jr.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmptg8u81jr.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmptg8u81jr.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        int len = str1.length();\n        for (int i = 0; i < len; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmptg8u81jr.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmptg8u81jr.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmptg8u81jr.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmptg8u81jr.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int n = str1.length();\n        int m = str2.length();\n        if (n != m) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmpvhu7xqxt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpvhu7xqxt.java:25: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpvhu7xqxt.java:26: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpvhu7xqxt.java:27: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmp89_hj5ue.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp89_hj5ue.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp89_hj5ue.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp89_hj5ue.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int len = str1.length();\n        int count = 0;\n        for (int i = 0; i < len; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmp_qxtp4dl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_qxtp4dl.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp_qxtp4dl.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp_qxtp4dl.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmp89_hj5ue.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp89_hj5ue.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp89_hj5ue.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp89_hj5ue.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) return -1;\n        int n = str1.length();\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) count++;\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmp4tkgqi9a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp4tkgqi9a.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp4tkgqi9a.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp4tkgqi9a.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for(int i=0;i<str1.length();i++){\n            if(str1.charAt(i) != str2.charAt(i)){\n                count++;\n            }\n        }\n        return count/2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmphnbf30eh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmphnbf30eh.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmphnbf30eh.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmphnbf30eh.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmp89_hj5ue.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp89_hj5ue.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp89_hj5ue.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp89_hj5ue.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int n = str1.length();\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmp8z7s6fnk.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp8z7s6fnk.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp8z7s6fnk.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp8z7s6fnk.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int n = str1.length();\n        int m = str2.length();\n        if (n != m) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmpvhu7xqxt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpvhu7xqxt.java:25: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpvhu7xqxt.java:26: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpvhu7xqxt.java:27: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int swaps = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                swaps++;\n            }\n        }\n        return swaps / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmpzte_mzmx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpzte_mzmx.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpzte_mzmx.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpzte_mzmx.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int swaps = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                swaps++;\n            }\n        }\n        return swaps;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmp0097s4zy.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp0097s4zy.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp0097s4zy.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp0097s4zy.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        int i = 0;\n        while (i < str1.length()) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n                i += 2;\n            } else {\n                i++;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmpctowyw91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpctowyw91.java:24: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpctowyw91.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpctowyw91.java:26: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmpae700wna.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpae700wna.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpae700wna.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpae700wna.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        int n = str1.length();\n        int m = str2.length();\n        if (n != m) {\n            return -1;\n        }\n        for (int i = 0; i < n; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmprx8sdzp9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmprx8sdzp9.java:25: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmprx8sdzp9.java:26: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmprx8sdzp9.java:27: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmp2cbaanc0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2cbaanc0.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp2cbaanc0.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp2cbaanc0.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int n = str1.length();\n        int m = str2.length();\n        if (n != m) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmpvhu7xqxt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpvhu7xqxt.java:25: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpvhu7xqxt.java:26: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpvhu7xqxt.java:27: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122481,
      "stdout": "",
      "stderr": "/tmp/tmp89_hj5ue.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp89_hj5ue.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp89_hj5ue.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp89_hj5ue.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpub7eg9p9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpub7eg9p9.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpub7eg9p9.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpkpd_pc91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkpd_pc91.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkpd_pc91.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}