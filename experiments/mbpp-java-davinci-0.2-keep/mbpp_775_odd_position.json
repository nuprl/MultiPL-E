{
  "name": "mbpp_775_odd_position",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static boolean oddPosition(ArrayList<Long> nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(oddPosition((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)4l, (long)3l, (long)6l, (long)7l, (long)6l, (long)3l)))) == (true));\n    assert(oddPosition((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l)))) == (true));\n    assert(oddPosition((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        for (int i = 0; i < nums.size(); i += 2) {\n            if (nums.get(i) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;",
    "        for (int i = 0; i < nums.size(); i++) {\n            if (i % 2 == 1 && nums.get(i) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;",
    "        for (int i = 0; i < nums.size(); i++) {\n            if (i % 2 == 1 && nums.get(i) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;",
    "        for (int i = 0; i < nums.size(); i += 2) {\n            if (nums.get(i) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;",
    "        for (int i = 0; i < nums.size(); i++) {\n            if (i % 2 == 1 && nums.get(i) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;",
    "        for (int i = 0; i < nums.size(); i += 2) {\n            if (nums.get(i) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;",
    "        return IntStream.range(0, nums.size()).filter(i -> i % 2 == 1).allMatch(i -> nums.get(i) % 2 == 1);",
    "        for (int i = 0; i < nums.size(); i++) {\n            if (i % 2 == 1 && nums.get(i) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;",
    "        for (int i = 0; i < nums.size(); i++) {\n            if (i % 2 == 0 && nums.get(i) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;",
    "        for (int i = 0; i < nums.size(); i += 2) {\n            if (nums.get(i) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;",
    "        for (int i = 0; i < nums.size(); i++) {\n            if (i % 2 == 0 && nums.get(i) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;",
    "        for (int i = 0; i < nums.size(); i++) {\n            if (i % 2 == 0 && nums.get(i) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;",
    "        for (int i = 0; i < nums.size(); i++) {\n            if (i % 2 == 0 && nums.get(i) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;",
    "        for (int i = 0; i < nums.size(); i++) {\n            if (i % 2 == 0 && nums.get(i) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;",
    "        for(int i = 0; i < nums.size(); i++) {\n            if(i % 2 == 1 && nums.get(i) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;",
    "        for (int i = 0; i < nums.size(); i++) {\n            if (i % 2 == 0 && nums.get(i) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;",
    "        for (int i = 0; i < nums.size(); i++) {\n            if (i % 2 == 0 && nums.get(i) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;",
    "        for (int i = 0; i < nums.size(); i++) {\n            if (i % 2 == 0 && nums.get(i) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;",
    "        for (int i = 0; i < nums.size(); i++) {\n            if (i % 2 == 0 && nums.get(i) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;",
    "        return IntStream.range(0, nums.size())\n            .filter(i -> i % 2 == 1)\n            .mapToObj(i -> nums.get(i))\n            .allMatch(n -> n % 2 == 1);"
  ]
}