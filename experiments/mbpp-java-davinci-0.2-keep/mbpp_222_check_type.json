{
  "name": "mbpp_222_check_type",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here.\n        return false;",
    "        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> type = cls.getComponentType();\n            if (type.isPrimitive()) {\n                return true;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                return Arrays.stream(array).allMatch(x -> x.getClass() == type);\n            }\n        } else {\n            return false;\n        }",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        Class<?> clazz = test_tuple.getClass();\n        if (clazz.isArray()) {\n            Class<?> componentType = clazz.getComponentType();\n            if (componentType.isPrimitive()) {\n                result = false;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                for (int i = 0; i < array.length; i++) {\n                    if (!array[i].getClass().equals(componentType)) {\n                        result = false;\n                        break;\n                    }\n                }\n            }\n        } else {\n            result = false;\n        }\n        return result;",
    "        // Write your code here\n        return true;",
    "        if (test_tuple instanceof Pair) {\n            Pair<Object, Object> test_pair = (Pair<Object, Object>) test_tuple;\n            return test_pair.getValue0().getClass() == test_pair.getValue1().getClass();\n        } else if (test_tuple instanceof Triplet) {\n            Triplet<Object, Object, Object> test_triplet = (Triplet<Object, Object, Object>) test_tuple;\n            return test_triplet.getValue0().getClass() == test_triplet.getValue1().getClass() && test_triplet.getValue1().getClass() == test_triplet.getValue2().getClass();\n        } else if (test_tuple instanceof Quartet) {\n            Quartet<Object, Object, Object, Object> test_quartet = (Quartet<Object, Object, Object, Object>) test_tuple;\n            return test_quartet.getValue0().getClass() == test_quartet.getValue1().getClass() && test_quartet.getValue1().getClass() == test_quartet.getValue2().getClass() && test_quartet.getValue2().getClass() == test_quartet.getValue3().getClass();\n        } else if (test_tuple instanceof Quintet) {\n            Quintet<Object, Object, Object, Object, Object> test_quintet = (Quintet<Object, Object, Object, Object, Object>) test_tuple;\n            return test_quintet.getValue0().getClass() == test_quintet.getValue1().getClass() && test_quintet.getValue1().getClass() == test_quintet.getValue2().getClass() && test_quintet.getValue2().getClass() == test_quintet.getValue3().getClass() && test_quintet.getValue3().getClass() == test_quintet.getValue4().getClass();\n        } else if (test_tuple instanceof Sextet) {\n            Sextet<Object, Object, Object, Object, Object, Object> test_sextet = (Sext",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        Class<?> first = null;\n        for (Object o : (Object[]) test_tuple) {\n            if (first == null) {\n                first = o.getClass();\n            } else {\n                if (first != o.getClass()) {\n                    result = false;\n                    break;\n                }\n            }\n        }\n        return result;",
    "        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        int length = Array.getLength(test_tuple);\n        if (length == 0) {\n            return false;\n        }\n        Object obj = Array.get(test_tuple, 0);\n        for (int i = 1; i < length; i++) {\n            if (obj.getClass() != Array.get(test_tuple, i).getClass()) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here.\n        return false;",
    "        // Write your code here\n        return false;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            if (componentType.isPrimitive()) {\n                return false;\n            }\n        }\n        return true;",
    "        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            if (componentType.isPrimitive()) {\n                return true;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                return Arrays.stream(array).allMatch(x -> x.getClass() == componentType);\n            }\n        }\n        return false;",
    "        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            int length = Array.getLength(test_tuple);\n            for (int i = 0; i < length; i++) {\n                Object element = Array.get(test_tuple, i);\n                if (element.getClass() != componentType) {\n                    return false;\n                }\n            }\n        }\n        return true;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        //System.out.println(test_tuple.getClass().getName());\n        //System.out.println(test_tuple.getClass().getTypeName());\n        //System.out.println(test_tuple.getClass().getSimpleName());\n        //System.out.println(test_tuple.getClass().getCanonicalName());\n        //System.out.println(test_tuple.getClass().getTypeParameters());\n        //System.out.println(test_tuple.getClass().getGenericInterfaces());\n        //System.out.println(test_tuple.getClass().getGenericSuperclass());\n        //System.out.println(test_tuple.getClass().getGenericComponentType());\n        //System.out.println(test_tuple.getClass().getComponentType());\n        //System.out.println(test_tuple.getClass().getModifiers());\n        //System.out.println(test_tuple.getClass().getDeclaredClasses());\n        //System.out.println(test_tuple.getClass().getDeclaredFields());\n        //System.out.println(test_tuple.getClass().getDeclaredMethods());\n        //System.out.println(test_tuple.getClass().getDeclaredConstructors());\n        //System.out.println(test_tuple.getClass().getDeclaredAnnotations());\n        //System.out.println(test_tuple.getClass().getDeclaredTypes());\n        //System.out.println(test_tuple.getClass().getDeclaringClass());\n        //System.out.println(test_tuple.getClass().getEnclosingClass());\n        //System.out.println(test_tuple.getClass().getEnclosingConstructor());\n        //System.out.println(test_tuple.getClass().getEnclosingMethod());\n        //System.out.println(test_tuple.getClass().getEnumConstants());\n        //System.out",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> clazz = test_tuple.getClass();\n        if (!clazz.isArray()) {\n            return false;\n        }\n        Class<?> componentType = clazz.getComponentType();\n        if (componentType.isPrimitive()) {\n            return true;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if (array.length == 0) {\n            return true;\n        }\n        Object o = array[0];\n        if (o == null) {\n            return false;\n        }\n        Class<?> oClass = o.getClass();\n        for (int i = 1; i < array.length; i++) {\n            if (array[i] == null) {\n                return false;\n            }\n            if (!oClass.equals(array[i].getClass())) {\n                return false;\n            }\n        }\n        return true;",
    "        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> type = cls.getComponentType();\n            if (type.isPrimitive()) {\n                return true;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                return Arrays.stream(array).allMatch(x -> x.getClass() == type);\n            }\n        }\n        return false;",
    "        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        for (int i = 0; i < Array.getLength(test_tuple); i++) {\n            if (!componentType.isInstance(Array.get(test_tuple, i))) {\n                return false;\n            }\n        }\n        return true;",
    "        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if (array.length == 0) {\n            return true;\n        }\n        Object first = array[0];\n        if (first == null) {\n            return false;\n        }\n        Class<?> firstClass = first.getClass();\n        for (int i = 1; i < array.length; i++) {\n            if (array[i] == null) {\n                return false;\n            }\n            if (array[i].getClass() != firstClass) {\n                return false;\n            }\n        }\n        return true;",
    "        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if (array.length == 0) {\n            return false;\n        }\n        Class<?> firstElementClass = array[0].getClass();\n        for (int i = 1; i < array.length; i++) {\n            if (array[i].getClass() != firstElementClass) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if (array.length == 0) {\n            return false;\n        }\n        Class<?> firstElementClass = array[0].getClass();\n        for (int i = 1; i < array.length; i++) {\n            if (array[i].getClass() != firstElementClass) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        if (test_tuple instanceof Pair) {\n            Pair<Object, Object> pair = (Pair<Object, Object>) test_tuple;\n            result = pair.getValue0().getClass().equals(pair.getValue1().getClass());\n        } else if (test_tuple instanceof Triplet) {\n            Triplet<Object, Object, Object> triplet = (Triplet<Object, Object, Object>) test_tuple;\n            result = triplet.getValue0().getClass().equals(triplet.getValue1().getClass()) && triplet.getValue1().getClass().equals(triplet.getValue2().getClass());\n        } else if (test_tuple instanceof Quartet) {\n            Quartet<Object, Object, Object, Object> quartet = (Quartet<Object, Object, Object, Object>) test_tuple;\n            result = quartet.getValue0().getClass().equals(quartet.getValue1().getClass()) && quartet.getValue1().getClass().equals(quartet.getValue2().getClass()) && quartet.getValue2().getClass().equals(quartet.getValue3().getClass());\n        } else if (test_tuple instanceof Quintet) {\n            Quintet<Object, Object, Object, Object, Object> quintet = (Quintet<Object, Object, Object, Object, Object>) test_tuple;\n            result = quintet.getValue0().getClass().equals(quintet.getValue1().getClass()) && quintet.getValue1().getClass().equals(quintet.getValue2().getClass()) && quintet.getValue2().getClass().equals(quintet.getValue3().getClass()) && quintet.getValue3().getClass().equals(quintet.getValue4().getClass());\n        } else if (test_tuple instanceof Sextet) {\n            Sextet<Object,"
  ]
}