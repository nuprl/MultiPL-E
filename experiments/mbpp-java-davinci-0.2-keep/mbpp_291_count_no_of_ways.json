{
  "name": "mbpp_291_count_no_of_ways",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    public static long countNoOfWays(long n, long k) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(countNoOfWays((2l), (4l)) == (16l));\n    assert(countNoOfWays((3l), (2l)) == (6l));\n    assert(countNoOfWays((4l), (4l)) == (228l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long same = 0, diff = k;\n        for (int i = 2; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return k;\n        }\n        if (n == 2) {\n            return k * k;\n        }\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return k;\n        }\n        if (n == 2) {\n            return k * k;\n        }\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        long same = 0;\n        long diff = k;\n        long total = k;\n        for (int i = 2; i <= n; i++) {\n            same = diff;\n            diff = total * (k - 1);\n            total = same + diff;\n        }\n        return total;",
    "        long[] dp = new long[(int)n + 1];\n        dp[1] = k;\n        dp[2] = k * k;\n        for (int i = 3; i <= n; i++) {\n            dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2]);\n        }\n        return dp[(int)n];",
    "        if (n == 1) {\n            return k;\n        }\n        if (n == 2) {\n            return k * k;\n        }\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // Write your code here\n        long same = 0, diff = k;\n        for (int i = 2; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) {\n            return k;\n        }\n        if (n == 2) {\n            return k * k;\n        }\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        long same = 0;\n        long diff = k;\n        long total = k;\n        for(int i = 2; i <= n; i++) {\n            same = diff;\n            diff = total * (k - 1);\n            total = same + diff;\n        }\n        return total;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        // Write your code here\n        long[] dp = new long[(int)n+1];\n        dp[1] = k;\n        dp[2] = k*k;\n        for(int i=3;i<=n;i++) {\n            dp[i] = (k-1)*(dp[i-1]+dp[i-2]);\n        }\n        return dp[(int)n];",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return k;\n        }\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 0) return 0;\n        if (n == 1) return k;\n        if (n == 2) return k * k;\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;",
    "        if (n == 1) {\n            return k;\n        }\n        if (n == 2) {\n            return k * k;\n        }\n        long same = k;\n        long diff = k * (k - 1);\n        for (int i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n        return same + diff;"
  ]
}