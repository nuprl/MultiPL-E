{
  "name": "mbpp_12_sort_matrix",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    public static ArrayList<ArrayList<Long>> sortMatrix(ArrayList<ArrayList<Long>> M) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(sortMatrix((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)5l)))))));\n    assert(sortMatrix((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)-2l, (long)4l, (long)-5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)1l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)-2l, (long)4l, (long)-5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))))));\n    assert(sortMatrix((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)4l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)9l)))))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        ArrayList<ArrayList<Long>> sortedM = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sortedM.add(p.getValue1());\n        }\n        return sortedM;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> pairs = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long x : row) {\n                sum += x;\n            }\n            pairs.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(pairs, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : pairs) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<>(sum, M.get(i)));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> o1, Pair<Long, ArrayList<Long>> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < sums.size(); i++) {\n            res.add(sums.get(i).getValue1());\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Long> sums = new ArrayList<Long>();\n        for (ArrayList<Long> row : M) {\n            sums.add(row.stream().mapToLong(Long::longValue).sum());\n        }\n        ArrayList<Long> sortedSums = new ArrayList<Long>(sums);\n        Collections.sort(sortedSums);\n        for (Long sum : sortedSums) {\n            int i = sums.indexOf(sum);\n            sorted.add(M.get(i));\n            sums.set(i, Long.MAX_VALUE);\n        }\n        return sorted;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (x, y) -> x + y), row));\n        }\n        sums.sort((x, y) -> x.getValue0().compareTo(y.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long val : row) {\n                sum += val;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, M.get(i)));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < sums.size(); i++) {\n            sorted.add(sums.get(i).getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> res = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, Integer>> sums = new ArrayList<Pair<Long, Integer>>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<Long, Integer>(sum, i));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (int i = 0; i < sums.size(); i++) {\n            res.add(M.get(sums.get(i).getValue1()));\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        Collections.sort(sums, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> o1, Pair<Long, ArrayList<Long>> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            res.add(p.getValue1());\n        }\n        return res;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            sorted.add(pair.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;"
  ]
}