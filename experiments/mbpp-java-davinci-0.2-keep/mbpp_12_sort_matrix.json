{
  "name": "mbpp_12_sort_matrix",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    public static ArrayList<ArrayList<Long>> sortMatrix(ArrayList<ArrayList<Long>> M) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(sortMatrix((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)5l)))))));\n    assert(sortMatrix((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)-2l, (long)4l, (long)-5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)1l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)-2l, (long)4l, (long)-5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))))));\n    assert(sortMatrix((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)4l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)9l)))))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        ArrayList<ArrayList<Long>> sortedM = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sortedM.add(p.getValue1());\n        }\n        return sortedM;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> pairs = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long x : row) {\n                sum += x;\n            }\n            pairs.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(pairs, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : pairs) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<>(sum, M.get(i)));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> o1, Pair<Long, ArrayList<Long>> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < sums.size(); i++) {\n            res.add(sums.get(i).getValue1());\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Long> sums = new ArrayList<Long>();\n        for (ArrayList<Long> row : M) {\n            sums.add(row.stream().mapToLong(Long::longValue).sum());\n        }\n        ArrayList<Long> sortedSums = new ArrayList<Long>(sums);\n        Collections.sort(sortedSums);\n        for (Long sum : sortedSums) {\n            int i = sums.indexOf(sum);\n            sorted.add(M.get(i));\n            sums.set(i, Long.MAX_VALUE);\n        }\n        return sorted;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (x, y) -> x + y), row));\n        }\n        sums.sort((x, y) -> x.getValue0().compareTo(y.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long val : row) {\n                sum += val;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, M.get(i)));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < sums.size(); i++) {\n            sorted.add(sums.get(i).getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> res = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, Integer>> sums = new ArrayList<Pair<Long, Integer>>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<Long, Integer>(sum, i));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (int i = 0; i < sums.size(); i++) {\n            res.add(M.get(sums.get(i).getValue1()));\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        Collections.sort(sums, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> o1, Pair<Long, ArrayList<Long>> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            res.add(p.getValue1());\n        }\n        return res;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            sorted.add(pair.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> res = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            res.add(p.getValue1());\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        // Create a map to store the sum of each row\n        HashMap<Integer, Long> map = new HashMap<>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            map.put(i, sum);\n        }\n        // Sort the map\n        List<Map.Entry<Integer, Long>> list = new ArrayList<>(map.entrySet());\n        Collections.sort(list, new Comparator<Map.Entry<Integer, Long>>() {\n            @Override\n            public int compare(Map.Entry<Integer, Long> o1, Map.Entry<Integer, Long> o2) {\n                return o1.getValue().compareTo(o2.getValue());\n            }\n        });\n        // Create a new matrix\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        for (Map.Entry<Integer, Long> entry : list) {\n            result.add(M.get(entry.getKey()));\n        }\n        return result;",
    "        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        Collections.sort(sums, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        Collections.sort(sums, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sortedM = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            sortedM.add(pair.getValue1());\n        }\n        return sortedM;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for(ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(sum(row), row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for(Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        Collections.sort(sums, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Long> sums = new ArrayList<Long>();\n        for (ArrayList<Long> row : M) {\n            sums.add(row.stream().mapToLong(Long::longValue).sum());\n        }\n        for (int i = 0; i < M.size(); i++) {\n            int minIndex = sums.indexOf(Collections.min(sums));\n            sorted.add(M.get(minIndex));\n            sums.set(minIndex, Long.MAX_VALUE);\n        }\n        return sorted;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        for (int i = 0; i < M.size(); i++) {\n            sorted.add(M.get(i));\n        }\n        for (int i = 0; i < sorted.size(); i++) {\n            for (int j = i + 1; j < sorted.size(); j++) {\n                if (sorted.get(i).stream().mapToLong(Long::longValue).sum() > sorted.get(j).stream().mapToLong(Long::longValue).sum()) {\n                    ArrayList<Long> temp = sorted.get(i);\n                    sorted.set(i, sorted.get(j));\n                    sorted.set(j, temp);\n                }\n            }\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Integer, Long>> sums = new ArrayList<>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<>(i, sum));\n        }\n        sums.sort((a, b) -> a.getValue1().compareTo(b.getValue1()));\n        for (int i = 0; i < sums.size(); i++) {\n            result.add(M.get(sums.get(i).getValue0()));\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (x, y) -> x + y), row));\n        }\n        sums.sort((x, y) -> (int) (x.getValue0() - y.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<>(sum, M.get(i)));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (int i = 0; i < sums.size(); i++) {\n            res.add(sums.get(i).getValue1());\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            sorted.add(pair.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(sum(row), row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        Collections.sort(sums, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            sorted.add(pair.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, M.get(i)));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (int i = 0; i < sums.size(); i++) {\n            result.add(sums.get(i).getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(sum(row), row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long l : row) {\n                sum += l;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            sorted.add(pair.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Long> sums = new ArrayList<Long>();\n        for (int i = 0; i < M.size(); i++) {\n            sums.add(M.get(i).stream().mapToLong(Long::longValue).sum());\n        }\n        ArrayList<Long> sortedSums = new ArrayList<Long>(sums);\n        Collections.sort(sortedSums);\n        for (int i = 0; i < sortedSums.size(); i++) {\n            int index = sums.indexOf(sortedSums.get(i));\n            result.add(M.get(index));\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (int i = 0; i < M.size(); i++) {\n            sums.add(new Pair<Long, ArrayList<Long>>(sum(M.get(i)), M.get(i)));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < sums.size(); i++) {\n            result.add(sums.get(i).getValue1());\n        }\n        return result;",
    "        // Write your code here.\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, Integer>> sums = new ArrayList<Pair<Long, Integer>>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<Long, Integer>(sum, i));\n        }\n        sums.sort(new Comparator<Pair<Long, Integer>>() {\n            @Override\n            public int compare(Pair<Long, Integer> o1, Pair<Long, Integer> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < sums.size(); i++) {\n            result.add(M.get(sums.get(i).getValue1()));\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long val : row) {\n                sum += val;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            sorted.add(pair.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (x, y) -> x + y), row));\n        }\n        sums.sort((x, y) -> x.getValue0().compareTo(y.getValue0()));\n        for (Pair<Long, ArrayList<Long>> sum : sums) {\n            sorted.add(sum.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Long> sums = new ArrayList<Long>();\n        for (int i = 0; i < M.size(); i++) {\n            sums.add(sum(M.get(i)));\n        }\n        ArrayList<Long> sortedSums = sort(sums);\n        for (int i = 0; i < sortedSums.size(); i++) {\n            for (int j = 0; j < sums.size(); j++) {\n                if (sortedSums.get(i).equals(sums.get(j))) {\n                    sorted.add(M.get(j));\n                    sums.set(j, Long.MAX_VALUE);\n                    break;\n                }\n            }\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, M.get(i)));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < sums.size(); i++) {\n            result.add(sums.get(i).getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<>();\n        ArrayList<Pair<ArrayList<Long>, Long>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<ArrayList<Long>, Long>(row, row.stream().reduce(0L, (a, b) -> a + b)));\n        }\n        sums.sort((a, b) -> a.getValue1().compareTo(b.getValue1()));\n        for (Pair<ArrayList<Long>, Long> pair : sums) {\n            sorted.add(pair.getValue0());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> S = new ArrayList<ArrayList<Long>>();\n        ArrayList<Long> sums = new ArrayList<Long>();\n        for (ArrayList<Long> row : M) {\n            sums.add(row.stream().mapToLong(Long::longValue).sum());\n        }\n        for (int i = 0; i < sums.size(); i++) {\n            int minIndex = i;\n            for (int j = i + 1; j < sums.size(); j++) {\n                if (sums.get(j) < sums.get(minIndex)) {\n                    minIndex = j;\n                }\n            }\n            Collections.swap(sums, i, minIndex);\n            Collections.swap(M, i, minIndex);\n        }\n        return M;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<>(sum, M.get(i)));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < sums.size(); i++) {\n            result.add(sums.get(i).getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long n : row) {\n                sum += n;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> pairs = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long x : row) {\n                sum += x;\n            }\n            pairs.add(new Pair<>(sum, row));\n        }\n        Collections.sort(pairs, (a, b) -> {\n            if (a.getValue0() < b.getValue0()) {\n                return -1;\n            } else if (a.getValue0() > b.getValue0()) {\n                return 1;\n            }\n            return 0;\n        });\n        for (Pair<Long, ArrayList<Long>> pair : pairs) {\n            res.add(pair.getValue1());\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> sortedM = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(sum(row), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            sortedM.add(pair.getValue1());\n        }\n        return sortedM;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> ans = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for(int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for(int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, M.get(i)));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> o1, Pair<Long, ArrayList<Long>> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for(int i = 0; i < sums.size(); i++) {\n            ans.add(sums.get(i).getValue1());\n        }\n        return ans;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> res = new ArrayList<ArrayList<Long>>();\n        for (int i = 0; i < M.size(); i++) {\n            res.add(new ArrayList<Long>());\n            for (int j = 0; j < M.get(i).size(); j++) {\n                res.get(i).add(M.get(i).get(j));\n            }\n        }\n        for (int i = 0; i < res.size(); i++) {\n            for (int j = 0; j < res.size() - 1; j++) {\n                if (res.get(j).stream().mapToLong(Long::longValue).sum() > res.get(j + 1).stream().mapToLong(Long::longValue).sum()) {\n                    ArrayList<Long> temp = res.get(j);\n                    res.set(j, res.get(j + 1));\n                    res.set(j + 1, temp);\n                }\n            }\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        sums.sort(new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Long> sums = new ArrayList<Long>();\n        for (int i = 0; i < M.size(); i++) {\n            sums.add(i, M.get(i).stream().mapToLong(Long::longValue).sum());\n        }\n        ArrayList<Long> sortedSums = new ArrayList<Long>(sums);\n        Collections.sort(sortedSums);\n        for (int i = 0; i < sortedSums.size(); i++) {\n            int index = sums.indexOf(sortedSums.get(i));\n            result.add(M.get(index));\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        Collections.sort(sums, (a, b) -> {\n            if (a.getValue0() > b.getValue0()) {\n                return 1;\n            } else if (a.getValue0() < b.getValue0()) {\n                return -1;\n            } else {\n                return 0;\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            sorted.add(pair.getValue1());\n        }\n        return sorted;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Long> sums = new ArrayList<Long>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(sum);\n        }\n        for (int i = 0; i < sums.size(); i++) {\n            int min = i;\n            for (int j = i + 1; j < sums.size(); j++) {\n                if (sums.get(j) < sums.get(min)) {\n                    min = j;\n                }\n            }\n            if (min != i) {\n                long temp = sums.get(i);\n                sums.set(i, sums.get(min));\n                sums.set(min, temp);\n                ArrayList<Long> temp2 = M.get(i);\n                M.set(i, M.get(min));\n                M.set(min, temp2);\n            }\n        }\n        return M;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> pairs = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long i : row) {\n                sum += i;\n            }\n            pairs.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(pairs, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : pairs) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        for (ArrayList<Long> row : M) {\n            result.add(row);\n        }\n        Collections.sort(result, new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> row1, ArrayList<Long> row2) {\n                long sum1 = 0;\n                long sum2 = 0;\n                for (long num : row1) {\n                    sum1 += num;\n                }\n                for (long num : row2) {\n                    sum2 += num;\n                }\n                if (sum1 < sum2) {\n                    return -1;\n                } else if (sum1 > sum2) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        });\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> sortedM = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long i : row) {\n                sum += i;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> o1, Pair<Long, ArrayList<Long>> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sortedM.add(p.getValue1());\n        }\n        return sortedM;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        Collections.sort(sums, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long n : row) {\n                sum += n;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sortedM = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(sum(row), row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sortedM.add(p.getValue1());\n        }\n        return sortedM;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> res = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            res.add(p.getValue1());\n        }\n        return res;",
    "        // Write your code here\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            res.add(p.getValue1());\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (x, y) -> x + y), row));\n        }\n        sums.sort((x, y) -> x.getValue0().compareTo(y.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sortedM = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        Collections.sort(sums, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sortedM.add(p.getValue1());\n        }\n        return sortedM;",
    "        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        Collections.sort(sums, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n        ArrayList<ArrayList<Long>> ans = new ArrayList<>();\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            ans.add(p.getValue1());\n        }\n        return ans;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        Collections.sort(sums, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long l : row) {\n                sum += l;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        // Write your code here\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<>(row.stream().reduce(0L, (x, y) -> x + y), row));\n        }\n        Collections.sort(sums, (x, y) -> x.getValue0().compareTo(y.getValue0()));\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        Collections.sort(sums, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Long> sums = new ArrayList<>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(sum);\n        }\n        ArrayList<Long> sumsCopy = new ArrayList<>(sums);\n        Collections.sort(sumsCopy);\n        for (int i = 0; i < sumsCopy.size(); i++) {\n            int index = sums.indexOf(sumsCopy.get(i));\n            result.add(M.get(index));\n            sums.set(index, (long) -1);\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, M.get(i)));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> o1, Pair<Long, ArrayList<Long>> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < sums.size(); i++) {\n            result.add(sums.get(i).getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            sorted.add(pair.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> row : sums) {\n            result.add(row.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            Long sum = 0L;\n            for (Long i : row) {\n                sum += i;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Long> sums = new ArrayList<Long>();\n        for (ArrayList<Long> row : M) {\n            sums.add(row.stream().reduce(0L, (a, b) -> a + b));\n        }\n        for (int i = 0; i < M.size(); i++) {\n            int min = i;\n            for (int j = i; j < M.size(); j++) {\n                if (sums.get(j) < sums.get(min)) {\n                    min = j;\n                }\n            }\n            Collections.swap(sums, i, min);\n            Collections.swap(M, i, min);\n        }\n        return M;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (x, y) -> x + y), row));\n        }\n        sums.sort((x, y) -> x.getValue0().compareTo(y.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        // Sort the rows according to the sum of the elements in the row\n        // Sort the rows according to the sum of the elements in the row\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long i : row) {\n                sum += i;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> o1, Pair<Long, ArrayList<Long>> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<>();\n        HashMap<Long, ArrayList<Long>> map = new HashMap<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long x : row) {\n                sum += x;\n            }\n            if (map.containsKey(sum)) {\n                map.get(sum).addAll(row);\n            } else {\n                map.put(sum, row);\n            }\n        }\n        ArrayList<Long> sums = new ArrayList<>(map.keySet());\n        Collections.sort(sums);\n        for (long sum : sums) {\n            sorted.add(map.get(sum));\n        }\n        return sorted;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            res.add(p.getValue1());\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        for (int i = 0; i < M.size(); i++) {\n            sorted.add(M.get(i));\n        }\n        Collections.sort(sorted, new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.stream().mapToLong(Long::longValue).sum(), b.stream().mapToLong(Long::longValue).sum());\n            }\n        });\n        return sorted;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for(ArrayList<Long> row : M) {\n            long sum = 0;\n            for(Long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> o1, Pair<Long, ArrayList<Long>> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for(Pair<Long, ArrayList<Long>> sum : sums) {\n            result.add(sum.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<>(row.stream().reduce(0L, (x, y) -> x + y), row));\n        }\n        sums.sort((x, y) -> x.getValue0().compareTo(y.getValue0()));\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<>(row.stream().reduce(0L, (x, y) -> x + y), row));\n        }\n        sums.sort((x, y) -> x.getValue0().compareTo(y.getValue0()));\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            res.add(p.getValue1());\n        }\n        return res;",
    "        // Write your code here\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<>();\n        ArrayList<Pair<Integer, Long>> sums = new ArrayList<>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<>(i, sum));\n        }\n        Collections.sort(sums, new Comparator<Pair<Integer, Long>>() {\n            @Override\n            public int compare(Pair<Integer, Long> p1, Pair<Integer, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < sums.size(); i++) {\n            sorted.add(M.get(sums.get(i).getValue0()));\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> sortedM = new ArrayList<ArrayList<Long>>();\n        ArrayList<Long> sums = new ArrayList<Long>();\n        for (int i = 0; i < M.size(); i++) {\n            sums.add(i, M.get(i).stream().mapToLong(Long::longValue).sum());\n        }\n        ArrayList<Long> sortedSums = new ArrayList<Long>(sums);\n        Collections.sort(sortedSums);\n        for (int i = 0; i < sortedSums.size(); i++) {\n            int index = sums.indexOf(sortedSums.get(i));\n            sortedM.add(M.get(index));\n        }\n        return sortedM;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        Collections.sort(sums, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        Collections.sort(sums, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Integer, Long>> sums = new ArrayList<>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<>(i, sum));\n        }\n        sums.sort((a, b) -> a.getValue1().compareTo(b.getValue1()));\n        for (int i = 0; i < sums.size(); i++) {\n            result.add(M.get(sums.get(i).getValue0()));\n        }\n        return result;",
    "        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        ArrayList<ArrayList<Long>> ans = new ArrayList<>();\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            ans.add(p.getValue1());\n        }\n        return ans;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            Long sum = 0L;\n            for (Long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Long> sums = new ArrayList<Long>();\n        for (ArrayList<Long> row : M) {\n            sums.add(row.stream().reduce(0L, (a, b) -> a + b));\n        }\n        ArrayList<Long> sortedSums = new ArrayList<Long>(sums);\n        Collections.sort(sortedSums);\n        for (Long sum : sortedSums) {\n            int index = sums.indexOf(sum);\n            sorted.add(M.get(index));\n            sums.set(index, Long.MAX_VALUE);\n        }\n        return sorted;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, M.get(i)));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < sums.size(); i++) {\n            result.add(sums.get(i).getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Long> sums = new ArrayList<Long>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(sum);\n        }\n        for (int i = 0; i < sums.size(); i++) {\n            int minIndex = i;\n            for (int j = i + 1; j < sums.size(); j++) {\n                if (sums.get(j) < sums.get(minIndex)) {\n                    minIndex = j;\n                }\n            }\n            long temp = sums.get(i);\n            sums.set(i, sums.get(minIndex));\n            sums.set(minIndex, temp);\n            sorted.add(M.get(minIndex));\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(sum(row), row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            Long sum = 0L;\n            for (Long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        ArrayList<ArrayList<Long>> ans = new ArrayList<>();\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            ans.add(p.getValue1());\n        }\n        return ans;",
    "        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        Collections.sort(sums, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n        ArrayList<ArrayList<Long>> ret = new ArrayList<>();\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            ret.add(p.getValue1());\n        }\n        return ret;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<>();\n        for (int i = 0; i < M.size(); i++) {\n            sorted.add(new ArrayList<>());\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sorted.get(i).add(M.get(i).get(j));\n            }\n        }\n        for (int i = 0; i < sorted.size(); i++) {\n            for (int j = i + 1; j < sorted.size(); j++) {\n                if (sorted.get(i).stream().reduce(0L, (a, b) -> a + b) > sorted.get(j).stream().reduce(0L, (a, b) -> a + b)) {\n                    ArrayList<Long> temp = sorted.get(i);\n                    sorted.set(i, sorted.get(j));\n                    sorted.set(j, temp);\n                }\n            }\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            res.add(p.getValue1());\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            Long sum = 0L;\n            for (Long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(sum(row), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        // Write your code here\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        Collections.sort(sums, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long n : row) {\n                sum += n;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        // Write your code here\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        ArrayList<ArrayList<Long>> ret = new ArrayList<>();\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            ret.add(p.getValue1());\n        }\n        return ret;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Long> sums = new ArrayList<Long>();\n        for (int i = 0; i < M.size(); i++) {\n            sums.add(i, M.get(i).stream().mapToLong(Long::longValue).sum());\n        }\n        ArrayList<Long> sortedSums = new ArrayList<Long>(sums);\n        Collections.sort(sortedSums);\n        for (int i = 0; i < sortedSums.size(); i++) {\n            int index = sums.indexOf(sortedSums.get(i));\n            result.add(M.get(index));\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        ArrayList<ArrayList<Long>> ret = new ArrayList<>();\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            ret.add(p.getValue1());\n        }\n        return ret;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(sum(row), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            sorted.add(pair.getValue1());\n        }\n        return sorted;",
    "        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        ArrayList<ArrayList<Long>> ans = new ArrayList<>();\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            ans.add(p.getValue1());\n        }\n        return ans;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> pairs = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            Long sum = 0L;\n            for (Long x : row) {\n                sum += x;\n            }\n            pairs.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        pairs.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : pairs) {\n            sorted.add(pair.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        sums.sort((Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) -> {\n            return a.getValue0().compareTo(b.getValue0());\n        });\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            sorted.add(pair.getValue1());\n        }\n        return sorted;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, M.get(i)));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < sums.size(); i++) {\n            result.add(sums.get(i).getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, Integer>> sums = new ArrayList<>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<Long, Integer>(sum, i));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, Integer>>() {\n            @Override\n            public int compare(Pair<Long, Integer> a, Pair<Long, Integer> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < sums.size(); i++) {\n            result.add(M.get(sums.get(i).getValue1()));\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        Collections.sort(sums, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> row : sums) {\n            sorted.add(row.getValue1());\n        }\n        return sorted;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        for (int i = 0; i < M.size(); i++) {\n            sorted.add(M.get(i));\n        }\n        for (int i = 0; i < sorted.size(); i++) {\n            for (int j = i + 1; j < sorted.size(); j++) {\n                if (sorted.get(i).stream().mapToLong(Long::longValue).sum() > sorted.get(j).stream().mapToLong(Long::longValue).sum()) {\n                    ArrayList<Long> temp = sorted.get(i);\n                    sorted.set(i, sorted.get(j));\n                    sorted.set(j, temp);\n                }\n            }\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            sorted.add(pair.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> sortedM = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            sortedM.add(pair.getValue1());\n        }\n        return sortedM;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(sum(row), row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> sortedM = new ArrayList<ArrayList<Long>>();\n        ArrayList<Long> sums = new ArrayList<Long>();\n        for (ArrayList<Long> row : M) {\n            sums.add(row.stream().mapToLong(Long::longValue).sum());\n        }\n        ArrayList<Long> sortedSums = new ArrayList<Long>(sums);\n        Collections.sort(sortedSums);\n        for (Long sum : sortedSums) {\n            int index = sums.indexOf(sum);\n            sortedM.add(M.get(index));\n            sums.set(index, Long.MAX_VALUE);\n        }\n        return sortedM;",
    "        int n = M.size();\n        int m = M.get(0).size();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            long sum = 0;\n            for (int j = 0; j < m; j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, M.get(i)));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            res.add(sums.get(i).getValue1());\n        }\n        return res;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, Integer>> sums = new ArrayList<Pair<Long, Integer>>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<Long, Integer>(sum, i));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, Integer>>() {\n            @Override\n            public int compare(Pair<Long, Integer> p1, Pair<Long, Integer> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < sums.size(); i++) {\n            result.add(M.get(sums.get(i).getValue1()));\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        for (ArrayList<Long> row : M) {\n            sorted.add(row);\n        }\n        Collections.sort(sorted, new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.stream().mapToLong(Long::longValue).sum(), b.stream().mapToLong(Long::longValue).sum());\n            }\n        });\n        return sorted;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        sums.sort(Comparator.comparing(Pair::getValue0));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            sorted.add(pair.getValue1());\n        }\n        return sorted;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, M.get(i)));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (int i = 0; i < sums.size(); i++) {\n            result.add(sums.get(i).getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (x, y) -> x + y), row));\n        }\n        sums.sort((x, y) -> x.getValue0().compareTo(y.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sortedM = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sortedM.add(p.getValue1());\n        }\n        return sortedM;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> o1, Pair<Long, ArrayList<Long>> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            Long sum = 0L;\n            for (Long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Long> sums = new ArrayList<Long>();\n        for (ArrayList<Long> row : M) {\n            sums.add(row.stream().reduce(0L, (a, b) -> a + b));\n        }\n        ArrayList<Long> sortedSums = new ArrayList<Long>(sums);\n        Collections.sort(sortedSums);\n        for (Long sum : sortedSums) {\n            int index = sums.indexOf(sum);\n            result.add(M.get(index));\n            sums.set(index, Long.MAX_VALUE);\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long l : row) {\n                sum += l;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        sums.sort((a, b) -> {\n            if (a.getValue0() < b.getValue0()) {\n                return -1;\n            } else if (a.getValue0() > b.getValue0()) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            res.add(p.getValue1());\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            sorted.add(pair.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (x, y) -> x + y), row));\n        }\n        sums.sort((x, y) -> x.getValue0().compareTo(y.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        // Sort the matrix according to the sum of its rows\n        // Return the sorted matrix\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> o1, Pair<Long, ArrayList<Long>> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for(ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for(Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        Collections.sort(sums, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>(M);\n        Collections.sort(sorted, new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.stream().mapToLong(Long::longValue).sum(), b.stream().mapToLong(Long::longValue).sum());\n            }\n        });\n        return sorted;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        // Write your code here\n        // We can use a hashmap to store the sum of each row and the index of the row.\n        // Then we can sort the hashmap by the sum and return the matrix with the sorted indices.\n        HashMap<Long, Integer> map = new HashMap<>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            map.put(sum, i);\n        }\n        ArrayList<Long> sums = new ArrayList<>(map.keySet());\n        Collections.sort(sums);\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        for (int i = 0; i < sums.size(); i++) {\n            result.add(M.get(map.get(sums.get(i))));\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            Long sum = row.stream().reduce(0L, (a, b) -> a + b);\n            sums.add(new Pair<>(sum, row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            res.add(p.getValue1());\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> pairs = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            Long sum = 0L;\n            for (Long l : row) {\n                sum += l;\n            }\n            pairs.add(new Pair<>(sum, row));\n        }\n        Collections.sort(pairs, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> o1, Pair<Long, ArrayList<Long>> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : pairs) {\n            res.add(p.getValue1());\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long l : row) {\n                sum += l;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            res.add(p.getValue1());\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> sum : sums) {\n            result.add(sum.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> S = new ArrayList<ArrayList<Long>>();\n        for (ArrayList<Long> row : M) {\n            S.add(row);\n        }\n        Collections.sort(S, new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> row1, ArrayList<Long> row2) {\n                return row1.stream().mapToLong(Long::longValue).sum() < row2.stream().mapToLong(Long::longValue).sum() ? -1 : 1;\n            }\n        });\n        return S;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> o1, Pair<Long, ArrayList<Long>> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> pairs = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            Long sum = 0L;\n            for (Long num : row) {\n                sum += num;\n            }\n            pairs.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(pairs, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : pairs) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sortedM = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (Long num : row) {\n                sum += num;\n            }\n            sums.add(new Pair<Long, ArrayList<Long>>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            sortedM.add(pair.getValue1());\n        }\n        return sortedM;",
    "        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            public int compare(Pair<Long, ArrayList<Long>> a, Pair<Long, ArrayList<Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            res.add(p.getValue1());\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            sorted.add(pair.getValue1());\n        }\n        return sorted;",
    "        // Write your code here\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, ArrayList<Long>>>() {\n            @Override\n            public int compare(Pair<Long, ArrayList<Long>> p1, Pair<Long, ArrayList<Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Long> sums = new ArrayList<Long>();\n        for (ArrayList<Long> row : M) {\n            sums.add(row.stream().mapToLong(Long::longValue).sum());\n        }\n        ArrayList<Long> sortedSums = new ArrayList<Long>(sums);\n        Collections.sort(sortedSums);\n        for (Long sum : sortedSums) {\n            int index = sums.indexOf(sum);\n            sorted.add(M.get(index));\n            sums.set(index, Long.MAX_VALUE);\n        }\n        return sorted;",
    "        // Write your code here\n        ArrayList<ArrayList<Long>> sortedM = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, Integer>> sums = new ArrayList<Pair<Long, Integer>>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<Long, Integer>(sum, i));\n        }\n        Collections.sort(sums, new Comparator<Pair<Long, Integer>>() {\n            @Override\n            public int compare(Pair<Long, Integer> p1, Pair<Long, Integer> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < sums.size(); i++) {\n            sortedM.add(M.get(sums.get(i).getValue1()));\n        }\n        return sortedM;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<>();\n        ArrayList<Pair<Integer, Long>> sums = new ArrayList<>();\n        for (int i = 0; i < M.size(); i++) {\n            long sum = 0;\n            for (int j = 0; j < M.get(i).size(); j++) {\n                sum += M.get(i).get(j);\n            }\n            sums.add(new Pair<>(i, sum));\n        }\n        sums.sort((a, b) -> a.getValue1().compareTo(b.getValue1()));\n        for (int i = 0; i < sums.size(); i++) {\n            sorted.add(M.get(sums.get(i).getValue0()));\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(sum(row), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (a, b) -> a + b), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> sum : sums) {\n            result.add(sum.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            long sum = 0;\n            for (long x : row) {\n                sum += x;\n            }\n            sums.add(new Pair<>(sum, row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<Pair<Long, ArrayList<Long>>>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<Long, ArrayList<Long>>(row.stream().reduce(0L, (x, y) -> x + y), row));\n        }\n        Collections.sort(sums, (x, y) -> x.getValue0().compareTo(y.getValue0()));\n        for (Pair<Long, ArrayList<Long>> pair : sums) {\n            result.add(pair.getValue1());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> sorted = new ArrayList<>();\n        ArrayList<Pair<Long, ArrayList<Long>>> sums = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            sums.add(new Pair<>(row.stream().mapToLong(Long::longValue).sum(), row));\n        }\n        sums.sort((a, b) -> a.getValue0().compareTo(b.getValue0()));\n        for (Pair<Long, ArrayList<Long>> p : sums) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;"
  ]
}