{
  "name": "mbpp_415_max_Product",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to find a pair with highest product from a given array of integers.\n    public static long maxProduct(ArrayList<Long> arr) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(maxProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)7l, (long)0l, (long)8l, (long)4l)))) == (long)Pair.with(7l, 8l));\n    assert(maxProduct((new ArrayList<Long>(Arrays.asList((long)0l, (long)-1l, (long)-2l, (long)-4l, (long)5l, (long)0l, (long)-6l)))) == (long)Pair.with(-4l, -6l));\n    assert(maxProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (long)Pair.with(2l, 3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                long product = arr.get(i) * arr.get(j);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                long product = arr.get(i) * arr.get(j);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                max = Math.max(max, arr.get(i) * arr.get(j));\n            }\n        }\n        return max;",
    "        long max = arr.get(0);\n        long secondMax = arr.get(1);\n        if (max < secondMax) {\n            long temp = max;\n            max = secondMax;\n            secondMax = temp;\n        }\n        for (int i = 2; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                secondMax = max;\n                max = arr.get(i);\n            } else if (arr.get(i) > secondMax) {\n                secondMax = arr.get(i);\n            }\n        }\n        return max * secondMax;",
    "        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                max = Math.max(max, arr.get(i) * arr.get(j));\n            }\n        }\n        return max;",
    "        Collections.sort(arr);\n        long a = arr.get(arr.size() - 1);\n        long b = arr.get(arr.size() - 2);\n        long c = arr.get(arr.size() - 3);\n        long d = arr.get(arr.size() - 4);\n        long e = arr.get(arr.size() - 5);\n        long f = arr.get(arr.size() - 6);\n        long g = arr.get(arr.size() - 7);\n        long h = arr.get(arr.size() - 8);\n        long i = arr.get(arr.size() - 9);\n        long j = arr.get(arr.size() - 10);\n        long k = arr.get(arr.size() - 11);\n        long l = arr.get(arr.size() - 12);\n        long m = arr.get(arr.size() - 13);\n        long n = arr.get(arr.size() - 14);\n        long o = arr.get(arr.size() - 15);\n        long p = arr.get(arr.size() - 16);\n        long q = arr.get(arr.size() - 17);\n        long r = arr.get(arr.size() - 18);\n        long s = arr.get(arr.size() - 19);\n        long t = arr.get(arr.size() - 20);\n        long u = arr.get(arr.size() - 21);\n        long v = arr.get(arr.size() - 22);\n        long w = arr.get(arr.size() - 23);\n        long x = arr.get(arr.size() - 24);\n        long y = arr.get(arr.size() - 25);\n        long z = arr.get(arr.size() - 26);\n        long aa = arr.get(arr.size() - 27);\n        long bb = arr.get(arr.size() - 28);\n        long cc = arr.get(arr.size() - 29);\n        long dd = arr.get(arr.size() - 30);\n        long ee = arr.get(arr.size() - 31);\n        long ff =",
    "        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                max = Math.max(max, arr.get(i) * arr.get(j));\n            }\n        }\n        return max;",
    "        Collections.sort(arr);\n        long a = arr.get(arr.size() - 1);\n        long b = arr.get(arr.size() - 2);\n        return a * b;",
    "        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                long product = arr.get(i) * arr.get(j);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = arr.get(0);\n        long secondMax = arr.get(1);\n        if (secondMax > max) {\n            long temp = max;\n            max = secondMax;\n            secondMax = temp;\n        }\n        for (int i = 2; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                secondMax = max;\n                max = arr.get(i);\n            } else if (arr.get(i) > secondMax) {\n                secondMax = arr.get(i);\n            }\n        }\n        return max * secondMax;",
    "        // Write your code here\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                long product = arr.get(i) * arr.get(j);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                max = Math.max(max, arr.get(i) * arr.get(j));\n            }\n        }\n        return max;",
    "        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                max = Math.max(max, arr.get(i) * arr.get(j));\n            }\n        }\n        return max;",
    "        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                long product = arr.get(i) * arr.get(j);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                long product = arr.get(i) * arr.get(j);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                long product = arr.get(i) * arr.get(j);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                long product = arr.get(i) * arr.get(j);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                max = Math.max(max, arr.get(i) * arr.get(j));\n            }\n        }\n        return max;",
    "        Collections.sort(arr);\n        return Math.max(arr.get(0) * arr.get(1), arr.get(arr.size() - 1) * arr.get(arr.size() - 2));",
    "        Collections.sort(arr);\n        long max = arr.get(arr.size() - 1) * arr.get(arr.size() - 2);\n        long min = arr.get(0) * arr.get(1);\n        return Math.max(max, min);"
  ]
}