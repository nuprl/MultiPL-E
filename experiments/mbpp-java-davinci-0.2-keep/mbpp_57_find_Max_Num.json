{
  "name": "mbpp_57_find_Max_Num",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to find the largest number that can be formed with the given list of digits.\n    public static long findMaxNum(ArrayList<Long> arr) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(findMaxNum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (321l));\n    assert(findMaxNum((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)1l)))) == (6541l));\n    assert(findMaxNum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)9l)))) == (9321l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        Collections.sort(arr, Collections.reverseOrder());\n        StringBuilder sb = new StringBuilder();\n        for (long i : arr) {\n            sb.append(i);\n        }\n        return Long.parseLong(sb.toString());",
    "        Collections.sort(arr);\n        Collections.reverse(arr);\n        StringBuilder sb = new StringBuilder();\n        for (Long i : arr) {\n            sb.append(i);\n        }\n        return Long.parseLong(sb.toString());",
    "        // Write your code here\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(i) < arr.get(j)) {\n                    long temp = arr.get(i);\n                    arr.set(i, arr.get(j));\n                    arr.set(j, temp);\n                }\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            max = max * 10 + arr.get(i);\n        }\n        return max;",
    "        // Write your code here.\n        Collections.sort(arr, new Comparator<Long>() {\n            @Override\n            public int compare(Long o1, Long o2) {\n                return (o2.toString() + o1.toString()).compareTo(o1.toString() + o2.toString());\n            }\n        });\n        StringBuilder sb = new StringBuilder();\n        for (Long i : arr) {\n            sb.append(i);\n        }\n        return Long.parseLong(sb.toString());",
    "        // Write your code here\n        Collections.sort(arr);\n        Collections.reverse(arr);\n        StringBuilder sb = new StringBuilder();\n        for (Long i : arr) {\n            sb.append(i);\n        }\n        return Long.parseLong(sb.toString());",
    "        Collections.sort(arr, Collections.reverseOrder());\n        StringBuilder sb = new StringBuilder();\n        for (long i : arr) {\n            sb.append(i);\n        }\n        return Long.parseLong(sb.toString());",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n            long temp = num;\n            for (int j = 0; j < arr.size(); j++) {\n                if (i != j) {\n                    temp = temp * 10 + arr.get(j);\n                }\n            }\n            if (temp > max) {\n                max = temp;\n            }\n        }\n        return max;",
    "        Collections.sort(arr, Collections.reverseOrder());\n        StringBuilder sb = new StringBuilder();\n        for (Long i : arr) {\n            sb.append(i);\n        }\n        return Long.parseLong(sb.toString());",
    "        Collections.sort(arr, Collections.reverseOrder());\n        StringBuilder sb = new StringBuilder();\n        for (long i : arr) {\n            sb.append(i);\n        }\n        return Long.parseLong(sb.toString());",
    "        // Write your code here\n        Collections.sort(arr);\n        Collections.reverse(arr);\n        StringBuilder sb = new StringBuilder();\n        for(Long i : arr) {\n            sb.append(i);\n        }\n        return Long.parseLong(sb.toString());",
    "        Collections.sort(arr, Collections.reverseOrder());\n        StringBuilder sb = new StringBuilder();\n        for (Long i : arr) {\n            sb.append(i);\n        }\n        return Long.parseLong(sb.toString());",
    "        ArrayList<Long> arr1 = new ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++) {\n            arr1.add(arr.get(i));\n        }\n        Collections.sort(arr1);\n        Collections.reverse(arr1);\n        String str = \"\";\n        for (int i = 0; i < arr1.size(); i++) {\n            str += arr1.get(i);\n        }\n        return Long.parseLong(str);",
    "        Collections.sort(arr, Collections.reverseOrder());\n        StringBuilder sb = new StringBuilder();\n        for (Long i : arr) {\n            sb.append(i);\n        }\n        return Long.parseLong(sb.toString());",
    "        // Write your code here\n        Collections.sort(arr);\n        Collections.reverse(arr);\n        StringBuilder sb = new StringBuilder();\n        for (long i : arr) {\n            sb.append(i);\n        }\n        return Long.parseLong(sb.toString());",
    "        Collections.sort(arr, Collections.reverseOrder());\n        StringBuilder sb = new StringBuilder();\n        for (Long i : arr) {\n            sb.append(i);\n        }\n        return Long.parseLong(sb.toString());",
    "        Collections.sort(arr, new Comparator<Long>() {\n            @Override\n            public int compare(Long o1, Long o2) {\n                return (o2.toString() + o1.toString()).compareTo(o1.toString() + o2.toString());\n            }\n        });\n        StringBuilder sb = new StringBuilder();\n        for (Long i : arr) {\n            sb.append(i);\n        }\n        return Long.parseLong(sb.toString());",
    "        // Write your code here\n        Collections.sort(arr, Collections.reverseOrder());\n        StringBuilder sb = new StringBuilder();\n        for (long i : arr) {\n            sb.append(i);\n        }\n        return Long.parseLong(sb.toString());",
    "        Collections.sort(arr, Collections.reverseOrder());\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < arr.size(); i++) {\n            sb.append(arr.get(i));\n        }\n        return Long.parseLong(sb.toString());",
    "        Collections.sort(arr, Collections.reverseOrder());\n        StringBuilder sb = new StringBuilder();\n        for (long i : arr) {\n            sb.append(i);\n        }\n        return Long.parseLong(sb.toString());",
    "        Collections.sort(arr);\n        StringBuilder sb = new StringBuilder();\n        for (int i = arr.size() - 1; i >= 0; i--) {\n            sb.append(arr.get(i));\n        }\n        return Long.parseLong(sb.toString());"
  ]
}