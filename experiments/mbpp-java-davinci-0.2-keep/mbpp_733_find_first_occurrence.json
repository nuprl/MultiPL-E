{
  "name": "mbpp_733_find_first_occurrence",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int l = 0, r = A.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (A.get(m) == x) {\n                if (m == 0 || A.get(m - 1) < x) {\n                    return m;\n                } else {\n                    r = m - 1;\n                }\n            } else if (A.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return -1;",
    "        // Binary search\n        int low = 0;\n        int high = A.size() - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                if (mid == 0 || A.get(mid - 1) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get(mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return -1;",
    "        // Write your code here.\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Your code goes here.\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size()-1;\n        int mid = 0;\n        while(low <= high) {\n            mid = (low+high)/2;\n            if(A.get(mid) == x) {\n                if(mid == 0 || A.get(mid-1) != x) {\n                    return mid;\n                }\n                else {\n                    high = mid-1;\n                }\n            }\n            else if(A.get(mid) > x) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        return -1;",
    "        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (A.get(mid) == x && (mid == 0 || A.get(mid - 1) != x)) {\n                return mid;\n            } else if (A.get(mid) >= x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long l = 0, r = A.size() - 1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (A.get((int)m) == x) {\n                if (m == 0 || A.get((int)m - 1) != x)\n                    return m;\n                else\n                    r = m - 1;\n            } else if (A.get((int)m) > x)\n                r = m - 1;\n            else\n                l = m + 1;\n        }\n        return -1;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long lo = 0;\n        long hi = A.size() - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A.get((int)mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return A.get((int)lo) == x ? lo : -1;",
    "        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Binary search\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                if (mid == 0 || A.get(mid - 1) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long lo = 0;\n        long hi = A.size() - 1;\n        long mid = 0;\n        while (lo <= hi) {\n            mid = (lo + hi) / 2;\n            if (A.get((int) mid) == x) {\n                if (mid == 0 || A.get((int) mid - 1) != x) {\n                    return mid;\n                } else {\n                    hi = mid - 1;\n                }\n            } else if (A.get((int) mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return -1;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Binary search\n        long low = 0;\n        long high = A.size() - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (A.get((int)mid) == x) {\n                if (mid == 0 || A.get((int)mid - 1) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        // Binary search\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = -1;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int) mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int) mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0, high = A.size() - 1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x && (mid == 0 || A.get(mid - 1) != x)) {\n                return mid;\n            } else if (A.get(mid) >= x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long l = 0, r = A.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (A.get((int) m) == x) {\n                if (m == 0 || A.get((int) m - 1) != x) {\n                    return m;\n                } else {\n                    r = m - 1;\n                }\n            } else if (A.get((int) m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Binary search\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                if (mid == 0 || A.get((int)mid - 1) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        // TODO: Implement me!\n        return 0;",
    "        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Write your code here\n        long l = 0;\n        long r = A.size() - 1;\n        long ans = -1;\n        while (l <= r) {\n            long mid = l + (r - l) / 2;\n            if (A.get((int) mid) == x) {\n                ans = mid;\n                r = mid - 1;\n            } else if (A.get((int) mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return ans;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Binary search\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                if (mid == 0 || A.get((int)mid - 1) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long l = 0;\n        long r = A.size() - 1;\n        long result = -1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (A.get((int)m) == x) {\n                result = m;\n                r = m - 1;\n            } else if (A.get((int)m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Your code goes here.\n        int n = A.size();\n        int low = 0;\n        int high = n - 1;\n        int ans = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                ans = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return ans;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long lo = 0;\n        long hi = A.size() - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A.get((int)mid) == x) {\n                if (mid == 0 || A.get((int)(mid - 1)) != x) {\n                    return mid;\n                } else {\n                    hi = mid - 1;\n                }\n            } else if (A.get((int)mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return -1;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int n = A.size();\n        int low = 0;\n        int high = n - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0, high = A.size() - 1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                if (mid == 0 || A.get(mid - 1) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Binary search\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Binary search\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while(low <= high) {\n            mid = (low + high) / 2;\n            if(A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if(A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int) mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int) mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int) mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int) mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                if (mid == 0 || A.get(mid - 1) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        // Returns the index of the first occurrence of x in array A, or -1 if x is not in A.\n        // Binary search.\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = (low + high) / 2;\n        while (low <= high) {\n            if (A.get(mid) == x) {\n                if (mid == 0 || A.get(mid - 1) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get(mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n            mid = (low + high) / 2;\n        }\n        return -1;",
    "        int l = 0;\n        int r = A.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (A.get(m) == x) {\n                if (m == 0 || A.get(m - 1) != x) {\n                    return m;\n                } else {\n                    r = m - 1;\n                }\n            } else if (A.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return -1;",
    "        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                if (mid == 0) {\n                    return mid;\n                }\n                if (A.get(mid - 1) != x) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        // Write your code here\n        // return -1;\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long left = 0;\n        long right = A.size() - 1;\n        long mid = 0;\n        while (left <= right) {\n            mid = (left + right) / 2;\n            if (A.get((int)mid) == x) {\n                if (mid == 0 || A.get((int)mid - 1) != x) {\n                    return mid;\n                } else {\n                    right = mid - 1;\n                }\n            } else if (A.get((int)mid) < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return -1;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // TODO: Implement this function.\n        return -1;",
    "        long l = 0;\n        long r = A.size() - 1;\n        long result = -1;\n        while (l <= r) {\n            long mid = (l + r) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                r = mid - 1;\n            } else if (A.get((int)mid) < x) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Runtime: O(log n)\n        // Space: O(1)\n        int n = A.size();\n        int low = 0;\n        int high = n - 1;\n        int ans = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                ans = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return ans;",
    "        // Write your code here.\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // return A.indexOf(x);\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                if (mid == 0 || A.get(mid - 1) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get(mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (A.get((int) mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int) mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        return findFirstOccurrence(A, x, 0, A.size() - 1);",
    "        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long l = 0;\n        long r = A.size() - 1;\n        long ans = -1;\n        while (l <= r) {\n            long mid = (l + r) / 2;\n            if (A.get((int)mid) == x) {\n                ans = mid;\n                r = mid - 1;\n            } else if (A.get((int)mid) < x) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n        return ans;",
    "        long start = 0;\n        long end = A.size() - 1;\n        long result = -1;\n        while (start <= end) {\n            long mid = (start + end) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                end = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        return result;",
    "        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Binary search\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int left = 0;\n        int right = A.size() - 1;\n        int mid = 0;\n        while (left <= right) {\n            mid = left + (right - left) / 2;\n            if (A.get(mid) == x) {\n                if (mid == 0 || A.get(mid - 1) != x) {\n                    return mid;\n                } else {\n                    right = mid - 1;\n                }\n            } else if (A.get(mid) > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return -1;",
    "        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (A.get((int) mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int) mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (A.get((int) mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int) mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Write your code here.\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Binary search\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Binary search\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Assume A is sorted in ascending order.\n        // If x is not in A, return -1.\n        // If x is in A, return the index of the first occurrence of x in A.\n        // Your algorithm should run in O(log n) time, where n is the size of A.\n        // You may assume that A is an array of unsigned integers.\n        // You may not use division in your solution.\n        // You may not use sorting in your solution.\n        // You may not use any Java collection types (e.g. ArrayList, HashSet) in your solution.\n        // You may not modify the contents of the input array A in your solution.\n        // You may not use any auxiliary space (e.g. arrays, lists, etc.) in your solution.\n        // You may not use recursion in your solution.\n        // You may not use any Java standard library functions in your solution.\n        // You may not use any Java standard library classes in your solution.\n        // You may not use any Java standard library interfaces in your solution.\n        // You may not use any Java standard library annotations in your solution.\n        // You may not use any Java standard library enums in your solution.\n        // You may not use any Java standard library exceptions in your solution.\n        // You may not use any Java standard library packages in your solution.\n        // You may not use any Java standard library generics in your solution.\n        // You may not use any Java standard library wildcards in your solution.\n        // You may not use any Java standard library varargs in your solution.\n        // You may not use any Java standard library assertions in your solution.\n        // You may not use any Java standard library reflection in your solution.\n        // You may not use any Java standard library native methods in your solution.\n        // You may not use any Java standard library security in your solution.\n        // You may not use any Java standard library math in your solution.\n        // You may not use any Java standard library IO in your solution.\n        // You may not use any Java standard library streams in your solution.\n        // You may not use any Java standard library functional interfaces in your solution.\n        // You may not use any Java standard library functional programming in your solution.\n        // You may not use any Java standard",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Binary search\n        long left = 0;\n        long right = A.size() - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return result;",
    "        long l = 0;\n        long r = A.size() - 1;\n        long result = -1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (A.get((int) m) >= x) {\n                result = m;\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long l = 0;\n        long r = A.size() - 1;\n        long m = 0;\n        long result = -1;\n        while (l <= r) {\n            m = l + (r - l) / 2;\n            if (A.get((int)m) == x) {\n                result = m;\n                r = m - 1;\n            } else if (A.get((int)m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return result;",
    "        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Write your code here\n        // return -1;\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int n = A.size();\n        int low = 0;\n        int high = n - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0, high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Write your code here\n        return -1;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long l = 0;\n        long r = A.size() - 1;\n        long result = -1;\n        while (l <= r) {\n            long mid = (l + r) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                r = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                if (mid == 0 || A.get(mid - 1) != x) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long l = 0;\n        long r = A.size() - 1;\n        long ans = -1;\n        while (l <= r) {\n            long mid = (l + r) / 2;\n            if (A.get((int) mid) == x) {\n                ans = mid;\n                r = mid - 1;\n            } else if (A.get((int) mid) < x) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n        return ans;",
    "        int low = 0, high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Binary search\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Write your code here\n        return 0;",
    "        // TODO: Write - Your - Code\n        return 0;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long l = 0, r = A.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (A.get((int) m) == x) {\n                if (m == 0 || A.get((int) (m - 1)) != x) {\n                    return m;\n                } else {\n                    r = m - 1;\n                }\n            } else if (A.get((int) m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return -1;",
    "        // Implement this placeholder.\n        return 0;",
    "        long low = 0, high = A.size() - 1;\n        long ans = -1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (A.get((int)mid) == x) {\n                ans = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return ans;",
    "        // TODO: Write - Your - Code\n        return 0;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Write your code here\n        long start = 0;\n        long end = A.size() - 1;\n        long result = -1;\n        while (start <= end) {\n            long mid = (start + end) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                end = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (A.get((int) mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int) mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // TODO: Write - Your - Code\n        return 0;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x && (mid == 0 || A.get(mid - 1) != x)) {\n                return mid;\n            } else if (A.get(mid) >= x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        int n = A.size();\n        int l = 0, r = n - 1;\n        int ans = -1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (A.get(mid) == x) {\n                ans = mid;\n                r = mid - 1;\n            } else if (A.get(mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return ans;",
    "        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (A.get((int) mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int) mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long l = 0;\n        long r = A.size() - 1;\n        long result = -1;\n        while (l <= r) {\n            long mid = (l + r) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                r = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0, high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (A.get((int) mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int) mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Binary search\n        int left = 0;\n        int right = A.size() - 1;\n        int mid;\n        while (left <= right) {\n            mid = (left + right) / 2;\n            if (A.get(mid) == x) {\n                if (mid == 0 || A.get(mid - 1) != x) {\n                    return mid;\n                } else {\n                    right = mid - 1;\n                }\n            } else if (A.get(mid) > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return -1;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                if (mid == 0 || A.get(mid - 1) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        // Binary search\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int) mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int) mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // TODO: Write - Your - Code\n        return 0;",
    "        // Write your code here.\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        while(low <= high) {\n            mid = low + (high - low) / 2;\n            if(A.get(mid) == x) {\n                if(mid == 0 || A.get(mid - 1) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if(A.get(mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return -1;",
    "        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long l = 0, r = A.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (A.get((int) m) == x) {\n                if (m == 0 || A.get((int) (m - 1)) != x) {\n                    return m;\n                } else {\n                    r = m - 1;\n                }\n            } else if (A.get((int) m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return -1;",
    "        int low = 0, high = A.size() - 1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                if (mid == 0 || A.get(mid - 1) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        // Write your code here.\n        return -1;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                if (mid == 0 || A.get((int)(mid - 1)) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int) mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int) mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // write your code here\n        int low = 0, high = A.size() - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x && (mid == 0 || A.get(mid - 1) < x))\n                return mid;\n            else if (A.get(mid) >= x)\n                high = mid - 1;\n            else\n                low = mid + 1;\n        }\n        return -1;",
    "        // TODO: Write - Your - Code\n        return 0;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (x == A.get((int) mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int) mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int) mid) == x) {\n                if (mid == 0 || A.get((int) mid - 1) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get((int) mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        int n = A.size();\n        int low = 0;\n        int high = n - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0;\n        long high = A.size() - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (A.get((int) mid) == x) {\n                if (mid == 0 || A.get((int) (mid - 1)) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get((int) mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        long low = 0, high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;",
    "        // Implement this placeholder.\n        return 0;",
    "        long left = 0;\n        long right = A.size() - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (A.get((int) mid) < x) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        if (A.get((int) left) == x) {\n            return left;\n        }\n        return -1;"
  ]
}