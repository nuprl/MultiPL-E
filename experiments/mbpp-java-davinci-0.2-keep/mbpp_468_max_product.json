{
  "name": "mbpp_468_max_product",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    public static long maxProduct(ArrayList<Long> arr) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(maxProduct((new ArrayList<Long>(Arrays.asList((long)3l, (long)100l, (long)4l, (long)5l, (long)150l, (long)6l)))) == (3000l));\n    assert(maxProduct((new ArrayList<Long>(Arrays.asList((long)4l, (long)42l, (long)55l, (long)68l, (long)80l)))) == (50265600l));\n    assert(maxProduct((new ArrayList<Long>(Arrays.asList((long)10l, (long)22l, (long)9l, (long)33l, (long)21l, (long)50l, (long)41l, (long)60l)))) == (2460l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long[] max = new long[arr.size()];\n        long[] min = new long[arr.size()];\n        max[0] = arr.get(0);\n        min[0] = arr.get(0);\n        long ans = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long curr = arr.get(i);\n            max[i] = Math.max(curr, Math.max(curr * max[i - 1], curr * min[i - 1]));\n            min[i] = Math.min(curr, Math.min(curr * max[i - 1], curr * min[i - 1]));\n            ans = Math.max(ans, max[i]);\n        }\n        return ans;",
    "        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long product = 1;\n            for (int j = i; j < arr.size(); j++) {\n                product *= arr.get(j);\n                max = Math.max(max, product);\n            }\n        }\n        return max;",
    "        long max = 0;\n        long product = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            product = 1;\n            for (int j = i; j < arr.size(); j++) {\n                product *= arr.get(j);\n                max = Math.max(max, product);\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long product = 1;\n            for (int j = i; j < arr.size(); j++) {\n                product *= arr.get(j);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        long product = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            product *= arr.get(i);\n            max = Math.max(max, product);\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long prod = 1;\n            for (int j = i; j < arr.size(); j++) {\n                prod *= arr.get(j);\n                max = Math.max(max, prod);\n            }\n        }\n        return max;",
    "        long max = 0;\n        long product = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            product = 1;\n            for (int j = i; j < arr.size(); j++) {\n                product *= arr.get(j);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        long product = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            product *= arr.get(i);\n            if (product > max) {\n                max = product;\n            }\n        }\n        return max;",
    "        long max = 0;\n        long[] dp = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] * arr.get(i));\n                }\n            }\n            max = Math.max(max, dp[i]);\n        }\n        return max;",
    "        long max = 0;\n        long product = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            product *= arr.get(i);\n            max = Math.max(max, product);\n        }\n        product = 1;\n        for (int i = arr.size() - 1; i >= 0; i--) {\n            product *= arr.get(i);\n            max = Math.max(max, product);\n        }\n        return max;",
    "        long max = 0;\n        long product = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i; j < arr.size(); j++) {\n                product *= arr.get(j);\n                if (product > max) {\n                    max = product;\n                }\n            }\n            product = 1;\n        }\n        return max;",
    "        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        long max = dp[0];\n        for (int i = 1; i < arr.size(); i++) {\n            long maxProduct = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    maxProduct = Math.max(maxProduct, dp[j] * arr.get(i));\n                }\n            }\n            dp[i] = maxProduct;\n            max = Math.max(max, maxProduct);\n        }\n        return max;",
    "        long maxProduct = 0;\n        long max = 0;\n        for (long i : arr) {\n            if (i > max) {\n                max = i;\n                maxProduct = maxProduct * i;\n            }\n        }\n        return maxProduct;",
    "        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            long product = 1;\n            for (int j = i; j < arr.size(); j++) {\n                product *= arr.get(j);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(j) > arr.get(i)) {\n                    long product = arr.get(i) * arr.get(j);\n                    if (product > max) {\n                        max = product;\n                    }\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(j) > arr.get(i)) {\n                    long product = arr.get(i) * arr.get(j);\n                    if (product > max) {\n                        max = product;\n                    }\n                }\n            }\n        }\n        return max;",
    "        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long product = 1;\n            for (int j = i; j < arr.size(); j++) {\n                product *= arr.get(j);\n                if (product > max) {\n                    max = product;\n                }\n            }\n        }\n        return max;",
    "        long[] max = new long[arr.size()];\n        long[] min = new long[arr.size()];\n        max[0] = arr.get(0);\n        min[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long cur = arr.get(i);\n            max[i] = Math.max(cur, Math.max(cur * max[i - 1], cur * min[i - 1]));\n            min[i] = Math.min(cur, Math.min(cur * max[i - 1], cur * min[i - 1]));\n        }\n        long ans = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, max[i]);\n        }\n        return ans;",
    "        // Write your code here\n        long[] max = new long[arr.size()];\n        long[] min = new long[arr.size()];\n        max[0] = arr.get(0);\n        min[0] = arr.get(0);\n        long ans = arr.get(0);\n        for(int i = 1; i < arr.size(); i++) {\n            max[i] = Math.max(Math.max(max[i - 1] * arr.get(i), min[i - 1] * arr.get(i)), arr.get(i));\n            min[i] = Math.min(Math.min(max[i - 1] * arr.get(i), min[i - 1] * arr.get(i)), arr.get(i));\n            ans = Math.max(ans, max[i]);\n        }\n        return ans;",
    "        // Write your code here\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long prod = 1;\n            for (int j = i; j < arr.size(); j++) {\n                prod *= arr.get(j);\n                max = Math.max(max, prod);\n            }\n        }\n        return max;"
  ]
}