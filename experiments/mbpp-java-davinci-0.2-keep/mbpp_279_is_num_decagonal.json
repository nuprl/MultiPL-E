{
  "name": "mbpp_279_is_num_decagonal",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the nth decagonal number.\n    public static long isNumDecagonal(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(isNumDecagonal((3l)) == (27l));\n    assert(isNumDecagonal((7l)) == (175l));\n    assert(isNumDecagonal((10l)) == (370l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long nthDecagonal = 0;\n        long nthDecagonalNum = 0;\n        for (long i = 1; i <= n; i++) {\n            nthDecagonalNum = i * (3 * i - 1) / 2;\n            nthDecagonal = nthDecagonalNum;\n        }\n        return nthDecagonal;",
    "        // n = (3*n^2 - n) / 2\n        // 3*n^2 - n - 2*n = 0\n        // n = (1 +- sqrt(1 + 12*2)) / 6\n        // n = (1 +- sqrt(25)) / 6\n        // n = (1 +- 5) / 6\n        // n = 6 or -1\n        // n = 6\n        return n;",
    "        double x = (Math.sqrt(1 + 4 * 2 * n) - 1) / 2;\n        if (x == (int)x) {\n            return (long)x;\n        }\n        return -1;",
    "        long nthDecagonal = 0;\n        long i = 1;\n        while (nthDecagonal < n) {\n            nthDecagonal = (i * (3 * i - 1)) / 2;\n            i++;\n        }\n        if (nthDecagonal == n) {\n            return nthDecagonal;\n        } else {\n            return -1;\n        }",
    "        long num = n * (3 * n - 2);\n        return num;",
    "        // n = (3 * n^2 - n) / 2\n        // 3 * n^2 - n - 2 * n = 0\n        // n^2 - (1/3) * n - (2/3) = 0\n        // n = (1/3 +- sqrt(1/9 + 8/3)) / 2\n        // n = (1/3 + sqrt(25/9)) / 2\n        // n = (1 + sqrt(25)) / 6\n        // n = (1 + 5) / 6\n        // n = 6 / 6\n        // n = 1\n        // n = (1/3 - sqrt(25/9)) / 2\n        // n = (1 - sqrt(25)) / 6\n        // n = (-4) / 6\n        // n = -2/3\n        // n = -1\n        // n = (1/3 + sqrt(25/9)) / 2\n        // n = (1 + sqrt(25)) / 6\n        // n = (1 + 5) / 6\n        // n = 6 / 6\n        // n = 1\n        // n = (1/3 - sqrt(25/9)) / 2\n        // n = (1 - sqrt(25)) / 6\n        // n = (-4) / 6\n        // n = -2/3\n        // n = -1\n        // n = (1/3 + sqrt(25/9)) / 2\n        // n = (1 + sqrt(25)) / 6\n        // n = (1 + 5) / 6\n        // n = 6 / 6\n        // n = 1\n        // n = (1/3 - sqrt(25/9)) / 2\n        // n = (1 - sqrt(25)) / 6\n        // n = (-4) / 6\n        // n = -2/3\n        // n = -1\n        // n = (1/3 + sqrt(25/9)) / 2\n        // n = (1 + sqrt(25)) / 6\n        // n = (1 + 5) / 6\n        // n = 6 / 6\n        // n = 1\n        // n = (1/3 - sqrt(25",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long num = (long) (Math.sqrt(1 + 4 * 2 * n) - 1) / 2;\n        if (num * (3 * num - 1) / 2 == n) {\n            return num;\n        }\n        return -1;",
    "        long a = n * (3 * n - 2);\n        if (a % 2 == 0) {\n            return a / 2;\n        }\n        return -1;",
    "        long a = n;\n        long b = 1;\n        long c = -3 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (long) ((-b + Math.sqrt(d)) / (2 * a));\n        long x2 = (long) ((-b - Math.sqrt(d)) / (2 * a));\n        if (x1 > 0 && x1 % 10 == 0) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 10 == 0) {\n            return x2;\n        }\n        return -1;",
    "        double x = (Math.sqrt(4 * n * n + 4 * n + 1) + 1) / 2;\n        return (long)x;",
    "        long num = n * (3 * n - 2);\n        return num;",
    "        long num = n * (3 * n - 2);\n        return num;",
    "        long a = n;\n        long b = 1;\n        long c = -3 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (long) ((-b + Math.sqrt(d)) / (2 * a));\n        long x2 = (long) ((-b - Math.sqrt(d)) / (2 * a));\n        if (x1 > 0 && x1 % 3 == 1) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 3 == 1) {\n            return x2;\n        }\n        return -1;",
    "        // n = (3 * n^2 - n) / 2\n        // n^2 - n - 2n / 3 = 0\n        // n = (1 + sqrt(1 + 8n / 3)) / 3\n        double sqrt = Math.sqrt(1 + 8 * n / 3);\n        if (sqrt == Math.floor(sqrt) && !Double.isInfinite(sqrt)) {\n            return (long) (1 + sqrt) / 3;\n        }\n        return -1;",
    "        long a = n;\n        long b = 1;\n        long c = -3 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (long) ((-b + Math.sqrt(d)) / (2 * a));\n        long x2 = (long) ((-b - Math.sqrt(d)) / (2 * a));\n        if (x1 < 0 || x2 < 0) {\n            return -1;\n        }\n        if (x1 % 3 == 0) {\n            return x1;\n        }\n        if (x2 % 3 == 0) {\n            return x2;\n        }\n        return -1;",
    "        // n = (3 * n^2 - n) / 2\n        // 3 * n^2 - n - 2 * n = 0\n        // 3 * n^2 - 3 * n - 2 * n = 0\n        // 3 * n * (n - 1) - 2 * n = 0\n        // n * (3 * n - 2) = 0\n        // n = 0 or n = 2 / 3\n        // n = 0 is not a decagonal number\n        // n = 2 / 3 is not an integer\n        // n is not a decagonal number\n        return -1;",
    "        return (long) (3 * n * n - n) / 2;",
    "        long num = 0;\n        for (long i = 1; i < n; i++) {\n            num += i * 10;\n            if (num == n) {\n                return num;\n            }\n        }\n        return -1;"
  ]
}