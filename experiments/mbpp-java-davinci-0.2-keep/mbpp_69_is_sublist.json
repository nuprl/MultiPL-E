{
  "name": "mbpp_69_is_sublist",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check whether a list contains the given sublist or not.\n    public static boolean isSublist(ArrayList<Long> l, ArrayList<Long> s) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(isSublist((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)5l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)7l)))) == (false));\n    assert(isSublist((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)5l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)4l, (long)3l)))) == (true));\n    assert(isSublist((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)5l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (s.size() > l.size()) return false;\n        for (int i = 0; i < l.size() - s.size() + 1; i++) {\n            boolean isSublist = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l.get(i + j) != s.get(j)) {\n                    isSublist = false;\n                    break;\n                }\n            }\n            if (isSublist) return true;\n        }\n        return false;",
    "        if (l.size() < s.size()) {\n            return false;\n        }\n        for (int i = 0; i < l.size() - s.size() + 1; i++) {\n            if (l.get(i).equals(s.get(0))) {\n                boolean isSublist = true;\n                for (int j = 1; j < s.size(); j++) {\n                    if (!l.get(i + j).equals(s.get(j))) {\n                        isSublist = false;\n                        break;\n                    }\n                }\n                if (isSublist) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (s.size() > l.size()) return false;\n        for (int i = 0; i <= l.size() - s.size(); i++) {\n            if (l.get(i).equals(s.get(0))) {\n                boolean found = true;\n                for (int j = 1; j < s.size(); j++) {\n                    if (!l.get(i + j).equals(s.get(j))) {\n                        found = false;\n                        break;\n                    }\n                }\n                if (found) return true;\n            }\n        }\n        return false;",
    "        if (s.size() > l.size()) {\n            return false;\n        }\n        for (int i = 0; i <= l.size() - s.size(); i++) {\n            if (l.get(i).equals(s.get(0))) {\n                if (l.subList(i, i + s.size()).equals(s)) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (s.size() > l.size())\n            return false;\n        for (int i = 0; i <= l.size() - s.size(); i++) {\n            if (l.get(i).equals(s.get(0))) {\n                boolean isSublist = true;\n                for (int j = 1; j < s.size(); j++) {\n                    if (!l.get(i + j).equals(s.get(j))) {\n                        isSublist = false;\n                        break;\n                    }\n                }\n                if (isSublist)\n                    return true;\n            }\n        }\n        return false;",
    "        if (s.size() == 0) {\n            return true;\n        }\n        if (l.size() == 0) {\n            return false;\n        }\n        if (l.get(0).equals(s.get(0))) {\n            ArrayList<Long> l1 = new ArrayList<Long>(l.subList(1, l.size()));\n            ArrayList<Long> s1 = new ArrayList<Long>(s.subList(1, s.size()));\n            return isSublist(l1, s1);\n        } else {\n            ArrayList<Long> l1 = new ArrayList<Long>(l.subList(1, l.size()));\n            return isSublist(l1, s);\n        }",
    "        if (s.size() > l.size()) return false;\n        for (int i = 0; i < l.size() - s.size() + 1; i++) {\n            boolean found = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (!l.get(i + j).equals(s.get(j))) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) return true;\n        }\n        return false;",
    "        if (s.size() > l.size()) {\n            return false;\n        }\n        for (int i = 0; i < l.size() - s.size() + 1; i++) {\n            if (l.get(i).equals(s.get(0))) {\n                boolean isSublist = true;\n                for (int j = 0; j < s.size(); j++) {\n                    if (!l.get(i + j).equals(s.get(j))) {\n                        isSublist = false;\n                        break;\n                    }\n                }\n                if (isSublist) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (s.size() > l.size()) {\n            return false;\n        }\n        for (int i = 0; i < l.size() - s.size() + 1; i++) {\n            if (l.subList(i, i + s.size()).equals(s)) {\n                return true;\n            }\n        }\n        return false;",
    "        if (s.size() > l.size()) {\n            return false;\n        }\n        for (int i = 0; i < l.size() - s.size() + 1; i++) {\n            if (l.get(i).equals(s.get(0))) {\n                boolean isSublist = true;\n                for (int j = 0; j < s.size(); j++) {\n                    if (!l.get(i + j).equals(s.get(j))) {\n                        isSublist = false;\n                        break;\n                    }\n                }\n                if (isSublist) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (s.size() > l.size()) {\n            return false;\n        }\n        for (int i = 0; i < l.size() - s.size() + 1; i++) {\n            if (l.get(i).equals(s.get(0))) {\n                boolean isSublist = true;\n                for (int j = 0; j < s.size(); j++) {\n                    if (!l.get(i + j).equals(s.get(j))) {\n                        isSublist = false;\n                        break;\n                    }\n                }\n                if (isSublist) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (s.size() > l.size()) {\n            return false;\n        }\n        for (int i = 0; i <= l.size() - s.size(); i++) {\n            if (l.get(i).equals(s.get(0))) {\n                int j = 1;\n                for (; j < s.size(); j++) {\n                    if (!l.get(i + j).equals(s.get(j))) {\n                        break;\n                    }\n                }\n                if (j == s.size()) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        int i = 0;\n        int j = 0;\n        while (i < l.size() && j < s.size()) {\n            if (l.get(i) == s.get(j)) {\n                i++;\n                j++;\n            } else {\n                i++;\n            }\n        }\n        if (j == s.size()) {\n            return true;\n        }\n        return false;",
    "        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i).equals(s.get(0))) {\n                boolean isSub = true;\n                for (int j = 0; j < s.size(); j++) {\n                    if (!l.get(i+j).equals(s.get(j))) {\n                        isSub = false;\n                        break;\n                    }\n                }\n                if (isSub) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (s.size() > l.size()) {\n            return false;\n        }\n        for (int i = 0; i <= l.size() - s.size(); i++) {\n            if (l.get(i).equals(s.get(0))) {\n                int j = 0;\n                for (; j < s.size(); j++) {\n                    if (!l.get(i + j).equals(s.get(j))) {\n                        break;\n                    }\n                }\n                if (j == s.size()) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (s.size() > l.size()) {\n            return false;\n        }\n        for (int i = 0; i <= l.size() - s.size(); i++) {\n            if (l.get(i).equals(s.get(0))) {\n                boolean isSublist = true;\n                for (int j = 0; j < s.size(); j++) {\n                    if (!l.get(i + j).equals(s.get(j))) {\n                        isSublist = false;\n                        break;\n                    }\n                }\n                if (isSublist) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (s.size() == 0) return true;\n        if (l.size() == 0) return false;\n        if (l.size() < s.size()) return false;\n        for (int i = 0; i < l.size() - s.size() + 1; i++) {\n            boolean isSub = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (!l.get(i + j).equals(s.get(j))) {\n                    isSub = false;\n                    break;\n                }\n            }\n            if (isSub) return true;\n        }\n        return false;",
    "        if (s.size() > l.size()) return false;\n        if (s.size() == 0) return true;\n        for (int i = 0; i < l.size() - s.size() + 1; i++) {\n            if (l.get(i).equals(s.get(0))) {\n                boolean found = true;\n                for (int j = 0; j < s.size(); j++) {\n                    if (!l.get(i + j).equals(s.get(j))) {\n                        found = false;\n                        break;\n                    }\n                }\n                if (found) return true;\n            }\n        }\n        return false;",
    "        if (s.size() > l.size()) return false;\n        for (int i = 0; i < l.size() - s.size() + 1; i++) {\n            if (l.get(i).equals(s.get(0))) {\n                boolean found = true;\n                for (int j = 1; j < s.size(); j++) {\n                    if (!l.get(i + j).equals(s.get(j))) {\n                        found = false;\n                        break;\n                    }\n                }\n                if (found) return true;\n            }\n        }\n        return false;",
    "        if (s.size() > l.size()) return false;\n        for (int i = 0; i < l.size() - s.size() + 1; i++) {\n            if (l.get(i).equals(s.get(0))) {\n                boolean found = true;\n                for (int j = 1; j < s.size(); j++) {\n                    if (!l.get(i + j).equals(s.get(j))) {\n                        found = false;\n                        break;\n                    }\n                }\n                if (found) return true;\n            }\n        }\n        return false;"
  ]
}