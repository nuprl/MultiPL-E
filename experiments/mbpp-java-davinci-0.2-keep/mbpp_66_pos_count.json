{
  "name": "mbpp_66_pos_count",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count the number of positive numbers in a list.\n    public static long posCount(ArrayList<Long> list) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(posCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)3l, (long)-4l)))) == (2l));\n    assert(posCount((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)-1l)))) == (3l));\n    assert(posCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        long count = 0;\n        for (long i : list) {\n            if (i > 0) {\n                count++;\n            }\n        }\n        return count;",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        long count = 0;\n        for (long i : list) {\n            if (i > 0) {\n                count++;\n            }\n        }\n        return count;",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        long count = 0;\n        for (long i : list) {\n            if (i > 0) {\n                count++;\n            }\n        }\n        return count;",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(i -> i > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();",
    "        return list.stream().filter(x -> x > 0).count();"
  ]
}