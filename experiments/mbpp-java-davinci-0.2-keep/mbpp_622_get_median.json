{
  "name": "mbpp_622_get_median",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n)), n - n / 2);",
    "        float median = 0;\n        int i = 0, j = 0;\n        int count;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                median = arr2.get(0);\n                break;\n            }\n            if (j == n) {\n                median = arr1.get(0);\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                median = arr1.get(i);\n                i++;\n            } else {\n                median = arr2.get(j);\n                j++;\n            }\n        }\n        return median;",
    "        // if n is odd, then median is middle element of sorted array\n        // if n is even, then median is average of middle two elements of sorted array\n        long median1 = 0, median2 = 0;\n        int i = 0, j = 0;\n        for (int count = 0; count <= n; count++) {\n            if (i == n) {\n                median1 = median2;\n                median2 = arr2.get(0);\n                break;\n            } else if (j == n) {\n                median1 = median2;\n                median2 = arr1.get(0);\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                median1 = median2;\n                median2 = arr1.get(i);\n                i++;\n            } else {\n                median1 = median2;\n                median2 = arr2.get(j);\n                j++;\n            }\n        }\n        return (float)(median1 + median2) / 2;",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n/2 - 1, (int)n/2 + 1)), new ArrayList<Long>(arr2.subList(0, (int)n/2 + 1)), n - n/2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n/2, (int)n/2 + 1)), new ArrayList<Long>(arr2.subList(0, (int)n/2 + 1)), n - n/2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int)n/2 - 1, (int)n/2 + 1)), new ArrayList<Long>(arr1.subList(0, (int)n/2 + 1)), n - n/2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int)n/2, (int)n/2 + 1)), new ArrayList<Long>(arr1.subList(0, (int)n/2 + 1)), n - n/2);",
    "        long i = 0;\n        long j = 0;\n        long count;\n        long m1 = -1, m2 = -1;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int) j);\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int) i);\n                break;\n            }\n            if (arr1.get((int) i) < arr2.get((int) j)) {\n                m1 = m2;\n                m2 = arr1.get((int) i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get((int) j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2;",
    "        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else if (arr1.get((int)i) < arr2.get((int)j)) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;",
    "        int i = 0;\n        int j = 0;\n        int count;\n        long m1 = -1, m2 = -1;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get(0);\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get(0);\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                m1 = m2;\n                m2 = arr1.get(i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get(j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2;",
    "        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else if (arr1.get((int)i) < arr2.get((int)j)) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;",
    "        if (n == 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((n / 2) - 1, (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr2.subList((n / 2) - 1, (n / 2) + 1)), new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), n - n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr2.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), n - n / 2 + 1);\n            }\n        }",
    "        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);",
    "        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else if (arr1.get((int)i) < arr2.get((int)j)) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);",
    "        if (n == 0)\n            return -1;\n        if (n == 1)\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2)\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2)\n            return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2 - 1), (int) (n / 2 + 1))), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0)\n            return getMedian(new ArrayList<Long>(arr2.subList((int) (n / 2 - 1), (int) (n / 2 + 1))), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n        return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);",
    "        if(n == 0) {\n            return 0;\n        }\n        if(n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if(n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if(m1 == m2) {\n            return m1;\n        }\n        if(m1 < m2) {\n            if(n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if(n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);",
    "        int i = 0, j = 0;\n        long count;\n        long m1 = -1, m2 = -1;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get(0);\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get(0);\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                m1 = m2;\n                m2 = arr1.get(i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get(j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;",
    "        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n            else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            }\n            else if (arr1.get((int)i) < arr2.get((int)j)) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            }\n            else {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;",
    "        long median = 0;\n        long i = 0;\n        long j = 0;\n        long count;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                median = arr2.get((int)j);\n                break;\n            }\n            if (j == n) {\n                median = arr1.get((int)i);\n                break;\n            }\n            if (arr1.get((int)i) < arr2.get((int)j)) {\n                median = arr1.get((int)i);\n                i++;\n            } else {\n                median = arr2.get((int)j);\n                j++;\n            }\n        }\n        if (n % 2 == 0) {\n            if (i == n) {\n                return (median + arr2.get((int)j)) / 2;\n            }\n            if (j == n) {\n                return (median + arr1.get((int)i)) / 2;\n            }\n            return (median + Math.min(arr1.get((int)i), arr2.get((int)j))) / 2;\n        }\n        return median;"
  ]
}