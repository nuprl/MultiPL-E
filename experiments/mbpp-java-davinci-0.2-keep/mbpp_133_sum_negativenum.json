{
  "name": "mbpp_133_sum_negativenum",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    public static long sumNegativenum(ArrayList<Long> nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(sumNegativenum((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-6l, (long)-9l, (long)11l, (long)-12l, (long)14l, (long)-5l, (long)17l)))) == (-32l));\n    assert(sumNegativenum((new ArrayList<Long>(Arrays.asList((long)10l, (long)15l, (long)-14l, (long)13l, (long)-18l, (long)12l, (long)-20l)))) == (-52l));\n    assert(sumNegativenum((new ArrayList<Long>(Arrays.asList((long)19l, (long)-65l, (long)57l, (long)39l, (long)152l, (long)-639l, (long)121l, (long)44l, (long)90l, (long)-190l)))) == (-894l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return nums.stream().filter(num -> num < 0).reduce(0L, (a, b) -> a + b);",
    "        return nums.stream().filter(num -> num < 0).reduce(0L, (a, b) -> a + b);",
    "        return nums.stream().filter(num -> num < 0).reduce(0L, (a, b) -> a + b);",
    "        return nums.stream().filter(x -> x < 0).reduce(0L, (x, y) -> x + y);",
    "        return nums.stream().filter(x -> x < 0).reduce(0L, (x, y) -> x + y);",
    "        return nums.stream().filter(x -> x < 0).reduce(0L, (x, y) -> x + y);",
    "        return nums.stream().filter(n -> n < 0).reduce(0L, (a, b) -> a + b);",
    "        return nums.stream().filter(num -> num < 0).reduce(0L, (a, b) -> a + b);",
    "        return nums.stream().filter(num -> num < 0).reduce(0L, (a, b) -> a + b);",
    "        return nums.stream().filter(x -> x < 0).reduce(0L, (x, y) -> x + y);",
    "        return nums.stream().filter(x -> x < 0).mapToLong(x -> x).sum();",
    "        return nums.stream().filter(x -> x < 0).reduce(0L, (x, y) -> x + y);",
    "        return nums.stream().filter(x -> x < 0).reduce(0L, (x, y) -> x + y);",
    "        return nums.stream().filter(x -> x < 0).reduce(0L, (x, y) -> x + y);",
    "        return nums.stream().filter(x -> x < 0).reduce(0L, (x, y) -> x + y);",
    "        return nums.stream().filter(x -> x < 0).reduce(0L, (x, y) -> x + y);",
    "        return nums.stream().filter(num -> num < 0).reduce(0L, (a,b) -> a+b);",
    "        return nums.stream().filter(x -> x < 0).reduce(0L, (x, y) -> x + y);",
    "        return nums.stream().filter(num -> num < 0).reduce(0L, (a, b) -> a + b);",
    "        return nums.stream().filter(x -> x < 0).reduce(0L, (x, y) -> x + y);"
  ]
}