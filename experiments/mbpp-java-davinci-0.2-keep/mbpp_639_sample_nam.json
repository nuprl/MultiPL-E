{
  "name": "mbpp_639_sample_nam",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    public static long sampleNam(ArrayList<String> sample_names) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(sampleNam((new ArrayList<String>(Arrays.asList((String)\"sally\", (String)\"Dylan\", (String)\"rebecca\", (String)\"Diana\", (String)\"Joanne\", (String)\"keith\")))) == (16l));\n    assert(sampleNam((new ArrayList<String>(Arrays.asList((String)\"php\", (String)\"res\", (String)\"Python\", (String)\"abcd\", (String)\"Java\", (String)\"aaa\")))) == (10l));\n    assert(sampleNam((new ArrayList<String>(Arrays.asList((String)\"abcd\", (String)\"Python\", (String)\"abba\", (String)\"aba\")))) == (6l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return sample_names.stream().filter(name -> name.matches(\"[A-Z].*\")).mapToInt(String::length).sum();",
    "        return sample_names.stream().filter(name -> name.matches(\"[A-Z].*\")).mapToInt(String::length).sum();",
    "        return sample_names.stream()\n            .filter(s -> s.matches(\"[A-Z].*\"))\n            .mapToInt(String::length)\n            .sum();",
    "        return sample_names.stream()\n            .filter(name -> name.charAt(0) < 'a')\n            .mapToInt(name -> name.length())\n            .sum();",
    "        return sample_names.stream().filter(name -> name.charAt(0) >= 'A' && name.charAt(0) <= 'Z').mapToInt(name -> name.length()).sum();",
    "        return sample_names.stream().filter(s -> s.charAt(0) >= 'A' && s.charAt(0) <= 'Z').mapToInt(String::length).sum();",
    "        return sample_names.stream().filter(s -> s.matches(\"[A-Z].*\")).mapToInt(String::length).sum();",
    "        return sample_names.stream().filter(s -> s.matches(\"[A-Z].*\")).mapToInt(String::length).sum();",
    "        return sample_names.stream().filter(s -> s.charAt(0) >= 'A' && s.charAt(0) <= 'Z').mapToInt(String::length).sum();",
    "        return sample_names.stream().filter(name -> name.charAt(0) >= 'A' && name.charAt(0) <= 'Z').mapToInt(String::length).sum();",
    "        return sample_names.stream().filter(name -> name.matches(\"[A-Z].*\")).mapToInt(name -> name.length()).sum();",
    "        return sample_names.stream().filter(s -> s.matches(\"[A-Z].*\")).mapToInt(String::length).sum();",
    "        return sample_names.stream().filter(s -> s.matches(\"[A-Z].*\")).mapToInt(String::length).sum();",
    "        return sample_names.stream().filter(name -> name.matches(\"[A-Z].*\")).mapToInt(String::length).sum();",
    "        return sample_names.stream().filter(name -> name.charAt(0) >= 'A' && name.charAt(0) <= 'Z').mapToInt(String::length).sum();",
    "        return sample_names.stream().filter(name -> name.matches(\"[A-Z].*\")).mapToInt(String::length).sum();",
    "        return sample_names.stream()\n            .filter(name -> name.matches(\"[A-Z].*\"))\n            .mapToInt(String::length)\n            .sum();",
    "        return sample_names.stream()\n            .filter(name -> name.charAt(0) >= 'A' && name.charAt(0) <= 'Z')\n            .mapToInt(name -> name.length())\n            .sum();",
    "        return sample_names.stream()\n            .filter(name -> Character.isUpperCase(name.charAt(0)))\n            .mapToInt(String::length)\n            .sum();",
    "        return sample_names.stream().filter(s -> s.matches(\"[A-Z].*\")).mapToInt(String::length).sum();"
  ]
}