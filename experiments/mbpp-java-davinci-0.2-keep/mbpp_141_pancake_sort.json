{
  "name": "mbpp_141_pancake_sort",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static ArrayList<Long> pancakeSort(ArrayList<Long> nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(pancakeSort((new ArrayList<Long>(Arrays.asList((long)15l, (long)79l, (long)25l, (long)38l, (long)69l)))).equals((new ArrayList<Long>(Arrays.asList((long)15l, (long)25l, (long)38l, (long)69l, (long)79l)))));\n    assert(pancakeSort((new ArrayList<Long>(Arrays.asList((long)98l, (long)12l, (long)54l, (long)36l, (long)85l)))).equals((new ArrayList<Long>(Arrays.asList((long)12l, (long)36l, (long)54l, (long)85l, (long)98l)))));\n    assert(pancakeSort((new ArrayList<Long>(Arrays.asList((long)41l, (long)42l, (long)32l, (long)12l, (long)23l)))).equals((new ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)32l, (long)41l, (long)42l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            Long max = Collections.max(nums);\n            int maxIndex = nums.indexOf(max);\n            if (maxIndex == i) {\n                sorted.add(max);\n                nums.remove(max);\n            } else {\n                if (maxIndex != 0) {\n                    sorted.add((long) maxIndex + 1);\n                    Collections.reverse(nums.subList(0, maxIndex + 1));\n                }\n                sorted.add((long) i + 1);\n                Collections.reverse(nums.subList(0, i + 1));\n            }\n        }\n        return sorted;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            int index = nums.indexOf(i);\n            if (index == i) {\n                continue;\n            }\n            if (index != 0) {\n                result.add((long) index + 1);\n                Collections.reverse(nums.subList(0, index + 1));\n            }\n            result.add((long) i + 1);\n            Collections.reverse(nums.subList(0, i + 1));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = nums.size() - 1; i > 0; i--) {\n            int maxIndex = i;\n            for (int j = 0; j < i; j++) {\n                if (nums.get(j) > nums.get(maxIndex)) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                result.add((long) maxIndex + 1);\n                result.add((long) i + 1);\n                reverse(nums, maxIndex);\n                reverse(nums, i);\n            }\n        }\n        return result;",
    "        ArrayList<Long> sorted = new ArrayList<Long>(nums);\n        Collections.sort(sorted);\n        ArrayList<Long> flips = new ArrayList<Long>();\n        for (int i = sorted.size() - 1; i >= 0; i--) {\n            if (nums.get(i) == sorted.get(i)) {\n                continue;\n            }\n            int index = nums.indexOf(sorted.get(i));\n            if (index != 0) {\n                flips.add((long) index + 1);\n                Collections.reverse(nums.subList(0, index + 1));\n            }\n            flips.add((long) i + 1);\n            Collections.reverse(nums.subList(0, i + 1));\n        }\n        return flips;",
    "        ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            Long max = Collections.max(nums);\n            int index = nums.indexOf(max);\n            if (index != i) {\n                if (index != 0) {\n                    sorted.add((long) index + 1);\n                    Collections.reverse(nums.subList(0, index + 1));\n                }\n                sorted.add((long) i + 1);\n                Collections.reverse(nums.subList(0, i + 1));\n            }\n        }\n        return sorted;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            int maxIndex = i;\n            for (int j = 0; j < i; j++) {\n                if (nums.get(j) > nums.get(maxIndex)) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                flip(nums, maxIndex);\n                flip(nums, i);\n                result.add((long) maxIndex + 1);\n                result.add((long) i + 1);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            int maxIndex = i;\n            for (int j = 0; j < i; j++) {\n                if (nums.get(j) > nums.get(maxIndex)) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                result.add((long) maxIndex + 1);\n                result.add((long) i + 1);\n                flip(nums, maxIndex);\n                flip(nums, i);\n            }\n        }\n        return result;",
    "        ArrayList<Long> sorted = new ArrayList<Long>(nums);\n        Collections.sort(sorted);\n        ArrayList<Long> flips = new ArrayList<Long>();\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n            int j = sorted.indexOf(nums.get(i));\n            if (j != i) {\n                if (j != 0) {\n                    flips.add((long)j+1);\n                    Collections.reverse(nums.subList(0, j+1));\n                }\n                flips.add((long)i+1);\n                Collections.reverse(nums.subList(0, i+1));\n            }\n        }\n        return flips;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            int index = nums.indexOf(i + 1);\n            if (index == i) {\n                continue;\n            }\n            if (index != 0) {\n                result.add((long) index + 1);\n                Collections.reverse(nums.subList(0, index + 1));\n            }\n            result.add((long) i + 1);\n            Collections.reverse(nums.subList(0, i + 1));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            int maxIndex = i;\n            for (int j = 0; j <= i; j++) {\n                if (nums.get(j) > nums.get(maxIndex)) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                result.add((long) maxIndex + 1);\n                result.add((long) i + 1);\n                Collections.reverse(nums.subList(0, maxIndex + 1));\n                Collections.reverse(nums.subList(0, i + 1));\n            }\n        }\n        return result;",
    "        ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            int maxIndex = i;\n            for (int j = 0; j < i; j++) {\n                if (nums.get(j) > nums.get(maxIndex)) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                flip(nums, maxIndex);\n                flip(nums, i);\n            }\n        }\n        return nums;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = nums.size() - 1; i > 0; i--) {\n            int max = 0;\n            for (int j = 0; j <= i; j++) {\n                if (nums.get(j) > nums.get(max)) {\n                    max = j;\n                }\n            }\n            if (max != i) {\n                if (max != 0) {\n                    result.add((long) max + 1);\n                    flip(nums, max);\n                }\n                result.add((long) i + 1);\n                flip(nums, i);\n            }\n        }\n        return result;",
    "        ArrayList<Long> sorted = new ArrayList<Long>(nums);\n        Collections.sort(sorted);\n        ArrayList<Long> flips = new ArrayList<Long>();\n        for (int i = 0; i < nums.size(); i++) {\n            long num = sorted.get(i);\n            int index = nums.indexOf(num);\n            if (index == i) {\n                continue;\n            }\n            if (index != 0) {\n                flips.add((long)index + 1);\n                ArrayList<Long> temp = new ArrayList<Long>(nums.subList(0, index + 1));\n                Collections.reverse(temp);\n                for (int j = 0; j < temp.size(); j++) {\n                    nums.set(j, temp.get(j));\n                }\n            }\n            flips.add((long)i + 1);\n            ArrayList<Long> temp = new ArrayList<Long>(nums.subList(0, i + 1));\n            Collections.reverse(temp);\n            for (int j = 0; j < temp.size(); j++) {\n                nums.set(j, temp.get(j));\n            }\n        }\n        return flips;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            int maxIndex = i;\n            for (int j = 0; j <= i; j++) {\n                if (nums.get(j) > nums.get(maxIndex)) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                result.add((long) maxIndex + 1);\n                result.add((long) i + 1);\n                ArrayList<Long> temp = new ArrayList<Long>();\n                for (int j = maxIndex; j >= 0; j--) {\n                    temp.add(nums.get(j));\n                }\n                for (int j = maxIndex + 1; j <= i; j++) {\n                    temp.add(nums.get(j));\n                }\n                nums = temp;\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            int index = nums.indexOf(Collections.max(nums.subList(0, i + 1)));\n            if (index != i) {\n                if (index != 0) {\n                    result.add((long) index + 1);\n                    Collections.reverse(nums.subList(0, index + 1));\n                }\n                result.add((long) i + 1);\n                Collections.reverse(nums.subList(0, i + 1));\n            }\n        }\n        return result;",
    "        ArrayList<Long> sorted = new ArrayList<Long>(nums);\n        Collections.sort(sorted);\n        ArrayList<Long> flips = new ArrayList<Long>();\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) != sorted.get(i)) {\n                int index = nums.indexOf(sorted.get(i));\n                flips.add((long)index + 1);\n                flips.add((long)i + 1);\n                Collections.reverse(nums.subList(0, index + 1));\n                Collections.reverse(nums.subList(0, i + 1));\n            }\n        }\n        return flips;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            int maxIndex = findMaxIndex(nums, i);\n            if (maxIndex == i) {\n                continue;\n            }\n            if (maxIndex != 0) {\n                result.add((long)maxIndex + 1);\n                flip(nums, maxIndex);\n            }\n            result.add((long)i + 1);\n            flip(nums, i);\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            int maxIndex = i;\n            for (int j = 0; j < i; j++) {\n                if (nums.get(j) > nums.get(maxIndex)) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                flip(nums, maxIndex);\n                flip(nums, i);\n                result.add((long) maxIndex + 1);\n                result.add((long) i + 1);\n            }\n        }\n        return result;",
    "        ArrayList<Long> sorted = new ArrayList<Long>(nums);\n        Collections.sort(sorted);\n        ArrayList<Long> flips = new ArrayList<Long>();\n        for (int i = 0; i < sorted.size(); i++) {\n            int index = nums.indexOf(sorted.get(i));\n            if (index == 0) {\n                continue;\n            }\n            if (index == nums.size() - 1) {\n                flips.add((long) index + 1);\n                Collections.reverse(nums.subList(0, index + 1));\n                continue;\n            }\n            flips.add((long) index + 1);\n            Collections.reverse(nums.subList(0, index + 1));\n            flips.add((long) nums.size() - i);\n            Collections.reverse(nums.subList(0, nums.size() - i));\n        }\n        return flips;",
    "        ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            int maxIndex = i;\n            for (int j = 0; j < i; j++) {\n                if (nums.get(j) > nums.get(maxIndex)) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                flip(nums, maxIndex);\n                flip(nums, i);\n            }\n        }\n        return nums;"
  ]
}