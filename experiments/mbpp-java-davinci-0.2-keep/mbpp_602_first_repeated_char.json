{
  "name": "mbpp_602_first_repeated_char",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to find the first repeated character in a given string.\n    public static Optional<String> firstRepeatedChar(String str1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(firstRepeatedChar((\"abcabc\")).equals(\"a\"));\n    assert(firstRepeatedChar((\"abc\")).equals(Optional.empty()));\n    assert(firstRepeatedChar((\"123123\")).equals(\"1\"));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        Optional<String> result = Optional.empty();\n        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String curr = str1.substring(i, i + 1);\n            if (set.contains(curr)) {\n                result = Optional.of(curr);\n                break;\n            }\n            set.add(curr);\n        }\n        return result;",
    "        Set<String> set = new HashSet<>();\n        for (String c : str1.split(\"\")) {\n            if (set.contains(c)) {\n                return Optional.of(c);\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.isEmpty()) {\n            return Optional.empty();\n        }\n        char[] chars = str1.toCharArray();\n        Set<Character> seen = new HashSet<>();\n        for (char c : chars) {\n            if (seen.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            seen.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.isEmpty()) {\n            return Optional.empty();\n        }\n        char[] chars = str1.toCharArray();\n        Set<Character> set = new HashSet<>();\n        for (char c : chars) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (set.contains(c)) {\n                return Optional.of(c);\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (String s : str1.split(\"\")) {\n            if (set.contains(s)) {\n                return Optional.of(s);\n            }\n            set.add(s);\n        }\n        return Optional.empty();",
    "        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (set.contains(c)) {\n                return Optional.of(c);\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (set.contains(c)) {\n                return Optional.of(c);\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        // return Optional.of(str1.chars().distinct().count());\n        // return Optional.of(str1.chars().distinct().mapToObj(c -> String.valueOf((char) c)).collect(Collectors.joining()));\n        // return Optional.of(str1.chars().distinct().mapToObj(c -> String.valueOf((char) c)).collect(Collectors.joining()));\n        // return Optional.of(str1.chars().distinct().mapToObj(c -> String.valueOf((char) c)).collect(Collectors.joining()));\n        // return Optional.of(str1.chars().distinct().mapToObj(c -> String.valueOf((char) c)).collect(Collectors.joining()));\n        // return Optional.of(str1.chars().distinct().mapToObj(c -> String.valueOf((char) c)).collect(Collectors.joining()));\n        // return Optional.of(str1.chars().distinct().mapToObj(c -> String.valueOf((char) c)).collect(Collectors.joining()));\n        // return Optional.of(str1.chars().distinct().mapToObj(c -> String.valueOf((char) c)).collect(Collectors.joining()));\n        // return Optional.of(str1.chars().distinct().mapToObj(c -> String.valueOf((char) c)).collect(Collectors.joining()));\n        // return Optional.of(str1.chars().distinct().mapToObj(c -> String.valueOf((char) c)).collect(Collectors.joining()));\n        // return Optional.of(str1.chars().distinct().mapToObj(c -> String.valueOf((char) c)).collect(Collectors.joining()));\n        // return Optional.of(str1.chars().distinct().mapToObj(c -> String.valueOf((char) c)).collect(Collectors.joining()));\n        // return Optional.of(str1.chars().distinct().mapToObj(c -> String.valueOf((char) c)).collect(Collectors.joining()));\n        // return Optional.of(str1.chars",
    "        Map<String, Integer> map = new HashMap<String, Integer>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                return Optional.of(c);\n            }\n            map.put(c, 1);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                return Optional.of(c);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.isEmpty()) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> charCount = new HashMap<>();\n        for (char c : str1.toCharArray()) {\n            if (charCount.containsKey(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                charCount.put(c, 1);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> seen = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (seen.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            seen.add(c);\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (set.contains(c)) {\n                return Optional.of(c);\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            } else {\n                set.add(str1.charAt(i));\n            }\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (String s : str1.split(\"\")) {\n            if (set.contains(s)) {\n                return Optional.of(s);\n            } else {\n                set.add(s);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String s = str1.substring(i, i + 1);\n            if (set.contains(s)) {\n                return Optional.of(s);\n            } else {\n                set.add(s);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.isEmpty()) {\n            return Optional.empty();\n        }\n        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (set.contains(c)) {\n                return Optional.of(c);\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.isEmpty()) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (char c : str1.toCharArray()) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> charSet = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (charSet.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            charSet.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (String c : str1.split(\"\")) {\n            if (set.contains(c)) {\n                return Optional.of(c);\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String ch = str1.substring(i, i + 1);\n            if (set.contains(ch)) {\n                return Optional.of(ch);\n            } else {\n                set.add(ch);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            } else {\n                set.add(str1.charAt(i));\n            }\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (set.contains(c)) {\n                return Optional.of(c);\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        // TODO: Write - Your - Code\n        return Optional.empty();",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Set<Character> set = new HashSet<>();\n        for (char c : str1.toCharArray()) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (set.contains(c)) {\n                return Optional.of(c);\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        Set<Character> set = new HashSet<>();\n        for (char c : str1.toCharArray()) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        Optional<String> result = Optional.empty();\n        if (str1.length() > 0) {\n            Set<Character> set = new HashSet<>();\n            for (int i = 0; i < str1.length(); i++) {\n                if (set.contains(str1.charAt(i))) {\n                    result = Optional.of(String.valueOf(str1.charAt(i)));\n                    break;\n                } else {\n                    set.add(str1.charAt(i));\n                }\n            }\n        }\n        return result;",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = Character.toString(str1.charAt(i));\n            if (map.containsKey(c)) {\n                return Optional.of(c);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null) {\n            return Optional.empty();\n        }\n        if (str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> seen = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (seen.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            seen.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        char[] chars = str1.toCharArray();\n        Set<Character> set = new HashSet<>();\n        for (char c : chars) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        Set<Character> set = new HashSet<Character>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            } else {\n                set.add(str1.charAt(i));\n            }\n        }\n        return Optional.empty();",
    "        Optional<String> result = Optional.empty();\n        if (str1 == null || str1.length() == 0) {\n            return result;\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                result = Optional.of(String.valueOf(str1.charAt(i)));\n                break;\n            } else {\n                set.add(str1.charAt(i));\n            }\n        }\n        return result;",
    "        // Use a hashmap to keep track of the characters we've seen.\n        Map<Character, Integer> charMap = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (charMap.containsKey(c)) {\n                return Optional.of(Character.toString(c));\n            }\n            charMap.put(c, 1);\n        }\n        return Optional.empty();",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            } else {\n                set.add(str1.charAt(i));\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        char[] chars = str1.toCharArray();\n        Set<Character> set = new HashSet<>();\n        for (char c : chars) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> seen = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (seen.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            seen.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            } else {\n                set.add(str1.charAt(i));\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                return Optional.of(c + \"\");\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (char c : str1.toCharArray()) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (set.contains(c)) {\n                return Optional.of(c);\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            } else {\n                set.add(str1.charAt(i));\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        // This is a O(n^2) solution.\n        // We can do better.\n        for (int i = 0; i < str1.length(); i++) {\n            for (int j = i + 1; j < str1.length(); j++) {\n                if (str1.charAt(i) == str1.charAt(j)) {\n                    return Optional.of(Character.toString(str1.charAt(i)));\n                }\n            }\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (String s : str1.split(\"\")) {\n            if (set.contains(s)) {\n                return Optional.of(s);\n            }\n            set.add(s);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(String.valueOf(str1.charAt(i)))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(String.valueOf(str1.charAt(i)));\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> seen = new HashSet<>();\n        for (char c : str1.toCharArray()) {\n            if (seen.contains(c)) {\n                return Optional.of(Character.toString(c));\n            }\n            seen.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                return Optional.of(c);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (set.contains(c)) {\n                return Optional.of(c);\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String ch = str1.substring(i, i + 1);\n            if (set.contains(ch)) {\n                return Optional.of(ch);\n            }\n            set.add(ch);\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (set.contains(c)) {\n                return Optional.of(c);\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (map.containsKey(str1.substring(i, i + 1))) {\n                return Optional.of(str1.substring(i, i + 1));\n            } else {\n                map.put(str1.substring(i, i + 1), 1);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        Set<Character> set = new HashSet<>();\n        for (char c : str1.toCharArray()) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        char[] chars = str1.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (map.containsKey(chars[i])) {\n                return Optional.of(String.valueOf(chars[i]));\n            } else {\n                map.put(chars[i], 1);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            } else {\n                set.add(str1.charAt(i));\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.isEmpty()) {\n            return Optional.empty();\n        }\n        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (set.contains(c)) {\n                return Optional.of(c);\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return Optional.empty();",
    "        Map<Character, Integer> charMap = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (charMap.containsKey(c)) {\n                return Optional.of(Character.toString(c));\n            }\n            charMap.put(c, 1);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        char[] arr = str1.toCharArray();\n        Set<Character> set = new HashSet<>();\n        for (char c : arr) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (set.contains(c)) {\n                return Optional.of(c);\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                return Optional.of(c);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String ch = str1.substring(i, i + 1);\n            if (set.contains(ch)) {\n                return Optional.of(ch);\n            } else {\n                set.add(ch);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        char[] chars = str1.toCharArray();\n        Set<Character> charSet = new HashSet<>();\n        for (char c : chars) {\n            if (charSet.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            charSet.add(c);\n        }\n        return Optional.empty();",
    "        Set<Character> set = new HashSet<>();\n        for (char c : str1.toCharArray()) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        char[] chars = str1.toCharArray();\n        Set<Character> charSet = new HashSet<>();\n        for (char c : chars) {\n            if (charSet.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            charSet.add(c);\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String key = String.valueOf(str1.charAt(i));\n            if (map.containsKey(key)) {\n                return Optional.of(key);\n            }\n            map.put(key, 1);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.isEmpty()) return Optional.empty();\n        Set<Character> set = new HashSet<>();\n        for (char c : str1.toCharArray()) {\n            if (set.contains(c)) return Optional.of(String.valueOf(c));\n            else set.add(c);\n        }\n        return Optional.empty();",
    "        // TODO: Implement\n        return Optional.empty();",
    "        if (str1 == null || str1.isEmpty()) {\n            return Optional.empty();\n        }\n        char[] chars = str1.toCharArray();\n        Set<Character> charSet = new HashSet<>();\n        for (char c : chars) {\n            if (charSet.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            charSet.add(c);\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (set.contains(c)) {\n                return Optional.of(c);\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        char[] chars = str1.toCharArray();\n        Set<Character> charSet = new HashSet<>();\n        for (char c : chars) {\n            if (charSet.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            charSet.add(c);\n        }\n        return Optional.empty();",
    "        // Create a HashMap to store the character and its count\n        Map<String, Integer> map = new HashMap<>();\n        // Convert the given string to char array\n        char[] strArray = str1.toCharArray();\n        // check each char of strArray\n        for (char c : strArray) {\n            if (map.containsKey(String.valueOf(c))) {\n                // If char is present in charCountMap, incrementing it's count by 1\n                map.put(String.valueOf(c), map.get(String.valueOf(c)) + 1);\n            } else {\n                // If char is not present in charCountMap,\n                // putting this char to charCountMap with 1 as it's value\n                map.put(String.valueOf(c), 1);\n            }\n        }\n        // Getting a Set containing all keys of charCountMap\n        Set<String> keys = map.keySet();\n        // Iterate through Set\n        for (String ch : keys) {\n            if (map.get(ch) > 1) {\n                // if any char has a count of more than 1, printing it's count\n                return Optional.of(ch);\n            }\n        }\n        return Optional.empty();",
    "        // Create a hash map\n        Map<Character, Integer> map = new HashMap<>();\n        // Convert the String to char array\n        char[] chars = str1.toCharArray();\n        // Traverse through each character of input string and\n        // count number of occurrences of each character\n        for (char c : chars) {\n            if (map.containsKey(c)) {\n                // If char 'c' is present in charCountMap,\n                // incrementing it's count by 1\n                map.put(c, map.get(c) + 1);\n            } else {\n                // If char 'c' is not present in charCountMap,\n                // putting 'c' into charCountMap with 1 as it's value\n                map.put(c, 1);\n            }\n        }\n        // Traverse through the map to find the first repeated character\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > 1) {\n                return Optional.of(entry.getKey().toString());\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                return Optional.of(c);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        if (str1 == null) {\n            return Optional.empty();\n        }\n        char[] chars = str1.toCharArray();\n        Set<Character> set = new HashSet<>();\n        for (char c : chars) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        if (str1 == null || str1.length() <= 1) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String ch = str1.substring(i, i + 1);\n            if (set.contains(ch)) {\n                return Optional.of(ch);\n            } else {\n                set.add(ch);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (set.contains(c)) {\n                return Optional.of(c);\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null) return Optional.empty();\n        if (str1.length() == 0) return Optional.empty();\n        if (str1.length() == 1) return Optional.of(str1);\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) return Optional.of(str1.substring(i, i + 1));\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.isEmpty()) {\n            return Optional.empty();\n        }\n        char[] chars = str1.toCharArray();\n        Set<Character> seen = new HashSet<>();\n        for (char c : chars) {\n            if (seen.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            seen.add(c);\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (set.contains(c)) {\n                return Optional.of(c);\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        char[] chars = str1.toCharArray();\n        Set<Character> set = new HashSet<>();\n        for (char c : chars) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        char[] chars = str1.toCharArray();\n        Set<Character> charSet = new HashSet<>();\n        for (char c : chars) {\n            if (charSet.contains(c)) {\n                return Optional.of(Character.toString(c));\n            } else {\n                charSet.add(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.isEmpty()) {\n            return Optional.empty();\n        }\n        Set<Character> seen = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (seen.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            seen.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return Optional.empty();",
    "        Optional<String> result = Optional.empty();\n        Set<String> set = new HashSet<>();\n        for (String s : str1.split(\"\")) {\n            if (set.contains(s)) {\n                result = Optional.of(s);\n                break;\n            }\n            set.add(s);\n        }\n        return result;",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (set.contains(c)) {\n                return Optional.of(c);\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (String s : str1.split(\"\")) {\n            if (set.contains(s)) {\n                return Optional.of(s);\n            } else {\n                set.add(s);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        // TODO: Implement\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String ch = str1.substring(i, i + 1);\n            if (set.contains(ch)) {\n                return Optional.of(ch);\n            } else {\n                set.add(ch);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> seen = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (seen.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            seen.add(c);\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (String s : str1.split(\"\")) {\n            if (set.contains(s)) {\n                return Optional.of(s);\n            } else {\n                set.add(s);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (char c : str1.toCharArray()) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                return Optional.of(c);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return Optional.empty();",
    "        if (str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (String s : str1.split(\"\")) {\n            if (set.contains(s)) {\n                return Optional.of(s);\n            } else {\n                set.add(s);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        // return str1.chars().distinct().count() == str1.length() ? Optional.empty() : Optional.of(str1.charAt(0));\n        return str1.chars().distinct().count() == str1.length() ? Optional.empty() : Optional.of(str1.substring(0, 1));",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            } else {\n                set.add(str1.charAt(i));\n            }\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (String s : str1.split(\"\")) {\n            if (set.contains(s)) {\n                return Optional.of(s);\n            } else {\n                set.add(s);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            } else {\n                set.add(str1.charAt(i));\n            }\n        }\n        return Optional.empty();",
    "        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            } else {\n                set.add(str1.charAt(i));\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (set.contains(c)) {\n                return Optional.of(c);\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        Set<Character> set = new HashSet<>();\n        for (char c : str1.toCharArray()) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        if (str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                return Optional.of(c);\n            }\n            map.put(c, 1);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        char[] chars = str1.toCharArray();\n        Set<Character> set = new HashSet<>();\n        for (char c : chars) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        // Create a HashMap\n        Map<Character, Integer> hm = new HashMap<Character, Integer>();\n        // Convert the String to char array\n        char[] str = str1.toCharArray();\n        // build hash map with char and number of times they appear in str\n        for (char c : str) {\n            if (hm.containsKey(c)) {\n                hm.put(c, hm.get(c) + 1);\n            } else {\n                hm.put(c, 1);\n            }\n        }\n        // Iterate through HashMap to find first repeated character\n        for (char c : str) {\n            if (hm.get(c) > 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        char[] chars = str1.toCharArray();\n        Set<Character> set = new HashSet<>();\n        for (char c : chars) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(Character.toString(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String s = str1.substring(i, i + 1);\n            if (map.containsKey(s)) {\n                return Optional.of(s);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        return Optional.empty();",
    "        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            } else {\n                set.add(str1.charAt(i));\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for(String s: str1.split(\"\")) {\n            if(set.contains(s)) {\n                return Optional.of(s);\n            }\n            set.add(s);\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Map<Character, Integer> charMap = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (charMap.containsKey(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                charMap.put(c, 1);\n            }\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (String s : str1.split(\"\")) {\n            if (set.contains(s)) {\n                return Optional.of(s);\n            }\n            set.add(s);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        char[] chars = str1.toCharArray();\n        Set<Character> set = new HashSet<>();\n        for (char c : chars) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            } else {\n                set.add(str1.charAt(i));\n            }\n        }\n        return Optional.empty();",
    "        Set<Character> set = new HashSet<>();\n        for (char c : str1.toCharArray()) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        char[] chars = str1.toCharArray();\n        Set<Character> charSet = new HashSet<>();\n        for (char c : chars) {\n            if (charSet.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                charSet.add(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (String s : str1.split(\"\")) {\n            if (set.contains(s)) {\n                return Optional.of(s);\n            } else {\n                set.add(s);\n            }\n        }\n        return Optional.empty();",
    "        if(str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for(int i = 0; i < str1.length(); i++) {\n            if(set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        Optional<String> result = Optional.empty();\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String ch = str1.substring(i, i + 1);\n            if (map.containsKey(ch)) {\n                map.put(ch, map.get(ch) + 1);\n            } else {\n                map.put(ch, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String ch = str1.substring(i, i + 1);\n            if (map.get(ch) > 1) {\n                result = Optional.of(ch);\n                break;\n            }\n        }\n        return result;",
    "        if (str1 == null) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        char[] chars = str1.toCharArray();\n        Set<Character> set = new HashSet<>();\n        for (char c : chars) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (String s : str1.split(\"\")) {\n            if (set.contains(s)) {\n                return Optional.of(s);\n            }\n            set.add(s);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        return str1.chars()\n            .mapToObj(c -> (char) c)\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n            .entrySet()\n            .stream()\n            .filter(e -> e.getValue() > 1)\n            .map(e -> e.getKey().toString())\n            .findFirst();",
    "        if (str1 == null) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String ch = str1.substring(i, i + 1);\n            if (set.contains(ch)) {\n                return Optional.of(ch);\n            } else {\n                set.add(ch);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        Set<Character> set = new HashSet<Character>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            } else {\n                set.add(str1.charAt(i));\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i+1);\n            if (map.containsKey(c)) {\n                return Optional.of(c);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            }\n            set.add(str1.charAt(i));\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char ch = str1.charAt(i);\n            if (set.contains(ch)) {\n                return Optional.of(String.valueOf(ch));\n            }\n            set.add(ch);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            } else {\n                set.add(str1.charAt(i));\n            }\n        }\n        return Optional.empty();",
    "        Set<Character> set = new HashSet<>();\n        for (char c : str1.toCharArray()) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        Set<Character> set = new HashSet<>();\n        for (char c : str1.toCharArray()) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        if (str1 == null) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                set.add(c);\n            }\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (set.contains(c)) {\n                return Optional.of(c);\n            }\n            set.add(c);\n        }\n        return Optional.empty();",
    "        Set<String> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String ch = str1.substring(i, i + 1);\n            if (set.contains(ch)) {\n                return Optional.of(ch);\n            }\n            set.add(ch);\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.isEmpty()) {\n            return Optional.empty();\n        }\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (set.contains(str1.charAt(i))) {\n                return Optional.of(String.valueOf(str1.charAt(i)));\n            } else {\n                set.add(str1.charAt(i));\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                return Optional.of(String.valueOf(c));\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return Optional.empty();"
  ]
}