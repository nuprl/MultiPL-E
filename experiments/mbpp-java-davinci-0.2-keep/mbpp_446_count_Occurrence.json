{
  "name": "mbpp_446_count_Occurrence",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count the occurence of all elements of list in a tuple.\n    public static long countOccurrence(Object tup, Object lst) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(countOccurrence(Pair.with(\"a\", \"a\", \"c\", \"b\", \"d\"), (new Object(Arrays.asList((String)\"a\", (String)\"b\")))) == (3l));\n    assert(countOccurrence(Pair.with(1l, 2l, 3l, 1l, 4l, 6l, 7l, 1l, 4l), (new Object(Arrays.asList((long)1l, (long)4l, (long)7l)))) == (6l));\n    assert(countOccurrence(Pair.with(1l, 2l, 3l, 4l, 5l, 6l), (new Object(Arrays.asList((long)1l, (long)2l)))) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return Stream.of(tup).filter(x -> x.equals(lst)).count();",
    "        return Arrays.stream(((List)lst).toArray()).filter(x -> ((Tuple)tup).contains(x)).count();",
    "        return Stream.of(tup).filter(x -> lst.equals(x)).count();",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List l = (List) lst;\n                for (Object o : l) {\n                    if (t.contains(o)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            for (Object o : (Tuple) tup) {\n                if (o instanceof List) {\n                    for (Object o1 : (List) o) {\n                        if (o1.equals(lst)) {\n                            count++;\n                        }\n                    }\n                } else {\n                    if (o.equals(lst)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        return Stream.of(tup)\n            .flatMap(x -> Stream.of(x))\n            .filter(x -> Stream.of(lst).anyMatch(y -> y.equals(x)))\n            .count();",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List l = (List) lst;\n                for (Object o : t) {\n                    if (l.contains(o)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (Iterable) lst) {\n            for (Object t : (Iterable) tup) {\n                if (o.equals(t)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println\n        // Example: System.out.println(\"Hello world!\");\n        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List l = (List) lst;\n                for (Object o : l) {\n                    if (t.contains(o)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            if (((Tuple) tup).contains(o)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object i : (List) lst) {\n            for (Object j : (List) tup) {\n                if (i.equals(j)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple tuple = (Tuple) tup;\n            if (lst instanceof List) {\n                List list = (List) lst;\n                for (Object item : list) {\n                    for (Object tupItem : tuple) {\n                        if (item.equals(tupItem)) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            for (Object o : (Tuple) tup) {\n                if (o instanceof List) {\n                    count += countOccurrence(o, lst);\n                } else {\n                    if (o.equals(lst)) {\n                        count++;\n                    }\n                }\n            }\n        } else if (tup instanceof List) {\n            for (Object o : (List) tup) {\n                if (o instanceof List) {\n                    count += countOccurrence(o, lst);\n                } else {\n                    if (o.equals(lst)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (Object[]) lst) {\n            for (Object o2 : (Object[]) tup) {\n                if (o.equals(o2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        return Stream.of(tup)\n            .flatMap(x -> Arrays.stream((Object[]) x))\n            .filter(x -> Arrays.asList(lst).contains(x))\n            .count();",
    "        // Your code here\n        return 0;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List l = (List) lst;\n                for (Object o : l) {\n                    if (t.contains(o)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object elem : (List) lst) {\n            for (Object tupElem : (List) tup) {\n                if (tupElem.equals(elem)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        return Stream.of((Object[])tup).filter(x -> Stream.of((Object[])lst).anyMatch(y -> y.equals(x))).count();",
    "        return Stream.of(tup).filter(x -> lst.equals(x)).count();",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long count = 0;\n        if(tup instanceof Tuple && lst instanceof List) {\n            Tuple tuple = (Tuple)tup;\n            List list = (List)lst;\n            for(int i = 0; i < tuple.getSize(); i++) {\n                for(int j = 0; j < list.size(); j++) {\n                    if(tuple.getValue(i).equals(list.get(j))) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple && lst instanceof List) {\n            Tuple t = (Tuple) tup;\n            List<Object> l = (List<Object>) lst;\n            for (Object o : l) {\n                count += t.getValue(o);\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        return Stream.of(tup)\n            .flatMap(x -> Stream.of(x))\n            .filter(x -> Stream.of(lst).anyMatch(y -> y.equals(x)))\n            .count();",
    "        long count = 0;\n        for (Object o : (List)lst) {\n            if (((Tuple)tup).contains(o)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object obj : (List)lst) {\n            for (Object obj2 : (List)tup) {\n                if (obj.equals(obj2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        long count = 0;\n        if (tup instanceof Tuple && lst instanceof List) {\n            List<Object> list = (List<Object>) lst;\n            Tuple tuple = (Tuple) tup;\n            for (int i = 0; i < tuple.getSize(); i++) {\n                for (int j = 0; j < list.size(); j++) {\n                    if (tuple.getValue(i).equals(list.get(j))) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long count = 0;\n        for (Object i : (List) lst) {\n            for (Object j : (List) tup) {\n                if (i.equals(j)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            for (Object t : (List) tup) {\n                if (o.equals(t)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        return Stream.of((Object[]) lst).filter(x -> Arrays.asList((Object[]) tup).contains(x)).count();",
    "        long count = 0;\n        if (tup instanceof Tuple && lst instanceof List) {\n            for (Object i : (List) lst) {\n                for (Object j : (Tuple) tup) {\n                    if (i.equals(j)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object i : (List)lst) {\n            if (((Tuple)tup).contains(i)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object i : (List) lst) {\n            for (Object j : (List) tup) {\n                if (i.equals(j)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            for (Object o : (Tuple)tup) {\n                if (o instanceof List) {\n                    for (Object o2 : (List)o) {\n                        if (o2.equals(lst)) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;",
    "        return ((List) lst).stream().filter(x -> ((Tuple) tup).contains(x)).count();",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List l = (List) lst;\n                for (Object o : l) {\n                    if (t.contains(o)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for(Object o : (List)lst) {\n            for(Object t : (List)tup) {\n                if(o.equals(t))\n                    count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            if (tup instanceof Pair) {\n                Pair p = (Pair) tup;\n                if (p.getValue0().equals(o) || p.getValue1().equals(o)) {\n                    count++;\n                }\n            } else if (tup instanceof Triplet) {\n                Triplet p = (Triplet) tup;\n                if (p.getValue0().equals(o) || p.getValue1().equals(o) || p.getValue2().equals(o)) {\n                    count++;\n                }\n            } else if (tup instanceof Quartet) {\n                Quartet p = (Quartet) tup;\n                if (p.getValue0().equals(o) || p.getValue1().equals(o) || p.getValue2().equals(o) || p.getValue3().equals(o)) {\n                    count++;\n                }\n            } else if (tup instanceof Quintet) {\n                Quintet p = (Quintet) tup;\n                if (p.getValue0().equals(o) || p.getValue1().equals(o) || p.getValue2().equals(o) || p.getValue3().equals(o) || p.getValue4().equals(o)) {\n                    count++;\n                }\n            } else if (tup instanceof Sextet) {\n                Sextet p = (Sextet) tup;\n                if (p.getValue0().equals(o) || p.getValue1().equals(o) || p.getValue2().equals(o) || p.getValue3().equals(o) || p.getValue4().equals(o) || p.getValue5().equals(o)) {\n                    count++;\n                }\n            } else if (tup instanceof Septet) {\n                Septet p = (Septet) tup;\n                if (p.getValue0().equals(o) || p.getValue1().equals(o) || p.getValue2",
    "        long count = 0;\n        for (Object o : (List)lst) {\n            for (Object t : (List)tup) {\n                if (o.equals(t)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        return Arrays.stream((Object[]) tup).filter(x -> x.equals(lst)).count();",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            for (Object o : (Tuple)tup) {\n                if (o instanceof List) {\n                    count += countOccurrence(o, lst);\n                } else if (o.equals(lst)) {\n                    count++;\n                }\n            }\n        } else if (tup instanceof List) {\n            for (Object o : (List)tup) {\n                if (o instanceof List) {\n                    count += countOccurrence(o, lst);\n                } else if (o.equals(lst)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            for (Object t : (List) tup) {\n                if (o.equals(t)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple tuple = (Tuple) tup;\n            if (lst instanceof List) {\n                List list = (List) lst;\n                for (Object o : tuple) {\n                    if (list.contains(o)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            if (((Tuple) tup).contains(o)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            if (((Tuple) tup).contains(o)) {\n                count++;\n            }\n        }\n        return count;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List l = (List) lst;\n                for (Object o : l) {\n                    count += t.getValue(o);\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            for (Object p : (List) tup) {\n                if (o.equals(p)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long count = 0;\n        for (Object o : (List)lst) {\n            count += Collections.frequency((List)tup, o);\n        }\n        return count;",
    "        // TODO: Implement this function\n        return 0;",
    "        long count = 0;\n        for (Object item : (Object[])tup) {\n            for (Object item2 : (Object[])lst) {\n                if (item.equals(item2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        return Stream.of(tup).filter(x -> lst.equals(x)).count();",
    "        return Stream.of(tup).filter(x -> Stream.of(lst).anyMatch(y -> y.equals(x))).count();",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List<Object> l = (List<Object>) lst;\n                for (Object o : l) {\n                    if (t.contains(o)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        return 0;",
    "        long count = 0;\n        for (Object i : (Iterable) lst) {\n            for (Object j : (Iterable) tup) {\n                if (i.equals(j)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            if (((Tuple) tup).contains(o)) {\n                count += 1;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            count += Collections.frequency((List) tup, o);\n        }\n        return count;",
    "        return Stream.of(((List)lst).toArray()).filter(x -> ((Tuple)tup).contains(x)).count();",
    "        long count = 0;\n        for(Object i : (List)lst) {\n            if(i instanceof Integer) {\n                for(Object j : (List)tup) {\n                    if(j instanceof Integer) {\n                        if((int)i == (int)j) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object obj : (List) lst) {\n            if (((Tuple) tup).contains(obj)) {\n                count++;\n            }\n        }\n        return count;",
    "        return Arrays.stream((Object[]) lst).filter(x -> Arrays.stream((Object[]) tup).anyMatch(y -> y.equals(x))).count();",
    "        long count = 0;\n        for (Object obj : (List)lst) {\n            for (Object obj2 : (List)tup) {\n                if (obj.equals(obj2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List<Object> l = (List<Object>) lst;\n                for (Object o : l) {\n                    if (t.contains(o)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        return Arrays.stream((Object[]) lst).filter(x -> Arrays.stream((Object[]) tup).anyMatch(y -> y.equals(x))).count();",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List l = (List) lst;\n                for (Object o : t) {\n                    if (l.contains(o)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            for (Object obj : (Tuple) tup) {\n                if (obj instanceof List) {\n                    for (Object obj2 : (List) obj) {\n                        if (obj2.equals(lst)) {\n                            count++;\n                        }\n                    }\n                } else {\n                    if (obj.equals(lst)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object item : (List)lst) {\n            for (Object tupItem : (List)tup) {\n                if (item.equals(tupItem)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List)lst) {\n            if (tup.equals(o)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object t : (Object[])tup) {\n            for (Object l : (Object[])lst) {\n                if (t.equals(l)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List list = (List) lst;\n                for (int i = 0; i < t.getSize(); i++) {\n                    for (int j = 0; j < list.size(); j++) {\n                        if (t.getValue(i).equals(list.get(j))) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;",
    "        return Arrays.stream((Object[])tup).filter(x -> Arrays.asList((Object[])lst).contains(x)).count();",
    "        long count = 0;\n        for (Object o : (List)lst) {\n            try {\n                count += ((Tuple)tup).getValue(o);\n            } catch (Exception e) {\n                count += 0;\n            }\n        }\n        return count;",
    "        return Arrays.stream((Object[])tup).filter(x -> ((Object[])lst).length > 0 && Arrays.stream((Object[])lst).anyMatch(y -> y.equals(x))).count();",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            count += ((Tuple) tup).getValue0().equals(o) ? 1 : 0;\n            count += ((Tuple) tup).getValue1().equals(o) ? 1 : 0;\n            count += ((Tuple) tup).getValue2().equals(o) ? 1 : 0;\n            count += ((Tuple) tup).getValue3().equals(o) ? 1 : 0;\n            count += ((Tuple) tup).getValue4().equals(o) ? 1 : 0;\n            count += ((Tuple) tup).getValue5().equals(o) ? 1 : 0;\n            count += ((Tuple) tup).getValue6().equals(o) ? 1 : 0;\n            count += ((Tuple) tup).getValue7().equals(o) ? 1 : 0;\n            count += ((Tuple) tup).getValue8().equals(o) ? 1 : 0;\n            count += ((Tuple) tup).getValue9().equals(o) ? 1 : 0;\n            count += ((Tuple) tup).getValue10().equals(o) ? 1 : 0;\n            count += ((Tuple) tup).getValue11().equals(o) ? 1 : 0;\n            count += ((Tuple) tup).getValue12().equals(o) ? 1 : 0;\n            count += ((Tuple) tup).getValue13().equals(o) ? 1 : 0;\n            count += ((Tuple) tup).getValue14().equals(o) ? 1 : 0;\n            count += ((Tuple) tup).getValue15().equals(o) ? 1 : 0;\n            count += ((Tuple) tup).getValue16().equals(o) ? 1 : 0;\n            count += ((Tuple) tup).getValue17().equals(o) ? 1 : 0;\n            count += ((Tuple) tup).getValue18().equals(o) ? 1 : 0;\n            count += ((Tuple) tup).getValue19().equ",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            for (Object o : (Tuple) tup) {\n                if (o instanceof List) {\n                    count += countOccurrence(o, lst);\n                } else {\n                    if (o.equals(lst)) {\n                        count++;\n                    }\n                }\n            }\n        } else if (tup instanceof List) {\n            for (Object o : (List) tup) {\n                if (o instanceof List) {\n                    count += countOccurrence(o, lst);\n                } else {\n                    if (o.equals(lst)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List<Object> list = (List<Object>) lst;\n                for (Object o : list) {\n                    if (t.contains(o)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        return Stream.of(tup)\n            .flatMap(x -> Stream.of(x))\n            .filter(x -> Stream.of(lst).anyMatch(y -> y.equals(x)))\n            .count();",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            if (tup instanceof Tuple) {\n                for (Object i : (Tuple) tup) {\n                    if (i.equals(o)) {\n                        count++;\n                    }\n                }\n            } else {\n                if (tup.equals(o)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            for (Object o : (Tuple) tup) {\n                if (o instanceof List) {\n                    for (Object o2 : (List) o) {\n                        if (o2.equals(lst)) {\n                            count++;\n                        }\n                    }\n                } else {\n                    if (o.equals(lst)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object obj : (List) lst) {\n            if (((Tuple) tup).contains(obj)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object obj : (List) lst) {\n            for (Object obj2 : (List) tup) {\n                if (obj.equals(obj2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        List<Object> list = (List<Object>)lst;\n        long count = 0;\n        for (Object item : list) {\n            if (item.equals(tup)) {\n                count++;\n            }\n        }\n        return count;",
    "        return Stream.of(tup).filter(x -> Stream.of(lst).anyMatch(y -> y.equals(x))).count();",
    "        return Arrays.stream((Object[]) lst).filter(x -> Arrays.stream((Object[]) tup).anyMatch(y -> y.equals(x))).count();",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            if (tup.equals(o)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple && lst instanceof List) {\n            Tuple t = (Tuple) tup;\n            List<Object> l = (List) lst;\n            for (Object o : l) {\n                if (t.contains(o)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            for (Object o : (Tuple) tup) {\n                if (o instanceof List) {\n                    count += countOccurrence(o, lst);\n                } else {\n                    if (o.equals(lst)) {\n                        count++;\n                    }\n                }\n            }\n        } else if (tup instanceof List) {\n            for (Object o : (List) tup) {\n                if (o instanceof List) {\n                    count += countOccurrence(o, lst);\n                } else {\n                    if (o.equals(lst)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object el : (List<Object>) lst) {\n            for (Object el2 : (List<Object>) tup) {\n                if (el.equals(el2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            if (((Tuple) tup).contains(o)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object i : (List)lst) {\n            for (Object j : (List)tup) {\n                if (i.equals(j)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        return Stream.of((Object[])tup)\n            .filter(x -> Stream.of((Object[])lst).anyMatch(y -> y.equals(x)))\n            .count();",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            for (Object o : (Tuple) tup) {\n                if (o instanceof List) {\n                    for (Object o2 : (List) o) {\n                        if (o2.equals(lst)) {\n                            count++;\n                        }\n                    }\n                } else if (o.equals(lst)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (Object[])tup) {\n            for (Object o2 : (Object[])lst) {\n                if (o.equals(o2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List)lst) {\n            if (o instanceof List) {\n                count += countOccurrence(tup, o);\n            } else {\n                count += ((Tuple)tup).getValue0().equals(o) ? 1 : 0;\n            }\n        }\n        return count;",
    "        return Stream.of(tup).filter(x -> x.equals(lst)).count();",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long count = 0;\n        for (Object o : (Object[])tup) {\n            for (Object oo : (Object[])lst) {\n                if (o.equals(oo)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List)lst) {\n            if (o instanceof List) {\n                count += countOccurrence(tup, o);\n            } else {\n                count += ((Tuple)tup).getValue0().equals(o) ? 1 : 0;\n                count += ((Tuple)tup).getValue1().equals(o) ? 1 : 0;\n            }\n        }\n        return count;",
    "        return Stream.of(tup)\n            .flatMap(x -> Stream.of(x))\n            .filter(x -> Stream.of(lst).anyMatch(y -> y.equals(x)))\n            .count();",
    "        long count = 0;\n        if (tup instanceof Tuple && lst instanceof List) {\n            Tuple tuple = (Tuple) tup;\n            List list = (List) lst;\n            for (Object obj : list) {\n                for (Object tupObj : tuple) {\n                    if (obj.equals(tupObj)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        return Stream.of((Object[])lst).filter(x -> Stream.of((Object[])tup).anyMatch(y -> y.equals(x))).count();",
    "        return Arrays.stream((Object[]) tup).filter(x -> x.equals(lst)).count();",
    "        long count = 0;\n        for (Object i : (List)lst) {\n            for (Object j : (List)tup) {\n                if (i.equals(j)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        return Stream.of(tup).filter(x -> lst.equals(x)).count();",
    "        return Arrays.stream((Object[]) lst).filter(x -> Arrays.stream((Object[]) tup).anyMatch(y -> y.equals(x))).count();",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple tuple = (Tuple) tup;\n            if (lst instanceof List) {\n                List list = (List) lst;\n                for (int i = 0; i < tuple.getSize(); i++) {\n                    for (int j = 0; j < list.size(); j++) {\n                        if (tuple.getValue(i).equals(list.get(j))) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;",
    "        return Stream.of(tup).filter(x -> lst.equals(x)).count();",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        if (tup instanceof Tuple) {\n            Tuple tuple = (Tuple) tup;\n            List<Object> list = (List<Object>) lst;\n            long count = 0;\n            for (Object obj : tuple) {\n                if (list.contains(obj)) {\n                    count++;\n                }\n            }\n            return count;\n        }\n        return 0;",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            for (Object i : (List) tup) {\n                if (o.equals(i)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object obj : (List) lst) {\n            if (tup.equals(obj)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object i : (List) lst) {\n            for (Object j : (List) tup) {\n                if (i.equals(j)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        return Stream.of(tup.toString().split(\",\")).filter(x -> x.equals(lst.toString())).count();",
    "        return Stream.of(tup).filter(x -> lst.equals(x)).count();",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List l = (List) lst;\n                for (Object o : l) {\n                    for (Object o2 : t) {\n                        if (o.equals(o2)) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;",
    "        return Stream.of(tup)\n            .flatMap(t -> Stream.of(t))\n            .filter(t -> Stream.of(lst).anyMatch(l -> l.equals(t)))\n            .count();",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple tuple = (Tuple) tup;\n            if (lst instanceof List) {\n                List list = (List) lst;\n                for (int i = 0; i < tuple.getSize(); i++) {\n                    Object obj = tuple.getValue(i);\n                    if (list.contains(obj)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List list = (List) lst;\n                for (Object o : t) {\n                    if (list.contains(o)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple && lst instanceof List) {\n            Tuple t = (Tuple) tup;\n            List l = (List) lst;\n            for (Object o : l) {\n                for (Object p : t) {\n                    if (o.equals(p)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object i : (List) lst) {\n            for (Object j : (List) tup) {\n                if (i == j) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List<Object> list = (List<Object>) lst;\n                for (Object o : list) {\n                    for (Object o2 : t) {\n                        if (o.equals(o2)) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;",
    "        return Stream.of(tup).filter(x -> lst.equals(x)).count();",
    "        return IntStream.range(0, Array.getLength(lst))\n            .mapToObj(i -> Array.get(lst, i))\n            .mapToLong(x -> IntStream.range(0, Array.getLength(tup))\n                .mapToObj(i -> Array.get(tup, i))\n                .filter(y -> x.equals(y))\n                .count())\n            .sum();",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            for (Object o : (Tuple) tup) {\n                if (o instanceof List) {\n                    for (Object o2 : (List) o) {\n                        if (o2.equals(lst)) {\n                            count++;\n                        }\n                    }\n                } else {\n                    if (o.equals(lst)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            if (((Tuple) tup).contains(o)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            if (((Tuple) tup).contains(o)) {\n                count++;\n            }\n        }\n        return count;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long count = 0;\n        for (Object obj : (Object[])tup) {\n            for (Object obj2 : (Object[])lst) {\n                if (obj.equals(obj2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        return Arrays.stream((Object[])tup).filter(e -> Arrays.asList((Object[])lst).contains(e)).count();",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            if (tup instanceof Tuple) {\n                for (Object o2 : (Tuple) tup) {\n                    if (o.equals(o2)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple tuple = (Tuple) tup;\n            if (lst instanceof List) {\n                List list = (List) lst;\n                for (Object element : tuple) {\n                    if (list.contains(element)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            for (Object o : (Tuple) tup) {\n                if (o instanceof List) {\n                    for (Object o2 : (List) o) {\n                        if (o2.equals(lst)) {\n                            count++;\n                        }\n                    }\n                } else {\n                    if (o.equals(lst)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List l = (List) lst;\n                long count = 0;\n                for (Object o : t) {\n                    if (l.contains(o)) {\n                        count++;\n                    }\n                }\n                return count;\n            }\n        }\n        return 0;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long count = 0;\n        try {\n            Class<?> cls = Class.forName(\"org.javatuples.Pair\");\n            if (cls.isInstance(tup)) {\n                Pair<?, ?> pair = (Pair<?, ?>) tup;\n                if (pair.getValue0().getClass().isArray()) {\n                    Object[] arr = (Object[]) pair.getValue0();\n                    for (Object obj : arr) {\n                        if (obj.equals(lst)) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return count;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long count = 0;\n        for (Object i : (List) lst) {\n            for (Object j : (List) tup) {\n                if (i.equals(j)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Your code here\n        return 0;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List<Object> list = (List<Object>) lst;\n                for (Object o : list) {\n                    for (Object o1 : t) {\n                        if (o.equals(o1)) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;",
    "        return Stream.of((Object[])tup).filter(x -> Stream.of((Object[])lst).anyMatch(y -> y.equals(x))).count();",
    "        long count = 0;\n        for (Object obj : (List) lst) {\n            for (Object tupObj : (List) tup) {\n                if (obj.equals(tupObj)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        return Arrays.stream((Object[])tup).filter(x -> Arrays.asList((Object[])lst).contains(x)).count();",
    "        long count = 0;\n        for (Object i : (List)lst) {\n            for (Object j : (List)tup) {\n                if (i.equals(j)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List l = (List) lst;\n                for (Object o : l) {\n                    count += t.getValue(o);\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple && lst instanceof List) {\n            for (Object o : (List) lst) {\n                if (((Tuple) tup).contains(o)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object i : (List)lst) {\n            for (Object j : (List)tup) {\n                if (i == j) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            if (((Tuple) tup).contains(o)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object i : (List)lst) {\n            for (Object j : (List)tup) {\n                if (i.equals(j)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List)lst) {\n            if (tup instanceof Tuple) {\n                for (Object o2 : (Tuple)tup) {\n                    if (o.equals(o2)) {\n                        count++;\n                    }\n                }\n            } else {\n                if (o.equals(tup)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            for (Object t : (List) tup) {\n                if (o.equals(t)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            for (Object t : (List) tup) {\n                if (o.equals(t)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List<Object> list = (List<Object>) lst;\n                for (Object o : list) {\n                    count += t.getValue(o);\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List)lst) {\n            if (tup instanceof Tuple) {\n                for (Object i : (Tuple)tup) {\n                    if (i.equals(o)) {\n                        count++;\n                    }\n                }\n            } else {\n                if (tup.equals(o)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        return Stream.of(tup)\n                .flatMap(Stream::of)\n                .filter(x -> x.equals(lst))\n                .count();",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List l = (List) lst;\n                for (Object o : l) {\n                    if (t.contains(o)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List l = (List) lst;\n                for (Object o : l) {\n                    for (Object oo : t) {\n                        if (o.equals(oo)) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;",
    "        return Stream.of((Object[]) lst).filter(x -> x.equals(tup)).count();",
    "        long count = 0;\n        for (Object o : (List)lst) {\n            if (tup instanceof Tuple) {\n                for (Object o2 : (Tuple)tup) {\n                    if (o.equals(o2)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List list = (List) lst;\n                for (int i = 0; i < t.getSize(); i++) {\n                    for (int j = 0; j < list.size(); j++) {\n                        if (t.getValue(i).equals(list.get(j))) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return 0;",
    "        long count = 0;\n        for (Object obj : (Object[])tup) {\n            for (Object obj2 : (Object[])lst) {\n                if (obj.equals(obj2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object el : (List)lst) {\n            for (Object tupEl : (List)tup) {\n                if (el.equals(tupEl)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List l = (List) lst;\n                for (Object o : l) {\n                    if (t.contains(o)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple tuple = (Tuple) tup;\n            if (lst instanceof List) {\n                List list = (List) lst;\n                for (Object item : list) {\n                    for (Object tupItem : tuple) {\n                        if (item.equals(tupItem)) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List<Object> list = (List<Object>) lst;\n                for (Object item : list) {\n                    for (int i = 0; i < t.getSize(); i++) {\n                        if (item.equals(t.getValue(i))) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            for (Object o : (Tuple) tup) {\n                if (o instanceof List) {\n                    for (Object oo : (List) o) {\n                        if (oo.equals(lst)) {\n                            count++;\n                        }\n                    }\n                } else {\n                    if (o.equals(lst)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List)lst) {\n            for (Object t : (List)tup) {\n                if (o.equals(t)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        return 0;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple tuple = (Tuple) tup;\n            if (lst instanceof List) {\n                List list = (List) lst;\n                for (Object obj : tuple) {\n                    if (list.contains(obj)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (Object[]) lst) {\n            for (Object o2 : (Object[]) tup) {\n                if (o.equals(o2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List)lst) {\n            for (Object p : (List)tup) {\n                if (o.equals(p)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple tuple = (Tuple) tup;\n            if (lst instanceof List) {\n                List list = (List) lst;\n                for (Object o : tuple) {\n                    if (list.contains(o)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object obj : (List) lst) {\n            if (((Tuple) tup).contains(obj)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List<Object>) lst) {\n            if (tup.equals(o)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (Object[])tup) {\n            for (Object o2 : (Object[])lst) {\n                if (o.equals(o2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple tuple = (Tuple) tup;\n            if (lst instanceof List) {\n                List list = (List) lst;\n                for (Object o : tuple) {\n                    if (list.contains(o)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        return Stream.of(tup)\n            .flatMap(x -> Stream.of(x))\n            .filter(x -> Stream.of(lst).anyMatch(y -> y.equals(x)))\n            .count();",
    "        return Stream.of((Object[]) lst).filter(x -> x.equals(tup)).count();",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            if (((Tuple) tup).contains(o)) {\n                count++;\n            }\n        }\n        return count;",
    "        return Stream.of(tup).filter(x -> lst.equals(x)).count();",
    "        return Stream.of((Object[]) lst)\n            .filter(e -> ((Object[]) tup).length > 0 && e.equals(((Object[]) tup)[0]))\n            .count();",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            if (tup instanceof Pair) {\n                Pair p = (Pair) tup;\n                if (p.getValue0().equals(o) || p.getValue1().equals(o)) {\n                    count++;\n                }\n            } else if (tup instanceof Triplet) {\n                Triplet p = (Triplet) tup;\n                if (p.getValue0().equals(o) || p.getValue1().equals(o) || p.getValue2().equals(o)) {\n                    count++;\n                }\n            } else if (tup instanceof Quartet) {\n                Quartet p = (Quartet) tup;\n                if (p.getValue0().equals(o) || p.getValue1().equals(o) || p.getValue2().equals(o) || p.getValue3().equals(o)) {\n                    count++;\n                }\n            } else if (tup instanceof Quintet) {\n                Quintet p = (Quintet) tup;\n                if (p.getValue0().equals(o) || p.getValue1().equals(o) || p.getValue2().equals(o) || p.getValue3().equals(o) || p.getValue4().equals(o)) {\n                    count++;\n                }\n            } else if (tup instanceof Sextet) {\n                Sextet p = (Sextet) tup;\n                if (p.getValue0().equals(o) || p.getValue1().equals(o) || p.getValue2().equals(o) || p.getValue3().equals(o) || p.getValue4().equals(o) || p.getValue5().equals(o)) {\n                    count++;\n                }\n            } else if (tup instanceof Septet) {\n                Septet p = (Septet) tup;\n                if (p.getValue0().equals(o) || p.getValue1().equals(o) || p.getValue2",
    "        // Your code here\n        return 0;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long count = 0;\n        if(tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if(lst instanceof List) {\n                List l = (List) lst;\n                for(Object o : l) {\n                    if(t.contains(o)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object obj : (List) lst) {\n            for (Object obj2 : (List) tup) {\n                if (obj.equals(obj2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            if (((Tuple) tup).contains(o)) {\n                count++;\n            }\n        }\n        return count;",
    "        List<Object> list = (List<Object>) lst;\n        long count = 0;\n        for (Object o : list) {\n            if (tup.equals(o)) {\n                count++;\n            }\n        }\n        return count;",
    "        return Stream.of(tup)\n            .flatMap(x -> Stream.of(x))\n            .filter(x -> Stream.of(lst).anyMatch(y -> y.equals(x)))\n            .count();",
    "        return Arrays.stream((Object[]) tup).filter(x -> x.equals(lst)).count();",
    "        // Your code here\n        // return 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List l = (List) lst;\n                long count = 0;\n                for (Object o : t) {\n                    if (l.contains(o)) {\n                        count++;\n                    }\n                }\n                return count;\n            }\n        }\n        return 0;",
    "        return Stream.of((Object[])tup).filter(x -> x.equals(lst)).count();",
    "        long count = 0;\n        if (tup instanceof Tuple) {\n            Tuple t = (Tuple) tup;\n            if (lst instanceof List) {\n                List l = (List) lst;\n                for (Object o : l) {\n                    for (Object o2 : t) {\n                        if (o.equals(o2)) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object obj : (Object[])tup) {\n            for (Object obj2 : (Object[])lst) {\n                if (obj.equals(obj2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        return Arrays.stream((Object[])tup).filter(x -> Arrays.asList((Object[])lst).contains(x)).count();",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            for (Object o2 : (List) tup) {\n                if (o.equals(o2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        return Stream.of((Object[]) lst).filter(x -> x.equals(tup)).count();",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            if (tup instanceof Pair) {\n                Pair p = (Pair) tup;\n                if (p.getValue0().equals(o) || p.getValue1().equals(o)) {\n                    count++;\n                }\n            } else if (tup instanceof Triplet) {\n                Triplet p = (Triplet) tup;\n                if (p.getValue0().equals(o) || p.getValue1().equals(o) || p.getValue2().equals(o)) {\n                    count++;\n                }\n            } else if (tup instanceof Quartet) {\n                Quartet p = (Quartet) tup;\n                if (p.getValue0().equals(o) || p.getValue1().equals(o) || p.getValue2().equals(o) || p.getValue3().equals(o)) {\n                    count++;\n                }\n            } else if (tup instanceof Quintet) {\n                Quintet p = (Quintet) tup;\n                if (p.getValue0().equals(o) || p.getValue1().equals(o) || p.getValue2().equals(o) || p.getValue3().equals(o) || p.getValue4().equals(o)) {\n                    count++;\n                }\n            } else if (tup instanceof Sextet) {\n                Sextet p = (Sextet) tup;\n                if (p.getValue0().equals(o) || p.getValue1().equals(o) || p.getValue2().equals(o) || p.getValue3().equals(o) || p.getValue4().equals(o) || p.getValue5().equals(o)) {\n                    count++;\n                }\n            } else if (tup instanceof Septet) {\n                Septet p = (Septet) tup;\n                if (p.getValue0().equals(o) || p.getValue1().equals(o) || p.getValue2",
    "        long count = 0;\n        for (Object i : (List<Object>) lst) {\n            for (Object j : (List<Object>) tup) {\n                if (i == j) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        return Arrays.stream((Object[])tup)\n            .filter(x -> Arrays.asList((Object[])lst).contains(x))\n            .count();",
    "        long count = 0;\n        for (Object obj : (Object[])tup) {\n            for (Object obj2 : (Object[])lst) {\n                if (obj.equals(obj2)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long count = 0;\n        if(tup instanceof Tuple && lst instanceof List) {\n            Tuple t = (Tuple) tup;\n            List l = (List) lst;\n            for(Object o : l) {\n                if(t.contains(o)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        return Stream.of((Object[])tup).filter(x -> Arrays.asList((Object[])lst).contains(x)).count();",
    "        long count = 0;\n        for (Object o : (List)lst) {\n            if (tup instanceof Tuple) {\n                for (Object o2 : (Tuple)tup) {\n                    if (o.equals(o2)) {\n                        count++;\n                    }\n                }\n            } else {\n                if (o.equals(tup)) {\n                    count++;\n                }\n            }\n        }\n        return count;"
  ]
}