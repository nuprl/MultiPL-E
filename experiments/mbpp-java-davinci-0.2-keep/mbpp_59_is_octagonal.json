{
  "name": "mbpp_59_is_octagonal",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the nth octagonal number.\n    public static long isOctagonal(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(isOctagonal((5l)) == (65l));\n    assert(isOctagonal((10l)) == (280l));\n    assert(isOctagonal((15l)) == (645l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long x = (long)Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        long m = (long) Math.sqrt(n);\n        if (m * m == n && (m + 1) % 3 == 0) {\n            return m;\n        }\n        return 0;",
    "        long x = (long)Math.sqrt(2*n+0.25);\n        if (x*x == 2*n+0.25 && x%2 == 1) {\n            return x;\n        }\n        return 0;",
    "        return (long) (Math.sqrt(1 + 24 * n) + 1) / 6;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long)Math.sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n && (x + 1) % 6 == 0) {\n            return (x + 1) / 6;\n        }\n        return -1;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return x == (long) x ? x : -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        double x = (2 + Math.sqrt(4 + 12*n)) / 6;\n        if (x == (int)x) {\n            return n;\n        }\n        return 0;",
    "        return (long)((Math.sqrt(1 + 24*n) + 1)/6);",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long x = (long)Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long nth = (long) (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (nth * (3 * nth - 2) == n) {\n            return nth;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (Math.sqrt(1 + 24 * n) + 1) / 6;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (3 + Math.sqrt(9 + 8 * n)) / 2;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n",
    "        long nth = 0;\n        for (long i = 1; i < n; i++) {\n            nth = i * (3 * i - 2);\n        }\n        return nth;",
    "        long a = (long) Math.sqrt(n);\n        return a * a == n && (a & 1) == 1 ? a : -1;",
    "        // n = (3 * x^2 - x) / 2\n        // n = (3 * x^2 - x - 2 * n) / 2\n        // 3 * x^2 - x - 2 * n = 0\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        // x = (1 - sqrt(1 + 24 * n)) / 6\n        // x",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return x == (long) x ? x : -1;",
    "        long nth = (long) (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return nth;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) ((Math.sqrt(1 + 24 * n) + 1) / 6);",
    "        double x = (Math.sqrt(24 * n + 1) + 1) / 6;\n        return x == (long)x ? x : -1;",
    "        long nth = (long) (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (nth * (3 * nth - 2) == n) {\n            return nth;\n        }\n        return 0;",
    "        long x = (long)Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        long x = (long)((Math.sqrt(1 + 24 * n) + 1) / 6);\n        if (x * (3 * x - 2) == n) {\n            return x;\n        }\n        return 0;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (3 * n * n - 2 * n);",
    "        return (long) (Math.sqrt(1 + 24 * n) + 1) / 6;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1.0) / 6.0;\n        return x == (long) x ? (long) x : -1;",
    "        double x = (Math.sqrt(24 * n + 1) + 1) / 6;\n        return x == (long) x ? x : -1;",
    "        long x = (long) Math.sqrt(2 * n + 1.0 / 4);\n        if (x * x == 2 * n + 1.0 / 4 && x % 2 == 1) {\n            return x;\n        }\n        return -1;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long nth = 0;\n        for (int i = 1; nth < n; i++) {\n            nth = i * (3 * i - 2);\n            if (nth == n) {\n                return nth;\n            }\n        }\n        return 0;",
    "        return (long) ((Math.sqrt(1 + 24 * n) + 1) / 6);",
    "        long x = (long) Math.sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n) {\n            if ((x + 1) % 6 == 0) {\n                return (x + 1) / 6;\n            }\n        }\n        return -1;",
    "        long nth = (long) (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (nth * (3 * nth - 2) == n) {\n            return nth;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long)Math.sqrt(2*n + 0.125);\n        if (x*(3*x-2) == 2*n) return x;\n        return -1;",
    "        long x = (long)Math.sqrt(1 + 24*n);\n        if (x*x == 1 + 24*n && (x + 1) % 6 == 0)\n            return (x + 1) / 6;\n        return 0;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return x == (long) x ? (long) x : -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return x == (long) x ? x : -1;",
    "        long r = (long)Math.sqrt(n);\n        if (r * r != n) return 0;\n        long d = r + 1;\n        if (d % 3 != 0) return 0;\n        long k = d / 3;\n        return k;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return x == (long) x ? (long) x : -1;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (int) x) {\n            return (long) x;\n        }\n        return 0;",
    "        // n = (3*n^2 - 2*n)/2\n        // n^2 + 2n - 2*n^2/3 = 0\n        // n^2 + 2n - 2n^2/3 = 0\n        // 3n^2 + 2n = 0\n        // 3n^2 + 2n - 0 = 0\n        // n = (-2 +- sqrt(4 + 12*0))/6\n        // n = (-2 +- sqrt(4))/6\n        // n = (-2 +- 2)/6\n        // n = (0 +- 2)/6\n        // n = 2/6 or -2/6\n        // n = 1/3 or -1/3\n        // n = 0.3333333333 or -0.3333333333\n        // n = 0.3333333333 or -0.3333333333\n        // n = 0.3333333333 or -0.3333333333\n        // n = 0.3333333333 or -0.3333333333\n        // n = 0.3333333333 or -0.3333333333\n        // n = 0.3333333333 or -0.3333333333\n        // n = 0.3333333333 or -0.3333333333\n        // n = 0.3333333333 or -0.3333333333\n        // n = 0.3333333333 or -0.3333333333\n        // n = 0.3333333333 or -0.3333333333\n        // n = 0.3333333333 or -0.3333333333\n        // n = 0.3333333333 or -0.3333333333\n        // n = 0.3333333333 or -0.3333333333\n        // n = 0.3333333333 or -0.3333333333\n        // n = 0.3333333333 or -0.3333333333\n        // n = 0.3333333333 or -0.3333333333\n        // n = 0.3333333333 or -0.3333333333\n        // n = 0.3333333333 or -0.3333333333\n        // n = 0.3333333333 or -0.3333333333\n        // n = 0.3333333333 or -0.3333333333\n        // n = 0",
    "        double a = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return a == (long) a ? a : -1;",
    "        return (long) (n * (3 * n - 2));",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        return (long) (Math.sqrt(1 + 24 * n) + 1) / 6;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (int)x) {\n            return (long)x;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(2 * n + 1.0 / 16.0);\n        if (x * x == 2 * n + 1.0 / 16.0 && x % 2 == 1) {\n            return x;\n        }\n        return 0;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        }\n        return -1;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        double x = (2 + Math.sqrt(4 + 12*n)) / 6;\n        return x == (long)x ? x : 0;",
    "        long x = (long)Math.sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n) {\n            return (x + 1) / 6;\n        }\n        return 0;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (int) x)\n            return (int) x;\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        double root = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (root == (long) root) {\n            return (long) root;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long a = (long)Math.sqrt(2*n+0.125);\n        if (a*a == 2*n+0.125) {\n            return a;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(1 + 24 * n);\n        if (a * a == 1 + 24 * n && (a + 1) % 6 == 0) {\n            return (a + 1) / 6;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n && (x % 2 == 1)) {\n            return x;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        return (long)((Math.sqrt(1 + 24 * n) + 1) / 6);",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        if (nth == n) {\n            return n;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        long m = (long) Math.sqrt(n);\n        if (m * m == n) {\n            return m;\n        }\n        return 0;",
    "        double a = (Math.sqrt(24 * n + 1) + 1) / 6;\n        if (a == (int) a) {\n            return (long) a;\n        }\n        return -1;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = (i * (3 * i - 2));\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        } else {\n            return -1;\n        }",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long a = (long)Math.sqrt(n);\n        if(a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long)Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return x == (long) x ? (long) x : -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        return nth;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n && (a + 1) % 4 == 0) {\n            return a;\n        }\n        return -1;",
    "        return (long) ((Math.sqrt(1 + 24 * n) + 1) / 6);",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        return nth;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = (i * ((3 * i) - 2));\n            i++;\n        }\n        return nth;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return x == (long) x ? (long) x : -1;",
    "        long nth = (long) (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (nth * (3 * nth - 2) == n)\n            return nth;\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long nthOctagonal = 0;\n        long i = 1;\n        while (nthOctagonal < n) {\n            nthOctagonal = i * (3 * i - 2);\n            i++;\n        }\n        if (nthOctagonal == n) {\n            return nthOctagonal;\n        } else {\n            return 0;\n        }",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return x == (long) x ? (long) x : -1;",
    "        long x = (long) Math.sqrt(2*n + 0.125);\n        if (x*(3*x-2) == n) {\n            return x;\n        }\n        return 0;",
    "        long nth = (long) Math.sqrt(2 * n + 1.0 / 4) - 1.0 / 2;\n        if (nth * (3 * nth - 2) == n) {\n            return nth;\n        }\n        return -1;",
    "        return (long) (3 * n * n - 2 * n);",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n && (x % 2 == 1)) {\n            return x;\n        }\n        return 0;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long m = (long) Math.sqrt(2 * n + 1.0 / 4);\n        return m * m == 2 * n + 1.0 / 4 ? m : -1;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        double x1 = (2 + Math.sqrt(4 + 12*n)) / 6;\n        double x2 = (2 - Math.sqrt(4 + 12*n)) / 6;\n        if (x1 == (int)x1) {\n            return (long)x1;\n        }\n        if (x2 == (int)x2) {\n            return (long)x2;\n        }\n        return -1;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        long a = 1, b = 1, c = -2 * n;\n        double d = Math.sqrt(b * b - 4 * a * c);\n        double r1 = (-b + d) / (2 * a);\n        double r2 = (-b - d) / (2 * a);\n        if (r1 < 0 || r2 < 0)\n            return -1;\n        if (r1 == Math.floor(r1))\n            return (long) r1;\n        if (r2 == Math.floor(r2))\n            return (long) r2;\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        // n = (3 * n^2 - 2 * n) / 2\n        // 3 * n^2 - 2 * n - 2 * n^2 = 0\n        // 5 * n^2 - 2 * n = 0\n        // n^2 - (2 / 5) * n = 0\n        // n = (2 / 5) +- sqrt((2 / 5)^2 - 4 * 1 * 0) / 2\n        // n = (2 / 5) +- sqrt(4 / 25) / 2\n        // n = (2 / 5) +- sqrt(1 / 25) / 2\n        // n = (2 / 5) +- 1 / 5 / 2\n        // n = (2 / 5) +- 1 / 10\n        // n = (2 +- 1) / 10\n        // n = 1 / 10\n        // n = 0.1\n        // n = 0\n        // n = (2 - 1) / 10\n        // n = 1 / 10\n        // n = 0.1\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n        // n = 0\n",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (Math.sqrt(1 + 24 * n) + 1) / 6;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        return nth;",
    "        // n = (3*n^2 - 2*n) / 2\n        // 3*n^2 - 2*n - 2*n^2 = 0\n        // n^2 - 2*n - 2*n^2 = 0\n        // n^2 - 4*n^2 - 2*n = 0\n        // -3*n^2 - 2*n = 0\n        // n^2 = -2*n / 3\n        // n = sqrt(-2*n / 3)\n        double n1 = Math.sqrt(-2*n / 3);\n        double n2 = -Math.sqrt(-2*n / 3);\n        if (n1 == (int)n1) {\n            return (long)n1;\n        }\n        if (n2 == (int)n2) {\n            return (long)n2;\n        }\n        return 0;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long nth = 0;\n        for (int i = 1; nth < n; i++) {\n            nth = i * (3 * i - 2);\n            if (nth == n) {\n                return n;\n            }\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(1 + 24 * n);\n        if (a * a == 1 + 24 * n) {\n            long b = (1 + a) / 6;\n            if (b * (3 * b - 2) == n) {\n                return b;\n            }\n        }\n        return 0;",
    "        long x = (long)Math.sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n && (x + 1) % 6 == 0)\n            return (x + 1) / 6;\n        return 0;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return x == (long)x ? (long)x : -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        return nth;",
    "        return (long) (Math.sqrt(1 + 24 * n) + 1) / 6;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        double root = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (root == (long) root) {\n            return (long) root;\n        }\n        return -1;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return (x == (int) x) ? (int) x : -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        long nth = 0;\n        for (int i = 1; i <= n; i++) {\n            nth = i * (3 * i - 2);\n        }\n        return nth;",
    "        long nth = (long) Math.sqrt(n);\n        if (nth * nth == n) {\n            return nth;\n        }\n        return 0;",
    "        // n = (3 * n^2 - 2 * n) / 2\n        long a = 3;\n        long b = -2;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.sqrt(d)) / (2 * a);\n        if (x1 * x1 * a + x1 * b + c == 0) return x1;\n        if (x2 * x2 * a + x2 * b + c == 0) return x2;\n        return 0;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return (x == (long) x) ? (long) x : -1;",
    "        long x = (long)Math.sqrt(n);\n        if (x * x == n)\n            return x;\n        return 0;",
    "        long r = (long)Math.sqrt(n);\n        if (r * r == n) {\n            return r;\n        }\n        return 0;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        return (long) (Math.sqrt(1 + 24 * n) + 1) / 6;",
    "        long x = (long)Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (int) x) {\n            return (int) x;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long) Math.sqrt(d)) / (2 * a);\n        long x2 = (-b - (long) Math.sqrt(d)) / (2 * a);\n        if (x1 < 0) {\n            return x2;\n        }\n        return x1;",
    "        return (long) (3 * n * n - 2 * n);",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (int) x) {\n            return (int) x;\n        }\n        return 0;",
    "        long a = (long)Math.sqrt(n);\n        if(a*a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return (long) x;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        double x1 = (2 + Math.sqrt(4 + 12*n)) / 6;\n        double x2 = (2 - Math.sqrt(4 + 12*n)) / 6;\n        if (x1 == (int)x1) {\n            return (long)x1;\n        } else if (x2 == (int)x2) {\n            return (long)x2;\n        } else {\n            return 0;\n        }",
    "        double d = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return d == (long) d ? (long) d : 0;",
    "        long m = (long) Math.sqrt(n);\n        if (m * m == n) {\n            return m;\n        } else {\n            return -1;\n        }",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (int)x)\n            return (long)x;\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        double a = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return a == (long) a ? (long) a : -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (Math.sqrt(1 + 24 * n) + 1) / 6;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        double a = (Math.sqrt(1 + 24 * n) + 1.0) / 6.0;\n        return a == (long)a ? (long)a : -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long i = 1;\n        while (true) {\n            long oct = i * (3 * i - 2);\n            if (oct == n) {\n                return i;\n            } else if (oct > n) {\n                return -1;\n            }\n            i++;\n        }",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        if (nth == n) {\n            return n;\n        }\n        return -1;",
    "        long i = 1;\n        while (true) {\n            long x = (long) (i * (3 * i - 2));\n            if (x == n) {\n                return i;\n            }\n            if (x > n) {\n                return -1;\n            }\n            i++;\n        }",
    "        long x = (long) Math.sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n) {\n            if ((x + 1) % 6 == 0) {\n                return (x + 1) / 6;\n            }\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        return (long) (Math.sqrt(1 + 24 * n) + 1) / 6;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (int)x) {\n            return (long)x;\n        }\n        return -1;",
    "        return (long) (n * (3 * n - 2));",
    "        return (long)((Math.sqrt(1 + 24 * n) + 1) / 6);",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long nth = 0;\n        for (long i = 1; i < n; i++) {\n            nth = i * (3 * i - 2);\n        }\n        return nth;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long)Math.sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n && (x + 1) % 6 == 0) {\n            return x;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = (i * (3 * i - 2));\n            i++;\n        }\n        if (nth == n) {\n            return 1;\n        }\n        return 0;",
    "        return (long) (Math.sqrt(1 + 24 * n) + 1) / 6;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n) {\n            long y = (1 + x) / 6;\n            if (y * (3 * y - 2) == n) {\n                return y;\n            }\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        } else {\n            return 0;\n        }",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (int) x) {\n            return (long) x;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(1 + 24 * n);\n        if (x * x != 1 + 24 * n) {\n            return -1;\n        }\n        x += 1;\n        if (x % 6 != 0) {\n            return -1;\n        }\n        x /= 6;\n        return x;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (int)x)\n            return (long)x;\n        else\n            return -1;",
    "        long nth = 0;\n        for (int i = 1; i < n; i++) {\n            nth += i * 3 - 2;\n        }\n        return nth;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;"
  ]
}