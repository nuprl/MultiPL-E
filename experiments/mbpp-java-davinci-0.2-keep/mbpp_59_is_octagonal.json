{
  "name": "mbpp_59_is_octagonal",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the nth octagonal number.\n    public static long isOctagonal(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(isOctagonal((5l)) == (65l));\n    assert(isOctagonal((10l)) == (280l));\n    assert(isOctagonal((15l)) == (645l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long x = (long)Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        long m = (long) Math.sqrt(n);\n        if (m * m == n && (m + 1) % 3 == 0) {\n            return m;\n        }\n        return 0;",
    "        long x = (long)Math.sqrt(2*n+0.25);\n        if (x*x == 2*n+0.25 && x%2 == 1) {\n            return x;\n        }\n        return 0;",
    "        return (long) (Math.sqrt(1 + 24 * n) + 1) / 6;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long)Math.sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n && (x + 1) % 6 == 0) {\n            return (x + 1) / 6;\n        }\n        return -1;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return x == (long) x ? x : -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        double x = (2 + Math.sqrt(4 + 12*n)) / 6;\n        if (x == (int)x) {\n            return n;\n        }\n        return 0;",
    "        return (long)((Math.sqrt(1 + 24*n) + 1)/6);",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long x = (long)Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long nth = (long) (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (nth * (3 * nth - 2) == n) {\n            return nth;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (Math.sqrt(1 + 24 * n) + 1) / 6;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (3 + Math.sqrt(9 + 8 * n)) / 2;"
  ]
}