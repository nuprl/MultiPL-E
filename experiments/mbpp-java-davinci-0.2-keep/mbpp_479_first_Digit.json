{
  "name": "mbpp_479_first_Digit",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to find the first digit of a given number.\n    public static long firstDigit(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(firstDigit((123l)) == (1l));\n    assert(firstDigit((456l)) == (4l));\n    assert(firstDigit((12l)) == (1l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long firstDigit = 0;\n        while (n > 0) {\n            firstDigit = n % 10;\n            n /= 10;\n        }\n        return firstDigit;",
    "        String s = Long.toString(n);\n        return Long.parseLong(s.substring(0, 1));",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        String s = Long.toString(n);\n        return Long.parseLong(s.substring(0, 1));",
    "        while (n > 9) {\n            n /= 10;\n        }\n        return n;",
    "        return Long.parseLong(Long.toString(n).substring(0, 1));",
    "        if (n < 0) {\n            n = -n;\n        }\n        while (n >= 10) {\n            n /= 10;\n        }\n        return n;",
    "        if (n < 0) {\n            n = -n;\n        }\n        while (n >= 10) {\n            n /= 10;\n        }\n        return n;",
    "        return Long.parseLong(String.valueOf(n).substring(0, 1));",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        String s = Long.toString(n);\n        return Long.parseLong(s.substring(0, 1));",
    "        while (n > 9) {\n            n /= 10;\n        }\n        return n;",
    "        while (n > 9) {\n            n /= 10;\n        }\n        return n;",
    "        return n / (long) Math.pow(10, Math.floor(Math.log10(n)));",
    "        while (n > 9) {\n            n = n / 10;\n        }\n        return n;",
    "        while (n > 9) {\n            n /= 10;\n        }\n        return n;",
    "        return n / (long) Math.pow(10, Math.floor(Math.log10(n)));",
    "        while (n >= 10) {\n            n /= 10;\n        }\n        return n;",
    "        return n / (long) Math.pow(10, Math.floor(Math.log10(n)));",
    "        return n / 10;",
    "        // Write your code here\n        String s = Long.toString(n);\n        return Long.parseLong(s.substring(0,1));",
    "        while (n >= 10) {\n            n /= 10;\n        }\n        return n;"
  ]
}