{
  "name": "mbpp_640_remove_parenthesis",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to remove the parenthesis and what is inbetween them from a string.\n    public static String removeParenthesis(ArrayList<String> items) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(removeParenthesis((new ArrayList<String>(Arrays.asList((String)\"python (chrome)\")))).equals((\"python\")));\n    assert(removeParenthesis((new ArrayList<String>(Arrays.asList((String)\"string(.abc)\")))).equals((\"string\")));\n    assert(removeParenthesis((new ArrayList<String>(Arrays.asList((String)\"alpha(num)\")))).equals((\"alpha\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        StringBuilder sb = new StringBuilder();\n        for (String item : items) {\n            if (item.equals(\"(\")) {\n                continue;\n            } else if (item.equals(\")\")) {\n                continue;\n            } else {\n                sb.append(item);\n            }\n        }\n        return sb.toString();",
    "        StringBuilder sb = new StringBuilder();\n        for (String item: items) {\n            if (item.equals(\"(\")) {\n                continue;\n            } else if (item.equals(\")\")) {\n                continue;\n            } else {\n                sb.append(item);\n            }\n        }\n        return sb.toString();",
    "        StringBuilder sb = new StringBuilder();\n        for (String item : items) {\n            if (item.equals(\"(\")) {\n                continue;\n            } else if (item.equals(\")\")) {\n                continue;\n            } else {\n                sb.append(item);\n            }\n        }\n        return sb.toString();",
    "        StringBuilder sb = new StringBuilder();\n        for (String item : items) {\n            if (item.equals(\"(\")) {\n                continue;\n            } else if (item.equals(\")\")) {\n                continue;\n            } else {\n                sb.append(item);\n            }\n        }\n        return sb.toString();",
    "        StringBuilder sb = new StringBuilder();\n        for (String item : items) {\n            if (item.equals(\"(\")) {\n                continue;\n            } else if (item.equals(\")\")) {\n                continue;\n            } else {\n                sb.append(item);\n            }\n        }\n        return sb.toString();",
    "        StringBuilder sb = new StringBuilder();\n        for (String item : items) {\n            if (item.length() == 1) {\n                sb.append(item);\n            } else if (item.charAt(0) == '(') {\n                sb.append(item.substring(1, item.length() - 1));\n            }\n        }\n        return sb.toString();",
    "        StringBuilder sb = new StringBuilder();\n        for (String item : items) {\n            if (item.equals(\"(\")) {\n                continue;\n            } else if (item.equals(\")\")) {\n                continue;\n            } else {\n                sb.append(item);\n            }\n        }\n        return sb.toString();",
    "        StringBuilder sb = new StringBuilder();\n        for (String item : items) {\n            if (item.equals(\"(\")) {\n                continue;\n            } else if (item.equals(\")\")) {\n                continue;\n            } else {\n                sb.append(item);\n            }\n        }\n        return sb.toString();",
    "        StringBuilder sb = new StringBuilder();\n        for (String item : items) {\n            if (item.equals(\"(\")) {\n                continue;\n            } else if (item.equals(\")\")) {\n                continue;\n            } else {\n                sb.append(item);\n            }\n        }\n        return sb.toString();",
    "        StringBuilder sb = new StringBuilder();\n        for (String item : items) {\n            if (item.equals(\"(\")) {\n                sb.append(\"\");\n            } else if (item.equals(\")\")) {\n                sb.append(\"\");\n            } else {\n                sb.append(item);\n            }\n        }\n        return sb.toString();",
    "        StringBuilder sb = new StringBuilder();\n        for (String item : items) {\n            if (item.equals(\"(\")) {\n                sb.append(\"\");\n            } else if (item.equals(\")\")) {\n                sb.append(\"\");\n            } else {\n                sb.append(item);\n            }\n        }\n        return sb.toString();",
    "        StringBuilder sb = new StringBuilder();\n        for (String item : items) {\n            if (item.equals(\"(\")) {\n                continue;\n            } else if (item.equals(\")\")) {\n                continue;\n            } else {\n                sb.append(item);\n            }\n        }\n        return sb.toString();",
    "        StringBuilder sb = new StringBuilder();\n        for (String item : items) {\n            if (item.equals(\"(\")) {\n                continue;\n            }\n            if (item.equals(\")\")) {\n                continue;\n            }\n            sb.append(item);\n        }\n        return sb.toString();",
    "        StringBuilder sb = new StringBuilder();\n        for (String item : items) {\n            if (item.equals(\"(\")) {\n                while (!items.get(items.indexOf(item) + 1).equals(\")\")) {\n                    items.remove(items.indexOf(item) + 1);\n                }\n                items.remove(items.indexOf(item) + 1);\n                items.remove(items.indexOf(item));\n            }\n        }\n        for (String item : items) {\n            sb.append(item);\n        }\n        return sb.toString();",
    "        StringBuilder sb = new StringBuilder();\n        for (String item : items) {\n            if (item.equals(\"(\")) {\n                int index = items.indexOf(item);\n                int count = 0;\n                while (true) {\n                    if (items.get(index).equals(\"(\")) {\n                        count++;\n                    } else if (items.get(index).equals(\")\")) {\n                        count--;\n                    }\n                    if (count == 0) {\n                        break;\n                    }\n                    index++;\n                }\n                items.remove(index);\n            } else if (item.equals(\")\")) {\n                int index = items.indexOf(item);\n                int count = 0;\n                while (true) {\n                    if (items.get(index).equals(\")\")) {\n                        count++;\n                    } else if (items.get(index).equals(\"(\")) {\n                        count--;\n                    }\n                    if (count == 0) {\n                        break;\n                    }\n                    index--;\n                }\n                items.remove(index);\n            } else {\n                sb.append(item);\n            }\n        }\n        return sb.toString();",
    "        StringBuilder sb = new StringBuilder();\n        for (String item : items) {\n            if (item.equals(\"(\")) {\n                continue;\n            } else if (item.equals(\")\")) {\n                continue;\n            } else {\n                sb.append(item);\n            }\n        }\n        return sb.toString();",
    "        String result = \"\";\n        for (int i = 0; i < items.size(); i++) {\n            String item = items.get(i);\n            if (item.contains(\"(\")) {\n                int start = item.indexOf(\"(\");\n                int end = item.indexOf(\")\");\n                result += item.substring(0, start);\n                result += item.substring(end + 1);\n            } else {\n                result += item;\n            }\n        }\n        return result;",
    "        StringBuilder sb = new StringBuilder();\n        for (String item : items) {\n            if (item.charAt(0) != '(' && item.charAt(item.length() - 1) != ')') {\n                sb.append(item);\n            }\n        }\n        return sb.toString();",
    "        StringBuilder sb = new StringBuilder();\n        for (String item : items) {\n            if (item.equals(\"(\")) {\n                sb.append(\"\");\n            } else if (item.equals(\")\")) {\n                sb.append(\"\");\n            } else {\n                sb.append(item);\n            }\n        }\n        return sb.toString();",
    "        StringBuilder sb = new StringBuilder();\n        for (String item : items) {\n            if (item.equals(\"(\")) {\n                continue;\n            } else if (item.equals(\")\")) {\n                continue;\n            } else {\n                sb.append(item);\n            }\n        }\n        return sb.toString();"
  ]
}