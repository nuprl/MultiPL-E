{
  "name": "mbpp_87_merge_dictionaries_three",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to merge three dictionaries into a single dictionary.\n    public static HashMap<String,String> mergeDictionariesThree(HashMap<String,String> dict1, HashMap<String,String> dict2, HashMap<String,String> dict3) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_87_merge_dictionaries_three.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(mergeDictionariesThree((new HashMap<String,String>(Map.of(\"R\", \"Red\", \"B\", \"Black\", \"P\", \"Pink\"))), (new HashMap<String,String>(Map.of(\"G\", \"Green\", \"W\", \"White\"))), (new HashMap<String,String>(Map.of(\"O\", \"Orange\", \"W\", \"White\", \"B\", \"Black\")))).equals((new HashMap<String,String>(Map.of(\"B\", \"Black\", \"R\", \"Red\", \"P\", \"Pink\", \"G\", \"Green\", \"W\", \"White\", \"O\", \"Orange\")))));\n    assert(mergeDictionariesThree((new HashMap<String,String>(Map.of(\"R\", \"Red\", \"B\", \"Black\", \"P\", \"Pink\"))), (new HashMap<String,String>(Map.of(\"G\", \"Green\", \"W\", \"White\"))), (new HashMap<String,String>(Map.of(\"L\", \"lavender\", \"B\", \"Blue\")))).equals((new HashMap<String,String>(Map.of(\"W\", \"White\", \"P\", \"Pink\", \"B\", \"Black\", \"R\", \"Red\", \"G\", \"Green\", \"L\", \"lavender\")))));\n    assert(mergeDictionariesThree((new HashMap<String,String>(Map.of(\"R\", \"Red\", \"B\", \"Black\", \"P\", \"Pink\"))), (new HashMap<String,String>(Map.of(\"L\", \"lavender\", \"B\", \"Blue\"))), (new HashMap<String,String>(Map.of(\"G\", \"Green\", \"W\", \"White\")))).equals((new HashMap<String,String>(Map.of(\"B\", \"Black\", \"P\", \"Pink\", \"R\", \"Red\", \"G\", \"Green\", \"L\", \"lavender\", \"W\", \"White\")))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        HashMap<String,String> result = new HashMap<String,String>();\n        result.putAll(dict1);\n        result.putAll(dict2);\n        result.putAll(dict3);\n        return result;",
    "        HashMap<String,String> result = new HashMap<String,String>();\n        result.putAll(dict1);\n        result.putAll(dict2);\n        result.putAll(dict3);\n        return result;",
    "        HashMap<String,String> mergedDict = new HashMap<String,String>();\n        mergedDict.putAll(dict1);\n        mergedDict.putAll(dict2);\n        mergedDict.putAll(dict3);\n        return mergedDict;",
    "        HashMap<String,String> result = new HashMap<String,String>();\n        result.putAll(dict1);\n        result.putAll(dict2);\n        result.putAll(dict3);\n        return result;",
    "        HashMap<String,String> result = new HashMap<String,String>();\n        result.putAll(dict1);\n        result.putAll(dict2);\n        result.putAll(dict3);\n        return result;",
    "        HashMap<String,String> result = new HashMap<String,String>();\n        result.putAll(dict1);\n        result.putAll(dict2);\n        result.putAll(dict3);\n        return result;",
    "        HashMap<String,String> result = new HashMap<String,String>();\n        result.putAll(dict1);\n        result.putAll(dict2);\n        result.putAll(dict3);\n        return result;",
    "        HashMap<String,String> mergedDict = new HashMap<String,String>();\n        mergedDict.putAll(dict1);\n        mergedDict.putAll(dict2);\n        mergedDict.putAll(dict3);\n        return mergedDict;",
    "        HashMap<String,String> result = new HashMap<String,String>();\n        result.putAll(dict1);\n        result.putAll(dict2);\n        result.putAll(dict3);\n        return result;",
    "        HashMap<String,String> mergedDict = new HashMap<String,String>();\n        mergedDict.putAll(dict1);\n        mergedDict.putAll(dict2);\n        mergedDict.putAll(dict3);\n        return mergedDict;",
    "        HashMap<String,String> result = new HashMap<String,String>();\n        result.putAll(dict1);\n        result.putAll(dict2);\n        result.putAll(dict3);\n        return result;",
    "        HashMap<String,String> result = new HashMap<String,String>();\n        result.putAll(dict1);\n        result.putAll(dict2);\n        result.putAll(dict3);\n        return result;",
    "        HashMap<String,String> result = new HashMap<>();\n        for (Map.Entry<String,String> entry : dict1.entrySet()) {\n            result.put(entry.getKey(), entry.getValue());\n        }\n        for (Map.Entry<String,String> entry : dict2.entrySet()) {\n            result.put(entry.getKey(), entry.getValue());\n        }\n        for (Map.Entry<String,String> entry : dict3.entrySet()) {\n            result.put(entry.getKey(), entry.getValue());\n        }\n        return result;",
    "        HashMap<String,String> result = new HashMap<String,String>();\n        result.putAll(dict1);\n        result.putAll(dict2);\n        result.putAll(dict3);\n        return result;",
    "        HashMap<String,String> result = new HashMap<>();\n        result.putAll(dict1);\n        result.putAll(dict2);\n        result.putAll(dict3);\n        return result;",
    "        HashMap<String,String> result = new HashMap<String,String>();\n        result.putAll(dict1);\n        result.putAll(dict2);\n        result.putAll(dict3);\n        return result;",
    "        HashMap<String,String> result = new HashMap<String,String>();\n        result.putAll(dict1);\n        result.putAll(dict2);\n        result.putAll(dict3);\n        return result;",
    "        HashMap<String,String> result = new HashMap<String,String>();\n        result.putAll(dict1);\n        result.putAll(dict2);\n        result.putAll(dict3);\n        return result;",
    "        HashMap<String,String> mergedDict = new HashMap<String,String>();\n        mergedDict.putAll(dict1);\n        mergedDict.putAll(dict2);\n        mergedDict.putAll(dict3);\n        return mergedDict;",
    "        HashMap<String,String> result = new HashMap<String,String>();\n        result.putAll(dict1);\n        result.putAll(dict2);\n        result.putAll(dict3);\n        return result;"
  ]
}