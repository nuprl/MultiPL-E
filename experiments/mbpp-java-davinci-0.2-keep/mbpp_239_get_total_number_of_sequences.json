{
  "name": "mbpp_239_get_total_number_of_sequences",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    public static long getTotalNumberOfSequences(long m, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(getTotalNumberOfSequences((10l), (4l)) == (4l));\n    assert(getTotalNumberOfSequences((5l), (2l)) == (6l));\n    assert(getTotalNumberOfSequences((16l), (3l)) == (84l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n == 1) {\n            return m;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[1] = m;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = dp[i - 1] * (m - 1);\n        }\n        return dp[(int)n];",
    "        // Write your code here.\n        long[][] dp = new long[(int)m+1][(int)n+1];\n        for(int i = 0; i <= m; i++) {\n            dp[i][0] = 1;\n        }\n        for(int i = 1; i <= m; i++) {\n            for(int j = 1; j <= n; j++) {\n                for(int k = 2*i; k <= m; k++) {\n                    dp[k][j] += dp[i][j-1];\n                }\n            }\n        }\n        long sum = 0;\n        for(int i = 1; i <= m; i++) {\n            sum += dp[i][n];\n        }\n        return sum;",
    "        // Write your code here.\n        if(n == 0) return 1;\n        long[] dp = new long[(int)m+1];\n        dp[0] = 1;\n        for(int i = 1; i <= m; i++){\n            for(int j = i; j <= m; j += i){\n                dp[j] += dp[i-1];\n            }\n        }\n        return dp[(int)m];",
    "        long[][] dp = new long[(int)m + 1][(int)n + 1];\n        for (int i = 0; i <= m; i++) {\n            dp[i][0] = 1;\n        }\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (i >= 2) {\n                    dp[i][j] += dp[i - 1][j - 1];\n                }\n                dp[i][j] += dp[i - 1][j];\n            }\n        }\n        return dp[(int)m][(int)n];",
    "        // Write your code here.\n        if(n == 0) return 1;\n        long total = 0;\n        for(long i = 2; i <= m; i++){\n            total += getTotalNumberOfSequences(i, n - 1);\n        }\n        return total;",
    "        // Write your code here.\n        if(n == 1) return m;\n        long[] dp = new long[(int)n];\n        dp[0] = m;\n        for(int i = 1; i < n; i++) {\n            dp[i] = dp[i-1] * (m-1);\n        }\n        return dp[(int)n-1];",
    "        long[][] dp = new long[(int)n + 1][(int)m + 1];\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= m; j++) {\n                if (i == 0) {\n                    dp[i][j] = 1;\n                } else if (j == 0) {\n                    dp[i][j] = 0;\n                } else {\n                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j / 2];\n                }\n            }\n        }\n        return dp[(int)n][(int)m];",
    "        // Write your code here.\n        long[][] dp = new long[(int)m+1][(int)n+1];\n        for(int i = 0; i <= m; i++) {\n            dp[i][0] = 1;\n        }\n        for(int i = 1; i <= m; i++) {\n            for(int j = 1; j <= n; j++) {\n                for(int k = 2*i; k <= m; k++) {\n                    dp[i][j] += dp[k][j-1];\n                }\n            }\n        }\n        return dp[1][(int)n];",
    "        // Write your code here.\n        long[] dp = new long[(int)n+1];\n        dp[0] = 1;\n        for(int i = 1; i <= n; i++){\n            for(int j = 2; j <= m; j++){\n                if(i-j >= 0){\n                    dp[i] += dp[i-j];\n                }\n            }\n        }\n        return dp[(int)n];",
    "        long[][] dp = new long[(int)n + 1][(int)m + 1];\n        for (int i = 0; i <= m; i++) {\n            dp[1][i] = 1;\n        }\n        for (int i = 2; i <= n; i++) {\n            for (int j = 2; j <= m; j++) {\n                dp[i][j] = dp[i][j - 1] + dp[i - 1][j / 2];\n            }\n        }\n        return dp[(int)n][(int)m];",
    "        // Write your code here.\n        long[][] dp = new long[(int) n + 1][(int) m + 1];\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= m; j++) {\n                if (i == 0) {\n                    dp[i][j] = 1;\n                } else if (j == 0) {\n                    dp[i][j] = 0;\n                } else {\n                    dp[i][j] = dp[i][j - 1] + (j >= 2 ? dp[i - 1][j / 2] : 0);\n                }\n            }\n        }\n        return dp[(int) n][(int) m];",
    "        // Write your code here.\n        long[][] dp = new long[(int)n+1][(int)m+1];\n        for(int i = 0; i <= n; i++){\n            for(int j = 0; j <= m; j++){\n                if(i == 0)\n                    dp[i][j] = 1;\n                else if(j == 0)\n                    dp[i][j] = 0;\n                else{\n                    dp[i][j] = dp[i-1][j];\n                    if(j >= 2*i)\n                        dp[i][j] += dp[i-1][(int)j-2*(int)i];\n                }\n            }\n        }\n        return dp[(int)n][(int)m];",
    "        long[][] dp = new long[(int)n + 1][(int)m + 1];\n        for (int i = 0; i <= m; i++) {\n            dp[1][i] = 1;\n        }\n        for (int i = 2; i <= n; i++) {\n            for (int j = 2; j <= m; j++) {\n                for (int k = 2 * j; k <= j; k++) {\n                    dp[i][j] += dp[i - 1][k];\n                }\n            }\n        }\n        return dp[(int)n][(int)m];",
    "        // Write your code here.\n        long[][] dp = new long[(int)m+1][(int)n+1];\n        for(int i = 0; i <= m; i++) {\n            dp[i][0] = 0;\n        }\n        for(int i = 0; i <= n; i++) {\n            dp[0][i] = 0;\n        }\n        for(int i = 1; i <= m; i++) {\n            for(int j = 1; j <= n; j++) {\n                dp[i][j] = dp[i-1][j] + dp[i/2][j-1];\n            }\n        }\n        return dp[(int)m][(int)n];",
    "        // Write your code here.\n        long[][] dp = new long[(int)n+1][(int)m+1];\n        for(int i = 0; i < n+1; i++){\n            for(int j = 0; j < m+1; j++){\n                dp[i][j] = -1;\n            }\n        }\n        return getTotalNumberOfSequences(m, n, dp);",
    "        if (n == 0) {\n            return 1;\n        }\n        long total = 0;\n        for (long i = 2; i <= m; i++) {\n            total += getTotalNumberOfSequences(i, n - 1);\n        }\n        return total;",
    "        long[][] dp = new long[(int)m + 1][(int)n + 1];\n        for (int i = 0; i <= m; i++) {\n            dp[i][0] = 1;\n        }\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                for (int k = 2 * i; k <= m; k++) {\n                    dp[k][j] += dp[i][j - 1];\n                }\n            }\n        }\n        long result = 0;\n        for (int i = 1; i <= m; i++) {\n            result += dp[i][n];\n        }\n        return result;",
    "        long[][] dp = new long[(int)m+1][(int)n+1];\n        for(int i = 0; i <= m; i++) {\n            dp[i][0] = 1;\n        }\n        for(int i = 1; i <= m; i++) {\n            for(int j = 1; j <= n; j++) {\n                for(int k = 2*i; k <= m; k++) {\n                    dp[k][j] += dp[i][j-1];\n                }\n            }\n        }\n        long sum = 0;\n        for(int i = 1; i <= m; i++) {\n            sum += dp[i][n];\n        }\n        return sum;",
    "        // Write your code here.\n        long[][] dp = new long[(int)n + 1][(int)m + 1];\n        for(int i = 0; i <= m; i++) {\n            dp[1][i] = 1;\n        }\n        for(int i = 2; i <= n; i++) {\n            for(int j = 1; j <= m; j++) {\n                for(int k = 2 * j; k <= m; k++) {\n                    dp[i][j] += dp[i - 1][k];\n                }\n            }\n        }\n        long result = 0;\n        for(int i = 1; i <= m; i++) {\n            result += dp[(int)n][i];\n        }\n        return result;",
    "        // Write your code here.\n        if(n == 0) return 1;\n        long count = 0;\n        for(long i = 2; i <= m; i++){\n            count += getTotalNumberOfSequences(i, n - 1);\n        }\n        return count;"
  ]
}