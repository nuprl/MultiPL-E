{
  "name": "mbpp_308_large_product",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    public static ArrayList<Long> largeProduct(ArrayList<Long> nums1, ArrayList<Long> nums2, long N) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(largeProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)8l, (long)9l, (long)10l, (long)6l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)60l, (long)54l, (long)50l)))));\n    assert(largeProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)8l, (long)9l, (long)10l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)60l, (long)54l, (long)50l, (long)48l)))));\n    assert(largeProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)8l, (long)9l, (long)10l, (long)6l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)60l, (long)54l, (long)50l, (long)48l, (long)45l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for(int i = 0; i < nums1.size(); i++) {\n            for(int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products);\n        Collections.reverse(products);\n        for(int i = 0; i < N; i++) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products, Collections.reverseOrder());\n        for (int i = 0; i < N; i++) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> temp = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                temp.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(temp);\n        for (int i = 0; i < N; i++) {\n            result.add(temp.get(temp.size() - i - 1));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0() * pq.poll().getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Long n1 : nums1) {\n            for (Long n2 : nums2) {\n                pq.add(new Pair<>(n1 * n2, n1));\n                if (pq.size() > N) {\n                    pq.poll();\n                }\n            }\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            long diff = b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1();\n            if (diff > 0) return 1;\n            else if (diff < 0) return -1;\n            else return 0;\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0() * p.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Pair<Long, Long>> products = new ArrayList<Pair<Long, Long>>();\n        for (Long n1 : nums1) {\n            for (Long n2 : nums2) {\n                products.add(new Pair<Long, Long>(n1, n2));\n            }\n        }\n        Collections.sort(products, new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p2.getValue0() * p2.getValue1() - p1.getValue0() * p1.getValue1());\n            }\n        });\n        for (int i = 0; i < N; i++) {\n            result.add(products.get(i).getValue0() * products.get(i).getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Triplet<Long, Long, Long>> pq = new PriorityQueue<Triplet<Long, Long, Long>>(new Comparator<Triplet<Long, Long, Long>>() {\n            public int compare(Triplet<Long, Long, Long> t1, Triplet<Long, Long, Long> t2) {\n                return t2.getValue1().compareTo(t1.getValue1());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Triplet<Long, Long, Long>(num1, num2, num1 * num2));\n            }\n        }\n        while (N > 0) {\n            result.add(pq.poll().getValue3());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (Long n1 : nums1) {\n            for (Long n2 : nums2) {\n                pq.add(new Pair<>(n1, n2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0() * p.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (Long n1 : nums1) {\n            for (Long n2 : nums2) {\n                pq.add(new Pair<Long, Long>(n1 * n2, n1));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> Long.compare(b.getValue0(), a.getValue0()));\n        for (long i : nums1) {\n            for (long j : nums2) {\n                pq.add(new Pair<>(i * j, new Pair<>(i, j)));\n            }\n        }\n        while (N-- > 0) {\n            Pair<Long, Pair<Long, Long>> p = pq.poll();\n            result.add(p.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<Pair<Long, Pair<Long, Long>>>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            public int compare(Pair<Long, Pair<Long, Long>> a, Pair<Long, Pair<Long, Long>> b) {\n                return -1 * a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (long i = 0; i < nums1.size(); i++) {\n            for (long j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get((int)i) * nums2.get((int)j), Pair.with(i, j)));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Pair<Long, Long>> p = pq.poll();\n            result.add(p.getValue0());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() - a.getValue0()));\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1 * num2, new Pair<>(num1, num2)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> pair = pq.poll();\n            result.add(pair.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = 0; i < N; i++) {\n            long max = 0;\n            long max1 = 0;\n            long max2 = 0;\n            for (long j = 0; j < nums1.size(); j++) {\n                for (long k = 0; k < nums2.size(); k++) {\n                    if (nums1.get((int)j) * nums2.get((int)k) > max) {\n                        max = nums1.get((int)j) * nums2.get((int)k);\n                        max1 = nums1.get((int)j);\n                        max2 = nums2.get((int)k);\n                    }\n                }\n            }\n            result.add(max);\n            nums1.remove(max1);\n            nums2.remove(max2);\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() - a.getValue0()));\n        for (Long a : nums1) {\n            for (Long b : nums2) {\n                pq.add(new Pair<>(a * b, new Pair<>(a, b)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> p = pq.poll();\n            result.add(p.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> o1, Pair<Long, Pair<Long, Long>> o2) {\n                return o2.getValue0().compareTo(o1.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) * nums2.get(j), Pair.with(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0() * pq.poll().getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < N; i++) {\n            long max = Long.MIN_VALUE;\n            int index = -1;\n            for (int j = 0; j < nums1.size(); j++) {\n                for (int k = 0; k < nums2.size(); k++) {\n                    long product = nums1.get(j) * nums2.get(k);\n                    if (product > max) {\n                        max = product;\n                        index = j;\n                    }\n                }\n            }\n            result.add(max);\n            nums1.remove(index);\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> p1, Pair<Long, Pair<Long, Long>> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (long n1 : nums1) {\n            for (long n2 : nums2) {\n                pq.add(Pair.with(n1 * n2, Pair.with(n1, n2)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(Comparator.comparingLong(Pair::getValue1));\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(pair.getValue0() * pair.getValue1());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products);\n        Collections.reverse(products);\n        for (int i = 0; i < N; i++) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(b.getValue0() - a.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1 * num2, num1));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<Pair<Long, Pair<Long, Long>>>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            public int compare(Pair<Long, Pair<Long, Long>> a, Pair<Long, Pair<Long, Long>> b) {\n                return (int)(b.getValue0() - a.getValue0());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<Long, Pair<Long, Long>>(num1 * num2, new Pair<Long, Long>(num1, num2)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<Pair<Long, Pair<Long, Long>>>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            public int compare(Pair<Long, Pair<Long, Long>> a, Pair<Long, Pair<Long, Long>> b) {\n                return (int)(b.getValue0() - a.getValue0());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                long product = num1 * num2;\n                if (pq.size() < N) {\n                    pq.add(new Pair<Long, Pair<Long, Long>>(product, new Pair<Long, Long>(num1, num2)));\n                } else {\n                    if (product < pq.peek().getValue0()) {\n                        pq.poll();\n                        pq.add(new Pair<Long, Pair<Long, Long>>(product, new Pair<Long, Long>(num1, num2)));\n                    }\n                }\n            }\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) * nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (nums1.size() == 0 || nums2.size() == 0) return result;\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<Pair<Long, Pair<Long, Long>>>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            public int compare(Pair<Long, Pair<Long, Long>> a, Pair<Long, Pair<Long, Long>> b) {\n                return (int)(b.getValue0() - a.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Pair<Long, Long>>(nums1.get(i) * nums2.get(j), new Pair<Long, Long>((long)i, (long)j)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> p = pq.poll();\n            result.add(p.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < N; i++) {\n            long max = Long.MIN_VALUE;\n            int maxIndex = -1;\n            for (int j = 0; j < nums1.size(); j++) {\n                long curr = nums1.get(j);\n                if (curr > max) {\n                    max = curr;\n                    maxIndex = j;\n                }\n            }\n            nums1.set(maxIndex, Long.MIN_VALUE);\n            max = Long.MIN_VALUE;\n            maxIndex = -1;\n            for (int j = 0; j < nums2.size(); j++) {\n                long curr = nums2.get(j);\n                if (curr > max) {\n                    max = curr;\n                    maxIndex = j;\n                }\n            }\n            nums2.set(maxIndex, Long.MIN_VALUE);\n            result.add(max * max);\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products);\n        Collections.reverse(products);\n        for (int i = 0; i < N; i++) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> Long.compare(b.getValue0() * b.getValue1(), a.getValue0() * a.getValue1()));\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(pair.getValue0() * pair.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<Pair<Long, Pair<Long, Long>>>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            public int compare(Pair<Long, Pair<Long, Long>> a, Pair<Long, Pair<Long, Long>> b) {\n                return -a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<Long, Pair<Long, Long>>(num1 * num2, new Pair<Long, Long>(num1, num2)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> pair = pq.poll();\n            result.add(pair.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products);\n        Collections.reverse(products);\n        for (int i = 0; i < N; i++) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            if (a.getValue0() * a.getValue1() > b.getValue0() * b.getValue1()) {\n                return -1;\n            } else if (a.getValue0() * a.getValue1() < b.getValue0() * b.getValue1()) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0() * pq.poll().getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (N-- > 0) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(pair.getValue0() * pair.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products);\n        for (int i = products.size() - 1; i >= products.size() - N; i--) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> (int) (b.getValue0() - a.getValue0()));\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) * nums2.get(j), new Pair<>(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products);\n        Collections.reverse(products);\n        for (int i = 0; i < N; i++) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> nums1Sorted = new ArrayList<Long>(nums1);\n        ArrayList<Long> nums2Sorted = new ArrayList<Long>(nums2);\n        Collections.sort(nums1Sorted);\n        Collections.sort(nums2Sorted);\n        Collections.reverse(nums1Sorted);\n        Collections.reverse(nums2Sorted);\n        for (long i = 0; i < N; i++) {\n            result.add(nums1Sorted.get((int)i) * nums2Sorted.get((int)i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        // Write your code here\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) * nums2.get(j), (long)i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return -1 * p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1 * num2, num1));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<Pair<Long, Pair<Long, Long>>>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            public int compare(Pair<Long, Pair<Long, Long>> a, Pair<Long, Pair<Long, Long>> b) {\n                return (int)(b.getValue0() - a.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Pair<Long, Long>>(nums1.get(i) * nums2.get(j), new Pair<Long, Long>((long)i, (long)j)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> p = pq.poll();\n            result.add(p.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() - a.getValue0()));\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1 * num2, new Pair<>(num1, num2)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> pair = pq.poll();\n            result.add(pair.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Integer, Integer>>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() - a.getValue0()));\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) * nums2.get(j), new Pair<>(i, j)));\n            }\n        }\n        Set<Integer> used1 = new HashSet<>();\n        Set<Integer> used2 = new HashSet<>();\n        while (N > 0) {\n            Pair<Long, Pair<Integer, Integer>> pair = pq.poll();\n            if (used1.contains(pair.getValue1().getValue0()) || used2.contains(pair.getValue1().getValue1())) {\n                continue;\n            }\n            result.add(pair.getValue0());\n            used1.add(pair.getValue1().getValue0());\n            used2.add(pair.getValue1().getValue1());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(pair.getValue0() * pair.getValue1());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> res = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() - a.getValue0()));\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1 * num2, new Pair<>(num1, num2)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> p = pq.poll();\n            res.add(p.getValue0());\n        }\n        return res;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int)(p2.getValue0() * p2.getValue1() - p1.getValue0() * p1.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1, num2));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0() * p.getValue1());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0() * pq.poll().getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<Pair<Long, Pair<Long, Long>>>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            public int compare(Pair<Long, Pair<Long, Long>> a, Pair<Long, Pair<Long, Long>> b) {\n                return (int)(b.getValue0() - a.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<Long, Pair<Long, Long>>(num1 * num2, new Pair<Long, Long>(num1, num2)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> pair = pq.poll();\n            result.add(pair.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int)(p2.getValue0() * p2.getValue1() - p1.getValue0() * p1.getValue1());\n            }\n        });\n        for (long n1 : nums1) {\n            for (long n2 : nums2) {\n                pq.add(new Pair<Long, Long>(n1, n2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0() * p.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> res = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return Long.compare(p2.getValue0() * p2.getValue1(), p1.getValue0() * p1.getValue1());\n            }\n        });\n        for (long n1 : nums1) {\n            for (long n2 : nums2) {\n                pq.add(new Pair<>(n1, n2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> p = pq.poll();\n            res.add(p.getValue0() * p.getValue1());\n        }\n        return res;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < N; i++) {\n            long max = 0;\n            int index = 0;\n            for (int j = 0; j < nums1.size(); j++) {\n                for (int k = 0; k < nums2.size(); k++) {\n                    long product = nums1.get(j) * nums2.get(k);\n                    if (product > max) {\n                        max = product;\n                        index = j;\n                    }\n                }\n            }\n            result.add(max);\n            nums1.remove(index);\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products);\n        for (int i = products.size() - 1; i >= products.size() - N; i--) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return Long.compare(p1.getValue0() * p1.getValue1(), p2.getValue0() * p2.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(pair.getValue0() * pair.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (Long n1 : nums1) {\n            for (Long n2 : nums2) {\n                pq.add(new Pair<>(n1 * n2, n1));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> res = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            public int compare(Pair<Long, Pair<Long, Long>> a, Pair<Long, Pair<Long, Long>> b) {\n                return (int) (b.getValue0() - a.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Pair<Long, Long>>(nums1.get(i) * nums2.get(j), new Pair<Long, Long>((long) i, (long) j)));\n            }\n        }\n        HashSet<Pair<Long, Long>> set = new HashSet<>();\n        while (res.size() < N) {\n            Pair<Long, Pair<Long, Long>> cur = pq.poll();\n            if (!set.contains(cur.getValue1())) {\n                res.add(cur.getValue0());\n                set.add(cur.getValue1());\n            }\n        }\n        return res;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1 * num2, num1));\n            }\n        }\n        while (N-- > 0) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products);\n        for (int i = products.size() - 1; i >= products.size() - N; i--) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p2.getValue0() * p2.getValue1() - p1.getValue0() * p1.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0() * p.getValue1());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o2.getValue0().compareTo(o1.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 * num2, num1));\n            }\n        }\n        while (N > 0) {\n            result.add(pq.poll().getValue0());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>((a, b) -> (int)(b.getValue0() - a.getValue0()));\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1 * num2, num1));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < N; i++) {\n            long max = 0;\n            int index = 0;\n            for (int j = 0; j < nums1.size(); j++) {\n                for (int k = 0; k < nums2.size(); k++) {\n                    long product = nums1.get(j) * nums2.get(k);\n                    if (product > max) {\n                        max = product;\n                        index = j;\n                    }\n                }\n            }\n            result.add(max);\n            nums1.remove(index);\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() - a.getValue0()));\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) * nums2.get(j), new Pair<>(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> curr = pq.poll();\n            result.add(curr.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> res = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p2.getValue0() * p2.getValue1() - p1.getValue0() * p1.getValue1());\n            }\n        });\n        for (long n1 : nums1) {\n            for (long n2 : nums2) {\n                pq.offer(new Pair<>(n1, n2));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Long> p = pq.poll();\n            res.add(p.getValue0() * p.getValue1());\n            N--;\n        }\n        return res;",
    "        // Write your code here\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0() * p.getValue1());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> o1, Pair<Long, Pair<Long, Long>> o2) {\n                return o2.getValue0().compareTo(o1.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) * nums2.get(j), Pair.with(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(b.getValue0(), a.getValue0());\n            }\n        });\n        for (long i : nums1) {\n            for (long j : nums2) {\n                pq.add(new Pair<Long, Long>(i * j, i));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Triplet<Long, Integer, Integer>> pq = new PriorityQueue<>((a, b) -> {\n            if (a.getValue0() > b.getValue0()) return -1;\n            else if (a.getValue0() < b.getValue0()) return 1;\n            else return 0;\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Triplet<>(nums1.get(i) * nums2.get(j), i, j));\n            }\n        }\n        while (N > 0) {\n            Triplet<Long, Integer, Integer> t = pq.poll();\n            result.add(t.getValue0());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() - a.getValue0()));\n        for (long i = 0; i < nums1.size(); i++) {\n            for (long j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get((int)i) * nums2.get((int)j), new Pair<>(nums1.get((int)i), nums2.get((int)j))));\n            }\n        }\n        for (long i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> p = pq.poll();\n            result.add(p.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(b.getValue0() - a.getValue0());\n            }\n        });\n        for (long i : nums1) {\n            for (long j : nums2) {\n                pq.add(new Pair<Long, Long>(i * j, i));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> res = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> pair = pq.poll();\n            res.add(pair.getValue0() * pair.getValue1());\n        }\n        return res;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() - a.getValue0()));\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(Pair.with(num1 * num2, Pair.with(num1, num2)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> p = pq.poll();\n            result.add(p.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (Long n1 : nums1) {\n            for (Long n2 : nums2) {\n                pq.add(new Pair<Long, Long>(n1 * n2, n1));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> o1, Pair<Long, Pair<Long, Long>> o2) {\n                return o2.getValue0().compareTo(o1.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                long prod = nums1.get(i) * nums2.get(j);\n                pq.add(new Pair<>(prod, new Pair<>(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<Pair<Long, Pair<Long, Long>>>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> p1, Pair<Long, Pair<Long, Long>> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<Long, Pair<Long, Long>>(num1 * num2, new Pair<Long, Long>(num1, num2)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> p = pq.poll();\n            result.add(p.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(Pair.with(num1, num2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0() * pq.poll().getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int)(p2.getValue0() * p2.getValue1() - p1.getValue0() * p1.getValue1());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0() * p.getValue1());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> ans = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<Pair<Long, Pair<Long, Long>>>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            public int compare(Pair<Long, Pair<Long, Long>> a, Pair<Long, Pair<Long, Long>> b) {\n                return (int) (b.getValue0() - a.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) * nums2.get(j), Pair.with(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            ans.add(pq.poll().getValue0());\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<Pair<Long, Pair<Long, Long>>>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> p1, Pair<Long, Pair<Long, Long>> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Pair<Long, Long>>(nums1.get(i) * nums2.get(j), new Pair<Long, Long>((long)i, (long)j)));\n            }\n        }\n        HashSet<Pair<Long, Long>> set = new HashSet<Pair<Long, Long>>();\n        while (result.size() < N) {\n            Pair<Long, Pair<Long, Long>> p = pq.poll();\n            if (!set.contains(p.getValue1())) {\n                result.add(p.getValue0());\n                set.add(p.getValue1());\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1 * num2, num1));\n            }\n        }\n        while (N > 0) {\n            result.add(pq.poll().getValue0());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> products = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products, Collections.reverseOrder());\n        for (int i = 0; i < N; i++) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() - a.getValue0()));\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1 * num2, new Pair<>(num1, num2)));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Pair<Long, Long>> pair = pq.poll();\n            result.add(pair.getValue0());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> {\n            if (a.getValue0() > b.getValue0()) {\n                return -1;\n            } else if (a.getValue0() < b.getValue0()) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Pair<Long, Long>>(nums1.get(i) * nums2.get(j), new Pair<Long, Long>((long)i, (long)j)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> p = pq.poll();\n            result.add(p.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> o1, Pair<Long, Pair<Long, Long>> o2) {\n                return o2.getValue0().compareTo(o1.getValue0());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(Pair.with(num1 * num2, Pair.with(num1, num2)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products);\n        for (int i = 0; i < N; i++) {\n            result.add(products.get(products.size() - 1 - i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(pair.getValue0() * pair.getValue1());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products);\n        Collections.reverse(products);\n        for (int i = 0; i < N; i++) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1, num2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0() * p.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Integer, Integer>>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() - a.getValue0()));\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) * nums2.get(j), new Pair<>(i, j)));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Pair<Integer, Integer>> pair = pq.poll();\n            result.add(pair.getValue0());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                products.add(num1 * num2);\n            }\n        }\n        Collections.sort(products);\n        Collections.reverse(products);\n        for (int i = 0; i < N; i++) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(b.getValue0() - a.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) * nums2.get(j), (long)i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> res = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Integer, Integer>>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() - a.getValue0()));\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) * nums2.get(j), Pair.with(i, j)));\n            }\n        }\n        Set<Integer> set = new HashSet<>();\n        while (N > 0) {\n            Pair<Long, Pair<Integer, Integer>> p = pq.poll();\n            if (!set.contains(p.getValue1().getValue0()) && !set.contains(p.getValue1().getValue1())) {\n                res.add(p.getValue0());\n                set.add(p.getValue1().getValue0());\n                set.add(p.getValue1().getValue1());\n                N--;\n            }\n        }\n        return res;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> p1, Pair<Long, Pair<Long, Long>> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) * nums2.get(j), Pair.with(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> res = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return (int)(o2.getValue0() * o2.getValue1() - o1.getValue0() * o1.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> p = pq.poll();\n            res.add(p.getValue0() * p.getValue1());\n        }\n        return res;",
    "        ArrayList<Long> res = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() - a.getValue0()));\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) * nums2.get(j), new Pair<>(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> p = pq.poll();\n            res.add(p.getValue0());\n        }\n        return res;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o2.getValue0().compareTo(o1.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 * num2, num1));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> (int) (b.getValue0() - a.getValue0()));\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 * num2, new Pair<>(num1, num2)));\n            }\n        }\n        while (N > 0) {\n            result.add(pq.poll().getValue0());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<Pair<Long, Pair<Long, Long>>>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            public int compare(Pair<Long, Pair<Long, Long>> p1, Pair<Long, Pair<Long, Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) * nums2.get(j), Pair.with(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                queue.add(new Pair<Long, Long>(num1, num2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> pair = queue.poll();\n            result.add(pair.getValue0() * pair.getValue1());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1, num2));\n            }\n        }\n        for (long i = 0; i < N; i++) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(pair.getValue0() * pair.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                products.add(num1 * num2);\n            }\n        }\n        Collections.sort(products);\n        for (int i = 0; i < N; i++) {\n            result.add(products.get(products.size() - i - 1));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o2.getValue0().compareTo(o1.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 * num2, num1));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (Long n1 : nums1) {\n            for (Long n2 : nums2) {\n                pq.add(new Pair<>(n1 * n2, n1));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> p1, Pair<Long, Pair<Long, Long>> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(Pair.with(num1 * num2, Pair.with(num1, num2)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> pair = pq.poll();\n            result.add(pair.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> res = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (long n1 : nums1) {\n            for (long n2 : nums2) {\n                pq.add(new Pair<>(n1, n2));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Long> p = pq.poll();\n            res.add(p.getValue0() * p.getValue1());\n            N--;\n        }\n        return res;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products);\n        Collections.reverse(products);\n        for (int i = 0; i < N; i++) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(pair.getValue0() * pair.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (Long n1 : nums1) {\n            for (Long n2 : nums2) {\n                pq.add(new Pair<>(n1 * n2, n1));\n            }\n        }\n        while (!pq.isEmpty() && N > 0) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 * num2, num1));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(b.getValue0() - a.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1 * num2, num1));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o2.getValue0().compareTo(o1.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) * nums2.get(j), (long)i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return (int) (o2.getValue0() - o1.getValue0());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1 * num2, num1));\n            }\n        }\n        while (N-- > 0) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(pair.getValue0());\n            pq.add(new Pair<>(pair.getValue1() * pair.getValue1(), pair.getValue1()));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int)(p2.getValue0() - p1.getValue0());\n            }\n        });\n        for (long n1 : nums1) {\n            for (long n2 : nums2) {\n                pq.add(new Pair<Long, Long>(n1 * n2, n1));\n            }\n        }\n        while (N > 0) {\n            result.add(pq.poll().getValue0());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products);\n        for (int i = products.size() - 1; i >= products.size() - N; i--) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(pair.getValue0() * pair.getValue1());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p2.getValue0() * p2.getValue1() - p1.getValue0() * p1.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0() * p.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (Long n1 : nums1) {\n            for (Long n2 : nums2) {\n                pq.add(new Pair<>(n1, n2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0() * p.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> o1, Pair<Long, Pair<Long, Long>> o2) {\n                return o2.getValue0().compareTo(o1.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) * nums2.get(j), Pair.with(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        // Write your code here.\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<Pair<Long, Pair<Long, Long>>>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> p1, Pair<Long, Pair<Long, Long>> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                long product = nums1.get(i) * nums2.get(j);\n                pq.add(new Pair<Long, Pair<Long, Long>>(product, new Pair<Long, Long>(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                products.add(num1 * num2);\n            }\n        }\n        Collections.sort(products);\n        Collections.reverse(products);\n        for (int i = 0; i < N; i++) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<Pair<Long, Pair<Long, Long>>>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            public int compare(Pair<Long, Pair<Long, Long>> a, Pair<Long, Pair<Long, Long>> b) {\n                return (int)(b.getValue0() - a.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                long product = nums1.get(i) * nums2.get(j);\n                pq.add(new Pair<Long, Pair<Long, Long>>(product, new Pair<Long, Long>(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int) (b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(pair.getValue0() * pair.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p2.getValue0() * p2.getValue1() - p1.getValue0() * p1.getValue1());\n            }\n        });\n        for (long n1 : nums1) {\n            for (long n2 : nums2) {\n                pq.add(new Pair<>(n1, n2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0() * p.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> o1, Pair<Long, Pair<Long, Long>> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                long product = nums1.get(i) * nums2.get(j);\n                if (pq.size() < N) {\n                    pq.add(new Pair<>(product, new Pair<>(nums1.get(i), nums2.get(j))));\n                } else {\n                    Pair<Long, Pair<Long, Long>> peek = pq.peek();\n                    if (peek.getValue0() < product) {\n                        pq.poll();\n                        pq.add(new Pair<>(product, new Pair<>(nums1.get(i), nums2.get(j))));\n                    }\n                }\n            }\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> p1, Pair<Long, Pair<Long, Long>> p2) {\n                return -p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) * nums2.get(j), Pair.with(nums1.get(i), nums2.get(j))));\n            }\n        }\n        while (N > 0) {\n            result.add(pq.poll().getValue0());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> a, Pair<Long, Pair<Long, Long>> b) {\n                return -a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) * nums2.get(j), Pair.with(nums1.get(i), nums2.get(j))));\n                if (pq.size() > N) {\n                    pq.poll();\n                }\n            }\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < N; i++) {\n            long max = Long.MIN_VALUE;\n            int maxIndex = -1;\n            for (int j = 0; j < nums1.size(); j++) {\n                if (nums1.get(j) > max) {\n                    max = nums1.get(j);\n                    maxIndex = j;\n                }\n            }\n            nums1.set(maxIndex, Long.MIN_VALUE);\n            max = Long.MIN_VALUE;\n            for (int j = 0; j < nums2.size(); j++) {\n                if (nums2.get(j) > max) {\n                    max = nums2.get(j);\n                    maxIndex = j;\n                }\n            }\n            nums2.set(maxIndex, Long.MIN_VALUE);\n            result.add(max);\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products);\n        for (int i = products.size() - 1; i >= products.size() - N; i--) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(b.getValue0() - a.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) * nums2.get(j), (long)i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0() * p.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() - a.getValue0()));\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1 * num2, new Pair<>(num1, num2)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> pair = pq.poll();\n            result.add(pair.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> Long.compare(b.getValue0(), a.getValue0()));\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) * nums2.get(j), new Pair<>(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> temp = pq.poll();\n            result.add(temp.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o2.getValue0().compareTo(o1.getValue0());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(Pair.with(num1 * num2, num1));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            long diff = b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1();\n            if (diff > 0) return 1;\n            else if (diff < 0) return -1;\n            else return 0;\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(pair.getValue0() * pair.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (long n1 : nums1) {\n            for (long n2 : nums2) {\n                pq.add(new Pair<>(n1, n2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0() * p.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p2.getValue0() * p2.getValue1() - p1.getValue0() * p1.getValue1());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0() * p.getValue1());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (Long n1 : nums1) {\n            for (Long n2 : nums2) {\n                pq.add(new Pair<Long, Long>(n1 * n2, n1));\n            }\n        }\n        while (N-- > 0) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return -Long.compare(o1.getValue0(), o2.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 * num2, num1));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(pair.getValue0());\n            pq.add(new Pair<>(pair.getValue1() * pair.getValue1(), pair.getValue1()));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o2.getValue0().compareTo(o1.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1 * num2, num1));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<Pair<Long, Pair<Long, Long>>>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> a, Pair<Long, Pair<Long, Long>> b) {\n                return (int) (b.getValue0() - a.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) * nums2.get(j), Pair.with(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(pair.getValue0() * pair.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Integer, Integer>>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Pair<Integer, Integer>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Integer, Integer>> o1, Pair<Long, Pair<Integer, Integer>> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) * nums2.get(j), Pair.with(i, j)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Integer, Integer>> pair = pq.poll();\n            result.add(pair.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1());\n            }\n        });\n        for (Long i : nums1) {\n            for (Long j : nums2) {\n                pq.add(new Pair<Long, Long>(i, j));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0() * p.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> p1, Pair<Long, Pair<Long, Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                long product = nums1.get(i) * nums2.get(j);\n                pq.add(Pair.with(product, Pair.with(nums1.get(i), nums2.get(j))));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Pair<Long, Long>> p = pq.poll();\n            result.add(p.getValue0());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Pair<Long, Long>> products = new ArrayList<Pair<Long, Long>>();\n        for (long i : nums1) {\n            for (long j : nums2) {\n                products.add(new Pair<Long, Long>(i, j));\n            }\n        }\n        Collections.sort(products, new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1());\n            }\n        });\n        for (int i = 0; i < N; i++) {\n            result.add(products.get(i).getValue0() * products.get(i).getValue1());\n        }\n        return result;",
    "        ArrayList<Long> ret = new ArrayList<Long>();\n        for (int i = 0; i < N; i++) {\n            long max = Long.MIN_VALUE;\n            int max_i = -1;\n            int max_j = -1;\n            for (int j = 0; j < nums1.size(); j++) {\n                for (int k = 0; k < nums2.size(); k++) {\n                    long prod = nums1.get(j) * nums2.get(k);\n                    if (prod > max) {\n                        max = prod;\n                        max_i = j;\n                        max_j = k;\n                    }\n                }\n            }\n            ret.add(max);\n            nums1.remove(max_i);\n            nums2.remove(max_j);\n        }\n        return ret;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Integer, Integer>>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() - a.getValue0()));\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) * nums2.get(j), Pair.with(i, j)));\n            }\n        }\n        Set<Integer> set = new HashSet<>();\n        while (result.size() < N) {\n            Pair<Long, Pair<Integer, Integer>> pair = pq.poll();\n            if (set.contains(pair.getValue1().getValue0()) || set.contains(pair.getValue1().getValue1())) {\n                continue;\n            }\n            result.add(pair.getValue0());\n            set.add(pair.getValue1().getValue0());\n            set.add(pair.getValue1().getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<Pair<Long, Pair<Long, Long>>>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> a, Pair<Long, Pair<Long, Long>> b) {\n                return (int)(b.getValue0() - a.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Pair<Long, Long>>(nums1.get(i) * nums2.get(j), new Pair<Long, Long>((long)i, (long)j)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> p = pq.poll();\n            result.add(p.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() - a.getValue0()));\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) * nums2.get(j), new Pair<>(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> pair = pq.poll();\n            result.add(pair.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) * nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> products = new ArrayList<>();\n        for (long n1 : nums1) {\n            for (long n2 : nums2) {\n                products.add(n1 * n2);\n            }\n        }\n        Collections.sort(products);\n        for (int i = products.size() - 1; i >= products.size() - N; i--) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(pair.getValue0() * pair.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products, Collections.reverseOrder());\n        for (int i = 0; i < N; i++) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o2.getValue0().compareTo(o1.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 * num2, num1));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> res = new ArrayList<Long>();\n        ArrayList<Long> res1 = new ArrayList<Long>();\n        ArrayList<Long> res2 = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                res.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(res);\n        Collections.reverse(res);\n        for (int i = 0; i < N; i++) {\n            res1.add(res.get(i));\n        }\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < nums1.size(); j++) {\n                for (int k = 0; k < nums2.size(); k++) {\n                    if (res1.get(i) == nums1.get(j) * nums2.get(k)) {\n                        res2.add(nums1.get(j));\n                        res2.add(nums2.get(k));\n                    }\n                }\n            }\n        }\n        return res2;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1 * num2, num1));\n            }\n        }\n        for (long i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products);\n        Collections.reverse(products);\n        for (int i = 0; i < N; i++) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(pair.getValue0() * pair.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> (int) (b.getValue0() - a.getValue0()));\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) * nums2.get(j), new Pair<>(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> p = pq.poll();\n            result.add(p.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(b.getValue0() - a.getValue0());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1 * num2, num1));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(pair.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> p1, Pair<Long, Pair<Long, Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                long prod = nums1.get(i) * nums2.get(j);\n                pq.add(Pair.with(prod, Pair.with(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> o1, Pair<Long, Pair<Long, Long>> o2) {\n                return o2.getValue0().compareTo(o1.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) * nums2.get(j), new Pair<>(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) * nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> {\n            return b.getValue0().compareTo(a.getValue0());\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) * nums2.get(j), new Pair<>(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> p = pq.poll();\n            result.add(p.getValue0());\n        }\n        return result;",
    "        // Write your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<Pair<Long, Pair<Long, Long>>>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> a, Pair<Long, Pair<Long, Long>> b) {\n                return (int)(b.getValue0() - a.getValue0());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(Pair.with(num1 * num2, Pair.with(num1, num2)));\n            }\n        }\n        for (long i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> pair = pq.poll();\n            result.add(pair.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> {\n            if (a.getValue0() == b.getValue0()) {\n                if (a.getValue1().getValue0() == b.getValue1().getValue0()) {\n                    return Long.compare(a.getValue1().getValue1(), b.getValue1().getValue1());\n                }\n                return Long.compare(a.getValue1().getValue0(), b.getValue1().getValue0());\n            }\n            return Long.compare(a.getValue0(), b.getValue0());\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<Long, Pair<Long, Long>>(num1 * num2, new Pair<Long, Long>(num1, num2)));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Pair<Long, Long>> pair = pq.poll();\n            result.add(pair.getValue0());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products);\n        for (int i = products.size() - 1; i >= products.size() - N; i--) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(pair.getValue0() * pair.getValue1());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> {\n            if (a.getValue0() > b.getValue0()) {\n                return -1;\n            } else if (a.getValue0() < b.getValue0()) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) * nums2.get(j), new Pair<>(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> nums1Sorted = new ArrayList<Long>(nums1);\n        ArrayList<Long> nums2Sorted = new ArrayList<Long>(nums2);\n        Collections.sort(nums1Sorted, Collections.reverseOrder());\n        Collections.sort(nums2Sorted, Collections.reverseOrder());\n        for (int i = 0; i < N; i++) {\n            result.add(nums1Sorted.get(i) * nums2Sorted.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<Pair<Long, Pair<Long, Long>>>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            public int compare(Pair<Long, Pair<Long, Long>> a, Pair<Long, Pair<Long, Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<Long, Pair<Long, Long>>(num1 * num2, new Pair<Long, Long>(num1, num2)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> pair = pq.poll();\n            result.add(pair.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> o1, Pair<Long, Pair<Long, Long>> o2) {\n                return o2.getValue0().compareTo(o1.getValue0());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(Pair.with(num1 * num2, Pair.with(num1, num2)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> pair = pq.poll();\n            result.add(pair.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products);\n        for (int i = 0; i < N; i++) {\n            result.add(products.get(products.size() - i - 1));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return b.getValue0().compareTo(a.getValue0());\n            }\n        });\n        for (long i : nums1) {\n            for (long j : nums2) {\n                pq.add(new Pair<Long, Long>(i * j, i));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products);\n        Collections.reverse(products);\n        for (int i = 0; i < N; i++) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n                if (pq.size() > N) {\n                    pq.poll();\n                }\n            }\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll().getValue0() * pq.poll().getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1 * num2, num1));\n            }\n        }\n        while (N > 0) {\n            result.add(pq.poll().getValue0());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (long n1 : nums1) {\n            for (long n2 : nums2) {\n                products.add(n1 * n2);\n            }\n        }\n        Collections.sort(products);\n        Collections.reverse(products);\n        for (int i = 0; i < N; i++) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (long n1 : nums1) {\n            for (long n2 : nums2) {\n                pq.add(new Pair<Long, Long>(n1 * n2, n1));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < N; i++) {\n            long max = Long.MIN_VALUE;\n            long max1 = 0;\n            long max2 = 0;\n            for (int j = 0; j < nums1.size(); j++) {\n                for (int k = 0; k < nums2.size(); k++) {\n                    long product = nums1.get(j) * nums2.get(k);\n                    if (product > max) {\n                        max = product;\n                        max1 = nums1.get(j);\n                        max2 = nums2.get(k);\n                    }\n                }\n            }\n            result.add(max);\n            nums1.remove(max1);\n            nums2.remove(max2);\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(pair.getValue0() * pair.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() - a.getValue0()));\n        for (long i = 0; i < nums1.size(); i++) {\n            for (long j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get((int)i) * nums2.get((int)j), new Pair<>(nums1.get((int)i), nums2.get((int)j))));\n            }\n        }\n        for (long i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> cur = pq.poll();\n            result.add(cur.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1, num2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0() * p.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            if (a.getValue0() * a.getValue1() > b.getValue0() * b.getValue1()) {\n                return -1;\n            } else if (a.getValue0() * a.getValue1() < b.getValue0() * b.getValue1()) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(pair.getValue0() * pair.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products);\n        Collections.reverse(products);\n        for (int i = 0; i < N; i++) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(pair.getValue0() * pair.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(b.getValue0() - a.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) * nums2.get(j), (long)i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<Pair<Long, Pair<Long, Long>>>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> p1, Pair<Long, Pair<Long, Long>> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(Pair.with(num1 * num2, Pair.with(num1, num2)));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Pair<Long, Long>> p = pq.poll();\n            result.add(p.getValue0());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<Pair<Long, Pair<Long, Long>>>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            public int compare(Pair<Long, Pair<Long, Long>> a, Pair<Long, Pair<Long, Long>> b) {\n                return (int)(b.getValue0() - a.getValue0());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<Long, Pair<Long, Long>>(num1 * num2, new Pair<Long, Long>(num1, num2)));\n            }\n        }\n        for (long i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) * nums2.get(j), nums1.get(i)));\n            }\n        }\n        while (N > 0) {\n            result.add(pq.poll().getValue1());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> res = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> Long.compare(b.getValue0() * b.getValue1(), a.getValue0() * a.getValue1()));\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Long> cur = pq.poll();\n            res.add(cur.getValue0() * cur.getValue1());\n        }\n        return res;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            public int compare(Pair<Long, Pair<Long, Long>> a, Pair<Long, Pair<Long, Long>> b) {\n                return b.getValue0().compareTo(a.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) * nums2.get(j), new Pair<>(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> p = pq.poll();\n            result.add(p.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> res = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (long n1 : nums1) {\n            for (long n2 : nums2) {\n                pq.add(new Pair<>(n1, n2));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Long> pair = pq.poll();\n            res.add(pair.getValue0() * pair.getValue1());\n            N--;\n        }\n        return res;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) * nums2.get(j), (long)i * nums2.size() + j));\n            }\n        }\n        while (N > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> products = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                products.add(nums1.get(i) * nums2.get(j));\n            }\n        }\n        Collections.sort(products);\n        Collections.reverse(products);\n        for (int i = 0; i < N; i++) {\n            result.add(products.get(i));\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1 * num2, num1));\n            }\n        }\n        while (N > 0) {\n            result.add(pq.poll().getValue0());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int)(p2.getValue0() * p2.getValue1() - p1.getValue0() * p1.getValue1());\n            }\n        });\n        for (long n1 : nums1) {\n            for (long n2 : nums2) {\n                pq.add(new Pair<>(n1, n2));\n            }\n        }\n        while (N > 0) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0() * p.getValue1());\n            N--;\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(b.getValue0() - a.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) * nums2.get(j), (long)i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            result.add(pq.poll().getValue0());\n        }\n        return result;",
    "        ArrayList<Long> ans = new ArrayList<>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>((a, b) -> Long.compare(b.getValue0(), a.getValue0()));\n        for (long i : nums1) {\n            for (long j : nums2) {\n                pq.add(new Pair<>(i * j, new Pair<>(i, j)));\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            ans.add(pq.poll().getValue0());\n        }\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<Pair<Long, Pair<Long, Long>>>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            public int compare(Pair<Long, Pair<Long, Long>> a, Pair<Long, Pair<Long, Long>> b) {\n                return (int) (b.getValue0() - a.getValue0());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<Long, Pair<Long, Long>>(num1 * num2, new Pair<Long, Long>(num1, num2)));\n            }\n        }\n        for (long i = 0; i < N; i++) {\n            Pair<Long, Pair<Long, Long>> pair = pq.poll();\n            result.add(pair.getValue0());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() * b.getValue1() - a.getValue0() * a.getValue1()));\n        for (Long n1 : nums1) {\n            for (Long n2 : nums2) {\n                pq.add(new Pair<>(n1, n2));\n            }\n        }\n        while (N-- > 0) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(p.getValue0() * p.getValue1());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue0().compareTo(p1.getValue0());\n            }\n        });\n        for (Long n1 : nums1) {\n            for (Long n2 : nums2) {\n                pq.add(new Pair<Long, Long>(n1 * n2, n1));\n                if (pq.size() > N) {\n                    pq.poll();\n                }\n            }\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll().getValue1());\n        }\n        return result;"
  ]
}