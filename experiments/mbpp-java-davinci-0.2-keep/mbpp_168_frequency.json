{
  "name": "mbpp_168_frequency",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    public static long frequency(ArrayList<Long> a, long x) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(frequency((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (4l)) == (0l));\n    assert(frequency((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l))), (3l)) == (3l));\n    assert(frequency((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)1l, (long)2l))), (1l)) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(n -> n == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(y -> y == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        long count = 0;\n        for (int i = 0; i < a.size(); i++) {\n            if (a.get(i) == x) {\n                count++;\n            }\n        }\n        return count;",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i.equals(x)).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(n -> n == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(y -> y == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(n -> n == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(y -> y == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(y -> y == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(n -> n == x).count();",
    "        long count = 0;\n        for (long i : a) {\n            if (i == x) {\n                count++;\n            }\n        }\n        return count;",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e.equals(x)).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(e -> e == x).count();",
    "        return a.stream().filter(i -> i == x).count();",
    "        return a.stream().filter(i -> i == x).count();"
  ]
}