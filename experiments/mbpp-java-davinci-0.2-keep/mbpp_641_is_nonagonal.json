{
  "name": "mbpp_641_is_nonagonal",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the nth nonagonal number.\n    public static long isNonagonal(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(isNonagonal((10l)) == (325l));\n    assert(isNonagonal((15l)) == (750l));\n    assert(isNonagonal((18l)) == (1089l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return n * (3 * n - 2);",
    "        return (n*(3*n-2))/2;",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n*(3*n-2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n*(3*n-2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n*(3*n-2);",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        return n*(3*n-2);",
    "        // n = (3 * n * n - n) / 2;\n        // return n;\n        return (3 * n * n - n) / 2;",
    "        return n * (3 * n - 2);",
    "        return n*(3*n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n*(3*n-2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        // The nth nonagonal number is n*(n+1)/2.\n        return n*(n+1)/2;",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        long x = (long)Math.sqrt(1 + 8 * n);\n        return (x * x == 1 + 8 * n && (x - 1) % 2 == 0) ? x : -1;",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        // n(3n-2)/2\n        return (n*(3*n-2))/2;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        return (n * (3 * n - 2)) / 2;",
    "        return (n * (n + 1) * (n - 1) / 6) + 1;",
    "        return (n * (n * 3 - 1)) / 2;",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n*(3*n-2);",
    "        return (n * (n + 1) * (n - 1) / 6) + 1;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n*(3*n-2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (3 * n - 2);",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (3 * n - 2);",
    "        return (n * (n - 1)) / 2;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n*(3*n-2);",
    "        return n * (3 * n - 2);",
    "        return (n * (n + 1)) / 2;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        return (n * (3 * n - 2)) / 2;",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        long a = (long) Math.sqrt(1 + 8 * n);\n        if (a * a == 1 + 8 * n) {\n            return a;\n        } else {\n            return 0;\n        }",
    "        return n * (3 * n - 2);",
    "        return n*(3*n-2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 1)) / 2;",
    "        return n * (3 * n - 2);",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return (n * (3 * n - 2)) / 2;",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        long x = (long)Math.sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return (x - 1) / 2;\n        }\n        return -1;",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        long nthNonagonal = 0;\n        long nth = 1;\n        while (nthNonagonal < n) {\n            nthNonagonal = nth * (3 * nth - 1) / 2;\n            nth++;\n        }\n        return nthNonagonal;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return (n * (n - 1)) / 2;",
    "        return (n * (3 * n - 2)) / 2;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n*(3*n-2);",
    "        return n * (3 * n - 2);",
    "        // n = (3 * n * n - n) / 2;\n        return (3 * n * n - n) / 2;",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return (n * (3 * n - 2)) / 2;",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return (n * (n - 1)) / 2;",
    "        return (n * (n * 3 - 1)) / 2;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        return (n * (n + 1) * (3 * n - 2)) / 2;",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return (n * (n - 1)) / 2;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        // The nth nonagonal number is the sum of the first n odd numbers.\n        return n * n * n;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return (n*(3*n-2))/2;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n*(3*n-2);",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        return (n * (3 * n - 2)) / 2;",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        // n = (3*n^2 - n)/2\n        // n^2 + n - 2*n = 0\n        // n = (-1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 + sqrt(1 + 8*n))/2\n        // n = (1 +",
    "        // Your code here\n        return 0;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);"
  ]
}