{
  "name": "mbpp_558_digit_distance_nums",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to find the sum of the per-digit difference between two integers.\n    public static long digitDistanceNums(long n1, long n2) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(digitDistanceNums((1l), (2l)) == (1l));\n    assert(digitDistanceNums((23l), (56l)) == (6l));\n    assert(digitDistanceNums((123l), (256l)) == (7l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return Math.abs(n1 - n2);",
    "        long sum = 0;\n        while (n1 != 0 || n2 != 0) {\n            sum += Math.abs(n1 % 10 - n2 % 10);\n            n1 /= 10;\n            n2 /= 10;\n        }\n        return sum;",
    "        long sum = 0;\n        while (n1 > 0 || n2 > 0) {\n            long d1 = n1 % 10;\n            long d2 = n2 % 10;\n            sum += Math.abs(d1 - d2);\n            n1 /= 10;\n            n2 /= 10;\n        }\n        return sum;",
    "        long sum = 0;\n        while (n1 > 0 || n2 > 0) {\n            long d1 = n1 % 10;\n            long d2 = n2 % 10;\n            sum += Math.abs(d1 - d2);\n            n1 /= 10;\n            n2 /= 10;\n        }\n        return sum;",
    "        long sum = 0;\n        while (n1 > 0 || n2 > 0) {\n            long d1 = n1 % 10;\n            long d2 = n2 % 10;\n            sum += Math.abs(d1 - d2);\n            n1 /= 10;\n            n2 /= 10;\n        }\n        return sum;",
    "        return n1 - n2;",
    "        long sum = 0;\n        while (n1 > 0 || n2 > 0) {\n            long d1 = n1 % 10;\n            long d2 = n2 % 10;\n            sum += Math.abs(d1 - d2);\n            n1 /= 10;\n            n2 /= 10;\n        }\n        return sum;",
    "        return Math.abs(n1 - n2);",
    "        return Stream.of(String.valueOf(n1).split(\"\")).mapToLong(Long::parseLong).reduce(0, (x, y) -> x + y) - Stream.of(String.valueOf(n2).split(\"\")).mapToLong(Long::parseLong).reduce(0, (x, y) -> x + y);",
    "        String s1 = String.valueOf(n1);\n        String s2 = String.valueOf(n2);\n        int len = Math.max(s1.length(), s2.length());\n        s1 = String.format(\"%0\" + len + \"d\", n1);\n        s2 = String.format(\"%0\" + len + \"d\", n2);\n        long sum = 0;\n        for (int i = 0; i < len; i++) {\n            sum += Math.abs(s1.charAt(i) - s2.charAt(i));\n        }\n        return sum;",
    "        String s1 = Long.toString(n1);\n        String s2 = Long.toString(n2);\n        int len = Math.max(s1.length(), s2.length());\n        s1 = String.format(\"%0\" + len + \"d\", n1);\n        s2 = String.format(\"%0\" + len + \"d\", n2);\n        long sum = 0;\n        for (int i = 0; i < len; i++) {\n            sum += Math.abs(s1.charAt(i) - s2.charAt(i));\n        }\n        return sum;",
    "        long sum = 0;\n        while (n1 > 0 || n2 > 0) {\n            long d1 = n1 % 10;\n            long d2 = n2 % 10;\n            sum += Math.abs(d1 - d2);\n            n1 /= 10;\n            n2 /= 10;\n        }\n        return sum;",
    "        long sum = 0;\n        while (n1 > 0 || n2 > 0) {\n            long d1 = n1 % 10;\n            long d2 = n2 % 10;\n            sum += Math.abs(d1 - d2);\n            n1 /= 10;\n            n2 /= 10;\n        }\n        return sum;",
    "        return Arrays.stream(String.valueOf(n1).split(\"\"))\n            .mapToLong(Long::parseLong)\n            .zipWith(Arrays.stream(String.valueOf(n2).split(\"\"))\n            .mapToLong(Long::parseLong), (x, y) -> Math.abs(x - y))\n            .sum();",
    "        return Stream.of(n1, n2)\n            .map(n -> Math.abs(n - Long.parseLong(new StringBuilder(Long.toString(n)).reverse().toString())))\n            .reduce(0L, (a, b) -> a + b);",
    "        return Math.abs(n1 - n2);",
    "        return Math.abs(n1 - n2);",
    "        return Math.abs(n1 - n2);",
    "        return Stream.of(n1, n2)\n            .map(n -> String.valueOf(n).chars()\n                 .map(c -> c - '0')\n                 .toArray())\n            .reduce((a, b) -> IntStream.range(0, a.length)\n                                       .map(i -> Math.abs(a[i] - b[i]))\n                                       .toArray())\n            .get()\n            .sum();",
    "        long sum = 0;\n        while (n1 > 0 || n2 > 0) {\n            long d1 = n1 % 10;\n            long d2 = n2 % 10;\n            sum += Math.abs(d1 - d2);\n            n1 /= 10;\n            n2 /= 10;\n        }\n        return sum;"
  ]
}