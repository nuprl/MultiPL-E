{
  "name": "mbpp_780_find_combinations",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    public static ArrayList<Long> findCombinations(ArrayList<Long> test_list) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(findCombinations((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(6l, 7l), (Pair<Long, Long>)Pair.with(5l, 1l), (Pair<Long, Long>)Pair.with(6l, 10l))))).equals((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(8l, 11l), (Pair<Long, Long>)Pair.with(7l, 5l), (Pair<Long, Long>)Pair.with(8l, 14l), (Pair<Long, Long>)Pair.with(11l, 8l), (Pair<Long, Long>)Pair.with(12l, 17l), (Pair<Long, Long>)Pair.with(11l, 11l))))));\n    assert(findCombinations((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 5l), (Pair<Long, Long>)Pair.with(7l, 8l), (Pair<Long, Long>)Pair.with(6l, 2l), (Pair<Long, Long>)Pair.with(7l, 11l))))).equals((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(10l, 13l), (Pair<Long, Long>)Pair.with(9l, 7l), (Pair<Long, Long>)Pair.with(10l, 16l), (Pair<Long, Long>)Pair.with(13l, 10l), (Pair<Long, Long>)Pair.with(14l, 19l), (Pair<Long, Long>)Pair.with(13l, 13l))))));\n    assert(findCombinations((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 6l), (Pair<Long, Long>)Pair.with(8l, 9l), (Pair<Long, Long>)Pair.with(7l, 3l), (Pair<Long, Long>)Pair.with(8l, 12l))))).equals((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(12l, 15l), (Pair<Long, Long>)Pair.with(11l, 9l), (Pair<Long, Long>)Pair.with(12l, 18l), (Pair<Long, Long>)Pair.with(15l, 12l), (Pair<Long, Long>)Pair.with(16l, 21l), (Pair<Long, Long>)Pair.with(15l, 15l))))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = i + 1; j < test_list.size(); j++) {\n                result.add(test_list.get(i) + test_list.get(j));\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = i + 1; j < test_list.size(); j++) {\n                result.add(test_list.get(i) + test_list.get(j));\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = i + 1; j < test_list.size(); j++) {\n                result.add(test_list.get(i) + test_list.get(j));\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = i + 1; j < test_list.size(); j++) {\n                result.add(test_list.get(i) + test_list.get(j));\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = i + 1; j < test_list.size(); j++) {\n                result.add(test_list.get(i) + test_list.get(j));\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = i + 1; j < test_list.size(); j++) {\n                result.add(test_list.get(i) + test_list.get(j));\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = i + 1; j < test_list.size(); j++) {\n                result.add(test_list.get(i) + test_list.get(j));\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = i + 1; j < test_list.size(); j++) {\n                result.add(test_list.get(i) + test_list.get(j));\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = i + 1; j < test_list.size(); j++) {\n                result.add(test_list.get(i) + test_list.get(j));\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = i + 1; j < test_list.size(); j++) {\n                result.add(test_list.get(i) + test_list.get(j));\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> temp = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = i + 1; j < test_list.size(); j++) {\n                temp.add(test_list.get(i) + test_list.get(j));\n            }\n        }\n        for (int i = 0; i < temp.size(); i++) {\n            for (int j = i + 1; j < temp.size(); j++) {\n                result.add(temp.get(i) + temp.get(j));\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = i + 1; j < test_list.size(); j++) {\n                result.add(test_list.get(i) + test_list.get(j));\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = i + 1; j < test_list.size(); j++) {\n                result.add(test_list.get(i) + test_list.get(j));\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = i + 1; j < test_list.size(); j++) {\n                result.add(test_list.get(i) + test_list.get(j));\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = i + 1; j < test_list.size(); j++) {\n                result.add(test_list.get(i) + test_list.get(j));\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = i + 1; j < test_list.size(); j++) {\n                result.add(test_list.get(i) + test_list.get(j));\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 0; i < test_list.size(); i++) {\n            for(int j = i + 1; j < test_list.size(); j++) {\n                result.add(test_list.get(i) + test_list.get(j));\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = i + 1; j < test_list.size(); j++) {\n                result.add(test_list.get(i) + test_list.get(j));\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = i + 1; j < test_list.size(); j++) {\n                result.add(test_list.get(i) + test_list.get(j));\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = i + 1; j < test_list.size(); j++) {\n                result.add(test_list.get(i) + test_list.get(j));\n            }\n        }\n        return result;"
  ]
}