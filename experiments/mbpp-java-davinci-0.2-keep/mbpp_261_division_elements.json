{
  "name": "mbpp_261_division_elements",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    public static long divisionElements(long test_tup1, long test_tup2) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(divisionElements((long)Pair.with(10l, 4l, 6l, 9l), (long)Pair.with(5l, 2l, 3l, 3l)) == (long)Pair.with(2l, 2l, 2l, 3l));\n    assert(divisionElements((long)Pair.with(12l, 6l, 8l, 16l), (long)Pair.with(6l, 3l, 4l, 4l)) == (long)Pair.with(2l, 2l, 2l, 4l));\n    assert(divisionElements((long)Pair.with(20l, 14l, 36l, 18l), (long)Pair.with(5l, 7l, 6l, 9l)) == (long)Pair.with(4l, 2l, 6l, 2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return test_tup1 / test_tup2;",
    "        return test_tup1 / test_tup2;",
    "        return test_tup1 / test_tup2;",
    "        return test_tup1 / test_tup2;",
    "        return test_tup1 / test_tup2;",
    "        return test_tup1 / test_tup2;",
    "        return test_tup1 / test_tup2;",
    "        return test_tup1 / test_tup2;",
    "        return test_tup1 / test_tup2;",
    "        return test_tup1 / test_tup2;",
    "        return test_tup1 / test_tup2;",
    "        return test_tup1 / test_tup2;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return test_tup1/test_tup2;",
    "        return test_tup1 / test_tup2;",
    "        return test_tup1 / test_tup2;",
    "        return test_tup1 / test_tup2;",
    "        return test_tup1 / test_tup2;",
    "        return test_tup1 / test_tup2;",
    "        return test_tup1 / test_tup2;",
    "        return test_tup1 / test_tup2;"
  ]
}