{
  "name": "mbpp_265_list_split",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    public static Object listSplit(Object S, long step) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(listSplit((new Object(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\", (String)\"d\", (String)\"e\", (String)\"f\", (String)\"g\", (String)\"h\", (String)\"i\", (String)\"j\", (String)\"k\", (String)\"l\", (String)\"m\", (String)\"n\"))), (3l)).equals((new Object(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"d\", (String)\"g\", (String)\"j\", (String)\"m\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"e\", (String)\"h\", (String)\"k\", (String)\"n\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"c\", (String)\"f\", (String)\"i\", (String)\"l\")))))));\n    assert(listSplit((new Object(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l, (long)12l, (long)13l, (long)14l))), (3l)).equals((new Object(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)7l, (long)10l, (long)13l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)8l, (long)11l, (long)14l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)9l, (long)12l)))))));\n    assert(listSplit((new Object(Arrays.asList((String)\"python\", (String)\"java\", (String)\"C\", (String)\"C++\", (String)\"DBMS\", (String)\"SQL\"))), (2l)).equals((new Object(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"python\", (String)\"C\", (String)\"DBMS\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"java\", (String)\"C++\", (String)\"SQL\")))))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (S instanceof List) {\n            List<Object> list = (List<Object>)S;\n            List<Object> result = new ArrayList<Object>();\n            for (int i = 0; i < list.size(); i += step) {\n                result.add(list.subList(i, Math.min(list.size(), i + (int)step)));\n            }\n            return result;\n        }\n        return null;",
    "        List<Object> ret = new ArrayList<>();\n        if (S instanceof List) {\n            List<Object> L = (List<Object>) S;\n            for (int i = 0; i < L.size(); i += step) {\n                List<Object> sub = new ArrayList<>();\n                for (int j = 0; j < step && i + j < L.size(); j++) {\n                    sub.add(L.get(i + j));\n                }\n                ret.add(sub);\n            }\n        } else if (S instanceof String) {\n            String L = (String) S;\n            for (int i = 0; i < L.length(); i += step) {\n                String sub = \"\";\n                for (int j = 0; j < step && i + j < L.length(); j++) {\n                    sub += L.charAt(i + j);\n                }\n                ret.add(sub);\n            }\n        }\n        return ret;",
    "        List<Object> result = new ArrayList<>();\n        List<Object> list = (List<Object>) S;\n        for (int i = 0; i < list.size(); i += step) {\n            result.add(list.subList(i, Math.min(i + (int) step, list.size())));\n        }\n        return result;",
    "        List<Object> result = new ArrayList<>();\n        if (S instanceof List) {\n            List<Object> list = (List<Object>) S;\n            for (int i = 0; i < list.size(); i += step) {\n                result.add(list.subList(i, Math.min(i + step, list.size())));\n            }\n        } else if (S instanceof String) {\n            String str = (String) S;\n            for (int i = 0; i < str.length(); i += step) {\n                result.add(str.substring(i, Math.min(i + step, str.length())));\n            }\n        }\n        return result;",
    "        // Your code here\n        return null;",
    "        Object[] arr = (Object[]) S;\n        Object[] ret = new Object[(int) Math.ceil((double) arr.length / step)];\n        for (int i = 0; i < ret.length; i++) {\n            Object[] sub = new Object[(int) Math.min(arr.length - i * step, step)];\n            for (int j = 0; j < sub.length; j++) {\n                sub[j] = arr[i * (int) step + j];\n            }\n            ret[i] = sub;\n        }\n        return ret;",
    "        Object[] s = (Object[]) S;\n        Object[] result = new Object[(int) Math.ceil((double) s.length / step)];\n        int j = 0;\n        for (int i = 0; i < s.length; i += step) {\n            Object[] temp = new Object[(int) step];\n            for (int k = 0; k < step; k++) {\n                if (i + k < s.length) {\n                    temp[k] = s[i + k];\n                }\n            }\n            result[j] = temp;\n            j++;\n        }\n        return result;",
    "        if (S instanceof List) {\n            List<Object> L = (List<Object>) S;\n            List<Object> R = new ArrayList<Object>();\n            for (int i = 0; i < L.size(); i += step) {\n                R.add(L.subList(i, Math.min(i + (int) step, L.size())));\n            }\n            return R;\n        } else if (S instanceof String) {\n            String L = (String) S;\n            List<Object> R = new ArrayList<Object>();\n            for (int i = 0; i < L.length(); i += step) {\n                R.add(L.substring(i, Math.min(i + (int) step, L.length())));\n            }\n            return R;\n        } else {\n            throw new IllegalArgumentException(\"Invalid type\");\n        }",
    "        Object[] A = (Object[]) S;\n        Object[] B = new Object[A.length / (int) step];\n        for (int i = 0; i < A.length; i += step) {\n            Object[] C = new Object[(int) step];\n            for (int j = 0; j < step; j++) {\n                C[j] = A[i + j];\n            }\n            B[i / (int) step] = C;\n        }\n        return B;",
    "        Object[] arr = (Object[]) S;\n        Object[] res = new Object[(int) Math.ceil((double) arr.length / step)];\n        for (int i = 0; i < arr.length; i++) {\n            int index = i / (int) step;\n            Object[] temp = (Object[]) res[index];\n            if (temp == null) {\n                temp = new Object[(int) step];\n                res[index] = temp;\n            }\n            temp[i % (int) step] = arr[i];\n        }\n        return res;",
    "        Object[] A = (Object[]) S;\n        Object[] B = new Object[A.length];\n        for (int i = 0; i < A.length; i++) {\n            B[i] = A[i];\n        }\n        Object[] C = new Object[(int) Math.ceil((double) B.length / step)];\n        for (int i = 0; i < C.length; i++) {\n            Object[] D = new Object[(int) step];\n            for (int j = 0; j < step; j++) {\n                if (i * step + j < B.length) {\n                    D[j] = B[i * (int) step + j];\n                }\n            }\n            C[i] = D;\n        }\n        return C;",
    "        return null;",
    "        // Write your code here\n        return null;",
    "        List<Object> result = new ArrayList<>();\n        List<Object> list = (List<Object>) S;\n        for (int i = 0; i < list.size(); i += step) {\n            result.add(list.subList(i, Math.min(list.size(), i + (int) step)));\n        }\n        return result;",
    "        List<Object> result = new ArrayList<>();\n        List<Object> list = (List<Object>) S;\n        for (int i = 0; i < list.size(); i += step) {\n            result.add(list.subList(i, Math.min(i + step, list.size())));\n        }\n        return result;",
    "        return null;",
    "        List<Object> result = new ArrayList<>();\n        List<Object> list = (List<Object>) S;\n        for (int i = 0; i < list.size(); i += step) {\n            List<Object> sublist = new ArrayList<>();\n            for (int j = i; j < i + step && j < list.size(); j++) {\n                sublist.add(list.get(j));\n            }\n            result.add(sublist);\n        }\n        return result;",
    "        if (step <= 0) {\n            return new ArrayList<Object>();\n        }\n        if (S instanceof List) {\n            List<Object> list = (List<Object>)S;\n            List<Object> result = new ArrayList<Object>();\n            for (int i = 0; i < list.size(); i += step) {\n                List<Object> sublist = new ArrayList<Object>();\n                for (int j = 0; j < step && i + j < list.size(); j++) {\n                    sublist.add(list.get(i + j));\n                }\n                result.add(sublist);\n            }\n            return result;\n        } else if (S instanceof String) {\n            String string = (String)S;\n            List<Object> result = new ArrayList<Object>();\n            for (int i = 0; i < string.length(); i += step) {\n                String sublist = \"\";\n                for (int j = 0; j < step && i + j < string.length(); j++) {\n                    sublist += string.charAt(i + j);\n                }\n                result.add(sublist);\n            }\n            return result;\n        } else {\n            return new ArrayList<Object>();\n        }",
    "        List<Object> result = new ArrayList<>();\n        if (S instanceof List) {\n            List<Object> list = (List<Object>) S;\n            for (int i = 0; i < list.size(); i += step) {\n                result.add(list.subList(i, Math.min(i + (int) step, list.size())));\n            }\n        } else if (S instanceof String) {\n            String str = (String) S;\n            for (int i = 0; i < str.length(); i += step) {\n                result.add(str.substring(i, Math.min(i + (int) step, str.length())));\n            }\n        }\n        return result;",
    "        if (S instanceof List) {\n            List<Object> list = (List<Object>) S;\n            List<Object> result = new ArrayList<>();\n            for (int i = 0; i < list.size(); i += step) {\n                result.add(list.subList(i, Math.min(list.size(), i + (int) step)));\n            }\n            return result;\n        } else if (S instanceof String) {\n            String string = (String) S;\n            List<Object> result = new ArrayList<>();\n            for (int i = 0; i < string.length(); i += step) {\n                result.add(string.substring(i, Math.min(string.length(), i + (int) step)));\n            }\n            return result;\n        } else {\n            throw new IllegalArgumentException(\"Argument must be a list or a string.\");\n        }"
  ]
}