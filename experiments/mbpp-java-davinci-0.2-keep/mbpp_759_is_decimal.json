{
  "name": "mbpp_759_is_decimal",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    public static boolean isDecimal(String num) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (num.length() == 0) {\n            return false;\n        }\n        int dot = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                dot++;\n            }\n        }\n        if (dot > 1) {\n            return false;\n        }\n        if (dot == 1) {\n            String[] parts = num.split(\"\\\\.\");\n            if (parts[1].length() > 2) {\n                return false;\n            }\n        }\n        try {\n            Double.parseDouble(num);\n        } catch (Exception e) {\n            return false;\n        }\n        return true;",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '-') num = num.substring(1);\n        if (num.length() == 0) return false;\n        int dot = num.indexOf('.');\n        if (dot == -1) return isInteger(num);\n        if (dot == 0) return false;\n        if (dot == num.length() - 1) return false;\n        if (dot == num.length() - 2) return isInteger(num.substring(0, dot)) && isInteger(num.substring(dot + 1));\n        return false;",
    "        try {\n            double d = Double.parseDouble(num);\n            String[] parts = num.split(\"\\\\.\");\n            if (parts.length == 2) {\n                if (parts[1].length() > 2) {\n                    return false;\n                }\n            }\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        int dot = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '.') {\n                dot++;\n                if (dot > 1) return false;\n            } else if (!Character.isDigit(c)) {\n                return false;\n            }\n        }\n        if (dot == 0) return false;\n        String[] parts = num.split(\"\\\\.\");\n        if (parts.length != 2) return false;\n        if (parts[1].length() != 2) return false;\n        return true;",
    "        try {\n            double d = Double.parseDouble(num);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        if (num.length() == 1) return num.charAt(0) >= '0' && num.charAt(0) <= '9';\n        if (num.charAt(0) == '0') return false;\n        int i = 1;\n        while (i < num.length() && num.charAt(i) >= '0' && num.charAt(i) <= '9') i++;\n        if (i == num.length()) return true;\n        if (num.charAt(i) != '.') return false;\n        if (i + 1 == num.length()) return false;\n        if (num.charAt(i + 1) == '0') return i + 2 == num.length();\n        if (num.charAt(i + 1) == '1') return i + 2 == num.length();\n        return false;",
    "        if (num.length() == 0) return false;\n        if (num.length() == 1) return num.charAt(0) >= '0' && num.charAt(0) <= '9';\n        if (num.charAt(0) == '0') return false;\n        int dot = -1;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                if (dot != -1) return false;\n                dot = i;\n            } else if (num.charAt(i) < '0' || num.charAt(i) > '9') return false;\n        }\n        if (dot == -1) return true;\n        if (dot == num.length() - 1) return false;\n        if (dot == num.length() - 2) return true;\n        return false;",
    "        if (num == null || num.length() == 0) return false;\n        int dot = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '.') {\n                dot++;\n                if (dot > 1) return false;\n            } else if (c < '0' || c > '9') return false;\n        }\n        if (dot == 0) return false;\n        String[] arr = num.split(\"\\\\.\");\n        if (arr.length == 1) return false;\n        if (arr[1].length() > 2) return false;\n        return true;",
    "        if (num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(0) == '-') i++;\n        int count = 0;\n        while (i < num.length()) {\n            if (num.charAt(i) == '.') {\n                count++;\n                if (count > 1) return false;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n            i++;\n        }\n        if (count == 0) return true;\n        String[] parts = num.split(\"\\\\.\");\n        if (parts[1].length() > 2) return false;\n        return true;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(0) == '-') i++;\n        int count = 0;\n        for (; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                count++;\n                continue;\n            }\n            if (count > 1) return false;\n            if (!Character.isDigit(num.charAt(i))) return false;\n        }\n        return count == 1;",
    "        if (num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(i) == '-') i++;\n        if (i == num.length()) return false;\n        while (i < num.length() && Character.isDigit(num.charAt(i))) i++;\n        if (i == num.length()) return true;\n        if (num.charAt(i) != '.') return false;\n        i++;\n        if (i == num.length()) return false;\n        int count = 0;\n        while (i < num.length() && Character.isDigit(num.charAt(i))) {\n            i++;\n            count++;\n        }\n        return count == 2;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num == null || num.length() == 0) return false;\n        int dot = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                dot++;\n                if (dot > 1) return false;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n        }\n        if (dot == 0) return true;\n        int idx = num.indexOf('.');\n        if (idx == num.length() - 1) return false;\n        if (idx == num.length() - 3) return true;\n        return false;",
    "        if (num == null) return false;\n        if (num.length() == 0) return false;\n        if (num.length() == 1) return num.charAt(0) >= '0' && num.charAt(0) <= '9';\n        if (num.charAt(0) == '0') return false;\n        int dot = -1;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                if (dot != -1) return false;\n                dot = i;\n            } else if (num.charAt(i) < '0' || num.charAt(i) > '9') {\n                return false;\n            }\n        }\n        if (dot == -1) return true;\n        if (dot == num.length() - 1) return false;\n        if (dot == num.length() - 2) return true;\n        return false;",
    "        if (num == null || num.length() == 0) return false;\n        int decimalCount = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '.') {\n                decimalCount++;\n                if (decimalCount > 1) return false;\n            } else if (!Character.isDigit(c)) {\n                return false;\n            }\n        }\n        return true;",
    "        if (num == null || num.length() == 0) return false;\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '.') {\n                count++;\n                if (count > 1) return false;\n            } else if (!Character.isDigit(c)) {\n                return false;\n            }\n        }\n        return true;",
    "        if (num.length() == 0) return false;\n        int decimal = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                decimal++;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n        }\n        if (decimal > 1) return false;\n        if (decimal == 0) return true;\n        String[] parts = num.split(\"\\\\.\");\n        if (parts[1].length() > 2) return false;\n        return true;",
    "        // Write your code here\n        return false;",
    "        return num.matches(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");",
    "        if (num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(0) == '-') i++;\n        int count = 0;\n        while (i < num.length()) {\n            if (num.charAt(i) == '.') {\n                count++;\n                if (count > 1) return false;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n            i++;\n        }\n        if (count == 0) return true;\n        String[] arr = num.split(\"\\\\.\");\n        if (arr[1].length() > 2) return false;\n        return true;",
    "        if (num == null) return false;\n        if (num.length() == 0) return false;\n        if (num.charAt(0) == '-') num = num.substring(1);\n        if (num.length() == 0) return false;\n        int dot = num.indexOf('.');\n        if (dot == -1) return false;\n        if (dot == 0) return false;\n        if (dot == num.length() - 1) return false;\n        if (dot == num.length() - 2) return true;\n        return false;",
    "        if (num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(0) == '-') i++;\n        int count = 0;\n        while (i < num.length() && num.charAt(i) != '.') {\n            if (num.charAt(i) < '0' || num.charAt(i) > '9') return false;\n            i++;\n        }\n        if (i == num.length()) return true;\n        i++;\n        while (i < num.length()) {\n            if (num.charAt(i) < '0' || num.charAt(i) > '9') return false;\n            i++;\n            count++;\n        }\n        return count <= 2;",
    "        if (num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(0) == '-') i++;\n        int count = 0;\n        while (i < num.length() && num.charAt(i) != '.') {\n            if (!Character.isDigit(num.charAt(i))) return false;\n            i++;\n        }\n        if (i == num.length()) return true;\n        i++;\n        while (i < num.length()) {\n            if (!Character.isDigit(num.charAt(i))) return false;\n            i++;\n            count++;\n        }\n        return count <= 2;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num == null) return false;\n        if (num.length() == 0) return false;\n        if (num.charAt(0) == '.') return false;\n        if (num.charAt(num.length() - 1) == '.') return false;\n        if (num.charAt(0) == '-') num = num.substring(1);\n        int dot = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                dot++;\n                if (dot > 1) return false;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n        }\n        if (dot == 0) return true;\n        String[] arr = num.split(\"\\\\.\");\n        if (arr[1].length() > 2) return false;\n        return true;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) {\n            return false;\n        }\n        int i = 0;\n        if (num.charAt(0) == '-') {\n            i++;\n        }\n        int count = 0;\n        while (i < num.length()) {\n            if (num.charAt(i) == '.') {\n                count++;\n            }\n            if (count > 1) {\n                return false;\n            }\n            if (num.charAt(i) < '0' || num.charAt(i) > '9') {\n                return false;\n            }\n            i++;\n        }\n        return true;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) {\n            return false;\n        }\n        if (num.charAt(0) == '.') {\n            return false;\n        }\n        if (num.charAt(num.length() - 1) == '.') {\n            return false;\n        }\n        int dotCount = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                dotCount++;\n            }\n        }\n        if (dotCount > 1) {\n            return false;\n        }\n        if (dotCount == 1) {\n            int dotIndex = num.indexOf('.');\n            if (dotIndex == num.length() - 3) {\n                return true;\n            }\n        }\n        return false;",
    "        if (num.length() == 0) return false;\n        int dot = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                dot++;\n                if (dot > 1) return false;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n        }\n        if (dot == 0) return true;\n        int index = num.indexOf('.');\n        if (index == num.length() - 1) return false;\n        if (num.length() - index - 1 > 2) return false;\n        return true;",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '.') return false;\n        int dot = -1;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '.') {\n                if (dot != -1) return false;\n                dot = i;\n            } else if (!Character.isDigit(c)) {\n                return false;\n            }\n        }\n        if (dot == -1) return true;\n        if (num.length() - dot > 3) return false;\n        return true;",
    "        if (num.length() == 0) return false;\n        if (num.length() == 1 && num.charAt(0) == '.') return false;\n        if (num.length() == 1 && num.charAt(0) == '-') return false;\n        if (num.length() == 2 && num.charAt(0) == '-' && num.charAt(1) == '.') return false;\n        if (num.length() == 2 && num.charAt(0) == '-' && num.charAt(1) == '-') return false;\n        if (num.length() == 2 && num.charAt(0) == '.' && num.charAt(1) == '.') return false;\n        if (num.length() == 2 && num.charAt(0) == '.' && num.charAt(1) == '-') return false;\n        if (num.length() == 2 && num.charAt(0) == '-' && num.charAt(1) == '-') return false;\n        if (num.length() == 3 && num.charAt(0) == '-' && num.charAt(1) == '.' && num.charAt(2) == '.') return false;\n        if (num.length() == 3 && num.charAt(0) == '-' && num.charAt(1) == '.' && num.charAt(2) == '-') return false;\n        if (num.length() == 3 && num.charAt(0) == '-' && num.charAt(1) == '-' && num.charAt(2) == '.') return false;\n        if (num.length() == 3 && num.charAt(0) == '-' && num.charAt(1) == '-' && num.charAt(2) == '-') return false;\n        if (num.length() == 3 && num.charAt(0) == '.' && num.charAt(1) == '.' && num.charAt(2) == '.') return false;\n        if (num.length() == 3 && num.charAt(0) == '.' && num.charAt(1) == '.' &&",
    "        return num.matches(\"^[-+]?[0-9]*\\\\.?[0-9]{0,2}$\");",
    "        return num.matches(\"^[0-9]*\\\\.[0-9]{2}$\");",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '.') return false;\n        if (num.charAt(num.length() - 1) == '.') return false;\n        int dot = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                dot++;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n        }\n        if (dot > 1) return false;\n        if (dot == 0) return true;\n        String[] parts = num.split(\"\\\\.\");\n        return parts[1].length() <= 2;",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '.') return false;\n        if (num.charAt(num.length() - 1) == '.') return false;\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') count++;\n        }\n        if (count > 1) return false;\n        if (count == 0) return true;\n        int index = num.indexOf('.');\n        if (index + 3 < num.length()) return false;\n        return true;",
    "        if (num == null || num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(0) == '-') i++;\n        int count = 0;\n        for (; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                count++;\n                continue;\n            }\n            if (num.charAt(i) < '0' || num.charAt(i) > '9') return false;\n        }\n        return count <= 1;",
    "        try {\n            double d = Double.parseDouble(num);\n            return (d == Math.floor(d)) && !Double.isInfinite(d);\n        } catch(NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(0) == '+' || num.charAt(0) == '-') i++;\n        int count = 0;\n        while (i < num.length() && num.charAt(i) != '.') {\n            if (!Character.isDigit(num.charAt(i))) return false;\n            i++;\n            count++;\n        }\n        if (count == 0) return false;\n        if (i == num.length()) return true;\n        i++;\n        count = 0;\n        while (i < num.length()) {\n            if (!Character.isDigit(num.charAt(i))) return false;\n            i++;\n            count++;\n        }\n        return count == 2;",
    "        return num.matches(\"^[0-9]*\\\\.[0-9]{2}$\");",
    "        if (num.length() == 0) return false;\n        boolean hasDecimal = false;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '.') {\n                if (hasDecimal) return false;\n                hasDecimal = true;\n            } else if (!Character.isDigit(c)) {\n                return false;\n            }\n        }\n        if (!hasDecimal) return false;\n        int decimalIndex = num.indexOf('.');\n        if (decimalIndex == num.length() - 1) return false;\n        if (decimalIndex == num.length() - 2) return true;\n        return false;",
    "        // Write your code here\n        return false;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '-') num = num.substring(1);\n        if (num.length() == 0) return false;\n        int dot = num.indexOf('.');\n        if (dot == -1) return isInteger(num);\n        if (dot == 0 || dot == num.length() - 1) return false;\n        String before = num.substring(0, dot);\n        String after = num.substring(dot + 1);\n        return isInteger(before) && isInteger(after) && after.length() <= 2;",
    "        return num.matches(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        return num.matches(\"^[0-9]*\\\\.[0-9]{2}$\");",
    "        if (num == null || num.length() == 0) {\n            return false;\n        }\n        int i = 0;\n        if (num.charAt(0) == '-') {\n            i++;\n        }\n        int count = 0;\n        while (i < num.length()) {\n            if (num.charAt(i) == '.') {\n                count++;\n            }\n            if (count > 1) {\n                return false;\n            }\n            if (!Character.isDigit(num.charAt(i)) && num.charAt(i) != '.') {\n                return false;\n            }\n            i++;\n        }\n        if (num.charAt(num.length() - 1) == '.') {\n            return false;\n        }\n        if (num.charAt(0) == '.') {\n            return false;\n        }\n        if (num.contains(\".\")) {\n            String[] arr = num.split(\"\\\\.\");\n            if (arr[1].length() > 2) {\n                return false;\n            }\n        }\n        return true;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '+' || num.charAt(0) == '-') num = num.substring(1);\n        if (num.length() == 0) return false;\n        int dot = num.indexOf('.');\n        if (dot == -1) return isInteger(num);\n        if (dot == 0 || dot == num.length() - 1) return false;\n        return isInteger(num.substring(0, dot)) && isInteger(num.substring(dot + 1));",
    "        return num.matches(\"^[0-9]*\\\\.[0-9]{2}$\");",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '.') return false;\n        if (num.charAt(num.length() - 1) == '.') return false;\n        if (num.charAt(0) == '-') num = num.substring(1);\n        String[] parts = num.split(\"\\\\.\");\n        if (parts.length > 2) return false;\n        if (parts.length == 2) {\n            if (parts[1].length() > 2) return false;\n        }\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') continue;\n            if (!Character.isDigit(num.charAt(i))) return false;\n        }\n        return true;",
    "        if (num == null || num.length() == 0) {\n            return false;\n        }\n        int i = 0;\n        int n = num.length();\n        if (num.charAt(0) == '-') {\n            i++;\n        }\n        int count = 0;\n        while (i < n && num.charAt(i) != '.') {\n            if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n            i++;\n        }\n        if (i < n && num.charAt(i) == '.') {\n            i++;\n            while (i < n) {\n                if (!Character.isDigit(num.charAt(i))) {\n                    return false;\n                }\n                count++;\n                i++;\n            }\n        }\n        return count <= 2;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num == null || num.length() == 0) return false;\n        int dot = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                dot++;\n                if (dot > 1) return false;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n        }\n        if (dot == 0) return true;\n        int index = num.indexOf('.');\n        if (index == num.length() - 1) return false;\n        if (index == num.length() - 2) return true;\n        return false;",
    "        try {\n            double d = Double.parseDouble(num);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
    "        if (num.length() == 0) {\n            return false;\n        }\n        boolean hasDecimal = false;\n        int decimalIndex = -1;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '.') {\n                if (hasDecimal) {\n                    return false;\n                }\n                hasDecimal = true;\n                decimalIndex = i;\n            } else if (c < '0' || c > '9') {\n                return false;\n            }\n        }\n        if (hasDecimal) {\n            return num.length() - decimalIndex <= 3;\n        }\n        return true;",
    "        return num.matches(\"^[+-]?\\\\d*\\\\.\\\\d{2}$\");",
    "        if (num.length() == 0) return false;\n        int decimal = num.indexOf('.');\n        if (decimal == -1) return false;\n        if (decimal == 0 || decimal == num.length() - 1) return false;\n        if (num.length() - decimal > 3) return false;\n        for (int i = 0; i < num.length(); i++) {\n            if (i == decimal) continue;\n            if (!Character.isDigit(num.charAt(i))) return false;\n        }\n        return true;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        int decimalIndex = num.indexOf('.');\n        if (decimalIndex == -1) return false;\n        if (decimalIndex == 0) return false;\n        if (decimalIndex == num.length() - 1) return false;\n        if (decimalIndex == num.length() - 2) return true;\n        if (decimalIndex == num.length() - 3) return false;\n        return false;",
    "        if (num == null || num.length() == 0) {\n            return false;\n        }\n        int i = 0;\n        if (num.charAt(0) == '+' || num.charAt(0) == '-') {\n            i++;\n        }\n        int count = 0;\n        for (; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                count++;\n            }\n            if (count > 1) {\n                return false;\n            }\n            if (num.charAt(i) < '0' || num.charAt(i) > '9') {\n                return false;\n            }\n        }\n        if (count == 0) {\n            return true;\n        }\n        String[] arr = num.split(\"\\\\.\");\n        if (arr[1].length() > 2) {\n            return false;\n        }\n        return true;",
    "        return num.matches(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '-') num = num.substring(1);\n        if (num.length() == 0) return false;\n        int i = 0;\n        while (i < num.length() && num.charAt(i) != '.') i++;\n        if (i == num.length()) return true;\n        if (i == 0) return false;\n        if (i == num.length() - 1) return false;\n        if (i == num.length() - 2) return true;\n        return false;",
    "        if (num.length() == 0) {\n            return false;\n        }\n        int index = num.indexOf('.');\n        if (index == -1) {\n            return true;\n        }\n        if (num.length() - index > 3) {\n            return false;\n        }\n        return true;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
    "        try {\n            double d = Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num == null) {\n            return false;\n        }\n        if (num.length() == 0) {\n            return false;\n        }\n        if (num.charAt(0) == '-') {\n            num = num.substring(1);\n        }\n        if (num.length() == 0) {\n            return false;\n        }\n        int dotIndex = num.indexOf('.');\n        if (dotIndex == -1) {\n            return false;\n        }\n        if (dotIndex == num.length() - 1) {\n            return false;\n        }\n        if (dotIndex == 0) {\n            return false;\n        }\n        if (num.charAt(dotIndex + 1) == '.') {\n            return false;\n        }\n        if (num.charAt(dotIndex + 2) == '.') {\n            return false;\n        }\n        if (dotIndex == num.length() - 2) {\n            return true;\n        }\n        return false;",
    "        try {\n            double d = Double.parseDouble(num);\n            String[] parts = num.split(\"\\\\.\");\n            if (parts.length == 2) {\n                if (parts[1].length() > 2) {\n                    return false;\n                }\n            }\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(0) == '-') i++;\n        int count = 0;\n        for (; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                count++;\n                if (count > 1) return false;\n            } else if (!Character.isDigit(num.charAt(i))) return false;\n        }\n        if (count == 0) return false;\n        String[] arr = num.split(\"\\\\.\");\n        if (arr.length == 2) {\n            if (arr[1].length() > 2) return false;\n        }\n        return true;",
    "        if (num == null) {\n            return false;\n        }\n        if (num.length() == 0) {\n            return false;\n        }\n        if (num.charAt(0) == '.') {\n            return false;\n        }\n        int dotCount = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '.') {\n                dotCount++;\n            } else if (!Character.isDigit(c)) {\n                return false;\n            }\n        }\n        if (dotCount > 1) {\n            return false;\n        }\n        if (dotCount == 0) {\n            return true;\n        }\n        int dotIndex = num.indexOf('.');\n        if (dotIndex == num.length() - 1) {\n            return false;\n        }\n        if (dotIndex == num.length() - 2) {\n            return true;\n        }\n        return false;",
    "        if (num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(0) == '-') i++;\n        int count = 0;\n        while (i < num.length()) {\n            if (num.charAt(i) == '.') {\n                count++;\n                if (count > 1) return false;\n            } else if (!Character.isDigit(num.charAt(i))) return false;\n            i++;\n        }\n        if (count == 0) return true;\n        String[] parts = num.split(\"\\\\.\");\n        if (parts[1].length() > 2) return false;\n        return true;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
    "        if (num == null || num.length() == 0) return false;\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                count++;\n            }\n        }\n        if (count > 1) return false;\n        if (count == 1) {\n            String[] arr = num.split(\"\\\\.\");\n            if (arr[1].length() > 2) return false;\n        }\n        try {\n            Double.parseDouble(num);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n        return true;",
    "        if (num == null || num.length() == 0) {\n            return false;\n        }\n        int dotCount = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '.') {\n                dotCount++;\n            } else if (!Character.isDigit(c)) {\n                return false;\n            }\n        }\n        if (dotCount > 1) {\n            return false;\n        }\n        if (dotCount == 0) {\n            return true;\n        }\n        int dotIndex = num.indexOf('.');\n        if (dotIndex == num.length() - 1) {\n            return false;\n        }\n        if (dotIndex == num.length() - 3) {\n            return true;\n        }\n        return false;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(0) == '-') i++;\n        if (num.length() - i == 0) return false;\n        int count = 0;\n        while (i < num.length() && num.charAt(i) != '.') {\n            if (!Character.isDigit(num.charAt(i))) return false;\n            i++;\n        }\n        if (i < num.length() && num.charAt(i) == '.') {\n            i++;\n            while (i < num.length() && Character.isDigit(num.charAt(i))) {\n                count++;\n                i++;\n            }\n        }\n        return count <= 2;",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '.') return false;\n        if (num.charAt(num.length() - 1) == '.') return false;\n        if (num.charAt(0) == '-' && num.length() == 1) return false;\n        if (num.charAt(0) == '-' && num.charAt(1) == '.') return false;\n        if (num.charAt(0) == '-' && num.charAt(num.length() - 1) == '.') return false;\n        int dotCount = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                dotCount++;\n                if (dotCount > 1) return false;\n            }\n            if (num.charAt(i) != '.' && num.charAt(i) != '-' && (num.charAt(i) < '0' || num.charAt(i) > '9')) return false;\n        }\n        if (dotCount == 0) return true;\n        int dotIndex = num.indexOf('.');\n        if (dotIndex == num.length() - 1) return true;\n        if (dotIndex == num.length() - 2) return true;\n        if (dotIndex == num.length() - 3) return true;\n        return false;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '-') num = num.substring(1);\n        if (num.length() == 0) return false;\n        int i = 0;\n        while (i < num.length() && num.charAt(i) != '.') {\n            if (!Character.isDigit(num.charAt(i))) return false;\n            i++;\n        }\n        if (i == num.length()) return true;\n        if (i == num.length() - 1) return false;\n        if (!Character.isDigit(num.charAt(i + 1))) return false;\n        if (i == num.length() - 2) return true;\n        if (!Character.isDigit(num.charAt(i + 2))) return false;\n        return true;",
    "        if (num == null || num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(0) == '+' || num.charAt(0) == '-') i++;\n        int count = 0;\n        for (; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                count++;\n                continue;\n            }\n            if (num.charAt(i) < '0' || num.charAt(i) > '9') return false;\n        }\n        return count == 1;",
    "        if (num.length() == 0) return false;\n        int dot = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                dot++;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n        }\n        if (dot > 1) return false;\n        if (dot == 1) {\n            int index = num.indexOf('.');\n            if (index == num.length() - 1) return false;\n            if (num.length() - index - 1 > 2) return false;\n        }\n        return true;",
    "        try {\n            double d = Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if(num.length() == 0) return false;\n        int count = 0;\n        for(int i = 0; i < num.length(); i++) {\n            if(num.charAt(i) == '.') {\n                count++;\n            }\n        }\n        if(count > 1) return false;\n        if(num.charAt(0) == '.') return false;\n        if(num.charAt(num.length() - 1) == '.') return false;\n        String[] arr = num.split(\"\\\\.\");\n        if(arr.length == 1) return true;\n        if(arr[1].length() > 2) return false;\n        return true;",
    "        String[] parts = num.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return false;\n        }\n        if (parts[0].length() == 0 || parts[1].length() == 0) {\n            return false;\n        }\n        if (parts[1].length() > 2) {\n            return false;\n        }\n        for (int i = 0; i < parts[0].length(); i++) {\n            if (!Character.isDigit(parts[0].charAt(i))) {\n                return false;\n            }\n        }\n        for (int i = 0; i < parts[1].length(); i++) {\n            if (!Character.isDigit(parts[1].charAt(i))) {\n                return false;\n            }\n        }\n        return true;",
    "        if (num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(i) == '-') i++;\n        if (i == num.length()) return false;\n        int decimal = -1;\n        while (i < num.length()) {\n            if (num.charAt(i) == '.') {\n                if (decimal != -1) return false;\n                decimal = i;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n            i++;\n        }\n        if (decimal == -1) return true;\n        if (decimal + 3 == num.length()) return true;\n        return false;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '-' || num.charAt(0) == '+') num = num.substring(1);\n        if (num.length() == 0) return false;\n        int i = 0;\n        while (i < num.length() && Character.isDigit(num.charAt(i))) i++;\n        if (i == num.length()) return true;\n        if (num.charAt(i) != '.') return false;\n        i++;\n        if (i == num.length()) return false;\n        int count = 0;\n        while (i < num.length() && Character.isDigit(num.charAt(i))) {\n            i++;\n            count++;\n        }\n        return count == 2;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(0) == '-') i++;\n        int count = 0;\n        for (; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                count++;\n                continue;\n            }\n            if (count > 1) return false;\n            if (num.charAt(i) < '0' || num.charAt(i) > '9') return false;\n        }\n        return count == 1;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num == null || num.length() == 0) {\n            return false;\n        }\n        int dot = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                dot++;\n            }\n        }\n        if (dot > 1) {\n            return false;\n        }\n        String[] arr = num.split(\"\\\\.\");\n        if (arr.length == 2) {\n            if (arr[1].length() > 2) {\n                return false;\n            }\n        }\n        return true;",
    "        if (num.length() == 0) {\n            return false;\n        }\n        int i = 0;\n        if (num.charAt(0) == '-') {\n            i++;\n        }\n        int count = 0;\n        for (; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                count++;\n                continue;\n            }\n            if (num.charAt(i) < '0' || num.charAt(i) > '9') {\n                return false;\n            }\n        }\n        if (count > 1) {\n            return false;\n        }\n        return true;",
    "        if (num == null || num.length() == 0) {\n            return false;\n        }\n        int dot = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                dot++;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n        }\n        if (dot > 1) {\n            return false;\n        }\n        if (dot == 0) {\n            return true;\n        }\n        int index = num.indexOf('.');\n        if (index == num.length() - 1) {\n            return false;\n        }\n        if (index == num.length() - 3) {\n            return true;\n        }\n        return false;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num == null || num.length() == 0) {\n            return false;\n        }\n        int dotCount = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '.') {\n                dotCount++;\n                if (dotCount > 1) {\n                    return false;\n                }\n            } else if (!Character.isDigit(c)) {\n                return false;\n            }\n        }\n        return true;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) {\n            return false;\n        }\n        int i = 0;\n        if (num.charAt(0) == '-') {\n            i++;\n        }\n        int count = 0;\n        for (; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                count++;\n            }\n            if (count > 1) {\n                return false;\n            }\n            if (num.charAt(i) < '0' || num.charAt(i) > '9') {\n                return false;\n            }\n        }\n        if (count == 0) {\n            return true;\n        }\n        String[] arr = num.split(\"\\\\.\");\n        if (arr[1].length() > 2) {\n            return false;\n        }\n        return true;",
    "        if (num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(0) == '-') i++;\n        int count = 0;\n        for (; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                count++;\n                if (count > 1) return false;\n            } else if (!Character.isDigit(num.charAt(i))) return false;\n        }\n        if (count == 0) return false;\n        String[] parts = num.split(\"\\\\.\");\n        if (parts.length == 1) return true;\n        return parts[1].length() <= 2;",
    "        try {\n            double d = Double.parseDouble(num);\n            String[] parts = num.split(\"\\\\.\");\n            if (parts.length == 2) {\n                if (parts[1].length() > 2) {\n                    return false;\n                }\n            }\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
    "        if (num == null) {\n            return false;\n        }\n        if (num.length() == 0) {\n            return false;\n        }\n        if (num.charAt(0) == '.') {\n            return false;\n        }\n        int dotCount = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '.') {\n                dotCount++;\n            }\n            if (dotCount > 1) {\n                return false;\n            }\n            if (c != '.' && c != '0' && c != '1' && c != '2' && c != '3' && c != '4' && c != '5' && c != '6' && c != '7' && c != '8' && c != '9') {\n                return false;\n            }\n        }\n        if (dotCount == 0) {\n            return true;\n        }\n        int dotIndex = num.indexOf('.');\n        if (dotIndex == num.length() - 1) {\n            return false;\n        }\n        if (dotIndex == num.length() - 2) {\n            return true;\n        }\n        return false;",
    "        if (num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(i) == '-') i++;\n        int count = 0;\n        while (i < num.length() && num.charAt(i) != '.') {\n            if (!Character.isDigit(num.charAt(i))) return false;\n            i++;\n        }\n        if (i == num.length()) return true;\n        i++;\n        while (i < num.length()) {\n            if (!Character.isDigit(num.charAt(i))) return false;\n            i++;\n            count++;\n        }\n        return count <= 2;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
    "        String[] parts = num.split(\"\\\\.\");\n        if (parts.length == 1) {\n            return parts[0].matches(\"[0-9]+\");\n        } else if (parts.length == 2) {\n            return parts[0].matches(\"[0-9]+\") && parts[1].matches(\"[0-9]{1,2}\");\n        } else {\n            return false;\n        }",
    "        if (num == null || num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(i) == '-') i++;\n        if (i == num.length()) return false;\n        boolean hasDot = false;\n        for (; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '.') {\n                if (hasDot) return false;\n                hasDot = true;\n            } else if (c < '0' || c > '9') {\n                return false;\n            }\n        }\n        if (!hasDot) return true;\n        int dotIndex = num.indexOf('.');\n        if (dotIndex == num.length() - 1) return false;\n        if (dotIndex == num.length() - 2) return true;\n        return false;",
    "        try {\n            BigDecimal bd = new BigDecimal(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '-') num = num.substring(1);\n        if (num.length() == 0) return false;\n        int i = 0;\n        while (i < num.length() && num.charAt(i) != '.') {\n            if (!Character.isDigit(num.charAt(i))) return false;\n            i++;\n        }\n        if (i == num.length()) return true;\n        if (i == num.length() - 1) return false;\n        if (!Character.isDigit(num.charAt(i + 1))) return false;\n        if (i == num.length() - 2) return true;\n        if (!Character.isDigit(num.charAt(i + 2))) return false;\n        return true;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        try {\n            BigDecimal bd = new BigDecimal(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        int dot = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                dot++;\n                if (dot > 1) return false;\n            } else if (num.charAt(i) < '0' || num.charAt(i) > '9') {\n                return false;\n            }\n        }\n        if (dot == 0) return false;\n        String[] parts = num.split(\"\\\\.\");\n        if (parts.length == 1) return true;\n        if (parts[1].length() > 2) return false;\n        return true;",
    "        return num.matches(\"^[0-9]*\\\\.[0-9]{2}$\");",
    "        if (num == null) return false;\n        if (num.isEmpty()) return false;\n        if (num.charAt(0) == '-') return false;\n        if (num.charAt(0) == '.') return false;\n        if (num.charAt(num.length() - 1) == '.') return false;\n        if (num.length() > 1 && num.charAt(0) == '0' && num.charAt(1) != '.') return false;\n        int dotCount = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                dotCount++;\n                if (dotCount > 1) return false;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n        }\n        if (dotCount == 0) return false;\n        int dotIndex = num.indexOf('.');\n        if (dotIndex == num.length() - 1) return false;\n        if (dotIndex == num.length() - 2) return true;\n        return false;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n        } catch (Exception e) {\n            return false;\n        }\n        return true;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '-') num = num.substring(1);\n        int dot = num.indexOf('.');\n        if (dot == -1) return isInteger(num);\n        if (dot == 0 || dot == num.length() - 1) return false;\n        String before = num.substring(0, dot);\n        String after = num.substring(dot + 1);\n        return isInteger(before) && isInteger(after) && after.length() <= 2;",
    "        if (num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(0) == '-') i++;\n        int count = 0;\n        for (; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                count++;\n                continue;\n            }\n            if (count > 1) return false;\n            if (num.charAt(i) < '0' || num.charAt(i) > '9') return false;\n        }\n        if (count == 0) return true;\n        if (count == 1) {\n            int index = num.indexOf('.');\n            if (index == num.length() - 1) return false;\n            if (index == num.length() - 3) return true;\n            return false;\n        }\n        return false;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        int dot = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '.') {\n                dot++;\n                if (dot > 1) return false;\n            } else if (c < '0' || c > '9') {\n                return false;\n            }\n        }\n        if (dot == 0) return true;\n        String[] parts = num.split(\"\\\\.\");\n        if (parts.length != 2) return false;\n        if (parts[1].length() > 2) return false;\n        return true;",
    "        if (num == null || num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(0) == '+' || num.charAt(0) == '-') i++;\n        int count = 0;\n        for (; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                count++;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n        }\n        return count <= 1;",
    "        return num.matches(\"[0-9]+(\\\\.[0-9]{1,2})?\");",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '.') return false;\n        int decimalPoint = -1;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                if (decimalPoint != -1) return false;\n                decimalPoint = i;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n        }\n        if (decimalPoint == -1) return true;\n        if (decimalPoint == num.length() - 1) return false;\n        if (decimalPoint == num.length() - 2) return true;\n        return false;",
    "        if (num == null || num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(0) == '-') i = 1;\n        int count = 0;\n        for (; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                count++;\n                if (count > 1) return false;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n        }\n        return true;",
    "        return num.matches(\"^[0-9]*\\\\.[0-9]{2}$\");",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
    "        if (num == null || num.isEmpty()) return false;\n        int dotCount = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                dotCount++;\n                if (dotCount > 1) return false;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n        }\n        return true;",
    "        if (num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(i) == '-') i++;\n        if (i == num.length()) return false;\n        int dot = -1;\n        for (; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                if (dot != -1) return false;\n                dot = i;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n        }\n        if (dot == -1) return true;\n        if (dot == num.length() - 1) return false;\n        if (dot == 0) return num.length() - 1 <= 2;\n        return num.length() - dot - 1 <= 2;",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '-') num = num.substring(1);\n        if (num.length() == 0) return false;\n        boolean hasDecimal = false;\n        int decimalCount = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '.') {\n                if (hasDecimal) return false;\n                hasDecimal = true;\n            } else if (c < '0' || c > '9') {\n                return false;\n            } else if (hasDecimal) {\n                decimalCount++;\n            }\n        }\n        return decimalCount <= 2;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '.') return false;\n        if (num.charAt(num.length() - 1) == '.') return false;\n        int dotCount = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') dotCount++;\n            if (dotCount > 1) return false;\n            if (num.charAt(i) != '.' && !Character.isDigit(num.charAt(i))) return false;\n        }\n        if (dotCount == 0) return true;\n        int dotIndex = num.indexOf('.');\n        if (dotIndex == num.length() - 1) return false;\n        if (num.length() - dotIndex - 1 > 2) return false;\n        return true;",
    "        if (num.length() == 0) return false;\n        if (num.length() == 1) return num.charAt(0) >= '0' && num.charAt(0) <= '9';\n        if (num.length() == 2) return num.charAt(0) >= '0' && num.charAt(0) <= '9' && num.charAt(1) >= '0' && num.charAt(1) <= '9';\n        if (num.length() == 3) return num.charAt(0) >= '0' && num.charAt(0) <= '9' && num.charAt(1) >= '0' && num.charAt(1) <= '9' && num.charAt(2) == '.';\n        if (num.length() == 4) return num.charAt(0) >= '0' && num.charAt(0) <= '9' && num.charAt(1) >= '0' && num.charAt(1) <= '9' && num.charAt(2) == '.' && num.charAt(3) >= '0' && num.charAt(3) <= '9';\n        return false;",
    "        if (num == null || num.length() == 0) {\n            return false;\n        }\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                count++;\n            }\n        }\n        if (count > 1) {\n            return false;\n        }\n        try {\n            Double.parseDouble(num);\n        } catch (Exception e) {\n            return false;\n        }\n        return true;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num == null || num.length() == 0) return false;\n        int dotCount = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '.') {\n                dotCount++;\n                if (dotCount > 1) return false;\n            } else if (c < '0' || c > '9') {\n                return false;\n            }\n        }\n        if (dotCount == 0) return false;\n        String[] parts = num.split(\"\\\\.\");\n        if (parts[1].length() > 2) return false;\n        return true;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(0) == '-') i++;\n        int dot = -1;\n        for (; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                if (dot != -1) return false;\n                dot = i;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n        }\n        if (dot == -1) return true;\n        if (dot == num.length() - 1) return false;\n        if (dot == 0) return num.length() - 1 <= 2;\n        return num.length() - dot - 1 <= 2;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '-' || num.charAt(0) == '+') num = num.substring(1);\n        if (num.length() == 0) return false;\n        int i = 0;\n        while (i < num.length() && num.charAt(i) != '.') i++;\n        if (i == num.length()) return false;\n        if (i == 0) return false;\n        for (int j = 0; j < i; j++) {\n            if (!Character.isDigit(num.charAt(j))) return false;\n        }\n        if (i + 1 == num.length()) return false;\n        if (i + 3 < num.length()) return false;\n        for (int j = i + 1; j < num.length(); j++) {\n            if (!Character.isDigit(num.charAt(j))) return false;\n        }\n        return true;",
    "        if (num == null) return false;\n        if (num.length() == 0) return false;\n        int dotIndex = num.indexOf('.');\n        if (dotIndex == -1) return false;\n        if (dotIndex == 0) return false;\n        if (dotIndex == num.length() - 1) return false;\n        if (dotIndex != num.lastIndexOf('.')) return false;\n        if (num.length() - dotIndex - 1 > 2) return false;\n        for (int i = 0; i < num.length(); i++) {\n            if (i == dotIndex) continue;\n            if (!Character.isDigit(num.charAt(i))) return false;\n        }\n        return true;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        int dot = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                dot++;\n                if (dot > 1) return false;\n            } else if (num.charAt(i) < '0' || num.charAt(i) > '9') {\n                return false;\n            }\n        }\n        if (dot == 0) return true;\n        String[] parts = num.split(\"\\\\.\");\n        if (parts[1].length() > 2) return false;\n        return true;",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '-') num = num.substring(1);\n        if (num.length() == 0) return false;\n        int index = num.indexOf('.');\n        if (index == -1) return num.matches(\"[0-9]+\");\n        if (index == 0) return false;\n        if (index == num.length() - 1) return false;\n        if (num.substring(index + 1).length() > 2) return false;\n        return num.substring(0, index).matches(\"[0-9]+\") && num.substring(index + 1).matches(\"[0-9]+\");",
    "        // Write your code here\n        return false;",
    "        if(num.length() == 0) return false;\n        int decimal = num.indexOf('.');\n        if(decimal == -1) return false;\n        if(decimal == num.length() - 1) return false;\n        if(decimal == 0) return false;\n        if(decimal > 2) return false;\n        if(num.charAt(decimal + 1) == '.') return false;\n        if(num.charAt(decimal + 2) == '.') return false;\n        if(num.charAt(decimal + 3) != '\\0') return false;\n        return true;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(0) == '-') i++;\n        if (i == num.length()) return false;\n        int dot = -1;\n        for (; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                if (dot != -1) return false;\n                dot = i;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n        }\n        if (dot == -1) return true;\n        if (dot == num.length() - 1) return false;\n        if (dot == num.length() - 3) return true;\n        return false;",
    "        try {\n            double d = Double.parseDouble(num);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        return num.matches(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '-') num = num.substring(1);\n        if (num.length() == 0) return false;\n        int i = 0;\n        while (i < num.length() && num.charAt(i) != '.') {\n            if (!Character.isDigit(num.charAt(i))) return false;\n            i++;\n        }\n        if (i == num.length()) return true;\n        if (i == 0) return false;\n        if (i == num.length() - 1) return false;\n        if (num.charAt(i + 1) == '.') return false;\n        if (!Character.isDigit(num.charAt(i + 1))) return false;\n        if (num.length() == i + 2) return true;\n        if (num.charAt(i + 2) == '.') return false;\n        if (!Character.isDigit(num.charAt(i + 2))) return false;\n        return true;",
    "        return num.matches(\"^\\\\d+\\\\.\\\\d{2}$\");",
    "        if (num == null || num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(0) == '-') i++;\n        int count = 0;\n        while (i < num.length()) {\n            if (num.charAt(i) == '.') {\n                count++;\n                if (count > 1) return false;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n            i++;\n        }\n        return true;",
    "        if (num.length() == 0) return false;\n        int dot = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '.') {\n                dot++;\n            } else if (!Character.isDigit(c)) {\n                return false;\n            }\n        }\n        if (dot > 1) return false;\n        if (dot == 1) {\n            String[] parts = num.split(\"\\\\.\");\n            if (parts[1].length() > 2) return false;\n        }\n        return true;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '-' && num.length() == 1) return false;\n        if (num.charAt(0) == '-' && num.charAt(1) == '.' && num.length() == 2) return false;\n        if (num.charAt(0) == '-' && num.charAt(1) == '0' && num.length() == 2) return false;\n        if (num.charAt(0) == '0' && num.length() == 1) return true;\n        if (num.charAt(0) == '0' && num.charAt(1) == '.' && num.length() == 2) return false;\n        if (num.charAt(0) == '0' && num.charAt(1) == '.' && num.charAt(2) == '0' && num.length() == 3) return true;\n        if (num.charAt(0) == '0' && num.charAt(1) == '.' && num.charAt(2) == '0' && num.charAt(3) == '0' && num.length() == 4) return true;\n        if (num.charAt(0) == '0' && num.charAt(1) == '.' && num.charAt(2) == '0' && num.charAt(3) == '0' && num.charAt(4) == '0' && num.length() == 5) return true;\n        if (num.charAt(0) == '0' && num.charAt(1) == '.' && num.charAt(2) == '0' && num.charAt(3) == '0' && num.charAt(4) == '0' && num.charAt(5) == '0' && num.length() == 6) return true;\n        if (num.charAt(0) == '0' && num.charAt(1) == '.' && num.charAt(2) == '0' && num.charAt(3) == '0' && num.charAt(4) == '0' && num.charAt(5",
    "        try {\n            double d = Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) {\n            return false;\n        }\n        boolean hasDecimal = false;\n        int decimalCount = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '.') {\n                if (hasDecimal) {\n                    return false;\n                }\n                hasDecimal = true;\n            } else if (c < '0' || c > '9') {\n                return false;\n            } else if (hasDecimal) {\n                decimalCount++;\n            }\n        }\n        return decimalCount <= 2;",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '-') num = num.substring(1);\n        if (num.length() == 0) return false;\n        int decimal = num.indexOf('.');\n        if (decimal == -1) return false;\n        if (decimal == 0) return false;\n        if (decimal == num.length() - 1) return false;\n        if (num.length() - decimal > 3) return false;\n        for (int i = 0; i < num.length(); i++) {\n            if (i == decimal) continue;\n            if (!Character.isDigit(num.charAt(i))) return false;\n        }\n        return true;",
    "        if (num == null || num.length() == 0) {\n            return false;\n        }\n        int dotCount = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '.') {\n                dotCount++;\n            } else if (!Character.isDigit(c)) {\n                return false;\n            }\n        }\n        if (dotCount > 1) {\n            return false;\n        }\n        if (dotCount == 0) {\n            return true;\n        }\n        int dotIndex = num.indexOf('.');\n        if (dotIndex == 0 || dotIndex == num.length() - 1) {\n            return false;\n        }\n        if (num.length() - dotIndex - 1 > 2) {\n            return false;\n        }\n        return true;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num == null || num.length() == 0) {\n            return false;\n        }\n        int dotCount = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '.') {\n                dotCount++;\n            } else if (!Character.isDigit(c)) {\n                return false;\n            }\n        }\n        if (dotCount > 1) {\n            return false;\n        }\n        if (dotCount == 0) {\n            return true;\n        }\n        String[] parts = num.split(\"\\\\.\");\n        if (parts[1].length() > 2) {\n            return false;\n        }\n        return true;",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '.') return false;\n        int decimalCount = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                decimalCount++;\n            }\n            if (decimalCount > 1) return false;\n            if (num.charAt(i) < '0' || num.charAt(i) > '9') return false;\n        }\n        return true;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(0) == '-') i++;\n        int count = 0;\n        for (; i < num.length(); i++) {\n            if (num.charAt(i) == '.') {\n                count++;\n                if (count > 1) return false;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n        }\n        if (count == 0) return true;\n        String[] arr = num.split(\"\\\\.\");\n        if (arr[1].length() > 2) return false;\n        return true;",
    "        // Write your code here\n        return num.matches(\"[0-9]*\\\\.[0-9]{2}\");",
    "        try {\n            Double.parseDouble(num);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n        return true;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
    "        return num.matches(\"^[0-9]*\\\\.[0-9]{2}$\");",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '-') num = num.substring(1);\n        if (num.length() == 0) return false;\n        if (num.charAt(0) == '.') return false;\n        int dot = num.indexOf('.');\n        if (dot == -1) return true;\n        if (dot == num.length() - 1) return false;\n        if (dot == 0) return false;\n        if (num.charAt(dot + 1) == '.') return false;\n        if (num.charAt(dot + 2) == '.') return false;\n        return true;",
    "        try {\n            Double.parseDouble(num);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '-') num = num.substring(1);\n        if (num.length() == 0) return false;\n        int i = 0;\n        while (i < num.length() && num.charAt(i) != '.') {\n            if (!Character.isDigit(num.charAt(i))) return false;\n            i++;\n        }\n        if (i == num.length()) return true;\n        i++;\n        if (i == num.length()) return false;\n        int count = 0;\n        while (i < num.length()) {\n            if (!Character.isDigit(num.charAt(i))) return false;\n            count++;\n            i++;\n        }\n        return count <= 2;",
    "        if (num.length() == 0) {\n            return false;\n        }\n        if (num.charAt(0) == '-') {\n            num = num.substring(1);\n        }\n        int dot = num.indexOf('.');\n        if (dot == -1) {\n            return isInteger(num);\n        }\n        if (dot == 0) {\n            return false;\n        }\n        if (dot == num.length() - 1) {\n            return false;\n        }\n        String before = num.substring(0, dot);\n        String after = num.substring(dot + 1);\n        if (!isInteger(before)) {\n            return false;\n        }\n        if (!isInteger(after)) {\n            return false;\n        }\n        if (after.length() > 2) {\n            return false;\n        }\n        return true;",
    "        if(num.length() == 0) return false;\n        int i = 0;\n        if(num.charAt(i) == '-') i++;\n        if(i == num.length()) return false;\n        int count = 0;\n        while(i < num.length() && num.charAt(i) != '.') {\n            if(!Character.isDigit(num.charAt(i))) return false;\n            i++;\n        }\n        if(i == num.length()) return true;\n        i++;\n        while(i < num.length()) {\n            if(!Character.isDigit(num.charAt(i))) return false;\n            i++;\n            count++;\n        }\n        return count <= 2;",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '-') num = num.substring(1);\n        if (num.length() == 0) return false;\n        int decimal = num.indexOf('.');\n        if (decimal == -1) return false;\n        if (decimal == 0 || decimal == num.length() - 1) return false;\n        if (decimal != num.lastIndexOf('.')) return false;\n        for (int i = 0; i < num.length(); i++) {\n            if (i == decimal) continue;\n            if (!Character.isDigit(num.charAt(i))) return false;\n        }\n        return true;",
    "        if (num.length() == 0) return false;\n        if (num.charAt(0) == '-') num = num.substring(1);\n        if (num.length() == 0) return false;\n        if (num.charAt(0) == '.') return false;\n        int dot = num.indexOf('.');\n        if (dot == -1) return true;\n        if (dot == num.length() - 1) return false;\n        if (dot == 0) return false;\n        if (num.length() - dot > 3) return false;\n        return true;",
    "        if (num.length() == 0) return false;\n        int i = 0;\n        if (num.charAt(0) == '-') i++;\n        int count = 0;\n        while (i < num.length()) {\n            if (num.charAt(i) == '.') {\n                count++;\n                if (count > 1) return false;\n            } else if (!Character.isDigit(num.charAt(i))) {\n                return false;\n            }\n            i++;\n        }\n        return true;"
  ]
}