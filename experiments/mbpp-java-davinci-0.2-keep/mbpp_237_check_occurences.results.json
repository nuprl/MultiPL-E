{
  "name": "mbpp_237_check_occurences",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long element : test_list) {\n            if (occurences.containsKey(element)) {\n                occurences.put(element, occurences.get(element) + 1);\n            } else {\n                occurences.put(element, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp5pvkq3xd.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp5pvkq3xd.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp5pvkq3xd.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp5pvkq3xd.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmps8x94duo.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmps8x94duo.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmps8x94duo.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmps8x94duo.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmps8x94duo.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmps8x94duo.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmps8x94duo.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmps8x94duo.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for(int i = 0; i < test_list.size(); i++) {\n            if(occurences.containsKey(test_list.get(i))) {\n                occurences.put(test_list.get(i), occurences.get(test_list.get(i)) + 1);\n            } else {\n                occurences.put(test_list.get(i), 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmppu799sap.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmppu799sap.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmppu799sap.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmppu799sap.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpw93nyj6m.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpw93nyj6m.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpw93nyj6m.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpw93nyj6m.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i,result.get(i) + 1);\n            } else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpkocussdk.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpkocussdk.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpkocussdk.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpkocussdk.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for(Long i : test_list) {\n            if(result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpl0znevi5.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpl0znevi5.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpl0znevi5.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpl0znevi5.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long element : test_list) {\n            if (result.containsKey(element)) {\n                result.put(element, result.get(element) + 1);\n            } else {\n                result.put(element, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpkodjcura.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpkodjcura.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpkodjcura.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpkodjcura.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpfa4cz0cn.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpfa4cz0cn.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpfa4cz0cn.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpfa4cz0cn.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpfa4cz0cn.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpfa4cz0cn.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpfa4cz0cn.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpfa4cz0cn.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long item : test_list) {\n            if (occurences.containsKey(item)) {\n                occurences.put(item, occurences.get(item) + 1);\n            } else {\n                occurences.put(item, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpld6ecxay.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpld6ecxay.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpld6ecxay.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpld6ecxay.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for(int i = 0; i < test_list.size(); i++) {\n            if(occurences.containsKey(test_list.get(i))) {\n                occurences.put(test_list.get(i), occurences.get(test_list.get(i)) + 1);\n            } else {\n                occurences.put(test_list.get(i), 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmppu799sap.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmppu799sap.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmppu799sap.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmppu799sap.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i)+1);\n            } else {\n                occurences.put(i, (long)1);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmp9qtx9tgu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp9qtx9tgu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp9qtx9tgu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp9qtx9tgu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmp99o6higd.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp99o6higd.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp99o6higd.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp99o6higd.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long test_element : test_list) {\n            if (occurences.containsKey(test_element)) {\n                occurences.put(test_element, occurences.get(test_element) + 1);\n            } else {\n                occurences.put(test_element, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpmbqfe52r.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpmbqfe52r.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpmbqfe52r.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpmbqfe52r.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for(int i = 0; i < test_list.size(); i++) {\n            if(result.containsKey(test_list.get(i))) {\n                result.put(test_list.get(i), result.get(test_list.get(i)) + 1);\n            } else {\n                result.put(test_list.get(i), 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpw1f3u72i.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpw1f3u72i.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpw1f3u72i.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpw1f3u72i.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<>();\n        for (Long num : test_list) {\n            if (occurences.containsKey(num)) {\n                occurences.put(num, occurences.get(num) + 1);\n            } else {\n                occurences.put(num, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmp4m4rsi1d.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4m4rsi1d.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4m4rsi1d.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4m4rsi1d.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmps8x94duo.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmps8x94duo.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmps8x94duo.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmps8x94duo.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long num : test_list) {\n            if (occurences.containsKey(num)) {\n                occurences.put(num, occurences.get(num) + 1);\n            } else {\n                occurences.put(num, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmp0g0pdfzg.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0g0pdfzg.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0g0pdfzg.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0g0pdfzg.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i: test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpzfkvdy2j.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpzfkvdy2j.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpzfkvdy2j.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpzfkvdy2j.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpb2ql91i3.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpb2ql91i3.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpb2ql91i3.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpb2ql91i3.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            }\n            else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmplgxwkqtc.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmplgxwkqtc.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmplgxwkqtc.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmplgxwkqtc.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurence_map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurence_map.containsKey(i)) {\n                occurence_map.put(i, occurence_map.get(i) + 1);\n            } else {\n                occurence_map.put(i, 1L);\n            }\n        }\n        return occurence_map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmp3kqli_93.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp3kqli_93.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp3kqli_93.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp3kqli_93.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            }\n            else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmptxklajbr.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmptxklajbr.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmptxklajbr.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmptxklajbr.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<>();\n        for (Long element : test_list) {\n            if (occurences.containsKey(element)) {\n                occurences.put(element, occurences.get(element) + 1);\n            } else {\n                occurences.put(element, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpvat4yg9l.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpvat4yg9l.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpvat4yg9l.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpvat4yg9l.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, (long) 1);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpx2ylj_lm.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpx2ylj_lm.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpx2ylj_lm.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpx2ylj_lm.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpb2ql91i3.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpb2ql91i3.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpb2ql91i3.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpb2ql91i3.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long num : test_list) {\n            if (occurences.containsKey(num)) {\n                occurences.put(num, occurences.get(num) + 1);\n            } else {\n                occurences.put(num, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmp0g0pdfzg.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0g0pdfzg.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0g0pdfzg.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0g0pdfzg.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i,result.get(i) + 1);\n            } else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmp0uvlzfz4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0uvlzfz4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0uvlzfz4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0uvlzfz4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            } else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpwawmpn8y.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpwawmpn8y.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpwawmpn8y.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpwawmpn8y.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpw93nyj6m.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpw93nyj6m.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpw93nyj6m.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpw93nyj6m.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i,result.get(i) + 1);\n            } else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmp0uvlzfz4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0uvlzfz4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0uvlzfz4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0uvlzfz4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long l : test_list) {\n            if (result.containsKey(l)) {\n                result.put(l, result.get(l) + 1);\n            } else {\n                result.put(l, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpl1ig91j3.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpl1ig91j3.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpl1ig91j3.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpl1ig91j3.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpb2ql91i3.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpb2ql91i3.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpb2ql91i3.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpb2ql91i3.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (dict.containsKey(i)) {\n                dict.put(i, dict.get(i) + 1);\n            } else {\n                dict.put(i, 1L);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpsj7yeh7g.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsj7yeh7g.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsj7yeh7g.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsj7yeh7g.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long num : test_list) {\n            if (result.containsKey(num)) {\n                result.put(num, result.get(num) + 1);\n            } else {\n                result.put(num, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpt718tngw.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpt718tngw.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long num : test_list) {\n            if (occurences.containsKey(num)) {\n                occurences.put(num, occurences.get(num) + 1);\n            } else {\n                occurences.put(num, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmp0g0pdfzg.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0g0pdfzg.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0g0pdfzg.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0g0pdfzg.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpfa4cz0cn.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpfa4cz0cn.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpfa4cz0cn.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpfa4cz0cn.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmpfa4cz0cn.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpfa4cz0cn.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpfa4cz0cn.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpfa4cz0cn.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurence_dict = new HashMap<Long,Long>();\n        for (Long element : test_list) {\n            if (occurence_dict.containsKey(element)) {\n                occurence_dict.put(element, occurence_dict.get(element) + 1);\n            } else {\n                occurence_dict.put(element, 1L);\n            }\n        }\n        return occurence_dict;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmps6p6r3al.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmps6p6r3al.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            } else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmp68j_94l4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp68j_94l4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, (long)1);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "/tmp/tmprg0zrpyf.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmprg0zrpyf.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpm_6qxaxb.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0mug54go.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0mug54go.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0mug54go.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4oc515h4.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4oc515h4.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4oc515h4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}