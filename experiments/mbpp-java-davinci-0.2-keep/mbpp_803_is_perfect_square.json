{
  "name": "mbpp_803_is_perfect_square",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    public static boolean isPerfectSquare(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(isPerfectSquare((10l)) == (false));\n    assert(isPerfectSquare((36l)) == (true));\n    assert(isPerfectSquare((14l)) == (false));\n    assert(isPerfectSquare((196l)) == (true));\n    assert(isPerfectSquare((125l)) == (false));\n    assert(isPerfectSquare((15625l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n < 0) return false;\n        if (n == 0 || n == 1) return true;\n        long t = n / 2;\n        while (t * t > n) {\n            t = (t + n / t) / 2;\n        }\n        return t * t == n;",
    "        if (n < 0) {\n            return false;\n        }\n        long tst = (long)(Math.sqrt(n) + 0.5);\n        return tst*tst == n;",
    "        if (n < 0) {\n            return false;\n        }\n        long tst = (long)(Math.sqrt(n) + 0.5);\n        return tst*tst == n;",
    "        long sqrt = (long) Math.sqrt(n);\n        return sqrt * sqrt == n;",
    "        long sqrt = (long) Math.sqrt(n);\n        return sqrt * sqrt == n;",
    "        if (n < 0) return false;\n        long tst = (long)(Math.sqrt(n) + 0.5);\n        return tst*tst == n;",
    "        long sqrt = (long) Math.sqrt(n);\n        return sqrt * sqrt == n;",
    "        if (n < 0) return false;\n        long tst = (long)(Math.sqrt(n) + 0.5);\n        return tst*tst == n;",
    "        long i = 1;\n        while (i * i <= n) {\n            if (i * i == n) {\n                return true;\n            }\n            i++;\n        }\n        return false;",
    "        if (n < 0) return false;\n        long tst = (long)(Math.sqrt(n) + 0.5);\n        return tst*tst == n;",
    "        long sqrt = (long) Math.sqrt(n);\n        return sqrt * sqrt == n;",
    "        if (n < 0)\n            return false;\n        if (n == 0 || n == 1)\n            return true;\n        long t = n;\n        while (t > n / t) {\n            t = (t + n / t) / 2;\n        }\n        return t * t == n;",
    "        if(n < 0) return false;\n        if(n == 0 || n == 1) return true;\n        long start = 1, end = n;\n        while(start <= end) {\n            long mid = (start + end) / 2;\n            if(mid * mid == n) return true;\n            if(mid * mid < n) start = mid + 1;\n            else end = mid - 1;\n        }\n        return false;",
    "        if (n < 0) return false;\n        long tst = (long)(Math.sqrt(n) + 0.5);\n        return tst*tst == n;",
    "        if (n < 0) return false;\n        long t = (long)(Math.sqrt(n));\n        return t*t == n;",
    "        if (n < 0) return false;\n        if (n == 0 || n == 1) return true;\n        long t = n;\n        while (t > n / t) {\n            t = (t + n / t) / 2;\n        }\n        return t * t == n;",
    "        long sqrt = (long) Math.sqrt(n);\n        return sqrt * sqrt == n;",
    "        if (n < 0) return false;\n        long tst = (long)(Math.sqrt(n) + 0.5);\n        return tst*tst == n;",
    "        // Your code goes here\n        long i = 1;\n        while (i * i < n) {\n            i++;\n        }\n        return i * i == n;",
    "        if (n < 0) {\n            return false;\n        }\n        long tst = (long)(Math.sqrt(n) + 0.5);\n        return tst*tst == n;"
  ]
}