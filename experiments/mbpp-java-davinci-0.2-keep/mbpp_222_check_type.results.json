{
  "name": "mbpp_222_check_type",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here.\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpn1gwo626.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpn1gwo626.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpn1gwo626.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpn1gwo626.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> type = cls.getComponentType();\n            if (type.isPrimitive()) {\n                return true;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                return Arrays.stream(array).allMatch(x -> x.getClass() == type);\n            }\n        } else {\n            return false;\n        }\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpbykm5l83.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpbykm5l83.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpbykm5l83.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpbykm5l83.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        Class<?> clazz = test_tuple.getClass();\n        if (clazz.isArray()) {\n            Class<?> componentType = clazz.getComponentType();\n            if (componentType.isPrimitive()) {\n                result = false;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                for (int i = 0; i < array.length; i++) {\n                    if (!array[i].getClass().equals(componentType)) {\n                        result = false;\n                        break;\n                    }\n                }\n            }\n        } else {\n            result = false;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpk4e5t_1_.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpk4e5t_1_.java:35: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpk4e5t_1_.java:36: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpk4e5t_1_.java:37: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp2bg0akqa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2bg0akqa.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        if (test_tuple instanceof Pair) {\n            Pair<Object, Object> test_pair = (Pair<Object, Object>) test_tuple;\n            return test_pair.getValue0().getClass() == test_pair.getValue1().getClass();\n        } else if (test_tuple instanceof Triplet) {\n            Triplet<Object, Object, Object> test_triplet = (Triplet<Object, Object, Object>) test_tuple;\n            return test_triplet.getValue0().getClass() == test_triplet.getValue1().getClass() && test_triplet.getValue1().getClass() == test_triplet.getValue2().getClass();\n        } else if (test_tuple instanceof Quartet) {\n            Quartet<Object, Object, Object, Object> test_quartet = (Quartet<Object, Object, Object, Object>) test_tuple;\n            return test_quartet.getValue0().getClass() == test_quartet.getValue1().getClass() && test_quartet.getValue1().getClass() == test_quartet.getValue2().getClass() && test_quartet.getValue2().getClass() == test_quartet.getValue3().getClass();\n        } else if (test_tuple instanceof Quintet) {\n            Quintet<Object, Object, Object, Object, Object> test_quintet = (Quintet<Object, Object, Object, Object, Object>) test_tuple;\n            return test_quintet.getValue0().getClass() == test_quintet.getValue1().getClass() && test_quintet.getValue1().getClass() == test_quintet.getValue2().getClass() && test_quintet.getValue2().getClass() == test_quintet.getValue3().getClass() && test_quintet.getValue3().getClass() == test_quintet.getValue4().getClass();\n        } else if (test_tuple instanceof Sextet) {\n            Sextet<Object, Object, Object, Object, Object, Object> test_sextet = (Sext\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpdexp0s3l.java:24: error: ')' expected\n            Sextet<Object, Object, Object, Object, Object, Object> test_sextet = (Sext\n                                                                                      ^\n/tmp/tmpdexp0s3l.java:26: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        Class<?> first = null;\n        for (Object o : (Object[]) test_tuple) {\n            if (first == null) {\n                first = o.getClass();\n            } else {\n                if (first != o.getClass()) {\n                    result = false;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpbl15s7ho.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpbl15s7ho.java:29: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpbl15s7ho.java:30: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpbl15s7ho.java:31: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        int length = Array.getLength(test_tuple);\n        if (length == 0) {\n            return false;\n        }\n        Object obj = Array.get(test_tuple, 0);\n        for (int i = 1; i < length; i++) {\n            if (obj.getClass() != Array.get(test_tuple, i).getClass()) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpbtj9j34p.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpbtj9j34p.java:32: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpbtj9j34p.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpbtj9j34p.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here.\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpn1gwo626.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpn1gwo626.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpn1gwo626.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpn1gwo626.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp5sj_a02y.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5sj_a02y.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5sj_a02y.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5sj_a02y.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            if (componentType.isPrimitive()) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuqh0qxc_.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpuqh0qxc_.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpuqh0qxc_.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpuqh0qxc_.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            if (componentType.isPrimitive()) {\n                return true;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                return Arrays.stream(array).allMatch(x -> x.getClass() == componentType);\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpp_h47yu1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpp_h47yu1.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpp_h47yu1.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpp_h47yu1.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            int length = Array.getLength(test_tuple);\n            for (int i = 0; i < length; i++) {\n                Object element = Array.get(test_tuple, i);\n                if (element.getClass() != componentType) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpec22v5at.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpec22v5at.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpec22v5at.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpec22v5at.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        //System.out.println(test_tuple.getClass().getName());\n        //System.out.println(test_tuple.getClass().getTypeName());\n        //System.out.println(test_tuple.getClass().getSimpleName());\n        //System.out.println(test_tuple.getClass().getCanonicalName());\n        //System.out.println(test_tuple.getClass().getTypeParameters());\n        //System.out.println(test_tuple.getClass().getGenericInterfaces());\n        //System.out.println(test_tuple.getClass().getGenericSuperclass());\n        //System.out.println(test_tuple.getClass().getGenericComponentType());\n        //System.out.println(test_tuple.getClass().getComponentType());\n        //System.out.println(test_tuple.getClass().getModifiers());\n        //System.out.println(test_tuple.getClass().getDeclaredClasses());\n        //System.out.println(test_tuple.getClass().getDeclaredFields());\n        //System.out.println(test_tuple.getClass().getDeclaredMethods());\n        //System.out.println(test_tuple.getClass().getDeclaredConstructors());\n        //System.out.println(test_tuple.getClass().getDeclaredAnnotations());\n        //System.out.println(test_tuple.getClass().getDeclaredTypes());\n        //System.out.println(test_tuple.getClass().getDeclaringClass());\n        //System.out.println(test_tuple.getClass().getEnclosingClass());\n        //System.out.println(test_tuple.getClass().getEnclosingConstructor());\n        //System.out.println(test_tuple.getClass().getEnclosingMethod());\n        //System.out.println(test_tuple.getClass().getEnumConstants());\n        //System.out\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpvquz0r49.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpvquz0r49.java:38: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpvquz0r49.java:39: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpvquz0r49.java:40: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> clazz = test_tuple.getClass();\n        if (!clazz.isArray()) {\n            return false;\n        }\n        Class<?> componentType = clazz.getComponentType();\n        if (componentType.isPrimitive()) {\n            return true;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if (array.length == 0) {\n            return true;\n        }\n        Object o = array[0];\n        if (o == null) {\n            return false;\n        }\n        Class<?> oClass = o.getClass();\n        for (int i = 1; i < array.length; i++) {\n            if (array[i] == null) {\n                return false;\n            }\n            if (!oClass.equals(array[i].getClass())) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp9hdkr8tz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp9hdkr8tz.java:42: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp9hdkr8tz.java:43: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp9hdkr8tz.java:44: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> type = cls.getComponentType();\n            if (type.isPrimitive()) {\n                return true;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                return Arrays.stream(array).allMatch(x -> x.getClass() == type);\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp1iumubqj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp1iumubqj.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp1iumubqj.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp1iumubqj.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        for (int i = 0; i < Array.getLength(test_tuple); i++) {\n            if (!componentType.isInstance(Array.get(test_tuple, i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpdbredd0c.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpdbredd0c.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpdbredd0c.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpdbredd0c.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if (array.length == 0) {\n            return true;\n        }\n        Object first = array[0];\n        if (first == null) {\n            return false;\n        }\n        Class<?> firstClass = first.getClass();\n        for (int i = 1; i < array.length; i++) {\n            if (array[i] == null) {\n                return false;\n            }\n            if (array[i].getClass() != firstClass) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpp95kf8sp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpp95kf8sp.java:39: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpp95kf8sp.java:40: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpp95kf8sp.java:41: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if (array.length == 0) {\n            return false;\n        }\n        Class<?> firstElementClass = array[0].getClass();\n        for (int i = 1; i < array.length; i++) {\n            if (array[i].getClass() != firstElementClass) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpq7gpw6y3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpq7gpw6y3.java:32: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpq7gpw6y3.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpq7gpw6y3.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if (array.length == 0) {\n            return false;\n        }\n        Class<?> firstElementClass = array[0].getClass();\n        for (int i = 1; i < array.length; i++) {\n            if (array[i].getClass() != firstElementClass) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpwkl9k6up.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpwkl9k6up.java:35: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpwkl9k6up.java:36: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpwkl9k6up.java:37: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        if (test_tuple instanceof Pair) {\n            Pair<Object, Object> pair = (Pair<Object, Object>) test_tuple;\n            result = pair.getValue0().getClass().equals(pair.getValue1().getClass());\n        } else if (test_tuple instanceof Triplet) {\n            Triplet<Object, Object, Object> triplet = (Triplet<Object, Object, Object>) test_tuple;\n            result = triplet.getValue0().getClass().equals(triplet.getValue1().getClass()) && triplet.getValue1().getClass().equals(triplet.getValue2().getClass());\n        } else if (test_tuple instanceof Quartet) {\n            Quartet<Object, Object, Object, Object> quartet = (Quartet<Object, Object, Object, Object>) test_tuple;\n            result = quartet.getValue0().getClass().equals(quartet.getValue1().getClass()) && quartet.getValue1().getClass().equals(quartet.getValue2().getClass()) && quartet.getValue2().getClass().equals(quartet.getValue3().getClass());\n        } else if (test_tuple instanceof Quintet) {\n            Quintet<Object, Object, Object, Object, Object> quintet = (Quintet<Object, Object, Object, Object, Object>) test_tuple;\n            result = quintet.getValue0().getClass().equals(quintet.getValue1().getClass()) && quintet.getValue1().getClass().equals(quintet.getValue2().getClass()) && quintet.getValue2().getClass().equals(quintet.getValue3().getClass()) && quintet.getValue3().getClass().equals(quintet.getValue4().getClass());\n        } else if (test_tuple instanceof Sextet) {\n            Sextet<Object,\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp07dcl123.java:29: error: illegal start of type\n    }\n    ^\n/tmp/tmp07dcl123.java:28: error: not a statement\n            Sextet<Object,\n                  ^\n/tmp/tmp07dcl123.java:30: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        Class<?> clazz = test_tuple.getClass();\n        if (clazz.isArray()) {\n            Class<?> componentType = clazz.getComponentType();\n            if (componentType.isPrimitive()) {\n                result = false;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                for (int i = 0; i < array.length; i++) {\n                    if (array[i] != null && !array[i].getClass().equals(componentType)) {\n                        result = false;\n                        break;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "/tmp/tmp0x20451f.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp0x20451f.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp0x20451f.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp0x20451f.java:35: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> tuple_class = test_tuple.getClass();\n        Class<?>[] tuple_interfaces = tuple_class.getInterfaces();\n        Class<?> tuple_interface = tuple_interfaces[0];\n        Method[] tuple_methods = tuple_interface.getMethods();\n        Method get_method = tuple_methods[0];\n        Object[] tuple_values = new Object[tuple_methods.length];\n        for (int i = 0; i < tuple_methods.length; i++) {\n            try {\n                tuple_values[i] = get_method.invoke(test_tuple, i);\n            } catch (Exception e) {\n                System.out.println(e);\n            }\n        }\n        Class<?> first_class = tuple_values[0].getClass();\n        for (int i = 1; i < tuple_values.length; i++) {\n            if (tuple_values[i].getClass() != first_class) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpmczv_frm.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpmczv_frm.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpmczv_frm.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpmczv_frm.java:35: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return true;\n        } else {\n            Object[] array = (Object[]) test_tuple;\n            return Arrays.stream(array).allMatch(x -> x.getClass().equals(componentType));\n        }\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp898hitkp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp898hitkp.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp898hitkp.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp898hitkp.java:29: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        Class<?> clazz = test_tuple.getClass();\n        if (clazz.isArray()) {\n            Class<?> componentType = clazz.getComponentType();\n            if (componentType.isPrimitive()) {\n                result = false;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                for (int i = 0; i < array.length; i++) {\n                    if (!array[i].getClass().equals(componentType)) {\n                        result = false;\n                        break;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp2x_bh5kb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2x_bh5kb.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2x_bh5kb.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2x_bh5kb.java:35: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        //return true;\n        Object[] arr = ((Tuple)test_tuple).toArray();\n        Class<?> cls = arr[0].getClass();\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i].getClass() != cls) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp58yd7tuk.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp58yd7tuk.java:15: error: cannot find symbol\n        Object[] arr = ((Tuple)test_tuple).toArray();\n                         ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmp58yd7tuk.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp58yd7tuk.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp58yd7tuk.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n5 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpb5s5lq0t.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpb5s5lq0t.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpb5s5lq0t.java:18: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpb5s5lq0t.java:19: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> tuple_class = test_tuple.getClass();\n        Class<?> tuple_superclass = tuple_class.getSuperclass();\n        Class<?> tuple_superclass_superclass = tuple_superclass.getSuperclass();\n        Class<?> tuple_superclass_superclass_superclass = tuple_superclass_superclass.getSuperclass();\n        Class<?> tuple_superclass_superclass_superclass_superclass = tuple_superclass_superclass_superclass.getSuperclass();\n        Class<?> tuple_superclass_superclass_superclass_superclass_superclass = tuple_superclass_superclass_superclass_superclass.getSuperclass();\n        Class<?> tuple_superclass_superclass_superclass_superclass_superclass_superclass = tuple_superclass_superclass_superclass_superclass_superclass.getSuperclass();\n        Class<?> tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass = tuple_superclass_superclass_superclass_superclass_superclass_superclass.getSuperclass();\n        Class<?> tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass = tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass.getSuperclass();\n        Class<?> tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass = tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass.getSuperclass();\n        Class<?> tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass = tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass.getSuperclass();\n        Class<?> tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass = tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass_\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp_tewciir.java:22: error: ';' expected\n        Class<?> tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass = tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass_\n                                                                                                                                                                                                                                     ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp5sj_a02y.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5sj_a02y.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5sj_a02y.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5sj_a02y.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here.\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp24yt7fbd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp24yt7fbd.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24yt7fbd.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24yt7fbd.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        if (test_tuple instanceof Tuple) {\n            Tuple tuple = (Tuple) test_tuple;\n            Class<?> clazz = tuple.getValue(0).getClass();\n            for (int i = 1; i < tuple.getSize(); i++) {\n                if (tuple.getValue(i).getClass() != clazz) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp8mc85wkk.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp8mc85wkk.java:11: error: cannot find symbol\n        if (test_tuple instanceof Tuple) {\n                                  ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmp8mc85wkk.java:12: error: cannot find symbol\n            Tuple tuple = (Tuple) test_tuple;\n            ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmp8mc85wkk.java:12: error: cannot find symbol\n            Tuple tuple = (Tuple) test_tuple;\n                           ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmp8mc85wkk.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp8mc85wkk.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp8mc85wkk.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            if (componentType.isPrimitive()) {\n                return true;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                return Arrays.stream(array).allMatch(x -> x.getClass() == componentType);\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpp_h47yu1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpp_h47yu1.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpp_h47yu1.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpp_h47yu1.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            if (componentType.isPrimitive()) {\n                result = false;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpyf4kmkp0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpyf4kmkp0.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpyf4kmkp0.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpyf4kmkp0.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp2bg0akqa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2bg0akqa.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here.\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp24yt7fbd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp24yt7fbd.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24yt7fbd.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24yt7fbd.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        Class<?> clazz = test_tuple.getClass();\n        if (clazz.isArray()) {\n            Class<?> componentType = clazz.getComponentType();\n            if (componentType.isPrimitive()) {\n                result = false;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                for (int i = 0; i < array.length; i++) {\n                    if (array[i] != null) {\n                        if (!array[i].getClass().equals(componentType)) {\n                            result = false;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpmkgsbled.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpmkgsbled.java:35: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpmkgsbled.java:36: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpmkgsbled.java:37: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpu83_cozl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpu83_cozl.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:18: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:19: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> tuple_class = test_tuple.getClass();\n        Class<?>[] tuple_interfaces = tuple_class.getInterfaces();\n        Class<?> tuple_interface = tuple_interfaces[0];\n        Method[] tuple_methods = tuple_interface.getMethods();\n        Method get_method = tuple_methods[0];\n        Class<?>[] tuple_types = new Class[tuple_methods.length];\n        for (int i = 0; i < tuple_methods.length; i++) {\n            tuple_types[i] = tuple_methods[i].getReturnType();\n        }\n        for (int i = 0; i < tuple_types.length; i++) {\n            for (int j = i + 1; j < tuple_types.length; j++) {\n                if (!tuple_types[i].equals(tuple_types[j])) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpaphkdyds.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpaphkdyds.java:30: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpaphkdyds.java:31: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpaphkdyds.java:32: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> tuple_class = test_tuple.getClass();\n        if (tuple_class.isArray()) {\n            return false;\n        }\n        Class<?> tuple_component_class = tuple_class.getComponentType();\n        if (tuple_component_class == null) {\n            return false;\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpc6bwf3bd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpc6bwf3bd.java:22: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpc6bwf3bd.java:23: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpc6bwf3bd.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        if(test_tuple instanceof Pair) {\n            Pair<Object, Object> pair = (Pair<Object, Object>) test_tuple;\n            return pair.getValue0().getClass() == pair.getValue1().getClass();\n        } else if(test_tuple instanceof Triplet) {\n            Triplet<Object, Object, Object> triplet = (Triplet<Object, Object, Object>) test_tuple;\n            return triplet.getValue0().getClass() == triplet.getValue1().getClass() && triplet.getValue1().getClass() == triplet.getValue2().getClass();\n        } else if(test_tuple instanceof Quartet) {\n            Quartet<Object, Object, Object, Object> quartet = (Quartet<Object, Object, Object, Object>) test_tuple;\n            return quartet.getValue0().getClass() == quartet.getValue1().getClass() && quartet.getValue1().getClass() == quartet.getValue2().getClass() && quartet.getValue2().getClass() == quartet.getValue3().getClass();\n        } else if(test_tuple instanceof Quintet) {\n            Quintet<Object, Object, Object, Object, Object> quintet = (Quintet<Object, Object, Object, Object, Object>) test_tuple;\n            return quintet.getValue0().getClass() == quintet.getValue1().getClass() && quintet.getValue1().getClass() == quintet.getValue2().getClass() && quintet.getValue2().getClass() == quintet.getValue3().getClass() && quintet.getValue3().getClass() == quintet.getValue4().getClass();\n        } else if(test_tuple instanceof Sextet) {\n            Sextet<Object, Object, Object, Object, Object, Object> sextet = (Sextet<Object, Object, Object, Object, Object, Object>) test_tuple\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp11xnayng.java:27: error: ';' expected\n            Sextet<Object, Object, Object, Object, Object, Object> sextet = (Sextet<Object, Object, Object, Object, Object, Object>) test_tuple\n                                                                                                                                               ^\n/tmp/tmp11xnayng.java:29: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> tuple_class = test_tuple.getClass();\n        if (tuple_class.isArray()) {\n            Object[] tuple_array = (Object[]) test_tuple;\n            Class<?> first_element_class = tuple_array[0].getClass();\n            for (int i = 1; i < tuple_array.length; i++) {\n                if (!first_element_class.equals(tuple_array[i].getClass())) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            return false;\n        }\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "/tmp/tmpgrpciy16.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpgrpciy16.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpgrpciy16.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpgrpciy16.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Your code here\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpokp9jcbi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpokp9jcbi.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpokp9jcbi.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpokp9jcbi.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if (array.length == 0) {\n            return false;\n        }\n        Class<?> firstElementClass = array[0].getClass();\n        for (int i = 1; i < array.length; i++) {\n            if (array[i].getClass() != firstElementClass) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpq7gpw6y3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpq7gpw6y3.java:32: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpq7gpw6y3.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpq7gpw6y3.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp2bg0akqa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2bg0akqa.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp5sj_a02y.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5sj_a02y.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5sj_a02y.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5sj_a02y.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        Class<?> clazz = test_tuple.getClass();\n        if (clazz.isArray()) {\n            Class<?> componentType = clazz.getComponentType();\n            if (componentType.isPrimitive()) {\n                result = false;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                for (int i = 0; i < array.length; i++) {\n                    if (array[i] != null && !array[i].getClass().equals(componentType)) {\n                        result = false;\n                        break;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "/tmp/tmp0x20451f.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp0x20451f.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp0x20451f.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp0x20451f.java:35: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if (array.length == 0) {\n            return false;\n        }\n        Class<?> firstElementClass = array[0].getClass();\n        for (int i = 1; i < array.length; i++) {\n            if (array[i].getClass() != firstElementClass) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpq7gpw6y3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpq7gpw6y3.java:32: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpq7gpw6y3.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpq7gpw6y3.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp2bg0akqa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2bg0akqa.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        boolean result = true;\n        Class<?> type = null;\n        for (Object element : (Object[]) test_tuple) {\n            if (type == null) {\n                type = element.getClass();\n            } else {\n                if (element.getClass() != type) {\n                    result = false;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpvrvp5r7f.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpvrvp5r7f.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpvrvp5r7f.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpvrvp5r7f.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpb5s5lq0t.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpb5s5lq0t.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpb5s5lq0t.java:18: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpb5s5lq0t.java:19: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> cls = test_tuple.getClass();\n        if(!cls.isArray())\n            return false;\n        Class<?> componentType = cls.getComponentType();\n        if(componentType.isPrimitive())\n            return true;\n        Object[] array = (Object[]) test_tuple;\n        for(Object o : array)\n            if(o.getClass() != componentType)\n                return false;\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp1mz2tpse.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp1mz2tpse.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp1mz2tpse.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp1mz2tpse.java:29: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp2bg0akqa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2bg0akqa.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        return test_tuple.getClass().getName().equals(\"org.javatuples.Pair\");\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp24d8qbm8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp24d8qbm8.java:14: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24d8qbm8.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24d8qbm8.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        boolean result = true;\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            for (int i = 0; i < Array.getLength(test_tuple); i++) {\n                Object value = Array.get(test_tuple, i);\n                if (value.getClass() != componentType) {\n                    result = false;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpp3rgxlri.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpp3rgxlri.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpp3rgxlri.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpp3rgxlri.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> tuple_class = test_tuple.getClass();\n        Class<?> tuple_super_class = tuple_class.getSuperclass();\n        Class<?> tuple_super_super_class = tuple_super_class.getSuperclass();\n        Class<?> tuple_super_super_super_class = tuple_super_super_class.getSuperclass();\n        Class<?> tuple_super_super_super_super_class = tuple_super_super_super_class.getSuperclass();\n        Class<?> tuple_super_super_super_super_super_class = tuple_super_super_super_super_class.getSuperclass();\n        Class<?> tuple_super_super_super_super_super_super_class = tuple_super_super_super_super_super_class.getSuperclass();\n        Class<?> tuple_super_super_super_super_super_super_super_class = tuple_super_super_super_super_super_super_class.getSuperclass();\n        Class<?> tuple_super_super_super_super_super_super_super_super_class = tuple_super_super_super_super_super_super_super_class.getSuperclass();\n        Class<?> tuple_super_super_super_super_super_super_super_super_super_class = tuple_super_super_super_super_super_super_super_super_class.getSuperclass();\n        Class<?> tuple_super_super_super_super_super_super_super_super_super_super_class = tuple_super_super_super_super_super_super_super_super_super_class.getSuperclass();\n        Class<?> tuple_super_super_super_super_super_super_super_super_super_super_super_class = tuple_super_super_super_super_super_super_super_super_super_super_class.getSuperclass();\n        Class<?> tuple_super_super_super_super_super_super_super_super_super_super_super_super_class = tuple_super_super_super_super_super_super_super_super_super_super_super_class.getSuperclass();\n        Class\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpu9h2exbf.java:24: error: not a statement\n        Class\n        ^\n/tmp/tmpu9h2exbf.java:24: error: ';' expected\n        Class\n             ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp2bg0akqa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2bg0akqa.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpb5s5lq0t.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpb5s5lq0t.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpb5s5lq0t.java:18: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpb5s5lq0t.java:19: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here.\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpn1gwo626.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpn1gwo626.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpn1gwo626.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpn1gwo626.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            if (componentType.isPrimitive()) {\n                result = false;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                for (Object obj : array) {\n                    if (obj == null) {\n                        result = false;\n                        break;\n                    }\n                    if (!obj.getClass().equals(componentType)) {\n                        result = false;\n                        break;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "/tmp/tmpt_bo4y1f.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpt_bo4y1f.java:37: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt_bo4y1f.java:38: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt_bo4y1f.java:39: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> type = cls.getComponentType();\n            if (type.isPrimitive()) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "/tmp/tmpvj8djsho.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpvj8djsho.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpvj8djsho.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpvj8djsho.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpu83_cozl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpu83_cozl.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:18: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:19: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp5sj_a02y.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5sj_a02y.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5sj_a02y.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5sj_a02y.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        int length = Array.getLength(test_tuple);\n        if (length == 0) {\n            return false;\n        }\n        Object obj = Array.get(test_tuple, 0);\n        for (int i = 1; i < length; i++) {\n            if (obj.getClass() != Array.get(test_tuple, i).getClass()) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpbtj9j34p.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpbtj9j34p.java:32: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpbtj9j34p.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpbtj9j34p.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp5sj_a02y.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5sj_a02y.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5sj_a02y.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5sj_a02y.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> tuple_class = test_tuple.getClass();\n        Class<?> tuple_super_class = tuple_class.getSuperclass();\n        Class<?> tuple_super_super_class = tuple_super_class.getSuperclass();\n        Class<?> tuple_super_super_super_class = tuple_super_super_class.getSuperclass();\n        Class<?> tuple_super_super_super_super_class = tuple_super_super_super_class.getSuperclass();\n        Class<?> tuple_super_super_super_super_super_class = tuple_super_super_super_super_class.getSuperclass();\n        Class<?> tuple_super_super_super_super_super_super_class = tuple_super_super_super_super_super_class.getSuperclass();\n        Class<?> tuple_super_super_super_super_super_super_super_class = tuple_super_super_super_super_super_super_class.getSuperclass();\n        Class<?> tuple_super_super_super_super_super_super_super_super_class = tuple_super_super_super_super_super_super_super_class.getSuperclass();\n        Class<?> tuple_super_super_super_super_super_super_super_super_super_class = tuple_super_super_super_super_super_super_super_super_class.getSuperclass();\n        Class<?> tuple_super_super_super_super_super_super_super_super_super_super_class = tuple_super_super_super_super_super_super_super_super_super_class.getSuperclass();\n        Class<?> tuple_super_super_super_super_super_super_super_super_super_super_super_class = tuple_super_super_super_super_super_super_super_super_super_super_class.getSuperclass();\n        Class<?> tuple_super_super_super_super_super_super_super_super_super_super_super_super_class = tuple_super_super_super_super_super_super_super_super_super_super_super_class.getSuperclass();\n        Class\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpu9h2exbf.java:24: error: not a statement\n        Class\n        ^\n/tmp/tmpu9h2exbf.java:24: error: ';' expected\n        Class\n             ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here.\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp24yt7fbd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp24yt7fbd.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24yt7fbd.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24yt7fbd.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp2bg0akqa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2bg0akqa.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            int length = Array.getLength(test_tuple);\n            for (int i = 0; i < length; i++) {\n                Object element = Array.get(test_tuple, i);\n                if (element.getClass() != componentType) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpec22v5at.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpec22v5at.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpec22v5at.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpec22v5at.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return true;\n        } else {\n            Object[] array = (Object[]) test_tuple;\n            return Arrays.stream(array).allMatch(x -> x.getClass() == componentType);\n        }\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "/tmp/tmp6v07ekpv.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp6v07ekpv.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp6v07ekpv.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp6v07ekpv.java:29: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpu83_cozl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpu83_cozl.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:18: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:19: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Your code here\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpokp9jcbi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpokp9jcbi.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpokp9jcbi.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpokp9jcbi.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            if (componentType.isPrimitive()) {\n                return false;\n            }\n            Object[] test_array = (Object[]) test_tuple;\n            if (test_array.length == 0) {\n                return true;\n            }\n            Class<?> first_class = test_array[0].getClass();\n            for (Object o : test_array) {\n                if (o.getClass() != first_class) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            return false;\n        }\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "/tmp/tmp0827x0xv.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp0827x0xv.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp0827x0xv.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp0827x0xv.java:35: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp2bg0akqa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2bg0akqa.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        if (test_tuple instanceof Tuple) {\n            Tuple tuple = (Tuple) test_tuple;\n            Class<?> type = tuple.getValue(0).getClass();\n            for (int i = 0; i < tuple.getSize(); i++) {\n                if (tuple.getValue(i).getClass() != type) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "/tmp/tmp1rd99rfi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp1rd99rfi.java:11: error: cannot find symbol\n        if (test_tuple instanceof Tuple) {\n                                  ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmp1rd99rfi.java:12: error: cannot find symbol\n            Tuple tuple = (Tuple) test_tuple;\n            ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmp1rd99rfi.java:12: error: cannot find symbol\n            Tuple tuple = (Tuple) test_tuple;\n                           ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmp1rd99rfi.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp1rd99rfi.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp1rd99rfi.java:26: e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here.\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpn1gwo626.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpn1gwo626.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpn1gwo626.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpn1gwo626.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            if (componentType.isPrimitive()) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuqh0qxc_.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpuqh0qxc_.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpuqh0qxc_.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpuqh0qxc_.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        for (int i = 0; i < Array.getLength(test_tuple); i++) {\n            if (!componentType.isInstance(Array.get(test_tuple, i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "/tmp/tmpatnjjj27.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpatnjjj27.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpatnjjj27.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpatnjjj27.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            if (componentType.isPrimitive()) {\n                return true;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                return Arrays.stream(array).allMatch(x -> x.getClass() == componentType);\n            }\n        } else {\n            return false;\n        }\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmp7tni7njd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp7tni7njd.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp7tni7njd.java:29: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp7tni7njd.java:30: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Your code here\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpokp9jcbi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpokp9jcbi.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpokp9jcbi.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpokp9jcbi.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        // System.out.println(test_tuple.getClass().getName());\n        // System.out.println(test_tuple.getClass().getTypeName());\n        // System.out.println(test_tuple.getClass().getSimpleName());\n        // System.out.println(test_tuple.getClass().getCanonicalName());\n        // System.out.println(test_tuple.getClass().getTypeParameters());\n        // System.out.println(test_tuple.getClass().getGenericInterfaces());\n        // System.out.println(test_tuple.getClass().getGenericSuperclass());\n        // System.out.println(test_tuple.getClass().getGenericComponentType());\n        // System.out.println(test_tuple.getClass().getComponentType());\n        // System.out.println(test_tuple.getClass().getModifiers());\n        // System.out.println(test_tuple.getClass().getSigners());\n        // System.out.println(test_tuple.getClass().getEnclosingMethod());\n        // System.out.println(test_tuple.getClass().getEnclosingConstructor());\n        // System.out.println(test_tuple.getClass().getEnclosingClass());\n        // System.out.println(test_tuple.getClass().getDeclaringClass());\n        // System.out.println(test_tuple.getClass().getAnnotatedInterfaces());\n        // System.out.println(test_tuple.getClass().getAnnotatedSuperclass());\n        // System.out.println(test_tuple.getClass().getAnnotations());\n        // System.out.println(test_tuple.getClass().getTypeParameters());\n        // System.out.println(test_tuple.getClass().getTypeName());\n        // System.out.println(test_tuple.getClass().getTypeName());\n        // System.out.println(test_t\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "/tmp/tmp6cgtew2o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp6cgtew2o.java:38: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp6cgtew2o.java:39: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp6cgtew2o.java:40: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> tuple_class = test_tuple.getClass();\n        if(!tuple_class.isArray()) {\n            return false;\n        }\n        Class<?> first_element_class = tuple_class.getComponentType();\n        for(Object element : (Object[])test_tuple) {\n            if(element.getClass() != first_element_class) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "/tmp/tmp7jmqlkdp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp7jmqlkdp.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp7jmqlkdp.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp7jmqlkdp.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        boolean flag = true;\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            for (int i = 0; i < Array.getLength(test_tuple); i++) {\n                Object object = Array.get(test_tuple, i);\n                if (!componentType.isInstance(object)) {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        return flag;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpl2hu21u5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpl2hu21u5.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpl2hu21u5.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpl2hu21u5.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> tuple_class = test_tuple.getClass();\n        Class<?> tuple_super_class = tuple_class.getSuperclass();\n        Class<?> tuple_super_super_class = tuple_super_class.getSuperclass();\n        Class<?> tuple_super_super_super_class = tuple_super_super_class.getSuperclass();\n        if(tuple_super_super_super_class.getName() == \"java.lang.Object\") {\n            return false;\n        }\n        Class<?> tuple_super_super_super_super_class = tuple_super_super_super_class.getSuperclass();\n        if(tuple_super_super_super_super_class.getName() == \"java.lang.Object\") {\n            return false;\n        }\n        Class<?> tuple_super_super_super_super_super_class = tuple_super_super_super_super_class.getSuperclass();\n        if(tuple_super_super_super_super_super_class.getName() == \"java.lang.Object\") {\n            return false;\n        }\n        Class<?> tuple_super_super_super_super_super_super_class = tuple_super_super_super_super_super_class.getSuperclass();\n        if(tuple_super_super_super_super_super_super_class.getName() == \"java.lang.Object\") {\n            return false;\n        }\n        Class<?> tuple_super_super_super_super_super_super_super_class = tuple_super_super_super_super_super_super_class.getSuperclass();\n        if(tuple_super_super_super_super_super_super_super_class.getName() == \"java.lang.Object\") {\n            return false;\n        }\n        Class<?> tuple_super_super_super_super_super_super_super_super_class = tuple_super_super_super_super_super_super_super_class.getSuperclass();\n        if(tuple_super_super_super_super_super_super_super_super_class.getName() == \"java.lang.Object\")\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "/tmp/tmph6m51vj_.java:36: error: illegal start of statement\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            if (componentType.isPrimitive()) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "/tmp/tmpbmyaxbwv.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpbmyaxbwv.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpbmyaxbwv.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpbmyaxbwv.java:29: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp2bg0akqa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2bg0akqa.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        Class<?>[] interfaces = cls.getInterfaces();\n        for (Class<?> i : interfaces) {\n            if (i.getName().equals(\"java.util.List\")) {\n                List<?> list = (List<?>) test_tuple;\n                if (list.size() == 0) {\n                    return true;\n                }\n                Class<?> first_type = list.get(0).getClass();\n                for (int j = 1; j < list.size(); j++) {\n                    if (list.get(j).getClass() != first_type) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmp8v4gt_qd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp8v4gt_qd.java:31: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp8v4gt_qd.java:32: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp8v4gt_qd.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        //return true;\n        if(test_tuple instanceof Pair) {\n            Pair<Object,Object> pair = (Pair<Object,Object>) test_tuple;\n            return pair.getValue0().getClass().equals(pair.getValue1().getClass());\n        }\n        else if(test_tuple instanceof Triplet) {\n            Triplet<Object,Object,Object> triplet = (Triplet<Object,Object,Object>) test_tuple;\n            return triplet.getValue0().getClass().equals(triplet.getValue1().getClass()) && triplet.getValue1().getClass().equals(triplet.getValue2().getClass());\n        }\n        else if(test_tuple instanceof Quartet) {\n            Quartet<Object,Object,Object,Object> quartet = (Quartet<Object,Object,Object,Object>) test_tuple;\n            return quartet.getValue0().getClass().equals(quartet.getValue1().getClass()) && quartet.getValue1().getClass().equals(quartet.getValue2().getClass()) && quartet.getValue2().getClass().equals(quartet.getValue3().getClass());\n        }\n        else if(test_tuple instanceof Quintet) {\n            Quintet<Object,Object,Object,Object,Object> quintet = (Quintet<Object,Object,Object,Object,Object>) test_tuple;\n            return quintet.getValue0().getClass().equals(quintet.getValue1().getClass()) && quintet.getValue1().getClass().equals(quintet.getValue2().getClass()) && quintet.getValue2().getClass().equals(quintet.getValue3().getClass()) && quintet.getValue3().getClass().equals(quintet.getValue4().getClass());\n        }\n        else if(test_tuple instanceof Sextet) {\n            Sextet\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "/tmp/tmpmyrnxz6g.java:32: error: not a statement\n            Sextet\n            ^\n/tmp/tmpmyrnxz6g.java:32: error: ';' expected\n            Sextet\n                  ^\n/tmp/tmpmyrnxz6g.java:34: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            if (componentType.isPrimitive()) {\n                return true;\n            }\n            Object[] array = (Object[]) test_tuple;\n            if (array.length == 0) {\n                return true;\n            }\n            Object o = array[0];\n            for (int i = 1; i < array.length; i++) {\n                if (o.getClass() != array[i].getClass()) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpqkqsh2oy.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpqkqsh2oy.java:32: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpqkqsh2oy.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpqkqsh2oy.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp2bg0akqa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2bg0akqa.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        Class<?> clazz = test_tuple.getClass();\n        if (clazz.isArray()) {\n            Class<?> componentType = clazz.getComponentType();\n            if (componentType.isPrimitive()) {\n                result = false;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmp_rys4jdm.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_rys4jdm.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_rys4jdm.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_rys4jdm.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> tuple_class = test_tuple.getClass();\n        Class<?>[] tuple_interfaces = tuple_class.getInterfaces();\n        Class<?> tuple_interface = tuple_interfaces[0];\n        Method[] tuple_methods = tuple_interface.getDeclaredMethods();\n        Method get_method = tuple_methods[0];\n        Object[] tuple_values = new Object[tuple_methods.length];\n        for (int i = 0; i < tuple_methods.length; i++) {\n            try {\n                tuple_values[i] = get_method.invoke(test_tuple, i);\n            } catch (Exception e) {\n                System.out.println(\"Exception: \" + e);\n            }\n        }\n        Class<?> first_class = tuple_values[0].getClass();\n        for (int i = 1; i < tuple_values.length; i++) {\n            if (!first_class.equals(tuple_values[i].getClass())) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpkm6oab9n.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkm6oab9n.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpkm6oab9n.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpkm6oab9n.java:35: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp2bg0akqa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2bg0akqa.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> tuple_class = test_tuple.getClass();\n        Class<?> tuple_superclass = tuple_class.getSuperclass();\n        Class<?> tuple_superclass_superclass = tuple_superclass.getSuperclass();\n        Class<?> tuple_superclass_superclass_superclass = tuple_superclass_superclass.getSuperclass();\n        Class<?> tuple_superclass_superclass_superclass_superclass = tuple_superclass_superclass_superclass.getSuperclass();\n        Class<?> tuple_superclass_superclass_superclass_superclass_superclass = tuple_superclass_superclass_superclass_superclass.getSuperclass();\n        Class<?> tuple_superclass_superclass_superclass_superclass_superclass_superclass = tuple_superclass_superclass_superclass_superclass_superclass.getSuperclass();\n        Class<?> tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass = tuple_superclass_superclass_superclass_superclass_superclass_superclass.getSuperclass();\n        Class<?> tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass = tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass.getSuperclass();\n        Class<?> tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass = tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass.getSuperclass();\n        Class<?> tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass = tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass.getSuperclass();\n        Class<?> tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass = tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass_\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp_tewciir.java:22: error: ';' expected\n        Class<?> tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass_superclass = tuple_superclass_superclass_superclass_superclass_superclass_superclass_superclass_\n                                                                                                                                                                                                                                     ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp2bg0akqa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2bg0akqa.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpb5s5lq0t.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpb5s5lq0t.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpb5s5lq0t.java:18: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpb5s5lq0t.java:19: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> c = test_tuple.getClass();\n        if (!c.isArray()) {\n            return false;\n        }\n        Class<?> componentType = c.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        Object[] array = (Object[]) test_tuple;\n        for (Object o : array) {\n            if (o == null) {\n                return false;\n            }\n            if (o.getClass() != componentType) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmp0qxijv_7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp0qxijv_7.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp0qxijv_7.java:35: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp0qxijv_7.java:36: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> type = cls.getComponentType();\n            if (type.isPrimitive()) {\n                return true;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                return Arrays.stream(array).allMatch(x -> x.getClass() == type);\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp1iumubqj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp1iumubqj.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp1iumubqj.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp1iumubqj.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpu83_cozl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpu83_cozl.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:18: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:19: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return true;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if (array.length == 0) {\n            return false;\n        }\n        return componentType.isInstance(array[0]);\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpd3ssrsgy.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpd3ssrsgy.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpd3ssrsgy.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpd3ssrsgy.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpu83_cozl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpu83_cozl.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:18: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:19: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        Class<?> clazz = test_tuple.getClass();\n        if (clazz.isArray()) {\n            Class<?> componentType = clazz.getComponentType();\n            for (int i = 0; i < Array.getLength(test_tuple); i++) {\n                if (!componentType.equals(Array.get(test_tuple, i).getClass())) {\n                    result = false;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmp707vzd4r.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp707vzd4r.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp707vzd4r.java:29: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp707vzd4r.java:30: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp2bg0akqa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2bg0akqa.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpu83_cozl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpu83_cozl.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:18: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:19: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> type = cls.getComponentType();\n            if (type.isPrimitive()) {\n                return true;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                return Arrays.stream(array).allMatch(x -> x.getClass() == type);\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp1iumubqj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp1iumubqj.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp1iumubqj.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp1iumubqj.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            if (componentType.isPrimitive()) {\n                return true;\n            }\n            Object[] array = (Object[]) test_tuple;\n            return Arrays.stream(array).allMatch(x -> x.getClass() == componentType);\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpn7d5bhrn.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpn7d5bhrn.java:23: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpn7d5bhrn.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpn7d5bhrn.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        Class<?> clazz = test_tuple.getClass();\n        if (clazz.isArray()) {\n            Class<?> componentType = clazz.getComponentType();\n            if (componentType.isPrimitive()) {\n                result = false;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                for (int i = 0; i < array.length; i++) {\n                    if (array[i] == null) {\n                        result = false;\n                    } else {\n                        result = checkType(array[i]);\n                    }\n                }\n            }\n        } else {\n            result = true;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmp715bi_1i.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp715bi_1i.java:36: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp715bi_1i.java:37: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp715bi_1i.java:38: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpb5s5lq0t.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpb5s5lq0t.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpb5s5lq0t.java:18: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpb5s5lq0t.java:19: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if (array.length == 0) {\n            return false;\n        }\n        Class<?> firstElementClass = array[0].getClass();\n        for (int i = 1; i < array.length; i++) {\n            if (array[i].getClass() != firstElementClass) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpq7gpw6y3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpq7gpw6y3.java:32: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpq7gpw6y3.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpq7gpw6y3.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpu83_cozl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpu83_cozl.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:18: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:19: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        Class<?> clazz = test_tuple.getClass();\n        if (clazz.isArray()) {\n            Class<?> componentType = clazz.getComponentType();\n            if (componentType.isPrimitive()) {\n                result = false;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmp_rys4jdm.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_rys4jdm.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_rys4jdm.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_rys4jdm.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp2bg0akqa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2bg0akqa.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if (array.length == 0) {\n            return false;\n        }\n        Class<?> firstElementClass = array[0].getClass();\n        for (int i = 1; i < array.length; i++) {\n            if (array[i].getClass() != firstElementClass) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpq7gpw6y3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpq7gpw6y3.java:32: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpq7gpw6y3.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpq7gpw6y3.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?>[] types = test_tuple.getClass().getInterfaces();\n        if (types.length == 0) {\n            return false;\n        }\n        Class<?> type = types[0];\n        for (Method method : type.getMethods()) {\n            if (Modifier.isPublic(method.getModifiers())\n                    && method.getParameterTypes().length == 0\n                    && method.getReturnType() != void.class\n                    && method.getName().startsWith(\"get\")) {\n                try {\n                    Object value = method.invoke(test_tuple);\n                    if (value != null && value.getClass() != method.getReturnType()) {\n                        return false;\n                    }\n                } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpzuznumed.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpzuznumed.java:37: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpzuznumed.java:38: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpzuznumed.java:39: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if(cls.isArray()) {\n            Class<?> type = cls.getComponentType();\n            if(type.isPrimitive()) {\n                return true;\n            }\n            else {\n                Object[] arr = (Object[])test_tuple;\n                for(int i = 0; i < arr.length; i++) {\n                    if(!arr[i].getClass().equals(type)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmp1f8jgbtp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp1f8jgbtp.java:30: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp1f8jgbtp.java:31: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp1f8jgbtp.java:32: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?>[] types = test_tuple.getClass().getInterfaces();\n        for (Class<?> type : types) {\n            if (type.getName().equals(\"org.javatuples.Tuple\")) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpt36c1r12.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpt36c1r12.java:20: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt36c1r12.java:21: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt36c1r12.java:22: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return true;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if (array.length == 0) {\n            return false;\n        }\n        return componentType == array[0].getClass();\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmptylgsy1h.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmptylgsy1h.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmptylgsy1h.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmptylgsy1h.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        boolean result = true;\n        Class<?> cls = test_tuple.getClass();\n        Class<?>[] interfaces = cls.getInterfaces();\n        for (Class<?> i : interfaces) {\n            if (i.getName().equals(\"org.javatuples.Tuple\")) {\n                Method[] methods = cls.getDeclaredMethods();\n                for (Method m : methods) {\n                    if (m.getName().equals(\"getValue\")) {\n                        try {\n                            Object[] args = new Object[1];\n                            args[0] = 0;\n                            Object first = m.invoke(test_tuple, args);\n                            Class<?> first_cls = first.getClass();\n                            for (int j = 1; j < cls.getDeclaredFields().length; j++) {\n                                args[0] = j;\n                                Object next = m.invoke(test_tuple, args);\n                                Class<?> next_cls = next.getClass();\n                                if (!first_cls.equals(next_cls)) {\n                                    result = false;\n                                    break;\n                                }\n                            }\n                        } catch (Exception e) {\n                            e.printStackTrace();\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpzxpekhfw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpzxpekhfw.java:43: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpzxpekhfw.java:44: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpzxpekhfw.java:45: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here.\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp24yt7fbd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp24yt7fbd.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24yt7fbd.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24yt7fbd.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp5sj_a02y.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5sj_a02y.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5sj_a02y.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5sj_a02y.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            if (componentType.isPrimitive()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmphlaqtx3v.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmphlaqtx3v.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmphlaqtx3v.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmphlaqtx3v.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> tuple_class = test_tuple.getClass();\n        Class<?>[] tuple_interfaces = tuple_class.getInterfaces();\n        Class<?> tuple_interface = tuple_interfaces[0];\n        Method[] tuple_methods = tuple_interface.getMethods();\n        Method get_method = tuple_methods[0];\n        try {\n            Object first_element = get_method.invoke(test_tuple, 0);\n            Class<?> first_element_class = first_element.getClass();\n            for (int i = 1; i < tuple_methods.length; i++) {\n                Method method = tuple_methods[i];\n                Object element = method.invoke(test_tuple, i);\n                Class<?> element_class = element.getClass();\n                if (!first_element_class.equals(element_class)) {\n                    return false;\n                }\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmpef5gazfq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpef5gazfq.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpef5gazfq.java:35: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpef5gazfq.java:36: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> type = cls.getComponentType();\n            if (type.isPrimitive()) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "/tmp/tmpvj8djsho.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpvj8djsho.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpvj8djsho.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpvj8djsho.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> tuple_class = test_tuple.getClass();\n        Class<?>[] tuple_types = tuple_class.getClasses();\n        Class<?> tuple_type = tuple_types[0];\n        Method[] tuple_methods = tuple_type.getDeclaredMethods();\n        Method tuple_get = tuple_methods[0];\n        try {\n            Object first_element = tuple_get.invoke(test_tuple, 0);\n            Class<?> first_type = first_element.getClass();\n            for (int i = 1; i < tuple_types.length; i++) {\n                Object element = tuple_get.invoke(test_tuple, i);\n                Class<?> element_type = element.getClass();\n                if (!element_type.equals(first_type)) {\n                    return false;\n                }\n            }\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmpejwqri0f.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpejwqri0f.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpejwqri0f.java:35: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpejwqri0f.java:36: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        boolean result = true;\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> type = cls.getComponentType();\n            for (Object obj : (Object[]) test_tuple) {\n                if (obj.getClass() != type) {\n                    result = false;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpkof8wsp_.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkof8wsp_.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpkof8wsp_.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpkof8wsp_.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            if (componentType.isPrimitive()) {\n                return false;\n            }\n            Object[] array = (Object[]) test_tuple;\n            for (int i = 0; i < array.length; i++) {\n                if (array[i].getClass() != componentType) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpbwldrrbq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpbwldrrbq.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpbwldrrbq.java:29: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpbwldrrbq.java:30: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if (array.length == 0) {\n            return false;\n        }\n        Class<?> firstElementClass = array[0].getClass();\n        for (Object o : array) {\n            if (o.getClass() != firstElementClass) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmpss7l57pm.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpss7l57pm.java:32: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpss7l57pm.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpss7l57pm.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        boolean flag = true;\n        Class<?> cls = test_tuple.getClass();\n        Class<?>[] interfaces = cls.getInterfaces();\n        for (Class<?> i : interfaces) {\n            if (i.getName().equals(\"org.javatuples.Value\")) {\n                flag = true;\n            } else {\n                flag = false;\n            }\n        }\n        return flag;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmpdde1qxes.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpdde1qxes.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpdde1qxes.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpdde1qxes.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        Class<?> clazz = test_tuple.getClass();\n        if (clazz.isArray()) {\n            Class<?> componentType = clazz.getComponentType();\n            if (componentType.isPrimitive()) {\n                result = false;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmp_rys4jdm.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_rys4jdm.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_rys4jdm.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_rys4jdm.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> type = cls.getComponentType();\n            if (type.isPrimitive()) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmp44ctw4k1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp44ctw4k1.java:23: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp44ctw4k1.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp44ctw4k1.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isAssignableFrom(Tuple.class)) {\n            return false;\n        }\n        Field[] fields = cls.getDeclaredFields();\n        if (fields.length == 0) {\n            return false;\n        }\n        Class<?> type = fields[0].getType();\n        for (Field field : fields) {\n            if (!field.getType().equals(type)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmpf52wxis2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpf52wxis2.java:15: error: cannot find symbol\n        if (!cls.isAssignableFrom(Tuple.class)) {\n                                  ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmpf52wxis2.java:31: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpf52wxis2.java:32: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpf52wxis2.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n5 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> test_class = test_tuple.getClass();\n        if (!test_class.isInstance(test_tuple)) {\n            return false;\n        }\n        Class<?>[] interfaces = test_class.getInterfaces();\n        for (Class<?> i : interfaces) {\n            if (i.getName().equals(\"org.javatuples.Tuple\")) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmpsbczljhq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpsbczljhq.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpsbczljhq.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpsbczljhq.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> tuple_class = test_tuple.getClass();\n        Class<?>[] tuple_interfaces = tuple_class.getInterfaces();\n        Class<?> tuple_interface = tuple_interfaces[0];\n        if(tuple_interface.getName().equals(\"org.javatuples.Value0\")) {\n            return true;\n        }\n        Method[] tuple_methods = tuple_interface.getMethods();\n        Method get_method = tuple_methods[0];\n        try {\n            Object first_element = get_method.invoke(test_tuple);\n            Class<?> first_element_class = first_element.getClass();\n            Method[] tuple_methods_without_get = Arrays.copyOfRange(tuple_methods, 1, tuple_methods.length);\n            for(Method method : tuple_methods_without_get) {\n                Object element = method.invoke(test_tuple);\n                Class<?> element_class = element.getClass();\n                if(!element_class.equals(first_element_class)) {\n                    return false;\n                }\n            }\n            return true;\n        } catch(Exception e) {\n            return false;\n        }\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmpt9jvaupn.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpt9jvaupn.java:36: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt9jvaupn.java:37: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt9jvaupn.java:38: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpu83_cozl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpu83_cozl.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:18: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:19: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        return test_tuple.getClass().getName().contains(\"Pair\");\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmp4561e0p1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp4561e0p1.java:14: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp4561e0p1.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp4561e0p1.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpu83_cozl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpu83_cozl.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:18: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:19: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpu83_cozl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpu83_cozl.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:18: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:19: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp5sj_a02y.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5sj_a02y.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5sj_a02y.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5sj_a02y.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        return test_tuple.getClass().getName().equals(\"org.javatuples.Pair\");\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp24d8qbm8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp24d8qbm8.java:14: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24d8qbm8.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24d8qbm8.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here.\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp24yt7fbd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp24yt7fbd.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24yt7fbd.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24yt7fbd.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        if(test_tuple instanceof Pair) {\n            Pair<Object, Object> pair = (Pair<Object, Object>) test_tuple;\n            return pair.getValue0().getClass() == pair.getValue1().getClass();\n        } else if(test_tuple instanceof Triplet) {\n            Triplet<Object, Object, Object> triplet = (Triplet<Object, Object, Object>) test_tuple;\n            return triplet.getValue0().getClass() == triplet.getValue1().getClass() && triplet.getValue1().getClass() == triplet.getValue2().getClass();\n        } else if(test_tuple instanceof Quartet) {\n            Quartet<Object, Object, Object, Object> quartet = (Quartet<Object, Object, Object, Object>) test_tuple;\n            return quartet.getValue0().getClass() == quartet.getValue1().getClass() && quartet.getValue1().getClass() == quartet.getValue2().getClass() && quartet.getValue2().getClass() == quartet.getValue3().getClass();\n        } else if(test_tuple instanceof Quintet) {\n            Quintet<Object, Object, Object, Object, Object> quintet = (Quintet<Object, Object, Object, Object, Object>) test_tuple;\n            return quintet.getValue0().getClass() == quintet.getValue1().getClass() && quintet.getValue1().getClass() == quintet.getValue2().getClass() && quintet.getValue2().getClass() == quintet.getValue3().getClass() && quintet.getValue3().getClass() == quintet.getValue4().getClass();\n        } else if(test_tuple instanceof Sextet) {\n            Sextet<Object, Object, Object, Object, Object, Object> sextet = (Sextet<Object, Object, Object, Object, Object, Object>) test_tuple\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp11xnayng.java:27: error: ';' expected\n            Sextet<Object, Object, Object, Object, Object, Object> sextet = (Sextet<Object, Object, Object, Object, Object, Object>) test_tuple\n                                                                                                                                               ^\n/tmp/tmp11xnayng.java:29: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if (array.length == 0) {\n            return false;\n        }\n        Class<?> firstElementClass = array[0].getClass();\n        for (int i = 1; i < array.length; i++) {\n            if (array[i].getClass() != firstElementClass) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpq7gpw6y3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpq7gpw6y3.java:32: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpq7gpw6y3.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpq7gpw6y3.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        if(test_tuple instanceof Pair)\n        {\n            Pair<Object, Object> pair = (Pair<Object, Object>) test_tuple;\n            return pair.getValue0().getClass() == pair.getValue1().getClass();\n        }\n        else if(test_tuple instanceof Triplet)\n        {\n            Triplet<Object, Object, Object> triplet = (Triplet<Object, Object, Object>) test_tuple;\n            return triplet.getValue0().getClass() == triplet.getValue1().getClass() && triplet.getValue1().getClass() == triplet.getValue2().getClass();\n        }\n        else if(test_tuple instanceof Quartet)\n        {\n            Quartet<Object, Object, Object, Object> quartet = (Quartet<Object, Object, Object, Object>) test_tuple;\n            return quartet.getValue0().getClass() == quartet.getValue1().getClass() && quartet.getValue1().getClass() == quartet.getValue2().getClass() && quartet.getValue2().getClass() == quartet.getValue3().getClass();\n        }\n        else if(test_tuple instanceof Quintet)\n        {\n            Quintet<Object, Object, Object, Object, Object> quintet = (Quintet<Object, Object, Object, Object, Object>) test_tuple;\n            return quintet.getValue0().getClass() == quintet.getValue1().getClass() && quintet.getValue1().getClass() == quintet.getValue2().getClass() && quintet.getValue2().getClass() == quintet.getValue3().getClass() && quintet.getValue3().getClass() == quintet.getValue4().getClass();\n        }\n        else if(test_tuple instanceof Sextet)\n        {\n            Sextet<Object, Object, Object, Object, Object, Object> sextet = (Sext\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmp5x8w3f1j.java:36: error: ')' expected\n            Sextet<Object, Object, Object, Object, Object, Object> sextet = (Sext\n                                                                                 ^\n/tmp/tmp5x8w3f1j.java:38: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp2bg0akqa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2bg0akqa.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        boolean flag = true;\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> type = cls.getComponentType();\n            for (int i = 0; i < Array.getLength(test_tuple); i++) {\n                if (Array.get(test_tuple, i).getClass() != type) {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        return flag;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmpt0vy2ipl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpt0vy2ipl.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt0vy2ipl.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt0vy2ipl.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp5sj_a02y.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5sj_a02y.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5sj_a02y.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5sj_a02y.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpu83_cozl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpu83_cozl.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:18: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:19: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        if(test_tuple instanceof Pair) {\n            Pair p = (Pair) test_tuple;\n            return p.getValue0().getClass().equals(p.getValue1().getClass());\n        }\n        else if(test_tuple instanceof Triplet) {\n            Triplet t = (Triplet) test_tuple;\n            return t.getValue0().getClass().equals(t.getValue1().getClass()) && t.getValue1().getClass().equals(t.getValue2().getClass());\n        }\n        else if(test_tuple instanceof Quartet) {\n            Quartet q = (Quartet) test_tuple;\n            return q.getValue0().getClass().equals(q.getValue1().getClass()) && q.getValue1().getClass().equals(q.getValue2().getClass()) && q.getValue2().getClass().equals(q.getValue3().getClass());\n        }\n        else if(test_tuple instanceof Quintet) {\n            Quintet q = (Quintet) test_tuple;\n            return q.getValue0().getClass().equals(q.getValue1().getClass()) && q.getValue1().getClass().equals(q.getValue2().getClass()) && q.getValue2().getClass().equals(q.getValue3().getClass()) && q.getValue3().getClass().equals(q.getValue4().getClass());\n        }\n        else if(test_tuple instanceof Sextet) {\n            Sextet s = (Sextet) test_tuple;\n            return s.getValue0().getClass().equals(s.getValue1().getClass()) && s.getValue1().getClass().equals(s.getValue2().getClass()) && s.getValue2().getClass().equals(s.getValue3().getClass()) && s.getValue3().getClass().equ\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpl09vs6ha.java:32: error: ';' expected\n            return s.getValue0().getClass().equals(s.getValue1().getClass()) && s.getValue1().getClass().equals(s.getValue2().getClass()) && s.getValue2().getClass().equals(s.getValue3().getClass()) && s.getValue3().getClass().equ\n                                                                                                                                                                                                                                      ^\n/tmp/tmpl09vs6ha.java:34: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> c = test_tuple.getClass();\n        if (c.isArray()) {\n            Class<?> type = c.getComponentType();\n            Object[] array = (Object[]) test_tuple;\n            for (int i = 0; i < array.length; i++) {\n                if (!type.isInstance(array[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmp5_e45jw_.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5_e45jw_.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5_e45jw_.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5_e45jw_.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> clazz = test_tuple.getClass();\n        if (clazz.isArray()) {\n            Class<?> componentType = clazz.getComponentType();\n            if (componentType.isPrimitive()) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmp5qoqpei9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5qoqpei9.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5qoqpei9.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5qoqpei9.java:29: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        if(test_tuple instanceof Pair){\n            Pair<Object, Object> pair = (Pair<Object, Object>) test_tuple;\n            return pair.getValue0().getClass() == pair.getValue1().getClass();\n        }\n        else if(test_tuple instanceof Triplet){\n            Triplet<Object, Object, Object> triplet = (Triplet<Object, Object, Object>) test_tuple;\n            return triplet.getValue0().getClass() == triplet.getValue1().getClass() && triplet.getValue1().getClass() == triplet.getValue2().getClass();\n        }\n        else if(test_tuple instanceof Quartet){\n            Quartet<Object, Object, Object, Object> quartet = (Quartet<Object, Object, Object, Object>) test_tuple;\n            return quartet.getValue0().getClass() == quartet.getValue1().getClass() && quartet.getValue1().getClass() == quartet.getValue2().getClass() && quartet.getValue2().getClass() == quartet.getValue3().getClass();\n        }\n        else if(test_tuple instanceof Quintet){\n            Quintet<Object, Object, Object, Object, Object> quintet = (Quintet<Object, Object, Object, Object, Object>) test_tuple;\n            return quintet.getValue0().getClass() == quintet.getValue1().getClass() && quintet.getValue1().getClass() == quintet.getValue2().getClass() && quintet.getValue2().getClass() == quintet.getValue3().getClass() && quintet.getValue3().getClass() == quintet.getValue4().getClass();\n        }\n        else if(test_tuple instanceof Sextet){\n            Sextet<Object, Object, Object, Object, Object, Object> sextet = (Sextet<Object, Object, Object, Object, Object, Object>) test\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmpbyxq4mcn.java:31: error: ';' expected\n            Sextet<Object, Object, Object, Object, Object, Object> sextet = (Sextet<Object, Object, Object, Object, Object, Object>) test\n                                                                                                                                         ^\n/tmp/tmpbyxq4mcn.java:33: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here.\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpn1gwo626.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpn1gwo626.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpn1gwo626.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpn1gwo626.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> tuple_class = test_tuple.getClass();\n        Class<?> tuple_superclass = tuple_class.getSuperclass();\n        if (tuple_superclass.getName() != \"org.javatuples.Tuple\") {\n            return false;\n        }\n        int tuple_size = (int) tuple_class.getMethod(\"getSize\").invoke(test_tuple);\n        Class<?> tuple_type = (Class<?>) tuple_class.getMethod(\"getValue\", int.class).invoke(test_tuple, 0).getClass();\n        for (int i = 1; i < tuple_size; i++) {\n            if (tuple_type != (Class<?>) tuple_class.getMethod(\"getValue\", int.class).invoke(test_tuple, i).getClass()) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmpw7k4jm3o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpw7k4jm3o.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpw7k4jm3o.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpw7k4jm3o.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            if (componentType.isPrimitive()) {\n                return true;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                return Arrays.stream(array).allMatch(x -> x.getClass() == componentType);\n            }\n        } else {\n            return true;\n        }\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmp7s2efx2r.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp7s2efx2r.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp7s2efx2r.java:29: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp7s2efx2r.java:30: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            if (componentType.isPrimitive()) {\n                return true;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                return Arrays.stream(array).allMatch(x -> x.getClass() == componentType);\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpp_h47yu1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpp_h47yu1.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpp_h47yu1.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpp_h47yu1.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> test_class = test_tuple.getClass();\n        if(test_class.isArray()) {\n            Object[] test_array = (Object[]) test_tuple;\n            Class<?> test_class_array = test_array[0].getClass();\n            for(Object test_element : test_array) {\n                if(!test_element.getClass().equals(test_class_array)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmp2u8lcqgi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2u8lcqgi.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2u8lcqgi.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2u8lcqgi.java:29: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpu83_cozl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpu83_cozl.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:18: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:19: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> cls = test_tuple.getClass();\n        if(!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if(componentType.isPrimitive()) {\n            return false;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if(array.length == 0) {\n            return false;\n        }\n        Class<?> firstType = array[0].getClass();\n        for(int i = 1; i < array.length; i++) {\n            if(array[i].getClass() != firstType) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmpnn7sdedj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpnn7sdedj.java:35: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpnn7sdedj.java:36: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpnn7sdedj.java:37: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        Class<?> clazz = test_tuple.getClass();\n        if (clazz.isArray()) {\n            Class<?> componentType = clazz.getComponentType();\n            if (componentType.isPrimitive()) {\n                result = false;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                for (Object o : array) {\n                    if (o.getClass() != componentType) {\n                        result = false;\n                        break;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmppyebt4g1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppyebt4g1.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppyebt4g1.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppyebt4g1.java:35: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            if (componentType.isPrimitive()) {\n                return true;\n            }\n            Object[] array = (Object[]) test_tuple;\n            if (array.length == 0) {\n                return true;\n            }\n            Class<?> firstElementClass = array[0].getClass();\n            for (Object o : array) {\n                if (o.getClass() != firstElementClass) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmp7uoi23bk.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp7uoi23bk.java:32: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp7uoi23bk.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp7uoi23bk.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        return test_tuple.getClass().getTypeName().equals(\"org.javatuples.Pair\");\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmp96ch2gnc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp96ch2gnc.java:14: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp96ch2gnc.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp96ch2gnc.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        Class<?> clazz = test_tuple.getClass();\n        if (clazz.isArray()) {\n            Class<?> componentType = clazz.getComponentType();\n            if (componentType.isPrimitive()) {\n                result = false;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmp_rys4jdm.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_rys4jdm.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_rys4jdm.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_rys4jdm.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if (array.length == 0) {\n            return false;\n        }\n        Class<?> firstElementClass = array[0].getClass();\n        for (Object element : array) {\n            if (element == null || element.getClass() != firstElementClass) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmp_uce1v8u.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_uce1v8u.java:32: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_uce1v8u.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_uce1v8u.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        return test_tuple.getClass().getName().equals(\"org.javatuples.Pair\");\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp24d8qbm8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp24d8qbm8.java:14: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24d8qbm8.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24d8qbm8.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        boolean result = true;\n        Class<?> type = null;\n        for (Object obj : (Object[]) test_tuple) {\n            if (type == null) {\n                type = obj.getClass();\n            } else if (type != obj.getClass()) {\n                result = false;\n                break;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpuokpo9mx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpuokpo9mx.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpuokpo9mx.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpuokpo9mx.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> tuple_class = test_tuple.getClass();\n        Class<?> tuple_super_class = tuple_class.getSuperclass();\n        if (tuple_super_class.getName().equals(\"org.javatuples.AbstractTuple\")) {\n            Class<?>[] tuple_interfaces = tuple_class.getInterfaces();\n            Class<?> tuple_interface = tuple_interfaces[0];\n            Method[] tuple_methods = tuple_interface.getMethods();\n            Method tuple_method = tuple_methods[0];\n            Class<?>[] tuple_parameter_types = tuple_method.getParameterTypes();\n            Class<?> tuple_parameter_type = tuple_parameter_types[0];\n            Class<?> tuple_parameter_type_super_class = tuple_parameter_type.getSuperclass();\n            if (tuple_parameter_type_super_class.getName().equals(\"java.lang.Number\")) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmp5d3ltw_p.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5d3ltw_p.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5d3ltw_p.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5d3ltw_p.java:35: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        if (test_tuple instanceof Pair) {\n            Pair<Object, Object> pair = (Pair<Object, Object>) test_tuple;\n            result = pair.getValue0().getClass().equals(pair.getValue1().getClass());\n        } else if (test_tuple instanceof Triplet) {\n            Triplet<Object, Object, Object> triplet = (Triplet<Object, Object, Object>) test_tuple;\n            result = triplet.getValue0().getClass().equals(triplet.getValue1().getClass()) && triplet.getValue1().getClass().equals(triplet.getValue2().getClass());\n        } else if (test_tuple instanceof Quartet) {\n            Quartet<Object, Object, Object, Object> quartet = (Quartet<Object, Object, Object, Object>) test_tuple;\n            result = quartet.getValue0().getClass().equals(quartet.getValue1().getClass()) && quartet.getValue1().getClass().equals(quartet.getValue2().getClass()) && quartet.getValue2().getClass().equals(quartet.getValue3().getClass());\n        } else if (test_tuple instanceof Quintet) {\n            Quintet<Object, Object, Object, Object, Object> quintet = (Quintet<Object, Object, Object, Object, Object>) test_tuple;\n            result = quintet.getValue0().getClass().equals(quintet.getValue1().getClass()) && quintet.getValue1().getClass().equals(quintet.getValue2().getClass()) && quintet.getValue2().getClass().equals(quintet.getValue3().getClass()) && quintet.getValue3().getClass().equals(quintet.getValue4().getClass());\n        } else if (test_tuple instanceof Sextet) {\n            Sextet<Object,\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp07dcl123.java:29: error: illegal start of type\n    }\n    ^\n/tmp/tmp07dcl123.java:28: error: not a statement\n            Sextet<Object,\n                  ^\n/tmp/tmp07dcl123.java:30: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if (array.length == 0) {\n            return false;\n        }\n        Class<?> firstElementClass = array[0].getClass();\n        for (int i = 1; i < array.length; i++) {\n            if (array[i].getClass() != firstElementClass) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpq7gpw6y3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpq7gpw6y3.java:32: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpq7gpw6y3.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpq7gpw6y3.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        boolean result = true;\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            for (int i = 0; i < Array.getLength(test_tuple); i++) {\n                Object value = Array.get(test_tuple, i);\n                if (componentType.isPrimitive()) {\n                    if (componentType != value.getClass()) {\n                        result = false;\n                        break;\n                    }\n                } else {\n                    if (!componentType.isInstance(value)) {\n                        result = false;\n                        break;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpmbb_juja.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpmbb_juja.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpmbb_juja.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpmbb_juja.java:35: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpilalkfsi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpilalkfsi.java:22: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpilalkfsi.java:23: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpilalkfsi.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here.\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp24yt7fbd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp24yt7fbd.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24yt7fbd.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24yt7fbd.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp5sj_a02y.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5sj_a02y.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5sj_a02y.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5sj_a02y.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here.\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp24yt7fbd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp24yt7fbd.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24yt7fbd.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24yt7fbd.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        if (test_tuple instanceof Tuple) {\n            Tuple tuple = (Tuple) test_tuple;\n            Class<?> cls = tuple.getValue(0).getClass();\n            for (int i = 1; i < tuple.getSize(); i++) {\n                if (tuple.getValue(i).getClass() != cls) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmp8su9mboj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp8su9mboj.java:11: error: cannot find symbol\n        if (test_tuple instanceof Tuple) {\n                                  ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmp8su9mboj.java:12: error: cannot find symbol\n            Tuple tuple = (Tuple) test_tuple;\n            ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmp8su9mboj.java:12: error: cannot find symbol\n            Tuple tuple = (Tuple) test_tuple;\n                           ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmp8su9mboj.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp8su9mboj.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp8su9mboj.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> componentType = cls.getComponentType();\n            if (componentType.isPrimitive()) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpsoibvtu4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpsoibvtu4.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpsoibvtu4.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpsoibvtu4.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here.\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp24yt7fbd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp24yt7fbd.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24yt7fbd.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp24yt7fbd.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return true;\n        } else {\n            Object[] array = (Object[]) test_tuple;\n            return Arrays.stream(array).allMatch(x -> x.getClass() == componentType);\n        }\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "/tmp/tmp6v07ekpv.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp6v07ekpv.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp6v07ekpv.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp6v07ekpv.java:29: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        boolean flag = false;\n        if (test_tuple instanceof Tuple) {\n            Tuple t = (Tuple) test_tuple;\n            flag = true;\n            for (int i = 0; i < t.size(); i++) {\n                if (t.get(0).getClass() != t.get(i).getClass()) {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        return flag;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmp3wbltse6.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp3wbltse6.java:12: error: cannot find symbol\n        if (test_tuple instanceof Tuple) {\n                                  ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmp3wbltse6.java:13: error: cannot find symbol\n            Tuple t = (Tuple) test_tuple;\n            ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmp3wbltse6.java:13: error: cannot find symbol\n            Tuple t = (Tuple) test_tuple;\n                       ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmp3wbltse6.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp3wbltse6.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp3wbltse6.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        return test_tuple.getClass().getComponentType().equals(test_tuple.getClass().getComponentType());\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpauu0w0tb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpauu0w0tb.java:14: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpauu0w0tb.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpauu0w0tb.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> type = cls.getComponentType();\n            if (type.isPrimitive()) {\n                return true;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                return Arrays.stream(array).allMatch(x -> x.getClass().equals(type));\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmp626h9ozp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp626h9ozp.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp626h9ozp.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp626h9ozp.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> type = cls.getComponentType();\n            if (type.isPrimitive()) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpvzc3fdot.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpvzc3fdot.java:27: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpvzc3fdot.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpvzc3fdot.java:29: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return true;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if (array.length == 0) {\n            return false;\n        }\n        return Arrays.stream(array).allMatch(x -> x.getClass() == componentType);\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmp_vpljcth.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_vpljcth.java:29: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_vpljcth.java:30: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_vpljcth.java:31: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        Class<?>[] interfaces = cls.getInterfaces();\n        for (Class<?> i : interfaces) {\n            if (i.getName().equals(\"java.util.List\")) {\n                List<?> test_list = (List<?>) test_tuple;\n                Class<?> first_type = test_list.get(0).getClass();\n                for (Object o : test_list) {\n                    if (o.getClass() != first_type) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmp4h9y1bkt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp4h9y1bkt.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp4h9y1bkt.java:29: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp4h9y1bkt.java:30: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> clazz = test_tuple.getClass();\n        if (!clazz.isArray()) {\n            return false;\n        }\n        Class<?> componentType = clazz.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if (array.length == 0) {\n            return false;\n        }\n        Class<?> firstElementClass = array[0].getClass();\n        for (int i = 1; i < array.length; i++) {\n            if (array[i].getClass() != firstElementClass) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpjjfi5wx3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpjjfi5wx3.java:35: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpjjfi5wx3.java:36: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpjjfi5wx3.java:37: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Your code goes here.\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmps1zi1gns.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmps1zi1gns.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmps1zi1gns.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmps1zi1gns.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        return test_tuple.getClass().getName().contains(\"Pair\") || test_tuple.getClass().getName().contains(\"Triplet\");\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpqf51i8bn.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpqf51i8bn.java:14: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpqf51i8bn.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpqf51i8bn.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> class_name = test_tuple.getClass();\n        if (!class_name.isAnnotationPresent(Tuple.class)) {\n            return false;\n        }\n        Field[] fields = class_name.getDeclaredFields();\n        if (fields.length == 0) {\n            return false;\n        }\n        Class<?> type = fields[0].getType();\n        for (Field field : fields) {\n            if (field.getType() != type) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmp0qdgyn1v.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp0qdgyn1v.java:15: error: cannot find symbol\n        if (!class_name.isAnnotationPresent(Tuple.class)) {\n                                            ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmp0qdgyn1v.java:31: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp0qdgyn1v.java:32: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp0qdgyn1v.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n5 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp2bg0akqa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2bg0akqa.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpu83_cozl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpu83_cozl.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:18: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:19: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> cls = test_tuple.getClass();\n        if (!cls.isArray()) {\n            return false;\n        }\n        Class<?> componentType = cls.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        Object[] array = (Object[]) test_tuple;\n        if (array.length == 0) {\n            return false;\n        }\n        Class<?> firstElementClass = array[0].getClass();\n        for (int i = 1; i < array.length; i++) {\n            if (array[i].getClass() != firstElementClass) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpwkl9k6up.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpwkl9k6up.java:35: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpwkl9k6up.java:36: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpwkl9k6up.java:37: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> cls = test_tuple.getClass();\n        if (cls.isArray()) {\n            Class<?> type = cls.getComponentType();\n            if (type.isPrimitive()) {\n                return true;\n            } else {\n                Object[] array = (Object[]) test_tuple;\n                return Arrays.stream(array).allMatch(x -> x.getClass().equals(type));\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmp626h9ozp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp626h9ozp.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp626h9ozp.java:25: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp626h9ozp.java:26: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp2bg0akqa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2bg0akqa.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpu83_cozl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpu83_cozl.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:18: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu83_cozl.java:19: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Your code here\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpokp9jcbi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpokp9jcbi.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpokp9jcbi.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpokp9jcbi.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        if (test_tuple instanceof Tuple) {\n            Tuple tuple = (Tuple) test_tuple;\n            Class<?> tuple_type = tuple.getClass();\n            Class<?>[] tuple_types = tuple_type.getClasses();\n            Class<?>[] tuple_elements_types = new Class<?>[tuple_types.length];\n            for (int i = 0; i < tuple_types.length; i++) {\n                tuple_elements_types[i] = tuple_types[i].getClass();\n            }\n            for (int i = 0; i < tuple_elements_types.length; i++) {\n                if (tuple_elements_types[i] != tuple_elements_types[0]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmp_etzyhpw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_etzyhpw.java:11: error: cannot find symbol\n        if (test_tuple instanceof Tuple) {\n                                  ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmp_etzyhpw.java:12: error: cannot find symbol\n            Tuple tuple = (Tuple) test_tuple;\n            ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmp_etzyhpw.java:12: error: cannot find symbol\n            Tuple tuple = (Tuple) test_tuple;\n                           ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmp_etzyhpw.java:29: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_etzyhpw.java:30: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_etzyhpw.java:31: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp5sj_a02y.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5sj_a02y.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5sj_a02y.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5sj_a02y.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> c = test_tuple.getClass();\n        if (!c.isArray()) {\n            return false;\n        }\n        Class<?> componentType = c.getComponentType();\n        if (componentType.isPrimitive()) {\n            return false;\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpbnnkuhpi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpbnnkuhpi.java:22: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpbnnkuhpi.java:23: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpbnnkuhpi.java:24: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        Class<?> first_class = test_tuple.getClass();\n        for (Field field : first_class.getDeclaredFields()) {\n            try {\n                field.setAccessible(true);\n                Object value = field.get(test_tuple);\n                if (value != null) {\n                    if (value.getClass() != first_class.getDeclaredFields()[0].getType()) {\n                        result = false;\n                        break;\n                    }\n                }\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpdt2oyh2h.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpdt2oyh2h.java:33: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpdt2oyh2h.java:34: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpdt2oyh2h.java:35: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        Class<?> type = test_tuple.getClass();\n        if (!type.isTuple()) {\n            return false;\n        }\n        Class<?>[] types = type.getComponentTypes();\n        if (types.length == 0) {\n            return false;\n        }\n        Class<?> first = types[0];\n        for (Class<?> type_ : types) {\n            if (type_ != first) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpbhgx394o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpbhgx394o.java:12: error: cannot find symbol\n        if (!type.isTuple()) {\n                 ^\n  symbol:   method isTuple()\n  location: variable type of type Class<?>\n/tmp/tmpbhgx394o.java:15: error: cannot find symbol\n        Class<?>[] types = type.getComponentTypes();\n                               ^\n  symbol:   method getComponentTypes()\n  location: variable type of type Class<?>\n/tmp/tmpbhgx394o.java:28: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpbhgx394o.java:29: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpbhgx394o.java:30: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        boolean result = true;\n        Class<?> class_type = test_tuple.getClass();\n        Class<?>[] interfaces = class_type.getInterfaces();\n        for (Class<?> interface_type: interfaces) {\n            if (interface_type.getName().equals(\"java.lang.Iterable\")) {\n                Iterable<?> iterable = (Iterable<?>) test_tuple;\n                Iterator<?> iterator = iterable.iterator();\n                Class<?> first_type = null;\n                while (iterator.hasNext()) {\n                    Object element = iterator.next();\n                    if (first_type == null) {\n                        first_type = element.getClass();\n                    } else {\n                        if (!first_type.equals(element.getClass())) {\n                            result = false;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmphmcfpxs5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmphmcfpxs5.java:35: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmphmcfpxs5.java:36: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmphmcfpxs5.java:37: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Write your code here\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp2bg0akqa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2bg0akqa.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bg0akqa.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n        // Your code here\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpknkagrde.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpknkagrde.java:15: error: cannot find symbol\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpknkagrde.java:16: error: cannot find symbol\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpknkagrde.java:17: error: cannot find symbol\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n                     ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}