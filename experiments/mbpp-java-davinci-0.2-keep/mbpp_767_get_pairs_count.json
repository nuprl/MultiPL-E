{
  "name": "mbpp_767_get_pairs_count",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long getPairsCount(ArrayList<Long> arr, long sum) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(getPairsCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))), (2l)) == (6l));\n    assert(getPairsCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)7l, (long)-1l, (long)5l))), (6l)) == (3l));\n    assert(getPairsCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)3l))), (1l)) == (1l));\n    assert(getPairsCount((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)3l))), (-3l)) == (1l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here\n        long count = 0;\n        HashMap<Long, Long> map = new HashMap<>();\n        for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1L);\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n            long diff = sum - num;\n            if (map.containsKey(diff)) {\n                count += map.get(diff);\n            }\n            if (diff == num) {\n                count--;\n            }\n        }\n        return count / 2;",
    "        // sort the array\n        Collections.sort(arr);\n        int n = arr.size();\n        int low = 0;\n        int high = n - 1;\n        long count = 0;\n        while (low < high) {\n            if (arr.get(low) + arr.get(high) == sum) {\n                count++;\n                low++;\n                high--;\n            } else if (arr.get(low) + arr.get(high) < sum) {\n                low++;\n            } else {\n                high--;\n            }\n        }\n        return count;",
    "        // Create an empty Hash to store mapping from sum to\n        // number of tuples storing sum\n        HashMap<Long, Long> map = new HashMap<>();\n\n        long count = 0; // Initialize result\n\n        // Traverse through all possible pairs of arr[]\n        for (int i = 0; i < arr.size(); i++) {\n            // Initialize empty map to store count of sum-arr[i]\n            HashMap<Long, Long> map2 = new HashMap<>();\n\n            // Traverse through all possible pairs of arr[] and\n            // maintain counts of sums of pairs\n            for (int j = i + 1; j < arr.size(); j++) {\n                // If sum of current pair is not in hash,\n                // then store it and initialize count to 1\n                long sum2 = sum - (arr.get(i) + arr.get(j));\n                if (!map2.containsKey(sum2))\n                    map2.put(sum2, (long) 1);\n                else // Increment count of sum in hash\n                    map2.put(sum2, map2.get(sum2) + 1);\n            }\n\n            // Traverse through all elements of arr[0..i-1]\n            for (int j = 0; j < i; j++) {\n                // If arr[i] + arr[j] is in hash, then\n                // there is at-least one pair\n                // with sum equal to sum\n                if (map2.containsKey(arr.get(j)))\n                    count += map2.get(arr.get(j));\n            }\n\n            // Store counts of all sums in a hash map\n            for (Map.Entry<Long, Long> entry : map2.entrySet()) {\n                long x = entry.getKey();\n                long y = entry.getValue();\n                if (!map.containsKey(x))\n                    map.put(x, y);\n                else\n                    map.put(x, map.get(x) + y);\n            }\n        }\n\n        // Traverse through all elements and increment\n        // count by number of pairs with sum equal to\n        // arr[i]\n        for (int i = 0; i",
    "        // Create an empty Hash to store mapping from sum to\n        // number of tuples storing the sum\n        HashMap<Long, Long> map = new HashMap<>();\n\n        long count = 0; // Initialize result\n\n        // Traverse through all possible pairs of arr[]\n        for (int i = 0; i < arr.size(); i++) {\n            // Initialize empty map to store count of sum-arr[i]\n            HashMap<Long, Long> temp = new HashMap<>();\n\n            // Traverse through all elements after arr[i]\n            for (int j = i + 1; j < arr.size(); j++) {\n                // If sum of elements at index i & j is not in hash\n                // map, then store it and continue to next pair\n                long x = sum - (arr.get(i) + arr.get(j));\n                if (!temp.containsKey(x))\n                    temp.put(x, 1L);\n\n                    // Else increment the count of sum-arr[i]\n                else\n                    temp.put(x, temp.get(x) + 1);\n            }\n\n            // Traverse through all elements in map and increment\n            // 'count'\n            for (Map.Entry<Long, Long> entry : temp.entrySet()) {\n                if (map.containsKey(entry.getKey()))\n                    count += map.get(entry.getKey()) * entry.getValue();\n            }\n\n            // Store counts of current pair sums in 'map'\n            for (Map.Entry<Long, Long> entry : temp.entrySet()) {\n                if (!map.containsKey(entry.getKey()))\n                    map.put(entry.getKey(), entry.getValue());\n                else\n                    map.put(entry.getKey(), map.get(entry.getKey()) + entry.getValue());\n            }\n        }\n\n        return count;",
    "        HashMap<Long, Long> map = new HashMap<>();\n        for (long i : arr) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        long ans = 0;\n        for (long i : arr) {\n            if (map.containsKey(sum - i)) {\n                ans += map.get(sum - i);\n            }\n            if (i == sum - i) {\n                ans--;\n            }\n        }\n        return ans / 2;",
    "        long count = 0;\n        HashMap<Long, Long> map = new HashMap<Long, Long>();\n        for (long i : arr) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        for (long i : arr) {\n            if (map.containsKey(sum - i)) {\n                count += map.get(sum - i);\n            }\n            if (sum - i == i) {\n                count--;\n            }\n        }\n        return count / 2;",
    "        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(i) + arr.get(j) == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        HashMap<Long, Long> map = new HashMap<>();\n        for (long i : arr) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        long ans = 0;\n        for (long i : arr) {\n            if (map.containsKey(sum - i)) {\n                ans += map.get(sum - i);\n            }\n            if (sum - i == i) {\n                ans--;\n            }\n        }\n        return ans / 2;",
    "        // Create an empty Hash to store mapping from sum to\n        // number of tuples storing sum\n        HashMap<Long, Long> map = new HashMap<>();\n        long count = 0; // Initialize result\n        // Iterate through all elements and increment the\n        // count (Notice that every pair is counted twice)\n        for (int i = 0; i < arr.size(); i++) {\n            count += map.getOrDefault(sum - arr.get(i), 0L);\n            map.put(arr.get(i), map.getOrDefault(arr.get(i), 0L) + 1);\n        }\n        return count;",
    "        // Create an empty Hash to store mapping from sum to\n        // number of tuples storing sum\n        HashMap<Long, Long> map = new HashMap<>();\n\n        long count = 0; // Initialize result\n\n        // Traverse through all possible pairs of arr[]\n        for (int i = 0; i < arr.size(); i++) {\n            // Initialize empty map to store count of sum-arr[i]\n            HashMap<Long, Long> temp = new HashMap<>();\n\n            // Traverse through all elements after arr[i]\n            for (int j = i + 1; j < arr.size(); j++) {\n                // If sum of elements at index i & j is not in hash\n                // map, then store count of sum-arr[i]-arr[j]\n                if (!map.containsKey(arr.get(i) + arr.get(j)))\n                    if (temp.containsKey(sum - arr.get(i) - arr.get(j)))\n                        temp.put(sum - arr.get(i) - arr.get(j), temp.get(sum - arr.get(i) - arr.get(j)) + 1);\n                    else\n                        temp.put(sum - arr.get(i) - arr.get(j), 1L);\n\n                // If sum of elements at index i & j is in hash map,\n                // then increment count by count of sum-arr[i]-arr[j]\n                else\n                    count += map.get(arr.get(i) + arr.get(j));\n            }\n\n            // Store count of sums of pairs with arr[i]\n            map.putAll(temp);\n        }\n\n        // Return total count\n        return count;",
    "        long count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(i) + arr.get(j) == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // sort the array\n        Collections.sort(arr);\n        // create a hashmap to store the number of occurences of each number\n        HashMap<Long, Long> map = new HashMap<>();\n        for (long i : arr) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        // iterate over the array and for each element find the number of elements that sum up to sum - arr[i]\n        long count = 0;\n        for (long i : arr) {\n            long target = sum - i;\n            if (map.containsKey(target)) {\n                count += map.get(target);\n            }\n            if (target == i) {\n                count--;\n            }\n        }\n        return count / 2;",
    "        long count = 0;\n        HashMap<Long, Long> map = new HashMap<>();\n        for (long i : arr) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        for (long i : arr) {\n            if (map.containsKey(sum - i)) {\n                count += map.get(sum - i);\n            }\n            if (sum - i == i) {\n                count--;\n            }\n        }\n        return count / 2;",
    "        HashMap<Long, Long> map = new HashMap<>();\n        for (long i : arr) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        long ans = 0;\n        for (long i : arr) {\n            if (map.containsKey(sum - i)) {\n                ans += map.get(sum - i);\n            }\n            if (sum - i == i) {\n                ans--;\n            }\n        }\n        return ans / 2;",
    "        // sort the array\n        Collections.sort(arr);\n        // initialize the count\n        long count = 0;\n        // initialize the left and right pointers\n        int left = 0;\n        int right = arr.size() - 1;\n        // loop until the left pointer is less than the right pointer\n        while (left < right) {\n            // if the sum of the left and right pointers is less than the sum, increment the left pointer\n            if (arr.get(left) + arr.get(right) < sum) {\n                left++;\n            }\n            // if the sum of the left and right pointers is greater than the sum, decrement the right pointer\n            else if (arr.get(left) + arr.get(right) > sum) {\n                right--;\n            }\n            // if the sum of the left and right pointers is equal to the sum, increment the count and increment the left pointer\n            else {\n                count++;\n                left++;\n            }\n        }\n        // return the count\n        return count;",
    "        HashMap<Long, Long> map = new HashMap<>();\n        for (long i : arr) {\n            map.put(i, map.getOrDefault(i, 0L) + 1);\n        }\n        long ans = 0;\n        for (long i : arr) {\n            long val = sum - i;\n            if (map.containsKey(val)) {\n                ans += map.get(val);\n            }\n        }\n        return ans;",
    "        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(i) + arr.get(j) == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        HashMap<Long, Long> map = new HashMap<>();\n        for (long i : arr) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        for (long i : arr) {\n            long diff = sum - i;\n            if (map.containsKey(diff)) {\n                count += map.get(diff);\n            }\n            if (diff == i) {\n                count--;\n            }\n        }\n        return count / 2;",
    "        // Create an empty Hash to store mapping from sum to\n        // number of tuples storing sum\n        HashMap<Long, Long> map = new HashMap<>();\n\n        long count = 0; // Initialize result\n\n        // Traverse through all possible pairs of arr[]\n        for (int i = 0; i < arr.size(); i++) {\n            // Initialize sum of current pair\n            long curr_sum = sum - arr.get(i);\n\n            // If curr_sum is seen before, increment count\n            if (map.containsKey(curr_sum))\n                count += map.get(curr_sum);\n\n            // Add curr_sum to hash table\n            long value = map.getOrDefault(arr.get(i), 0L);\n            map.put(arr.get(i), value + 1);\n        }\n\n        return count;",
    "        long count = 0;\n        HashMap<Long, Long> map = new HashMap<>();\n        for (long i : arr) {\n            if (map.containsKey(i)) {\n                count += map.get(i);\n            }\n            map.put(sum - i, map.getOrDefault(sum - i, 0L) + 1);\n        }\n        return count;"
  ]
}