{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to find the first non-repeated character in a given string.\n    public static Optional<String> firstNonRepeatingCharacter(String str1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(firstNonRepeatingCharacter((\"abcabc\")).equals(Optional.empty()));\n    assert(firstNonRepeatingCharacter((\"abc\")).equals(\"a\"));\n    assert(firstNonRepeatingCharacter((\"ababc\")).equals(\"c\"));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.isEmpty()) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            map.put(s, map.getOrDefault(s, 0) + 1);\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        if (str1 == null || str1.isEmpty()) {\n            return Optional.empty();\n        }\n        Map<String, Integer> charCount = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (charCount.containsKey(c)) {\n                charCount.put(c, charCount.get(c) + 1);\n            } else {\n                charCount.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (charCount.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String key = String.valueOf(str1.charAt(i));\n            if (map.containsKey(key)) {\n                map.put(key, map.get(key) + 1);\n            } else {\n                map.put(key, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String key = String.valueOf(str1.charAt(i));\n            if (map.get(key) == 1) {\n                return Optional.of(key);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String key = String.valueOf(str1.charAt(i));\n            if (map.containsKey(key)) {\n                map.put(key, map.get(key) + 1);\n            } else {\n                map.put(key, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String key = String.valueOf(str1.charAt(i));\n            if (map.get(key) == 1) {\n                return Optional.of(key);\n            }\n        }\n        return Optional.empty();",
    "        // return str1.chars().distinct().mapToObj(c -> (char) c).map(c -> c.toString()).findFirst();\n        return str1.chars().distinct().mapToObj(c -> (char) c).map(c -> c.toString()).findFirst();",
    "        // TODO: implement\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        // Create a HashMap with character as a key and occurrences as a value.\n        Map<String, Integer> map = new HashMap<>();\n        // For each character in input strings, increment it's count\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        // Search character with count 1 in HashMap\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        return str1.chars().mapToObj(c -> (char) c)\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n            .entrySet().stream()\n            .filter(e -> e.getValue() == 1)\n            .map(e -> e.getKey().toString())\n            .findFirst();",
    "        // Write your code here\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        if (str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        return str1.chars()\n            .mapToObj(c -> (char) c)\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n            .entrySet()\n            .stream()\n            .filter(e -> e.getValue() == 1)\n            .map(e -> e.getKey().toString())\n            .findFirst();",
    "        // TODO: Write - Your - Code\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null) {\n            return Optional.empty();\n        }\n        if (str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        if (str1.length() == 0) {\n            return Optional.empty();\n        }\n        char[] chars = str1.toCharArray();\n        Map<Character, Integer> charCounts = new HashMap<>();\n        for (char c : chars) {\n            if (charCounts.containsKey(c)) {\n                charCounts.put(c, charCounts.get(c) + 1);\n            } else {\n                charCounts.put(c, 1);\n            }\n        }\n        for (char c : chars) {\n            if (charCounts.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        // Return the character\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<String, Integer>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for(String s : str1.split(\"\")) {\n            if(map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for(String s : str1.split(\"\")) {\n            if(map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String ch = str1.substring(i, i + 1);\n            if (map.containsKey(ch)) {\n                map.put(ch, map.get(ch) + 1);\n            } else {\n                map.put(ch, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String ch = str1.substring(i, i + 1);\n            if (map.get(ch) == 1) {\n                return Optional.of(ch);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for(int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i+1);\n            if(map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for(int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i+1);\n            if(map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String key = String.valueOf(str1.charAt(i));\n            if (map.containsKey(key)) {\n                map.put(key, map.get(key) + 1);\n            } else {\n                map.put(key, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String key = String.valueOf(str1.charAt(i));\n            if (map.get(key) == 1) {\n                return Optional.of(key);\n            }\n        }\n        return Optional.empty();",
    "        // Create a HashMap to store the count of each character\n        Map<String, Integer> map = new HashMap<>();\n        // Convert the string to a char array\n        char[] charArray = str1.toCharArray();\n        // Iterate through the array\n        for (char c : charArray) {\n            // Convert the character to a string\n            String charString = Character.toString(c);\n            // If the character is not in the HashMap, add it to the HashMap\n            if (!map.containsKey(charString)) {\n                map.put(charString, 1);\n            } else {\n                // If the character is in the HashMap, increment the count\n                map.put(charString, map.get(charString) + 1);\n            }\n        }\n        // Iterate through the HashMap\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            // If the count is 1, return the character\n            if (entry.getValue() == 1) {\n                return Optional.of(entry.getKey());\n            }\n        }\n        // If no character is found, return null\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        char[] chars = str1.toCharArray();\n        Map<Character, Integer> map = new HashMap<>();\n        for (char c : chars) {\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (char c : chars) {\n            if (map.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char ch = str1.charAt(i);\n            if (map.containsKey(ch)) {\n                map.put(ch, map.get(ch) + 1);\n            } else {\n                map.put(ch, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            char ch = str1.charAt(i);\n            if (map.get(ch) == 1) {\n                return Optional.of(String.valueOf(ch));\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String key = String.valueOf(str1.charAt(i));\n            if (map.containsKey(key)) {\n                map.put(key, map.get(key) + 1);\n            } else {\n                map.put(key, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String key = String.valueOf(str1.charAt(i));\n            if (map.get(key) == 1) {\n                return Optional.of(key);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        // Create a map of characters to their counts\n        Map<Character, Integer> charCounts = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (charCounts.containsKey(c)) {\n                charCounts.put(c, charCounts.get(c) + 1);\n            } else {\n                charCounts.put(c, 1);\n            }\n        }\n        // Find the first character with a count of 1\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (charCounts.get(c) == 1) {\n                return Optional.of(Character.toString(c));\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        // TODO: Write - Your - Code\n        return Optional.empty();",
    "        // TODO: Implement\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        List<String> str1List = Arrays.asList(str1.split(\"\"));\n        List<String> str1ListCopy = new ArrayList<>(str1List);\n        str1ListCopy.removeIf(s -> Collections.frequency(str1List, s) > 1);\n        return str1ListCopy.isEmpty() ? Optional.empty() : Optional.of(str1ListCopy.get(0));",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String key = String.valueOf(str1.charAt(i));\n            if (map.containsKey(key)) {\n                map.put(key, map.get(key) + 1);\n            } else {\n                map.put(key, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String key = String.valueOf(str1.charAt(i));\n            if (map.get(key) == 1) {\n                return Optional.of(key);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        HashMap<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        // return Optional.empty();\n        return Optional.of(\"a\");",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            map.put(s, map.getOrDefault(s, 0) + 1);\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            map.put(s, map.getOrDefault(s, 0) + 1);\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.isEmpty()) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String key = String.valueOf(str1.charAt(i));\n            if (map.containsKey(key)) {\n                map.put(key, map.get(key) + 1);\n            } else {\n                map.put(key, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String key = String.valueOf(str1.charAt(i));\n            if (map.get(key) == 1) {\n                return Optional.of(key);\n            }\n        }\n        return Optional.empty();",
    "        // TODO: Implement\n        return Optional.empty();",
    "        Optional<String> result = Optional.empty();\n        if (str1 == null || str1.length() == 0) {\n            return result;\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                result = Optional.of(s);\n                break;\n            }\n        }\n        return result;",
    "        // Create a map of characters to count\n        Map<Character, Integer> map = new HashMap<>();\n        for (char c : str1.toCharArray()) {\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        // Iterate through the string and find the first character that has a count of 1\n        for (char c : str1.toCharArray()) {\n            if (map.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        // Return the first non-repeating character\n        // If there are no non-repeating characters, return None\n        // If there are multiple non-repeating characters, return the first one\n        // If the string is empty, return None\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.get(c) == 1) {\n                return Optional.of(Character.toString(c));\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.isEmpty()) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        // Convert string to char array\n        char[] chars = str1.toCharArray();\n        // Create a HashMap\n        Map<Character, Integer> charMap = new HashMap<Character, Integer>();\n        // Iterate through char array\n        for (char c : chars) {\n            if (charMap.containsKey(c)) {\n                // If char is present in charMap, incrementing it's count by 1\n                charMap.put(c, charMap.get(c) + 1);\n            } else {\n                // If char is not present in charMap, putting this char to charMap with 1 as it's value\n                charMap.put(c, 1);\n            }\n        }\n        // Searching through charMap, returning the first char with value 1\n        for (char c : chars) {\n            if (charMap.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String c : str1.split(\"\")) {\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (String c : str1.split(\"\")) {\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String str : str1.split(\"\")) {\n            if (map.containsKey(str)) {\n                map.put(str, map.get(str) + 1);\n            } else {\n                map.put(str, 1);\n            }\n        }\n        for (String str : str1.split(\"\")) {\n            if (map.get(str) == 1) {\n                return Optional.of(str);\n            }\n        }\n        return Optional.empty();",
    "        // Create a map of characters and their counts\n        Map<String, Integer> charCount = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (charCount.containsKey(c)) {\n                charCount.put(c, charCount.get(c) + 1);\n            } else {\n                charCount.put(c, 1);\n            }\n        }\n        // Find the first character with count 1\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (charCount.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            map.put(s, map.getOrDefault(s, 0) + 1);\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String str : str1.split(\"\")) {\n            if (map.containsKey(str)) {\n                map.put(str, map.get(str) + 1);\n            } else {\n                map.put(str, 1);\n            }\n        }\n        for (String str : str1.split(\"\")) {\n            if (map.get(str) == 1) {\n                return Optional.of(str);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String key = String.valueOf(str1.charAt(i));\n            if (map.containsKey(key)) {\n                map.put(key, map.get(key) + 1);\n            } else {\n                map.put(key, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String key = String.valueOf(str1.charAt(i));\n            if (map.get(key) == 1) {\n                return Optional.of(key);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return null;",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        return str1.chars()\n            .mapToObj(c -> (char) c)\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n            .entrySet()\n            .stream()\n            .filter(e -> e.getValue() == 1)\n            .map(e -> e.getKey().toString())\n            .findFirst();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = Character.toString(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = Character.toString(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String s = String.valueOf(str1.charAt(i));\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String s = String.valueOf(str1.charAt(i));\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        if (str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        char[] chars = str1.toCharArray();\n        Map<Character, Integer> map = new HashMap<>();\n        for (char c : chars) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        for (char c : chars) {\n            if (map.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return Optional.empty();",
    "        // return Optional.of(\"a\");\n        // return Optional.empty();\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return Optional.of(\"a\");\n        // return",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.get(c) == 1) {\n                return Optional.of(Character.toString(c));\n            }\n        }\n        return Optional.empty();",
    "        // 1. Convert string to char array\n        char[] str1Chars = str1.toCharArray();\n        // 2. Create a hashmap to store the count of each character\n        Map<Character, Integer> charCount = new HashMap<>();\n        // 3. Iterate through the char array and store the count of each character in the hashmap\n        for (char c : str1Chars) {\n            if (charCount.containsKey(c)) {\n                charCount.put(c, charCount.get(c) + 1);\n            } else {\n                charCount.put(c, 1);\n            }\n        }\n        // 4. Iterate through the char array again and return the first character with count 1\n        for (char c : str1Chars) {\n            if (charCount.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        return str1.chars().mapToObj(c -> (char)c).collect(Collectors.groupingBy(Function.identity(), Collectors.counting())).entrySet().stream().filter(e -> e.getValue() == 1).map(e -> e.getKey().toString()).findFirst();",
    "        if (str1 == null || str1.isEmpty()) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = Character.toString(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = Character.toString(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String ch = str1.substring(i, i + 1);\n            if (map.containsKey(ch)) {\n                map.put(ch, map.get(ch) + 1);\n            } else {\n                map.put(ch, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String ch = str1.substring(i, i + 1);\n            if (map.get(ch) == 1) {\n                return Optional.of(ch);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            map.put(s, map.getOrDefault(s, 0) + 1);\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        return map.entrySet().stream().filter(e -> e.getValue() == 1).map(e -> e.getKey()).findFirst();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null) {\n            return Optional.empty();\n        }\n        if (str1.length() == 0) {\n            return Optional.empty();\n        }\n        if (str1.length() == 1) {\n            return Optional.of(str1);\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        // Create a hash map\n        Map<String, Integer> map = new HashMap<>();\n        // Convert the string to an array of characters\n        String[] str1Array = str1.split(\"\");\n        // Iterate over the array\n        for (String c : str1Array) {\n            // If the character is already in the hash map\n            if (map.containsKey(c)) {\n                // Increment the count\n                map.put(c, map.get(c) + 1);\n            } else {\n                // Otherwise add the character to the hash map\n                map.put(c, 1);\n            }\n        }\n        // Iterate over the array\n        for (String c : str1Array) {\n            // If the character count is 1\n            if (map.get(c) == 1) {\n                // Return the character\n                return Optional.of(c);\n            }\n        }\n        // Otherwise return null\n        return Optional.empty();",
    "        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        if (str1 == null || str1.isEmpty()) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        // Create a hashmap of the string\n        HashMap<String, Integer> map = new HashMap<String, Integer>();\n        for (int i = 0; i < str1.length(); i++) {\n            String key = str1.substring(i, i + 1);\n            if (map.containsKey(key)) {\n                map.put(key, map.get(key) + 1);\n            } else {\n                map.put(key, 1);\n            }\n        }\n        // Iterate through the string and return the first non-repeating character\n        for (int i = 0; i < str1.length(); i++) {\n            String key = str1.substring(i, i + 1);\n            if (map.get(key) == 1) {\n                return Optional.of(key);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        char[] chars = str1.toCharArray();\n        Map<Character, Integer> map = new HashMap<>();\n        for (char c : chars) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        for (char c : chars) {\n            if (map.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        // Create a map of all the characters in the string\n        // and the number of times they appear.\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i+1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        // Find the first character that appears only once.\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i+1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.isEmpty()) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i+1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i+1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String s = String.valueOf(str1.charAt(i));\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String s = String.valueOf(str1.charAt(i));\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String key = String.valueOf(str1.charAt(i));\n            if (map.containsKey(key)) {\n                map.put(key, map.get(key) + 1);\n            } else {\n                map.put(key, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String key = String.valueOf(str1.charAt(i));\n            if (map.get(key) == 1) {\n                return Optional.of(key);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        // Return the character\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String key = String.valueOf(str1.charAt(i));\n            if (map.containsKey(key)) {\n                map.put(key, map.get(key) + 1);\n            } else {\n                map.put(key, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String key = String.valueOf(str1.charAt(i));\n            if (map.get(key) == 1) {\n                return Optional.of(key);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        // TODO\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        char[] chars = str1.toCharArray();\n        Map<Character, Integer> map = new HashMap<>();\n        for (char c : chars) {\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (char c : chars) {\n            if (map.get(c) == 1) {\n                return Optional.of(String.valueOf(c));\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            map.put(s, map.getOrDefault(s, 0) + 1);\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            map.put(s, map.getOrDefault(s, 0) + 1);\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String key = str1.substring(i, i + 1);\n            if (map.containsKey(key)) {\n                map.put(key, map.get(key) + 1);\n            } else {\n                map.put(key, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String key = str1.substring(i, i + 1);\n            if (map.get(key) == 1) {\n                return Optional.of(key);\n            }\n        }\n        return Optional.empty();",
    "        return str1.chars()\n            .mapToObj(c -> (char) c)\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n            .entrySet()\n            .stream()\n            .filter(e -> e.getValue() == 1)\n            .map(e -> e.getKey().toString())\n            .findFirst();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String s = String.valueOf(str1.charAt(i));\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String s = String.valueOf(str1.charAt(i));\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String s = str1.substring(i, i + 1);\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String s = str1.substring(i, i + 1);\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        Map<String, Integer> map = new HashMap<>();\n        for (String s : str1.split(\"\")) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        for (String s : str1.split(\"\")) {\n            if (map.get(s) == 1) {\n                return Optional.of(s);\n            }\n        }\n        return Optional.empty();",
    "        // Create a map of characters to the number of times they appear in the string\n        Map<Character, Integer> charMap = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (charMap.containsKey(c)) {\n                charMap.put(c, charMap.get(c) + 1);\n            } else {\n                charMap.put(c, 1);\n            }\n        }\n        // Iterate through the string and return the first character that appears only once\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (charMap.get(c) == 1) {\n                return Optional.of(Character.toString(c));\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        if (str1 == null) {\n            return Optional.empty();\n        }\n        if (str1.length() == 0) {\n            return Optional.empty();\n        }\n        if (str1.length() == 1) {\n            return Optional.of(str1);\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String key = str1.substring(i, i + 1);\n            if (map.containsKey(key)) {\n                map.put(key, map.get(key) + 1);\n            } else {\n                map.put(key, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String key = str1.substring(i, i + 1);\n            if (map.get(key) == 1) {\n                return Optional.of(key);\n            }\n        }\n        return Optional.empty();"
  ]
}