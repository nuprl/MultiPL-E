{
  "name": "mbpp_760_unique_Element",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to check whether a list of numbers contains only one distinct element or not.\n    public static boolean uniqueElement(ArrayList<Long> arr) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(uniqueElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)))) == (true));\n    assert(uniqueElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l)))) == (false));\n    assert(uniqueElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long i : arr) {\n            set.add(i);\n        }\n        return set.size() == 1;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long i : arr) {\n            set.add(i);\n        }\n        return set.size() == 1;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return arr.stream().distinct().count() == 1;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long i : arr) {\n            set.add(i);\n        }\n        if (set.size() == 1) {\n            return true;\n        } else {\n            return false;\n        }",
    "        long count = 0;\n        for (long i = 0; i < arr.size(); i++) {\n            if (arr.get((int) i) == arr.get((int) (i + 1))) {\n                count++;\n            }\n        }\n        if (count == arr.size() - 1) {\n            return true;\n        } else {\n            return false;\n        }",
    "        Set<Long> set = new HashSet<Long>(arr);\n        return set.size() == 1;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long i : arr) {\n            set.add(i);\n        }\n        return set.size() == 1;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long i : arr) {\n            set.add(i);\n        }\n        return set.size() == 1;",
    "        if (arr.size() == 0) {\n            return false;\n        }\n        long first = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) != first) {\n                return false;\n            }\n        }\n        return true;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long i : arr) {\n            set.add(i);\n        }\n        return set.size() == 1;",
    "        HashSet<Long> set = new HashSet<>();\n        for (Long x : arr) {\n            if (set.contains(x)) {\n                return false;\n            }\n            set.add(x);\n        }\n        return true;",
    "        HashSet<Long> set = new HashSet<>();\n        for (Long i : arr) {\n            set.add(i);\n        }\n        return set.size() == 1;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long i : arr) {\n            if (set.contains(i)) {\n                return false;\n            }\n            set.add(i);\n        }\n        return true;",
    "        HashMap<Long, Integer> map = new HashMap<>();\n        for (Long i : arr) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1);\n            }\n        }\n        for (Map.Entry<Long, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > 1) {\n                return false;\n            }\n        }\n        return true;",
    "        return arr.stream().distinct().count() == 1;",
    "        HashSet<Long> set = new HashSet<>();\n        for (Long i : arr) {\n            if (set.contains(i)) {\n                return false;\n            }\n            set.add(i);\n        }\n        return true;",
    "        HashSet<Long> set = new HashSet<>();\n        for (Long i : arr) {\n            set.add(i);\n        }\n        return set.size() == 1;",
    "        HashMap<Long, Integer> map = new HashMap<>();\n        for (Long i : arr) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1);\n            }\n        }\n        for (Map.Entry<Long, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > 1) {\n                return false;\n            }\n        }\n        return true;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long i : arr) {\n            set.add(i);\n        }\n        return set.size() == 1;",
    "        HashSet<Long> set = new HashSet<>();\n        for (Long i : arr) {\n            set.add(i);\n        }\n        return set.size() == 1;"
  ]
}