{
  "name": "mbpp_746_sector_area",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));",
    "        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));",
    "        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));",
    "        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));",
    "        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));",
    "        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));",
    "        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));",
    "        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (r * r * a / 2));",
    "        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));",
    "        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));",
    "        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));",
    "        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of(0.5f * r * r * a);",
    "        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));",
    "        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of(a * r * r / 2);",
    "        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));",
    "        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));",
    "        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));",
    "        if (a > 360) return Optional.empty();\n        return Optional.of((float) (Math.PI * r * r * a / 360));",
    "        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));",
    "        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));"
  ]
}