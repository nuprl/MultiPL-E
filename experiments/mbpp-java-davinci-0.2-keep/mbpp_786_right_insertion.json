{
  "name": "mbpp_786_right_insertion",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the right insertion point for a specified value in sorted order.\n    public static long rightInsertion(ArrayList<Long> a, long x) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(rightInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(rightInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(rightInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        int low = 0;\n        int high = a.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;",
    "        int n = a.size();\n        int left = 0;\n        int right = n - 1;\n        int mid = 0;\n        while (left <= right) {\n            mid = (left + right) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;",
    "        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int low = 0;\n        int high = a.size() - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;",
    "        int left = 0;\n        int right = a.size() - 1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;",
    "        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = l + (r - l) / 2;\n            if (a.get(m) == x)\n                return m;\n            else if (a.get(m) > x)\n                r = m - 1;\n            else\n                l = m + 1;\n        }\n        return l;",
    "        long low = 0;\n        long high = a.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (a.get((int) mid) <= x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;",
    "        int lo = 0;\n        int hi = a.size() - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int left = 0;\n        int right = a.size() - 1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (a.get(mid) < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;",
    "        // Binary search\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x)\n                return m;\n            else if (a.get(m) < x)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n        return l;",
    "        int low = 0;\n        int high = a.size() - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;",
    "        int lo = 0;\n        int hi = a.size() - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a.get(mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int n = a.size();\n        long lo = 0, hi = n - 1;\n        while (lo <= hi) {\n            long mid = (lo + hi) / 2;\n            if (a.get((int) mid) == x) {\n                return mid + 1;\n            } else if (a.get((int) mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int left = 0;\n        int right = a.size() - 1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            }\n            if (a.get(mid) < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;",
    "        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            }\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) <= x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.size() - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;"
  ]
}