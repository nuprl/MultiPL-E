{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(nums1.get((int) (pair.getValue1() / nums2.size())));\n            temp.add(nums2.get((int) (pair.getValue1() % nums2.size())));\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmpaqxr9_i4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpaqxr9_i4.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpaqxr9_i4.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpaqxr9_i4.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpaqxr9_i4.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpaqxr9_i4.java:23: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpaqxr9_i4.java:30: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) return result;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmpp__grh6b.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpp__grh6b.java:13: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpp__grh6b.java:13: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpp__grh6b.java:13: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpp__grh6b.java:14: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpp__grh6b.java:14: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpp__grh6b.java:20: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpp__grh6b.java:24: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                queue.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (queue.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = queue.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmp7jufvo0t.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp7jufvo0t.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp7jufvo0t.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp7jufvo0t.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                   ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp7jufvo0t.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmp7jufvo0t.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmp7jufvo0t.java:22: error: cannot find symbol\n                queue.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp7jufvo0t.java:29: error: cannot find symbol\n            Pair<Long, Long> pair = queue.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.offer(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmpibv_ofsp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpibv_ofsp.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpibv_ofsp.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpibv_ofsp.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpibv_ofsp.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpibv_ofsp.java:23: error: cannot find symbol\n                pq.offer(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpibv_ofsp.java:27: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return res;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            long sum1 = a.getValue0() + a.getValue1();\n            long sum2 = b.getValue0() + b.getValue1();\n            if (sum1 > sum2) {\n                return 1;\n            } else if (sum1 < sum2) {\n                return -1;\n            } else {\n                return 0;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            res.add(temp);\n            k--;\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmpqs9d31fx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpqs9d31fx.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpqs9d31fx.java:28: error: cannot find symbol\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpqs9d31fx.java:32: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (long i = 0; i < nums1.size(); i++) {\n            for (long j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get((int)i));\n                pair.add(nums2.get((int)j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmprpb5pqmf.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> o1, ArrayList<Long> o2) {\n                return (int) (o1.get(0) + o1.get(1) - o2.get(0) - o2.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmpj4xox404.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 + num2, num1));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue1());\n            pair.add(p.getValue0() - p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmp1un46i5e.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp1un46i5e.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1un46i5e.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1un46i5e.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmp1un46i5e.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmp1un46i5e.java:23: error: cannot find symbol\n                pq.add(new Pair<>(num1 + num2, num1));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1un46i5e.java:27: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long i = p.getValue1() / nums2.size();\n            long j = p.getValue1() % nums2.size();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get((int) j));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmpymvr8czw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpymvr8czw.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpymvr8czw.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpymvr8czw.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpymvr8czw.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpymvr8czw.java:23: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpymvr8czw.java:27: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return result;\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0) + a.get(1) < b.get(0) + b.get(1) ? -1 : 1;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmpnfxz_koa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmpb1cxwen0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue1().compareTo(o2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            long i = pair.getValue1() / nums2.size();\n            long j = pair.getValue1() % nums2.size();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(nums1.get((int) i));\n            temp.add(nums2.get((int) j));\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmp0odjtxsj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp0odjtxsj.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0odjtxsj.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0odjtxsj.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                               ^\n  symbol: class Pair\n/tmp/tmp0odjtxsj.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmp0odjtxsj.java:23: error: cannot find symbol\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0odjtxsj.java:27: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0) + a.get(1) > b.get(0) + b.get(1) ? 1 : -1;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.size() == 0) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmppm7hr_kq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int)(p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmpgay280jv.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpgay280jv.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpgay280jv.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpgay280jv.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpgay280jv.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpgay280jv.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpgay280jv.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpgay280jv.java:26: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        HashSet<Long> visited = new HashSet<>();\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            long i = pair.getValue1() / nums2.size();\n            long j = pair.getValue1() % nums2.size();\n            if (!visited.contains(pair.getValue1())) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get((int) i));\n                temp.add(nums2.get((int) j));\n                result.add(temp);\n                visited.add(pair.getValue1());\n                k--;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmpvyrf3po6.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpvyrf3po6.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpvyrf3po6.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpvyrf3po6.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpvyrf3po6.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpvyrf3po6.java:23: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpvyrf3po6.java:28: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (!pq.isEmpty() && k > 0) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmpmh7cdu8h.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpmh7cdu8h.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpmh7cdu8h.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpmh7cdu8h.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpmh7cdu8h.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpmh7cdu8h.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpmh7cdu8h.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpmh7cdu8h.java:26: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>((a, b) -> {\n            long sum1 = a.get(0) + a.get(1);\n            long sum2 = b.get(0) + b.get(1);\n            if (sum1 < sum2) {\n                return -1;\n            } else if (sum1 > sum2) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && pq.size() > 0) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmp8vq22l2w.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a1, ArrayList<Long> a2) {\n                return a1.get(0).compareTo(a2.get(0));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i) + nums2.get(j));\n                pair.add((long) i);\n                pair.add((long) j);\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            ArrayList<Long> pair = pq.poll();\n            ArrayList<Long> newPair = new ArrayList<>();\n            newPair.add(nums1.get(pair.get(1).intValue()));\n            newPair.add(nums2.get(pair.get(2).intValue()));\n            result.add(newPair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmp2zw1ofaw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) + nums2.get(j), i * nums2.size() + j));\n            }\n        }\n        HashSet<Long> visited = new HashSet<>();\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long index = p.getValue1();\n            if (visited.contains(index)) {\n                continue;\n            }\n            visited.add(index);\n            long i = index / nums2.size();\n            long j = index % nums2.size();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get(i));\n            pair.add(nums2.get(j));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmppao8q6lu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppao8q6lu.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppao8q6lu.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppao8q6lu.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmppao8q6lu.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmppao8q6lu.java:23: error: cannot find symbol\n                pq.add(Pair.with(nums1.get(i) + nums2.get(j), i * nums2.size() + j));\n                       ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppao8q6lu.java:28: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppao8q6lu.java:37: error: incompatible types: possible lossy conversion from long to int\n            pair.add(nums1.get(i));\n                               ^\n/tmp/tmppao8q6lu.java:38: error: incompatible types: possible lossy conversion from long to int\n            pair.add(nums2.get(j));\n                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n9 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmptdfwo4zc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmptdfwo4zc.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptdfwo4zc.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptdfwo4zc.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptdfwo4zc.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmptdfwo4zc.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmptdfwo4zc.java:23: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptdfwo4zc.java:27: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            result.add(new ArrayList<Long>(Arrays.asList(nums1.get((int) (p.getValue1() / nums2.size())), nums2.get((int) (p.getValue1() % nums2.size())))));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122976,
      "stdout": "",
      "stderr": "/tmp/tmpy1gbu4zy.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpy1gbu4zy.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpy1gbu4zy.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpy1gbu4zy.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpy1gbu4zy.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpy1gbu4zy.java:23: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpy1gbu4zy.java:30: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        HashSet<Long> visited = new HashSet<>();\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            if (visited.contains(p.getValue1())) {\n                continue;\n            }\n            visited.add(p.getValue1());\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) (p.getValue1() / nums2.size())));\n            pair.add(nums2.get((int) (p.getValue1() % nums2.size())));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmpocnr6st1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpocnr6st1.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpocnr6st1.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpocnr6st1.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpocnr6st1.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpocnr6st1.java:23: error: cannot find symbol\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpocnr6st1.java:28: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return Long.compare(p1.getValue0() + p1.getValue1(), p2.getValue0() + p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmp90yu3p7c.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp90yu3p7c.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp90yu3p7c.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp90yu3p7c.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmp90yu3p7c.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmp90yu3p7c.java:23: error: cannot find symbol\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp90yu3p7c.java:30: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> queue = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                queue.add(temp);\n            }\n        }\n        while (k > 0 && !queue.isEmpty()) {\n            result.add(queue.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmpmiqicw31.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (Long n1 : nums1) {\n            for (Long n2 : nums2) {\n                pq.add(new Pair<>(n1, n2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmp95k10ynj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp95k10ynj.java:12: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp95k10ynj.java:12: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp95k10ynj.java:14: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmp95k10ynj.java:14: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmp95k10ynj.java:20: error: cannot find symbol\n                pq.add(new Pair<>(n1, n2));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp95k10ynj.java:24: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmpf89j53ze.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> ans = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return ans;\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.size() == 0) break;\n            ans.add(pq.poll());\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmpy0ao1l7d.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmp_5oj36ww.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmpdgwqjzok.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.size() == 0) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmpd0v6ciao.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return result;\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) break;\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmp1yeds97n.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1 + num2, num1));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue1());\n            list.add(pair.getValue0() - pair.getValue1());\n            result.add(list);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmpr2_r_tbi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpr2_r_tbi.java:12: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpr2_r_tbi.java:12: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpr2_r_tbi.java:14: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpr2_r_tbi.java:14: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpr2_r_tbi.java:20: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(num1 + num2, num1));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpr2_r_tbi.java:24: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (long i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get((int) i) + nums2.get(0), i));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long i = p.getValue1();\n            long j = nums1.get((int) i) + nums2.get(0);\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get(0));\n            result.add(pair);\n            if (nums2.size() > 1) {\n                pq.add(new Pair<Long, Long>(nums1.get((int) i) + nums2.get(1), i));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmpit711r33.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpit711r33.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpit711r33.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpit711r33.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpit711r33.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpit711r33.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpit711r33.java:21: error: cannot find symbol\n            pq.add(new Pair<Long, Long>(nums1.get((int) i) + nums2.get(0), i));\n                       ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpit711r33.java:24: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpit711r33.java:32: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get((int) i) + nums2.get(1), i));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n9 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) 0));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get((int) p.getValue1()));\n            pair.add(nums2.get((int) p.getValue0() - nums1.get((int) p.getValue1()).intValue()));\n            result.add(pair);\n            if (p.getValue0() < nums1.size() - 1) {\n                pq.add(new Pair<Long, Long>(nums1.get((int) p.getValue1() + 1) + nums2.get((int) p.getValue0()), p.getValue1() + 1));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmpwzeqxy5c.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpwzeqxy5c.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpwzeqxy5c.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpwzeqxy5c.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpwzeqxy5c.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpwzeqxy5c.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpwzeqxy5c.java:21: error: cannot find symbol\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) 0));\n                       ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpwzeqxy5c.java:24: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpwzeqxy5c.java:30: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get((int) p.getValue1() + 1) + nums2.get((int) p.getValue0()), p.getValue1() + 1));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n9 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmp13dr_1if.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp13dr_1if.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp13dr_1if.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp13dr_1if.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp13dr_1if.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmp13dr_1if.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmp13dr_1if.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp13dr_1if.java:26: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            queue.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) i));\n        }\n        while (k > 0 && !queue.isEmpty()) {\n            Pair<Long, Long> pair = queue.poll();\n            long index = pair.getValue1();\n            result.add(new ArrayList<Long>(Arrays.asList(nums1.get((int) index), nums2.get(0))));\n            if (index + 1 < nums2.size()) {\n                queue.add(new Pair<Long, Long>(nums1.get((int) index) + nums2.get((int) index + 1), index));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmpibug0139.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpibug0139.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpibug0139.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpibug0139.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                   ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpibug0139.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpibug0139.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpibug0139.java:21: error: cannot find symbol\n            queue.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) i));\n                          ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpibug0139.java:24: error: cannot find symbol\n            Pair<Long, Long> pair = queue.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpibug0139.java:28: error: cannot find symbol\n                queue.add(new Pair<Long, Long>(nums1.get((int) index) + nums2.get((int) index + 1), index));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n9 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (long i = 0; i < nums1.size(); i++) {\n            for (long j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get((int)i));\n                pair.add(nums2.get((int)j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmprpb5pqmf.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                queue.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < k && !queue.isEmpty(); i++) {\n            Pair<Long, Long> pair = queue.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(nums1.get((int) (pair.getValue1() / nums2.size())));\n            temp.add(nums2.get((int) (pair.getValue1() % nums2.size())));\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmpsyddcg56.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpsyddcg56.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpsyddcg56.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                   ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpsyddcg56.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpsyddcg56.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpsyddcg56.java:23: error: cannot find symbol\n                queue.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpsyddcg56.java:27: error: cannot find symbol\n            Pair<Long, Long> pair = queue.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (long i = 0; i < nums1.size(); i++) {\n            for (long j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get((int) i), nums2.get((int) j)));\n            }\n        }\n        while (k > 0 && pq.size() > 0) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmpfqiu0ukv.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpfqiu0ukv.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpfqiu0ukv.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpfqiu0ukv.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpfqiu0ukv.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpfqiu0ukv.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpfqiu0ukv.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get((int) i), nums2.get((int) j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpfqiu0ukv.java:26: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> pairList = new ArrayList<Long>();\n            pairList.add(pair.getValue0());\n            pairList.add(pair.getValue1());\n            result.add(pairList);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmpy_k5v3yl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpy_k5v3yl.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpy_k5v3yl.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpy_k5v3yl.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpy_k5v3yl.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpy_k5v3yl.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpy_k5v3yl.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpy_k5v3yl.java:26: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return result;\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < Math.min(k, nums1.size()); i++) {\n            pq.add(new ArrayList<>(Arrays.asList(nums1.get(i), nums2.get(0), 0L)));\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            ArrayList<Long> cur = pq.poll();\n            result.add(new ArrayList<>(Arrays.asList(cur.get(0), cur.get(1))));\n            if (cur.get(2) == nums2.size() - 1) continue;\n            pq.add(new ArrayList<>(Arrays.asList(cur.get(0), nums2.get((int)(cur.get(2) + 1)), cur.get(2) + 1)));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmp0izuzwq8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmpnwlzzymz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpnwlzzymz.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpnwlzzymz.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpnwlzzymz.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpnwlzzymz.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpnwlzzymz.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpnwlzzymz.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpnwlzzymz.java:26: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long i = p.getValue1() / nums2.size();\n            long j = p.getValue1() % nums2.size();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get((int) j));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmpo5lh5w_e.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpo5lh5w_e.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpo5lh5w_e.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpo5lh5w_e.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpo5lh5w_e.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpo5lh5w_e.java:23: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpo5lh5w_e.java:27: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0)\n            return result;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue1() - a.getValue1()));\n        for (long i = 0; i < nums1.size(); i++) {\n            for (long j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get((int)i) + nums2.get((int)j), i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            long idx = pair.getValue1();\n            long i = idx / nums2.size();\n            long j = idx % nums2.size();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(nums1.get((int)i));\n            list.add(nums2.get((int)j));\n            result.add(list);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmphs5itx54.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmphs5itx54.java:14: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue1() - a.getValue1()));\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphs5itx54.java:17: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get((int)i) + nums2.get((int)j), i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphs5itx54.java:21: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), nums1.get(i)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue1());\n            pair.add(p.getValue0() - p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmp7ra8qgii.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp7ra8qgii.java:12: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp7ra8qgii.java:12: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp7ra8qgii.java:14: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmp7ra8qgii.java:14: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmp7ra8qgii.java:20: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), nums1.get(i)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp7ra8qgii.java:24: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return res;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int)(p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            res.add(pair);\n            k--;\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmpbrjm_ol8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpbrjm_ol8.java:13: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbrjm_ol8.java:13: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbrjm_ol8.java:15: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpbrjm_ol8.java:15: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpbrjm_ol8.java:21: error: cannot find symbol\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbrjm_ol8.java:25: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<>((a, b) -> (int) (a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2()));\n        for (long i : nums1) {\n            for (long j : nums2) {\n                queue.add(new Pair<>(i, j));\n            }\n        }\n        while (k-- > 0 && !queue.isEmpty()) {\n            Pair<Long, Long> p = queue.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmp1te8m1fz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp1te8m1fz.java:12: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<>((a, b) -> (int) (a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2()));\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1te8m1fz.java:15: error: cannot find symbol\n                queue.add(new Pair<>(i, j));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1te8m1fz.java:19: error: cannot find symbol\n            Pair<Long, Long> p = queue.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0) + a.get(1) < b.get(0) + b.get(1) ? -1 : 1;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmp53d6yujc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                long sum1 = a.get(0) + a.get(1);\n                long sum2 = b.get(0) + b.get(1);\n                if (sum1 < sum2) {\n                    return -1;\n                } else if (sum1 > sum2) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmpgmaxies6.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return res;\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) break;\n            res.add(pq.poll());\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmpnq668uha.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            if (a.getValue0() + a.getValue1() > b.getValue0() + b.getValue1()) {\n                return 1;\n            } else if (a.getValue0() + a.getValue1() < b.getValue0() + b.getValue1()) {\n                return -1;\n            } else {\n                return 0;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmplfpdnnyv.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmplfpdnnyv.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmplfpdnnyv.java:26: error: cannot find symbol\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmplfpdnnyv.java:30: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) (p.getValue1() / nums2.size())));\n            pair.add(nums2.get((int) (p.getValue1() % nums2.size())));\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmpzlr53mmz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpzlr53mmz.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpzlr53mmz.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpzlr53mmz.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpzlr53mmz.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpzlr53mmz.java:23: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpzlr53mmz.java:27: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue1() + a.getValue0() - b.getValue1() - b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                pq.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmpfmt2fxjy.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpfmt2fxjy.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpfmt2fxjy.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpfmt2fxjy.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpfmt2fxjy.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpfmt2fxjy.java:22: error: cannot find symbol\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n                       ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpfmt2fxjy.java:25: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpfmt2fxjy.java:32: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0).compareTo(b.get(0));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i) + nums2.get(j));\n                pair.add((long) i);\n                pair.add((long) j);\n                pq.offer(pair);\n            }\n        }\n        while (k-- > 0) {\n            ArrayList<Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(nums1.get(pair.get(1).intValue()));\n            temp.add(nums2.get(pair.get(2).intValue()));\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmpnmgykph5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmp_5oj36ww.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmp42alat38.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (Long i : nums1) {\n            for (Long j : nums2) {\n                pq.add(new Pair<Long, Long>(i, j));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmptg2cxc25.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmptg2cxc25.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptg2cxc25.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptg2cxc25.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptg2cxc25.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmptg2cxc25.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmptg2cxc25.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(i, j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptg2cxc25.java:26: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmp8y0im626.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            result.add(new ArrayList<Long>(Arrays.asList(nums1.get((int) (p.getValue1() / nums2.size())), nums2.get((int) (p.getValue1() % nums2.size())))));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122976,
      "stdout": "",
      "stderr": "/tmp/tmpy1gbu4zy.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpy1gbu4zy.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpy1gbu4zy.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpy1gbu4zy.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpy1gbu4zy.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpy1gbu4zy.java:23: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpy1gbu4zy.java:30: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return res;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2()));\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            res.add(new ArrayList<Long>(Arrays.asList(p.getValue0(), p.getValue1())));\n            if (p.getValue1() < nums2.get(nums2.size() - 1)) {\n                int index = nums2.indexOf(p.getValue1());\n                pq.add(new Pair<Long, Long>(p.getValue0(), nums2.get(index + 1)));\n            }\n            k--;\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmp3wpkd9cn.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp3wpkd9cn.java:13: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2()));\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp3wpkd9cn.java:15: error: cannot find symbol\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n                       ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp3wpkd9cn.java:18: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp3wpkd9cn.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(p.getValue0(), nums2.get(index + 1)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n5 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmpsg1xziub.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpsg1xziub.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpsg1xziub.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpsg1xziub.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpsg1xziub.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpsg1xziub.java:23: error: cannot find symbol\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpsg1xziub.java:30: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                if (pq.size() < k) {\n                    pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                } else {\n                    Pair<Long, Long> pair = pq.peek();\n                    if (pair.getValue0() + pair.getValue1() > nums1.get(i) + nums2.get(j)) {\n                        pq.poll();\n                        pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                    }\n                }\n            }\n        }\n        while (pq.size() > 0) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmpketvymc9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpketvymc9.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpketvymc9.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpketvymc9.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpketvymc9.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpketvymc9.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpketvymc9.java:23: error: cannot find symbol\n                    pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpketvymc9.java:25: error: cannot find symbol\n                    Pair<Long, Long> pair = pq.peek();\n                    ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpketvymc9.java:28: error: cannot find symbol\n                        pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                                   ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpketvymc9.java:34: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symb",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0) + a.get(1) < b.get(0) + b.get(1) ? -1 : 1;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmpu0ga4tad.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (Long num : nums1) {\n            pq.add(new Pair<Long, Long>(num, nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                pq.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmpp9ftocvv.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpp9ftocvv.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpp9ftocvv.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpp9ftocvv.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpp9ftocvv.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpp9ftocvv.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpp9ftocvv.java:21: error: cannot find symbol\n            pq.add(new Pair<Long, Long>(num, nums2.get(0)));\n                       ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpp9ftocvv.java:24: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpp9ftocvv.java:30: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n9 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>((a, b) -> {\n            if (a.get(0) + a.get(1) > b.get(0) + b.get(1)) {\n                return 1;\n            } else if (a.get(0) + a.get(1) < b.get(0) + b.get(1)) {\n                return -1;\n            } else {\n                return 0;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmpnnxyqrd1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue1() + p1.getValue0() - p2.getValue1() - p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            queue.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !queue.isEmpty()) {\n            Pair<Long, Long> pair = queue.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                queue.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmpdt2g3tuj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpdt2g3tuj.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpdt2g3tuj.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpdt2g3tuj.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                   ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpdt2g3tuj.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpdt2g3tuj.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpdt2g3tuj.java:21: error: cannot find symbol\n            queue.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n                          ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpdt2g3tuj.java:24: error: cannot find symbol\n            Pair<Long, Long> pair = queue.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpdt2g3tuj.java:31: error: cannot find symbol\n                queue.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n9 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmpsw1tuymq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpsw1tuymq.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpsw1tuymq.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpsw1tuymq.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpsw1tuymq.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpsw1tuymq.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpsw1tuymq.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpsw1tuymq.java:26: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> o1, ArrayList<Long> o2) {\n                return o1.get(0).compareTo(o2.get(0));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i) + nums2.get(j));\n                pair.add((long) i);\n                pair.add((long) j);\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            ArrayList<Long> pair = pq.poll();\n            ArrayList<Long> newPair = new ArrayList<>();\n            newPair.add(nums1.get(pair.get(1).intValue()));\n            newPair.add(nums2.get(pair.get(2).intValue()));\n            result.add(newPair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmp5ddypqdb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "/tmp/tmpsz1_4m43.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmp42alat38.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpr3ku4yb5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpr3ku4yb5.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpr3ku4yb5.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpr3ku4yb5.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpr3ku4yb5.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpr3ku4yb5.java:23: error: cannot find symbol\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpr3ku4yb5.java:30: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) + nums2.get(j), i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long index = p.getValue1();\n            long i = index / nums2.size();\n            long j = index % nums2.size();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get((int) j));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmppie9_7mk.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppie9_7mk.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppie9_7mk.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppie9_7mk.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmppie9_7mk.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmppie9_7mk.java:23: error: cannot find symbol\n                pq.add(Pair.with(nums1.get(i) + nums2.get(j), i * nums2.size() + j));\n                       ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppie9_7mk.java:27: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int)(p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpj9vceipu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpj9vceipu.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpj9vceipu.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpj9vceipu.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpj9vceipu.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpj9vceipu.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpj9vceipu.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpj9vceipu.java:29: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) i));\n        }\n        while (!pq.isEmpty() && k > 0) {\n            Pair<Long, Long> pair = pq.poll();\n            long i = pair.getValue1();\n            long j = nums2.size() - 1;\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(nums1.get((int) i));\n            list.add(nums2.get((int) j));\n            result.add(list);\n            k--;\n            if (j > 0) {\n                pq.add(new Pair<Long, Long>(nums1.get((int) i) + nums2.get((int) j - 1), i));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpinjfzow7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpinjfzow7.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpinjfzow7.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpinjfzow7.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpinjfzow7.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpinjfzow7.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpinjfzow7.java:21: error: cannot find symbol\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) i));\n                       ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpinjfzow7.java:24: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpinjfzow7.java:33: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get((int) i) + nums2.get((int) j - 1), i));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n9 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmp2u9sz7js.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue1().compareTo(o2.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 + num2, num1 * num2));\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue1());\n            temp.add(pair.getValue2());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmp8dvfvk73.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp8dvfvk73.java:12: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp8dvfvk73.java:12: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp8dvfvk73.java:14: error: cannot find symbol\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                               ^\n  symbol: class Pair\n/tmp/tmp8dvfvk73.java:14: error: cannot find symbol\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmp8dvfvk73.java:20: error: cannot find symbol\n                pq.add(new Pair<>(num1 + num2, num1 * num2));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp8dvfvk73.java:24: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                long sum1 = a.get(0) + a.get(1);\n                long sum2 = b.get(0) + b.get(1);\n                if (sum1 < sum2) {\n                    return -1;\n                } else if (sum1 > sum2) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpyrx18hsu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmp2u9sz7js.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpi0qvot7s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0) + a.get(1) - b.get(0) - b.get(1) > 0 ? 1 : -1;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpjgcfdrn7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 + num2, num1));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue1());\n            pair.add(p.getValue2());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpoxgxwmha.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpoxgxwmha.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpoxgxwmha.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpoxgxwmha.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpoxgxwmha.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpoxgxwmha.java:23: error: cannot find symbol\n                pq.add(new Pair<>(num1 + num2, num1));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpoxgxwmha.java:30: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> pairList = new ArrayList<Long>();\n            pairList.add(pair.getValue0());\n            pairList.add(pair.getValue1());\n            result.add(pairList);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmphff58vy3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmphff58vy3.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphff58vy3.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphff58vy3.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphff58vy3.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmphff58vy3.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmphff58vy3.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphff58vy3.java:29: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int)(p1.getValue1() + p1.getValue0() - p2.getValue1() - p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            if (pair.getValue1() != nums2.get(nums2.size() - 1)) {\n                pq.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmp39657ihr.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp39657ihr.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp39657ihr.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp39657ihr.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp39657ihr.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmp39657ihr.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmp39657ihr.java:22: error: cannot find symbol\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n                       ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp39657ihr.java:25: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp39657ihr.java:31: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n9 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmp0kgq2stk.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp0kgq2stk.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0kgq2stk.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0kgq2stk.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmp0kgq2stk.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmp0kgq2stk.java:23: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0kgq2stk.java:27: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmp1twtikwp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp1twtikwp.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1twtikwp.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1twtikwp.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmp1twtikwp.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmp1twtikwp.java:23: error: cannot find symbol\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1twtikwp.java:27: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        HashSet<Long> visited = new HashSet<Long>();\n        for (int i = 0; i < k; i++) {\n            Pair<Long, Long> curr = pq.poll();\n            if (curr == null) {\n                break;\n            }\n            if (visited.contains(curr.getValue1())) {\n                i--;\n                continue;\n            }\n            visited.add(curr.getValue1());\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(nums1.get((int) (curr.getValue1() / nums2.size())));\n            temp.add(nums2.get((int) (curr.getValue1() % nums2.size())));\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpj6nujq67.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpj6nujq67.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpj6nujq67.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpj6nujq67.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpj6nujq67.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpj6nujq67.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpj6nujq67.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpj6nujq67.java:27: error: cannot find symbol\n            Pair<Long, Long> curr = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue1() + a.getValue0() - (b.getValue1() + b.getValue0()));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            queue.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        for (int i = 0; i < k && !queue.isEmpty(); i++) {\n            Pair<Long, Long> pair = queue.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                queue.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpd7qm8zmv.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpd7qm8zmv.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpd7qm8zmv.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpd7qm8zmv.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                   ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpd7qm8zmv.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpd7qm8zmv.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpd7qm8zmv.java:21: error: cannot find symbol\n            queue.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n                          ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpd7qm8zmv.java:24: error: cannot find symbol\n            Pair<Long, Long> pair = queue.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpd7qm8zmv.java:30: error: cannot find symbol\n                queue.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n9 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return res;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.offer(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            res.add(list);\n            k--;\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmp8f_qgxho.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp8f_qgxho.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp8f_qgxho.java:20: error: cannot find symbol\n                pq.offer(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp8f_qgxho.java:24: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpgg0qzm4m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> queue = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(num1);\n                pair.add(num2);\n                queue.add(pair);\n            }\n        }\n        while (k > 0 && queue.size() > 0) {\n            result.add(queue.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpht_4vcwz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0) + a.get(1) < b.get(0) + b.get(1) ? -1 : 1;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpjo6kiln2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long index = p.getValue1();\n            long i = index / nums2.size();\n            long j = index % nums2.size();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get((int) j));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmp4kpyrhg_.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp4kpyrhg_.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp4kpyrhg_.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp4kpyrhg_.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmp4kpyrhg_.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmp4kpyrhg_.java:23: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp4kpyrhg_.java:27: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmptdfwo4zc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmptdfwo4zc.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptdfwo4zc.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptdfwo4zc.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptdfwo4zc.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmptdfwo4zc.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmptdfwo4zc.java:23: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptdfwo4zc.java:27: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long)i));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            Pair<Long, Long> p = pq.poll();\n            if (p == null) {\n                break;\n            }\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get(p.getValue1().intValue()));\n            pair.add(nums2.get(i));\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmptjy1vz__.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmptjy1vz__.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptjy1vz__.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptjy1vz__.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptjy1vz__.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmptjy1vz__.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmptjy1vz__.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long)i));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptjy1vz__.java:26: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(\n            (a, b) -> (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1())\n        );\n        for (int i = 0; i < nums1.size(); i++) {\n            queue.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !queue.isEmpty()) {\n            Pair<Long, Long> pair = queue.poll();\n            result.add(new ArrayList<Long>(Arrays.asList(pair.getValue0(), pair.getValue1())));\n            if (pair.getValue1() != nums2.get(nums2.size() - 1)) {\n                queue.add(new Pair<Long, Long>(pair.getValue0(), nums2.get(nums2.indexOf(pair.getValue1()) + 1)));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpjf3o5xwh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpjf3o5xwh.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpjf3o5xwh.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(\n                                                                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpjf3o5xwh.java:19: error: cannot find symbol\n            queue.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n                          ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpjf3o5xwh.java:22: error: cannot find symbol\n            Pair<Long, Long> pair = queue.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpjf3o5xwh.java:25: error: cannot find symbol\n                queue.add(new Pair<Long, Long>(pair.getValue0(), nums2.get(nums2.indexOf(pair.getValue1()) + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> queue = new PriorityQueue<ArrayList<Long>>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<Long>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                queue.add(pair);\n            }\n        }\n        while (k > 0 && !queue.isEmpty()) {\n            result.add(queue.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "/tmp/tmpcjm1_db1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.size() == 0) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmpginpupkv.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpginpupkv.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpginpupkv.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpginpupkv.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpginpupkv.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpginpupkv.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpginpupkv.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpginpupkv.java:29: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0)\n            return result;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "/tmp/tmpilg07lvw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpilg07lvw.java:14: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpilg07lvw.java:14: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpilg07lvw.java:14: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpilg07lvw.java:15: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpilg07lvw.java:15: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpilg07lvw.java:21: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpilg07lvw.java:25: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "/tmp/tmpg_b0p5xg.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpg_b0p5xg.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpg_b0p5xg.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpg_b0p5xg.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpg_b0p5xg.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpg_b0p5xg.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpg_b0p5xg.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpg_b0p5xg.java:29: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> o1, ArrayList<Long> o2) {\n                return o1.get(0).compareTo(o2.get(0));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i) + nums2.get(j));\n                temp.add((long) i);\n                temp.add((long) j);\n                pq.add(temp);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            ArrayList<Long> temp = pq.poll();\n            ArrayList<Long> temp2 = new ArrayList<>();\n            temp2.add(nums1.get(temp.get(1).intValue()));\n            temp2.add(nums2.get(temp.get(2).intValue()));\n            result.add(temp2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmpzgq0u1tl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return res;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (long i : nums1) {\n            for (long j : nums2) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(i);\n                pair.add(j);\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            res.add(pq.poll());\n            k--;\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmp6pjp0xsg.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpgg0qzm4m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmp42alat38.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmpaq2xi9z4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpaq2xi9z4.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpaq2xi9z4.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpaq2xi9z4.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpaq2xi9z4.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpaq2xi9z4.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpaq2xi9z4.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpaq2xi9z4.java:26: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get((int) (p.getValue1() / nums2.size())));\n            pair.add(nums2.get((int) (p.getValue1() % nums2.size())));\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmp96hg8czf.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp96hg8czf.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp96hg8czf.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp96hg8czf.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp96hg8czf.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmp96hg8czf.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmp96hg8czf.java:23: error: cannot find symbol\n                pq.add(Pair.with(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                       ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp96hg8czf.java:30: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return result;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue1().compareTo(o2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) break;\n            Pair<Long, Long> pair = pq.poll();\n            long index = pair.getValue1();\n            result.add(new ArrayList<>(Arrays.asList(nums1.get((int) (index / nums2.size())), nums2.get((int) (index % nums2.size())))));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmp549vb4aj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp549vb4aj.java:13: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp549vb4aj.java:13: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp549vb4aj.java:15: error: cannot find symbol\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                               ^\n  symbol: class Pair\n/tmp/tmp549vb4aj.java:15: error: cannot find symbol\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmp549vb4aj.java:21: error: cannot find symbol\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp549vb4aj.java:26: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (long i = 0; i < nums1.size(); i++) {\n            for (long j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get((int) i) + nums2.get((int) j), i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long i = p.getValue1() / nums2.size();\n            long j = p.getValue1() % nums2.size();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get((int) j));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "/tmp/tmpxv_iaxpz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxv_iaxpz.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxv_iaxpz.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxv_iaxpz.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxv_iaxpz.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpxv_iaxpz.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpxv_iaxpz.java:23: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get((int) i) + nums2.get((int) j), i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxv_iaxpz.java:27: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<ArrayList<Long>> queue = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> o1, ArrayList<Long> o2) {\n                return (int)(o1.get(0) + o1.get(1) - o2.get(0) - o2.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                queue.add(pair);\n            }\n        }\n        while (k > 0 && !queue.isEmpty()) {\n            result.add(queue.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "/tmp/tmpxlrwbz3o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Tuple> pq = new PriorityQueue<>((a, b) -> {\n            if (a.sum > b.sum) {\n                return 1;\n            } else if (a.sum < b.sum) {\n                return -1;\n            } else {\n                return 0;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Tuple(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Tuple t = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(t.a);\n            pair.add(t.b);\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmpz4g20hk2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpz4g20hk2.java:15: error: cannot find symbol\n        PriorityQueue<Tuple> pq = new PriorityQueue<>((a, b) -> {\n                      ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmpz4g20hk2.java:26: error: cannot find symbol\n                pq.add(new Tuple(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmpz4g20hk2.java:30: error: cannot find symbol\n            Tuple t = pq.poll();\n            ^\n  symbol:   class Tuple\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return res;\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) break;\n            res.add(pq.poll());\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122981,
      "stdout": "",
      "stderr": "/tmp/tmp2oig511w.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpgg0qzm4m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0) + a.get(1) < b.get(0) + b.get(1) ? -1 : 1;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && pq.size() > 0) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmphpqvo9tn.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return result;\n        PriorityQueue<Tuple> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() + b.getValue1() - a.getValue0() - a.getValue1()));\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Tuple(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Tuple t = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(t.getValue0());\n            pair.add(t.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmpic1spbcs.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpic1spbcs.java:13: error: cannot find symbol\n        PriorityQueue<Tuple> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue0() + b.getValue1() - a.getValue0() - a.getValue1()));\n                      ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmpic1spbcs.java:16: error: cannot find symbol\n                pq.add(new Tuple(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmpic1spbcs.java:20: error: cannot find symbol\n            Tuple t = pq.poll();\n            ^\n  symbol:   class Tuple\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> o1, ArrayList<Long> o2) {\n                return (int) (o1.get(0) + o1.get(1) - o2.get(0) - o2.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmpj4xox404.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return Long.compare(p1.getValue0() + p1.getValue1(), p2.getValue0() + p2.getValue1());\n            }\n        });\n        for (Long n1 : nums1) {\n            for (Long n2 : nums2) {\n                pq.add(new Pair<>(n1, n2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmparpsyka8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmparpsyka8.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmparpsyka8.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmparpsyka8.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmparpsyka8.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmparpsyka8.java:23: error: cannot find symbol\n                pq.add(new Pair<>(n1, n2));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmparpsyka8.java:27: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmpt4c_d3nc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> heap = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                heap.add(Pair.with(nums1.get(i) + nums2.get(j), i + j));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            Pair<Long, Long> pair = heap.poll();\n            if (pair == null) {\n                break;\n            }\n            result.add(new ArrayList<>(Arrays.asList(pair.getValue0(), pair.getValue1())));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmpvtz_36s3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpvtz_36s3.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> heap = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpvtz_36s3.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> heap = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpvtz_36s3.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpvtz_36s3.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpvtz_36s3.java:23: error: cannot find symbol\n                heap.add(Pair.with(nums1.get(i) + nums2.get(j), i + j));\n                         ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpvtz_36s3.java:27: error: cannot find symbol\n            Pair<Long, Long> pair = heap.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return Long.compare(p1.getValue0() + p1.getValue1(), p2.getValue0() + p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmp08wqv15_.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp08wqv15_.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp08wqv15_.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp08wqv15_.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp08wqv15_.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmp08wqv15_.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmp08wqv15_.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp08wqv15_.java:29: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<ArrayList<Long>>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (long i = 0; i < nums1.size(); i++) {\n            for (long j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<Long>();\n                temp.add(nums1.get((int) i));\n                temp.add(nums2.get((int) j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmpca6ucvkg.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmp_vj96zc5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - (b.getValue0() + b.getValue1()));\n            }\n        });\n        for (long i = 0; i < nums1.size(); i++) {\n            for (long j = 0; j < nums2.size(); j++) {\n                Pair<Long, Long> p = new Pair<Long, Long>(nums1.get((int) i), nums2.get((int) j));\n                pq.add(p);\n            }\n        }\n        for (long i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmp0orrtkei.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp0orrtkei.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0orrtkei.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0orrtkei.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0orrtkei.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmp0orrtkei.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmp0orrtkei.java:23: error: cannot find symbol\n                Pair<Long, Long> p = new Pair<Long, Long>(nums1.get((int) i), nums2.get((int) j));\n                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0orrtkei.java:23: error: cannot find symbol\n                Pair<Long, Long> p = new Pair<Long, Long>(nums1.get((int) i), nums2.get((int) j));\n                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0orrtkei.java:31: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n9 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>((a, b) -> {\n            if (a.get(0) + a.get(1) > b.get(0) + b.get(1)) {\n                return 1;\n            } else if (a.get(0) + a.get(1) < b.get(0) + b.get(1)) {\n                return -1;\n            } else {\n                return 0;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmpnnxyqrd1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0)\n            return result;\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> o1, ArrayList<Long> o2) {\n                return o1.get(0).compareTo(o2.get(0));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i) + nums2.get(j));\n                temp.add((long) i);\n                temp.add((long) j);\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            ArrayList<Long> temp = pq.poll();\n            ArrayList<Long> temp2 = new ArrayList<>();\n            temp2.add(nums1.get(temp.get(1).intValue()));\n            temp2.add(nums2.get(temp.get(2).intValue()));\n            result.add(temp2);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmpws23xpd0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0) + a.get(1) < b.get(0) + b.get(1) ? -1 : 1;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmpu0ga4tad.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "/tmp/tmp_5oj36ww.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Tuple> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue1() * b.getValue2() - a.getValue1() * a.getValue2()));\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Tuple(nums1.get(i), nums2.get(j)));\n                if (pq.size() > k) {\n                    pq.poll();\n                }\n            }\n        }\n        while (!pq.isEmpty()) {\n            Tuple t = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(t.getValue0());\n            pair.add(t.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "/tmp/tmpxutt_prz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxutt_prz.java:15: error: cannot find symbol\n        PriorityQueue<Tuple> pq = new PriorityQueue<>((a, b) -> (int)(b.getValue1() * b.getValue2() - a.getValue1() * a.getValue2()));\n                      ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmpxutt_prz.java:18: error: cannot find symbol\n                pq.add(new Tuple(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Tuple\n  location: class Problem\n/tmp/tmpxutt_prz.java:25: error: cannot find symbol\n            Tuple t = pq.poll();\n            ^\n  symbol:   class Tuple\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "/tmp/tmpmwpcoo7q.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpmwpcoo7q.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpmwpcoo7q.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpmwpcoo7q.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpmwpcoo7q.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpmwpcoo7q.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpmwpcoo7q.java:26: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0) + a.get(1) < b.get(0) + b.get(1) ? -1 : 1;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "/tmp/tmp619tb0w0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            queue.add(Pair.with(nums1.get(i) + nums2.get(0), i));\n        }\n        while (k > 0 && !queue.isEmpty()) {\n            Pair<Long, Long> pair = queue.poll();\n            long index = pair.getValue1();\n            long sum = pair.getValue0();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(nums1.get(index.intValue()));\n            temp.add(nums2.get(0));\n            result.add(temp);\n            if (index + 1 < nums2.size()) {\n                queue.add(Pair.with(sum - nums2.get(0) + nums2.get(index.intValue() + 1), index));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "/tmp/tmpa7bjvand.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpa7bjvand.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpa7bjvand.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                   ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpa7bjvand.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpa7bjvand.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpa7bjvand.java:22: error: cannot find symbol\n            queue.add(Pair.with(nums1.get(i) + nums2.get(0), i));\n                      ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpa7bjvand.java:25: error: cannot find symbol\n            Pair<Long, Long> pair = queue.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpa7bjvand.java:29: error: long cannot be dereferenced\n            temp.add(nums1.get(index.intValue()));\n                                    ^\n/tmp/tmpa7bjvand.java:33: error: long cannot be dereferenced\n                queue.add(Pair.with(sum - nums2.get(0) + nums2.get(index.intValue() + 1), index));\n                                                                        ^\n/tmp/tmpa7bjvand.java:33: error: cannot find symbol\n                queue.add(Pair.with(sum - nums2.get(0) + nums2.get(index.intValue() + 1), index));\n                          ^\n  symbol:   variable Pair\n  location: class Problem\n10 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "/tmp/tmpulsykidu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpulsykidu.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpulsykidu.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpulsykidu.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpulsykidu.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpulsykidu.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpulsykidu.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpulsykidu.java:29: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Long n1 : nums1) {\n            for (Long n2 : nums2) {\n                pq.add(new Pair<Long, Long>(n1 + n2, n1));\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue1());\n            pair.add(p.getValue0() - p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "/tmp/tmpup9qt5zf.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpup9qt5zf.java:12: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpup9qt5zf.java:12: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpup9qt5zf.java:14: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpup9qt5zf.java:14: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpup9qt5zf.java:20: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(n1 + n2, n1));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpup9qt5zf.java:24: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                result.add(pair);\n            }\n        }\n        Collections.sort(result, new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0) + a.get(1) < b.get(0) + b.get(1) ? -1 : 1;\n            }\n        });\n        return new ArrayList<ArrayList<Long>>(result.subList(0, (int)k));\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "/tmp/tmpukdo1373.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<>(nums1.get(i), nums2.get(0)));\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(new ArrayList<>(Arrays.asList(pair.getValue0(), pair.getValue1())));\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                int index = nums2.indexOf(pair.getValue1());\n                pq.add(new Pair<>(pair.getValue0(), nums2.get(index + 1)));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "/tmp/tmpapxy7ak4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpapxy7ak4.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpapxy7ak4.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpapxy7ak4.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpapxy7ak4.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpapxy7ak4.java:22: error: cannot find symbol\n            pq.add(new Pair<>(nums1.get(i), nums2.get(0)));\n                       ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpapxy7ak4.java:25: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpapxy7ak4.java:29: error: cannot find symbol\n                pq.add(new Pair<>(pair.getValue0(), nums2.get(index + 1)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122982,
      "stdout": "",
      "stderr": "/tmp/tmp_vj96zc5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(p.getValue0());\n            temp.add(p.getValue1());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "/tmp/tmpb6ozslq1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpb6ozslq1.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb6ozslq1.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb6ozslq1.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpb6ozslq1.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpb6ozslq1.java:23: error: cannot find symbol\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb6ozslq1.java:27: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return res;\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0) + a.get(1) > b.get(0) + b.get(1) ? 1 : -1;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            res.add(pq.poll());\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "/tmp/tmp9nbp998q.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int)(p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpj9vceipu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpj9vceipu.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpj9vceipu.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpj9vceipu.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpj9vceipu.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpj9vceipu.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpj9vceipu.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpj9vceipu.java:29: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpgg0qzm4m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "/tmp/tmpplj0f7ib.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpplj0f7ib.java:12: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpplj0f7ib.java:17: error: cannot find symbol\n                pq.add(new Pair<>(num1, num2));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpplj0f7ib.java:21: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return result;\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "/tmp/tmpam9e0fzk.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) (p.getValue2() / nums2.size())));\n            pair.add(nums2.get((int) (p.getValue2() % nums2.size())));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "/tmp/tmplocczh07.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmplocczh07.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmplocczh07.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmplocczh07.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmplocczh07.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmplocczh07.java:23: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmplocczh07.java:27: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> heap = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                heap.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (heap.isEmpty()) {\n                break;\n            }\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "/tmp/tmpbmkarvry.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            queue.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) i));\n        }\n        for (int i = 0; i < k && !queue.isEmpty(); i++) {\n            Pair<Long, Long> pair = queue.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(nums1.get(pair.getValue1().intValue()));\n            list.add(nums2.get(0));\n            result.add(list);\n            if (pair.getValue1() < nums2.size() - 1) {\n                queue.add(new Pair<Long, Long>(nums1.get(pair.getValue1().intValue()) + nums2.get(pair.getValue1().intValue() + 1), pair.getValue1() + 1));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "/tmp/tmp2qost7ro.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2qost7ro.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2qost7ro.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2qost7ro.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                   ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2qost7ro.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmp2qost7ro.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmp2qost7ro.java:22: error: cannot find symbol\n            queue.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) i));\n                          ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2qost7ro.java:25: error: cannot find symbol\n            Pair<Long, Long> pair = queue.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2qost7ro.java:31: error: cannot find symbol\n                queue.add(new Pair<Long, Long>(nums1.get(pair.getValue1().intValue()) + nums2.get(pair.getValue1().intValue() + 1), pair.getValue1() + 1));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n9 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) (p.getValue1() / nums2.size())));\n            pair.add(nums2.get((int) (p.getValue1() % nums2.size())));\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmpzlr53mmz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpzlr53mmz.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpzlr53mmz.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpzlr53mmz.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpzlr53mmz.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpzlr53mmz.java:23: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpzlr53mmz.java:27: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        // Write your code here\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k <= 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (result.size() < k && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            int i = (int) (p.getValue1() / nums2.size());\n            int j = (int) (p.getValue1() % nums2.size());\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get(i));\n            pair.add(nums2.get(j));\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "/tmp/tmpzda5uxpw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpzda5uxpw.java:16: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpzda5uxpw.java:16: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpzda5uxpw.java:16: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpzda5uxpw.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpzda5uxpw.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpzda5uxpw.java:23: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpzda5uxpw.java:27: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122984,
      "stdout": "",
      "stderr": "/tmp/tmp38b8kwyx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> queue = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                queue.add(pair);\n            }\n        }\n        while (k > 0 && !queue.isEmpty()) {\n            result.add(queue.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "/tmp/tmpiw_qy57z.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (long i = 0; i < nums1.size(); i++) {\n            for (long j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get((int) i), nums2.get((int) j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122984,
      "stdout": "",
      "stderr": "/tmp/tmplawae4eh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmplawae4eh.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmplawae4eh.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmplawae4eh.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmplawae4eh.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmplawae4eh.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmplawae4eh.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get((int) i), nums2.get((int) j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmplawae4eh.java:26: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                queue.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (queue.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = queue.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122984,
      "stdout": "",
      "stderr": "/tmp/tmpbwkdb6a7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpbwkdb6a7.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbwkdb6a7.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbwkdb6a7.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                   ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbwkdb6a7.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpbwkdb6a7.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpbwkdb6a7.java:23: error: cannot find symbol\n                queue.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbwkdb6a7.java:30: error: cannot find symbol\n            Pair<Long, Long> pair = queue.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> ans = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return ans;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ans.add(new ArrayList<Long>(Arrays.asList(pair.getValue0(), pair.getValue1())));\n            if (pair.getValue1() != nums2.get(nums2.size() - 1)) {\n                int index = nums2.indexOf(pair.getValue1());\n                pq.add(new Pair<Long, Long>(pair.getValue0(), nums2.get(index + 1)));\n            }\n            k--;\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122984,
      "stdout": "",
      "stderr": "/tmp/tmp7ofpm1s2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp7ofpm1s2.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp7ofpm1s2.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp7ofpm1s2.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmp7ofpm1s2.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmp7ofpm1s2.java:21: error: cannot find symbol\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n                       ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp7ofpm1s2.java:24: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp7ofpm1s2.java:28: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(pair.getValue0(), nums2.get(index + 1)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122984,
      "stdout": "",
      "stderr": "/tmp/tmpxvs3m6bf.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.size() == 0) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122984,
      "stdout": "",
      "stderr": "/tmp/tmpl21e8wp2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long)i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long i = p.getValue1() / nums2.size();\n            long j = p.getValue1() % nums2.size();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int)i));\n            pair.add(nums2.get((int)j));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmpu_h3n356.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpu_h3n356.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpu_h3n356.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpu_h3n356.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpu_h3n356.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpu_h3n356.java:23: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long)i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpu_h3n356.java:27: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return res;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int)(p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (long n1 : nums1) {\n            for (long n2 : nums2) {\n                pq.add(new Pair<>(n1, n2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            res.add(pair);\n            k--;\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmp2v5p4gvx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2v5p4gvx.java:13: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2v5p4gvx.java:13: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2v5p4gvx.java:15: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmp2v5p4gvx.java:15: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmp2v5p4gvx.java:21: error: cannot find symbol\n                pq.add(new Pair<>(n1, n2));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2v5p4gvx.java:25: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> res = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return res;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            res.add(pair);\n            if (p.getValue1() < nums2.get(nums2.size() - 1)) {\n                pq.add(new Pair<Long, Long>(p.getValue0(), p.getValue1() + 1));\n            }\n            k--;\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmpotuzjihh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpotuzjihh.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpotuzjihh.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpotuzjihh.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpotuzjihh.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpotuzjihh.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpotuzjihh.java:21: error: cannot find symbol\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n                       ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpotuzjihh.java:24: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpotuzjihh.java:30: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(p.getValue0(), p.getValue1() + 1));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n9 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0).compareTo(b.get(0));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new ArrayList<>(Arrays.asList(nums1.get(i) + nums2.get(0), (long) i, (long) 0)));\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            ArrayList<Long> curr = pq.poll();\n            result.add(new ArrayList<>(Arrays.asList(nums1.get(curr.get(1).intValue()), nums2.get(curr.get(2).intValue()))));\n            if (curr.get(2) < nums2.size() - 1) {\n                pq.add(new ArrayList<>(Arrays.asList(nums1.get(curr.get(1).intValue()) + nums2.get(curr.get(2).intValue() + 1), curr.get(1), curr.get(2) + 1)));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmpfxaoufi7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (result.size() < k && !pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmpgc66o2rn.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            long sum1 = a.getValue0() + a.getValue1();\n            long sum2 = b.getValue0() + b.getValue1();\n            if (sum1 < sum2) {\n                return -1;\n            } else if (sum1 > sum2) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmpk9ypilab.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpk9ypilab.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpk9ypilab.java:28: error: cannot find symbol\n                pq.add(new Pair<>(num1, num2));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpk9ypilab.java:32: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return Long.compare(p1.getValue0() + p1.getValue1(), p2.getValue0() + p2.getValue1());\n            }\n        });\n        for (Long n1 : nums1) {\n            for (Long n2 : nums2) {\n                pq.add(new Pair<>(n1, n2));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmpu1wg1r3o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpu1wg1r3o.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpu1wg1r3o.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpu1wg1r3o.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpu1wg1r3o.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpu1wg1r3o.java:23: error: cannot find symbol\n                pq.add(new Pair<>(n1, n2));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpu1wg1r3o.java:27: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                if (pq.size() < k) {\n                    pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                } else {\n                    if (nums1.get(i) + nums2.get(j) < pq.peek().getValue0() + pq.peek().getValue1()) {\n                        pq.poll();\n                        pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                    }\n                }\n            }\n        }\n        while (!pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmpttw0_h2g.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpttw0_h2g.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpttw0_h2g.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpttw0_h2g.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpttw0_h2g.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpttw0_h2g.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpttw0_h2g.java:23: error: cannot find symbol\n                    pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpttw0_h2g.java:27: error: cannot find symbol\n                        pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                                   ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpttw0_h2g.java:33: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n9 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                if (pq.size() < k) {\n                    pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                } else {\n                    Pair<Long, Long> p = pq.peek();\n                    if (p.getValue0() + p.getValue1() > nums1.get(i) + nums2.get(j)) {\n                        pq.poll();\n                        pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                    }\n                }\n            }\n        }\n        while (!pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmpi8_fckuq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpi8_fckuq.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpi8_fckuq.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpi8_fckuq.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpi8_fckuq.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpi8_fckuq.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpi8_fckuq.java:23: error: cannot find symbol\n                    pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpi8_fckuq.java:25: error: cannot find symbol\n                    Pair<Long, Long> p = pq.peek();\n                    ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpi8_fckuq.java:28: error: cannot find symbol\n                        pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                                   ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpi8_fckuq.java:34: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmpmm0t0oef.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpmm0t0oef.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpmm0t0oef.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpmm0t0oef.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpmm0t0oef.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpmm0t0oef.java:23: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpmm0t0oef.java:30: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> l = new ArrayList<Long>();\n            l.add(p.getValue0());\n            l.add(p.getValue1());\n            result.add(l);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmpcbfw_qpz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpcbfw_qpz.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpcbfw_qpz.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpcbfw_qpz.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpcbfw_qpz.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpcbfw_qpz.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpcbfw_qpz.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpcbfw_qpz.java:26: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0).compareTo(b.get(0));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i) + nums2.get(j));\n                temp.add((long) i);\n                temp.add((long) j);\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            ArrayList<Long> temp = pq.poll();\n            ArrayList<Long> temp2 = new ArrayList<>();\n            temp2.add(nums1.get(temp.get(1).intValue()));\n            temp2.add(nums2.get(temp.get(2).intValue()));\n            result.add(temp2);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmp1n0rvhn4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmp2u9sz7js.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return Long.compare(p1.getValue0() + p1.getValue1(), p2.getValue0() + p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmpk922o8g1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpk922o8g1.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpk922o8g1.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpk922o8g1.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpk922o8g1.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpk922o8g1.java:23: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpk922o8g1.java:27: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0) + a.get(1) > b.get(0) + b.get(1) ? 1 : -1;\n            }\n        });\n        for (long i : nums1) {\n            for (long j : nums2) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(i);\n                temp.add(j);\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmpadz8mxsb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            queue.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        for (int i = 0; i < k && !queue.isEmpty(); i++) {\n            Pair<Long, Long> pair = queue.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                queue.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmpfqxrzss2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpfqxrzss2.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpfqxrzss2.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpfqxrzss2.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                   ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpfqxrzss2.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpfqxrzss2.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpfqxrzss2.java:21: error: cannot find symbol\n            queue.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n                          ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpfqxrzss2.java:24: error: cannot find symbol\n            Pair<Long, Long> pair = queue.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpfqxrzss2.java:30: error: cannot find symbol\n                queue.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n9 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> ans = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return ans;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.size() == 0) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            ans.add(pair);\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmpcl0azuus.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpcl0azuus.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpcl0azuus.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpcl0azuus.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpcl0azuus.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpcl0azuus.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpcl0azuus.java:29: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmpb0i1swei.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpb0i1swei.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb0i1swei.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb0i1swei.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb0i1swei.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpb0i1swei.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpb0i1swei.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb0i1swei.java:29: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmp5f_0qmzs.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) return result;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(p.getValue0());\n            temp.add(p.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmpunkr73u7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpunkr73u7.java:13: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpunkr73u7.java:13: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpunkr73u7.java:13: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpunkr73u7.java:15: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpunkr73u7.java:15: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpunkr73u7.java:21: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpunkr73u7.java:25: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return result;\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "/tmp/tmpam9e0fzk.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) return result;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (long i = 0; i < nums1.size(); i++) {\n            for (long j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get((int) i), nums2.get((int) j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmppurwomv7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppurwomv7.java:13: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppurwomv7.java:13: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppurwomv7.java:13: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppurwomv7.java:15: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmppurwomv7.java:15: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmppurwomv7.java:21: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get((int) i), nums2.get((int) j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppurwomv7.java:25: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0) + a.get(1) < b.get(0) + b.get(1) ? -1 : 1;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122983,
      "stdout": "",
      "stderr": "/tmp/tmp619tb0w0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmpnkbob82k.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0) + a.get(1) > b.get(0) + b.get(1) ? 1 : -1;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.size() == 0) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmpk5tqcmuo.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> ans = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return ans;\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            ans.add(pq.poll());\n            k--;\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmpqowef52b.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        HashSet<Long> set = new HashSet<Long>();\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            if (!set.contains(p.getValue1())) {\n                long i = p.getValue1() / nums2.size();\n                long j = p.getValue1() % nums2.size();\n                ArrayList<Long> pair = new ArrayList<Long>();\n                pair.add(nums1.get((int) i));\n                pair.add(nums2.get((int) j));\n                result.add(pair);\n                set.add(p.getValue1());\n                k--;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122986,
      "stdout": "",
      "stderr": "/tmp/tmptsu7q23m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmptsu7q23m.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptsu7q23m.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptsu7q23m.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptsu7q23m.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmptsu7q23m.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmptsu7q23m.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptsu7q23m.java:27: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0) + a.get(1) < b.get(0) + b.get(1) ? -1 : 1;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "/tmp/tmpu0ga4tad.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmp2u9sz7js.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122986,
      "stdout": "",
      "stderr": "/tmp/tmpyd7h4ezr.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return res;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            res.add(pair);\n            k--;\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122986,
      "stdout": "",
      "stderr": "/tmp/tmp2kjvyxod.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2kjvyxod.java:13: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2kjvyxod.java:13: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2kjvyxod.java:15: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmp2kjvyxod.java:15: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmp2kjvyxod.java:21: error: cannot find symbol\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2kjvyxod.java:25: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<Long>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                result.add(pair);\n            }\n        }\n        Collections.sort(result, new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0).compareTo(b.get(0));\n            }\n        });\n        return new ArrayList<ArrayList<Long>>(result.subList(0, (int) k));\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122986,
      "stdout": "",
      "stderr": "/tmp/tmp1cji_dy7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long i = p.getValue1() / nums2.size();\n            long j = p.getValue1() % nums2.size();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get((int) j));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmpymvr8czw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpymvr8czw.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpymvr8czw.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpymvr8czw.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpymvr8czw.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpymvr8czw.java:23: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpymvr8czw.java:27: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        HashSet<Long> visited = new HashSet<Long>();\n        while (result.size() < k && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            if (visited.contains(p.getValue1())) {\n                continue;\n            }\n            visited.add(p.getValue1());\n            long i = p.getValue1() / nums2.size();\n            long j = p.getValue1() % nums2.size();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get((int) j));\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122986,
      "stdout": "",
      "stderr": "/tmp/tmpj7m3v_tv.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpj7m3v_tv.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpj7m3v_tv.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpj7m3v_tv.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpj7m3v_tv.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpj7m3v_tv.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpj7m3v_tv.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpj7m3v_tv.java:27: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1665510148,
      "stdout": "",
      "stderr": "/tmp/tmpb1cxwen0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122986,
      "stdout": "",
      "stderr": "/tmp/tmpdghbm00o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long i = p.getValue1() / nums2.size();\n            long j = p.getValue1() % nums2.size();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get((int) j));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122986,
      "stdout": "",
      "stderr": "/tmp/tmpn767qeei.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpn767qeei.java:12: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpn767qeei.java:12: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpn767qeei.java:14: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpn767qeei.java:14: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpn767qeei.java:20: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpn767qeei.java:24: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> ans = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return ans;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> a = new ArrayList<Long>();\n            a.add(p.getValue0());\n            a.add(p.getValue1());\n            ans.add(a);\n            if (p.getValue1() < nums2.get(nums2.size() - 1)) {\n                pq.add(new Pair<Long, Long>(p.getValue0(), p.getValue1() + 1));\n            }\n            k--;\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122986,
      "stdout": "",
      "stderr": "/tmp/tmpno2sh93o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpno2sh93o.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpno2sh93o.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpno2sh93o.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpno2sh93o.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpno2sh93o.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpno2sh93o.java:21: error: cannot find symbol\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n                       ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpno2sh93o.java:24: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpno2sh93o.java:30: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(p.getValue0(), p.getValue1() + 1));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n9 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                pq.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122986,
      "stdout": "",
      "stderr": "/tmp/tmpb50wbkzs.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpb50wbkzs.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb50wbkzs.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb50wbkzs.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb50wbkzs.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmpb50wbkzs.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmpb50wbkzs.java:21: error: cannot find symbol\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n                       ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb50wbkzs.java:24: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb50wbkzs.java:30: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n9 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue1().compareTo(b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                pq.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122986,
      "stdout": "",
      "stderr": "/tmp/tmp9d4pupg7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp9d4pupg7.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9d4pupg7.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9d4pupg7.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmp9d4pupg7.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmp9d4pupg7.java:21: error: cannot find symbol\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n                       ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9d4pupg7.java:24: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9d4pupg7.java:30: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) i));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            long i = pair.getValue1();\n            long j = nums2.size() - 1;\n            ArrayList<Long> newPair = new ArrayList<Long>();\n            newPair.add(nums1.get((int) i));\n            newPair.add(nums2.get((int) j));\n            result.add(newPair);\n            if (j > 0) {\n                pq.add(new Pair<Long, Long>(nums1.get((int) i) + nums2.get((int) j - 1), i));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122986,
      "stdout": "",
      "stderr": "/tmp/tmp19ajhf47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp19ajhf47.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp19ajhf47.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp19ajhf47.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp19ajhf47.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmp19ajhf47.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmp19ajhf47.java:21: error: cannot find symbol\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) i));\n                       ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp19ajhf47.java:24: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp19ajhf47.java:32: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get((int) i) + nums2.get((int) j - 1), i));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n9 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122985,
      "stdout": "",
      "stderr": "/tmp/tmpnkbob82k.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                long sumA = a.getValue0() + a.getValue1();\n                long sumB = b.getValue0() + b.getValue1();\n                if (sumA < sumB) {\n                    return -1;\n                } else if (sumA > sumB) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1, num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122986,
      "stdout": "",
      "stderr": "/tmp/tmp12ptms1h.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp12ptms1h.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp12ptms1h.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp12ptms1h.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp12ptms1h.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                               ^\n  symbol: class Pair\n/tmp/tmp12ptms1h.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                                                   ^\n  symbol: class Pair\n/tmp/tmp12ptms1h.java:30: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(num1, num2));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp12ptms1h.java:34: error: cannot find symbol\n            Pair<Long, Long> pair = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122986,
      "stdout": "",
      "stderr": "/tmp/tmp5bj7ssuw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122986,
      "stdout": "",
      "stderr": "/tmp/tmpchaxxk95.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpchaxxk95.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpchaxxk95.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpchaxxk95.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpchaxxk95.java:16: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpchaxxk95.java:22: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpchaxxk95.java:26: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "/tmp/tmpi0qvot7s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        HashSet<Long> visited = new HashSet<>();\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            if (visited.contains(p.getValue1())) {\n                continue;\n            }\n            visited.add(p.getValue1());\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) (p.getValue1() / nums2.size())));\n            pair.add(nums2.get((int) (p.getValue1() % nums2.size())));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122986,
      "stdout": "",
      "stderr": "/tmp/tmpwl8bohpp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpwl8bohpp.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpwl8bohpp.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpwl8bohpp.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmpwl8bohpp.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmpwl8bohpp.java:23: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpwl8bohpp.java:28: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) i));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get(p.getValue1().intValue()));\n            pair.add(nums2.get(0));\n            result.add(pair);\n            if (p.getValue1() < nums2.size() - 1) {\n                pq.add(new Pair<Long, Long>(nums1.get(p.getValue1().intValue()) + nums2.get(p.getValue1().intValue() + 1), p.getValue1() + 1));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1666122986,
      "stdout": "",
      "stderr": "/tmp/tmptw3_byig.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmptw3_byig.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptw3_byig.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptw3_byig.java:15: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n                                                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptw3_byig.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                               ^\n  symbol: class Pair\n/tmp/tmptw3_byig.java:17: error: cannot find symbol\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                                                    ^\n  symbol: class Pair\n/tmp/tmptw3_byig.java:22: error: cannot find symbol\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) i));\n                       ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptw3_byig.java:25: error: cannot find symbol\n            Pair<Long, Long> p = pq.poll();\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptw3_byig.java:31: error: cannot find symbol\n                pq.add(new Pair<Long, Long>(nums1.get(p.getValue1().intValue()) + nums2.get(p.getValue1().intValue() + 1), p.getValue1() + 1));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n9 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}