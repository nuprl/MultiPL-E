{
  "name": "mbpp_627_find_First_Missing",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long findFirstMissing(ArrayList<Long> array) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(findFirstMissing((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l)))) == (4l));\n    assert(findFirstMissing((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)6l, (long)9l)))) == (3l));\n    assert(findFirstMissing((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)8l, (long)9l)))) == (0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long first = array.get(0);\n        long last = array.get(array.size() - 1);\n        long sum = 0;\n        for (long i = first; i <= last; i++) {\n            sum += i;\n        }\n        long actualSum = 0;\n        for (long i = 0; i < array.size(); i++) {\n            actualSum += array.get(i);\n        }\n        return sum - actualSum;",
    "        long first = array.get(0);\n        long last = array.get(array.size() - 1);\n        long sum = 0;\n        for (long i = first; i <= last; i++) {\n            sum += i;\n        }\n        long actualSum = 0;\n        for (long i : array) {\n            actualSum += i;\n        }\n        return sum - actualSum;",
    "        long i = 0;\n        while (i < array.size()) {\n            if (array.get((int) i) != i) {\n                return i;\n            }\n            i++;\n        }\n        return i;",
    "        long max = array.get(array.size() - 1);\n        long min = array.get(0);\n        long sum = 0;\n        for (long i = min; i <= max; i++) {\n            sum += i;\n        }\n        long actualSum = 0;\n        for (long i = 0; i < array.size(); i++) {\n            actualSum += array.get((int) i);\n        }\n        return sum - actualSum;",
    "        long first = array.get(0);\n        long last = array.get(array.size() - 1);\n        long sum = 0;\n        for (long i = first; i <= last; i++) {\n            sum += i;\n        }\n        long actualSum = array.stream().reduce(0L, (a, b) -> a + b);\n        return sum - actualSum;",
    "        long min = array.get(0);\n        long max = array.get(array.size() - 1);\n        long sum = 0;\n        for (long i = min; i <= max; i++) {\n            sum += i;\n        }\n        long actualSum = 0;\n        for (long i = 0; i < array.size(); i++) {\n            actualSum += array.get(i);\n        }\n        return sum - actualSum;",
    "        if (array.size() == 0) {\n            return 1;\n        }\n        if (array.size() == 1) {\n            if (array.get(0) == 1) {\n                return 2;\n            } else {\n                return 1;\n            }\n        }\n        long min = array.get(0);\n        long max = array.get(array.size() - 1);\n        long diff = max - min;\n        if (diff == array.size() - 1) {\n            return max + 1;\n        }\n        long low = 0;\n        long high = array.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array.get((int) mid) != mid + min) {\n                if (mid > 0 && array.get((int) mid - 1) == mid - 1 + min) {\n                    return mid + min;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return mid + min;",
    "        long first = array.get(0);\n        long last = array.get(array.size() - 1);\n        long expected = first;\n        for (long i = first; i <= last; i++) {\n            if (array.indexOf(i) == -1) {\n                return i;\n            }\n        }\n        return last + 1;",
    "        long max = array.get(array.size() - 1);\n        long min = array.get(0);\n        long sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        long expectedSum = (max * (max + 1)) / 2;\n        if (expectedSum == sum) {\n            return max + 1;\n        }\n        long diff = expectedSum - sum;\n        return max - diff;",
    "        long first = array.get(0);\n        long last = array.get(array.size() - 1);\n        long sum = 0;\n        for (long i = first; i <= last; i++) {\n            sum += i;\n        }\n        long actualSum = 0;\n        for (long i : array) {\n            actualSum += i;\n        }\n        return sum - actualSum;",
    "        long first = array.get(0);\n        long last = array.get(array.size() - 1);\n        long missing = first;\n        for (long i = first; i <= last; i++) {\n            if (!array.contains(i)) {\n                missing = i;\n                break;\n            }\n        }\n        return missing;",
    "        long min = array.get(0);\n        long max = array.get(array.size()-1);\n        long sum = 0;\n        for (long i = min; i <= max; i++) {\n            sum += i;\n        }\n        long actualSum = 0;\n        for (long i : array) {\n            actualSum += i;\n        }\n        return sum - actualSum;",
    "        long firstMissing = 1;\n        for (long i : array) {\n            if (i == firstMissing) {\n                firstMissing++;\n            }\n        }\n        return firstMissing;",
    "        long max = array.get(array.size() - 1);\n        long min = array.get(0);\n        long sum = 0;\n        for (Long i : array) {\n            sum += i;\n        }\n        long expectedSum = (max * (max + 1)) / 2;\n        if (expectedSum - sum == 0) {\n            return max + 1;\n        }\n        return expectedSum - sum;",
    "        long first = array.get(0);\n        long last = array.get(array.size() - 1);\n        long missing = -1;\n        for (long i = first; i <= last; i++) {\n            if (!array.contains(i)) {\n                missing = i;\n                break;\n            }\n        }\n        return missing;",
    "        long first = array.get(0);\n        long last = array.get(array.size() - 1);\n        long missing = first;\n        for (long i = first; i <= last; i++) {\n            if (!array.contains(i)) {\n                missing = i;\n                break;\n            }\n        }\n        return missing;",
    "        long start = 0;\n        long end = array.size() - 1;\n        while (start <= end) {\n            long mid = (start + end) / 2;\n            if (array.get((int)mid) != mid) {\n                if (mid == 0 || array.get((int)(mid - 1)) == mid - 1) {\n                    return mid;\n                }\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        return -1;",
    "        long first = array.get(0);\n        long last = array.get(array.size() - 1);\n        long missing = 0;\n        for (long i = first; i <= last; i++) {\n            if (!array.contains(i)) {\n                missing = i;\n                break;\n            }\n        }\n        return missing;",
    "        long i = 0;\n        for (long item : array) {\n            if (item != i) {\n                return i;\n            }\n            i++;\n        }\n        return i;",
    "        if (array.size() == 0) {\n            return 1;\n        }\n        if (array.size() == 1) {\n            if (array.get(0) == 1) {\n                return 2;\n            } else {\n                return 1;\n            }\n        }\n        long min = array.get(0);\n        long max = array.get(array.size() - 1);\n        if (min > 1) {\n            return 1;\n        }\n        if (max == array.size()) {\n            return max + 1;\n        }\n        for (int i = 1; i < array.size(); i++) {\n            if (array.get(i) - array.get(i - 1) > 1) {\n                return array.get(i - 1) + 1;\n            }\n        }\n        return -1;"
  ]
}