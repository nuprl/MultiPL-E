{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for(int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float)dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpupf124iv.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpkgnlprxt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpuqqquz1s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        // Return the maximum average of all possible paths\n        int n = cost.size();\n        int m = cost.get(0).size();\n        long[][] dp = new long[n][m];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < m; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < m; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return (float)dp[n-1][m-1]/(n+m-1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpyofartrt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        int m = cost.get(0).size();\n        float[][] dp = new float[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = cost.get(i).get(j);\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + cost.get(i).get(j);\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + cost.get(i).get(j);\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n                }\n            }\n        }\n        return dp[n - 1][m - 1] / (n + m - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpmmzmdwx3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpj_0q75ll.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpz0b7btts.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / ((float) n * n);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmp6jq17ee8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (n * n);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmptarvd0_t.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        int m = cost.get(0).size();\n        float[][] dp = new float[n][m];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < m; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < m; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][m - 1] / (n + m - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmp8lxtfr8s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // This is a dynamic programming problem.\n        // We want to find the maximum average of a path from the top left to the bottom right.\n        // We can break this down into subproblems.\n        // We can find the maximum average of a path from the top left to the bottom right by finding the maximum average of a path from the top left to the bottom right of the submatrix formed by removing the last row and last column.\n        // We can find the maximum average of a path from the top left to the bottom right of the submatrix formed by removing the last row and last column by finding the maximum average of a path from the top left to the bottom right of the submatrix formed by removing the last row and last column of the submatrix formed by removing the last row and last column.\n        // We can find the maximum average of a path from the top left to the bottom right of the submatrix formed by removing the last row and last column of the submatrix formed by removing the last row and last column by finding the maximum average of a path from the top left to the bottom right of the submatrix formed by removing the last row and last column of the submatrix formed by removing the last row and last column of the submatrix formed by removing the last row and last column.\n        // We can find the maximum average of a path from the top left to the bottom right of the submatrix formed by removing the last row and last column of the submatrix formed by removing the last row and last column of the submatrix formed by removing the last row and last column by finding the maximum average of a path from the top left to the bottom right of the submatrix formed by removing the last row and last column of the submatrix formed by removing the last row and last column of the submatrix formed by removing the last row and last column of the submatrix formed by removing the last row and last column.\n        // We can find the maximum average of a path from the top left to the bottom right of the submatrix formed by removing the last row and last column of the submatrix formed by removing the last row and last column of the submatrix formed by removing the last row and last column of the submatrix formed by removing the last row and last column by finding the maximum average of a path from the top left to the bottom right of the sub\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpilql9pp7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float)dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpdu97wsom.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmp7fm48lou.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n        }\n        for(int i = 1; i < n; i++) {\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][n-1] / (2*n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpaorgu0m3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpj_0q75ll.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpg0gy1zww.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpg0gy1zww.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmp7fm48lou.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return (float)dp[n-1][n-1]/((n-1)*2 + 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpf1fdrfd9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpj_0q75ll.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpz0b7btts.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i=1;i<n;i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i=1;i<n;i++) {\n            for(int j=1;j<n;j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][n-1]/(2*n-1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmp3864haqp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmp3m6q_mgg.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float)dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpdu97wsom.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmput4l5th2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpz0b7btts.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpz0b7btts.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = cost.get(i).get(j);\n            }\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            dp[n - 1][i] += dp[n - 1][i + 1];\n            dp[i][n - 1] += dp[i + 1][n - 1];\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            for (int j = n - 2; j >= 0; j--) {\n                dp[i][j] += Math.max(dp[i + 1][j], dp[i][j + 1]);\n            }\n        }\n        return (float) dp[0][0] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmp1nez76xp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        int n = cost.size();\n        int m = cost.get(0).size();\n        float[][] dp = new float[n][m];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < m; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][m - 1] / (n + m - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpylltren6.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][n-1] / (2*n-1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpsaj2wzlp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        int n = cost.size();\n        int m = cost.get(0).size();\n        float[][] dp = new float[n][m];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int j = 1; j < m; j++) {\n            dp[0][j] = dp[0][j - 1] + cost.get(0).get(j);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][m - 1] / (n + m - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpitmye83_.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpg0gy1zww.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmput4l5th2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpj_0q75ll.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for(int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpao44bovq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n        }\n        for(int i = 1; i < n; i++) {\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][n-1] / (2*n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpaorgu0m3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpz0b7btts.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // We will use dynamic programming to solve this problem.\n        // Let's define a 2D array dp[i][j] to be the maximum average of a path that ends at cell (i, j).\n        // We can compute dp[i][j] as follows:\n        // dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n        // We can use a 1D array to store the values of dp[i][j] as we only need the previous row to compute the current row.\n        // We can also use a 1D array to store the values of cost[i][j] as we only need the previous row to compute the current row.\n        // The answer is dp[n-1][n-1]\n        int n = cost.size();\n        float[] dp = new float[n];\n        float[] costRow = new float[n];\n        for (int i = 0; i < n; i++) {\n            costRow[i] = cost.get(0).get(i);\n            dp[i] = costRow[i];\n        }\n        for (int i = 1; i < n; i++) {\n            float[] newDp = new float[n];\n            float[] newCostRow = new float[n];\n            for (int j = 0; j < n; j++) {\n                newCostRow[j] = cost.get(i).get(j);\n                if (j == 0) {\n                    newDp[j] = dp[j] + newCostRow[j];\n                } else {\n                    newDp[j] = Math.max(dp[j], newDp[j-1]) + newCostRow[j];\n                }\n            }\n            dp = newDp;\n            costRow = newCostRow;\n        }\n        return dp[n-1] / n;\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmp_y2edwqp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i=1;i<n;i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i=1;i<n;i++) {\n            for(int j=1;j<n;j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][n-1]/(2*n-1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmp3864haqp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (n * n);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmptarvd0_t.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpz0b7btts.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n        }\n        for(int i = 1; i < n; i++) {\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][n-1] / (2*n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpaorgu0m3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpz0b7btts.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][n-1] / (2*n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmp0q8iarl_.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmp7fm48lou.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmp0ja_0_ld.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return (float)dp[n-1][n-1] / (2*n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmp677q5ngj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpz0b7btts.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpkgnlprxt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpg0gy1zww.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpz0b7btts.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpz0b7btts.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpg0gy1zww.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpg0gy1zww.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n        }\n        for(int i = 1; i < n; i++) {\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][n-1] / (2*n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpaorgu0m3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpg0gy1zww.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpz0b7btts.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][n-1] / (2*n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpm7off1rj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int j = 1; j < n; j++) {\n            dp[0][j] = dp[0][j - 1] + cost.get(0).get(j);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmp8_7y6sdq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpkgnlprxt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpg0gy1zww.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpz0b7btts.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmph6neoujj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpg0gy1zww.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpay817bz0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpj_0q75ll.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmp0ja_0_ld.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpg0gy1zww.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpg0gy1zww.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpg0gy1zww.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmp7fm48lou.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpj_0q75ll.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmp3m6q_mgg.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        // Return the maximum average of all paths\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpe2oevga8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpj_0q75ll.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpj_0q75ll.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmp3m6q_mgg.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpj_0q75ll.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpkgnlprxt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float)dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpdu97wsom.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpj_0q75ll.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        int m = cost.get(0).size();\n        float[][] dp = new float[n][m];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int j = 1; j < m; j++) {\n            dp[0][j] = dp[0][j-1] + cost.get(0).get(j);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < m; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][m-1] / (n + m - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpfmv841bh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmp3m6q_mgg.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        // Return the maximum average of all possible paths\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return (float)dp[n-1][n-1]/(2*n-1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "/tmp/tmpv_7a756b.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpg0gy1zww.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmp3m6q_mgg.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "/tmp/tmpu72ol14i.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpg0gy1zww.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpz0b7btts.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 && j == 0) {\n                    continue;\n                }\n                float up = i == 0 ? 0 : dp[i - 1][j];\n                float left = j == 0 ? 0 : dp[i][j - 1];\n                dp[i][j] = Math.max(up, left) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "/tmp/tmp8m4f41jo.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        ArrayList<ArrayList<Long>> dp = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            dp.add(new ArrayList<>());\n            for (int j = 0; j < n; j++) {\n                dp.get(i).add(0L);\n            }\n        }\n        dp.get(0).set(0, cost.get(0).get(0));\n        for (int i = 1; i < n; i++) {\n            dp.get(i).set(0, dp.get(i - 1).get(0) + cost.get(i).get(0));\n        }\n        for (int j = 1; j < n; j++) {\n            dp.get(0).set(j, dp.get(0).get(j - 1) + cost.get(0).get(j));\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp.get(i).set(j, Math.max(dp.get(i - 1).get(j), dp.get(i).get(j - 1)) + cost.get(i).get(j));\n            }\n        }\n        return (float)dp.get(n - 1).get(n - 1) / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "/tmp/tmp27b9ae9q.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmp3m6q_mgg.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmp7fm48lou.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpz0b7btts.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpg0gy1zww.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpj_0q75ll.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        int m = cost.get(0).size();\n        float[][] dp = new float[n][m];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int j = 1; j < m; j++) {\n            dp[0][j] = dp[0][j - 1] + cost.get(0).get(j);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][m - 1] / (n + m - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "/tmp/tmpfqjhumzo.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        // dp[i][j] is the maximum average of a path that ends at cell (i, j)\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "/tmp/tmp7jtstpkq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i=1;i<n;i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i=1;i<n;i++) {\n            for(int j=1;j<n;j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][n-1] / (2*n-1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "/tmp/tmpqphvy_mz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpj_0q75ll.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpg0gy1zww.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpz0b7btts.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmput4l5th2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmput4l5th2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float [][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "/tmp/tmp_42zso0c.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        int m = cost.get(0).size();\n        float[][] dp = new float[n][m];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int j = 1; j < m; j++) {\n            dp[0][j] = dp[0][j-1] + cost.get(0).get(j);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < m; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][m-1]/(n+m-1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "/tmp/tmpu7uow1fm.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        ArrayList<ArrayList<Float>> dp = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            dp.add(new ArrayList<>());\n            for (int j = 0; j < n; j++) {\n                dp.get(i).add(0.0f);\n            }\n        }\n        dp.get(0).set(0, cost.get(0).get(0).floatValue());\n        for (int i = 1; i < n; i++) {\n            dp.get(0).set(i, dp.get(0).get(i - 1) + cost.get(0).get(i).floatValue());\n            dp.get(i).set(0, dp.get(i - 1).get(0) + cost.get(i).get(0).floatValue());\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp.get(i).set(j, Math.max(dp.get(i - 1).get(j), dp.get(i).get(j - 1)) + cost.get(i).get(j).floatValue());\n            }\n        }\n        return dp.get(n - 1).get(n - 1) / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "/tmp/tmp99hnaqj7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpj_0q75ll.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpz0b7btts.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmput4l5th2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for(int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpao44bovq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for(int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpao44bovq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpg0gy1zww.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpj_0q75ll.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpz0b7btts.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for(int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpao44bovq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // We will use dynamic programming to solve this problem.\n        // We will use a 2D array to store the maximum average of a path that ends at a given cell.\n        // We will use a 2D array to store the number of paths that end at a given cell.\n        // We will use a 2D array to store the total cost of a path that ends at a given cell.\n        // We will use a 2D array to store the number of cells in a path that ends at a given cell.\n        // We will use a 2D array to store the maximum average of a path that ends at a given cell.\n        // We will use a 2D array to store the number of paths that end at a given cell.\n        // We will use a 2D array to store the total cost of a path that ends at a given cell.\n        // We will use a 2D array to store the number of cells in a path that ends at a given cell.\n        // We will use a 2D array to store the maximum average of a path that ends at a given cell.\n        // We will use a 2D array to store the number of paths that end at a given cell.\n        // We will use a 2D array to store the total cost of a path that ends at a given cell.\n        // We will use a 2D array to store the number of cells in a path that ends at a given cell.\n        // We will use a 2D array to store the maximum average of a path that ends at a given cell.\n        // We will use a 2D array to store the number of paths that end at a given cell.\n        // We will use a 2D array to store the total cost of a path that ends at a given cell.\n        // We will use a 2D array to store the number of cells in a path that ends at a given cell.\n        // We will use a 2D array to store the maximum average of a path that ends at a given cell.\n        // We will use a 2D array to store the number of paths that end at a given cell.\n        // We will use a 2D array to store the total cost of a path that ends at a given cell.\n        // We will use a 2D array to store the number of cells in a path that ends at a given cell.\n        // We\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "/tmp/tmpwe81j88x.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpuqqquz1s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                dp[i][j] = cost.get(i).get(j);\n                if(i > 0 && j > 0) {\n                    dp[i][j] += Math.max(dp[i-1][j], dp[i][j-1]);\n                } else if(i > 0) {\n                    dp[i][j] += dp[i-1][j];\n                } else if(j > 0) {\n                    dp[i][j] += dp[i][j-1];\n                }\n            }\n        }\n        return (float)dp[n-1][n-1] / (2*n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "/tmp/tmp6_qen_7b.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpz0b7btts.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        // Return the maximum average of all paths\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "/tmp/tmp5oevnx_5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][n-1] / (2*n-1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmpsaj2wzlp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpai09zhm4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "/tmp/tmpkgnlprxt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124039,
      "stdout": "",
      "stderr": "/tmp/tmp3m6q_mgg.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}