{
  "name": "mbpp_724_power_base_sum",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    public static long powerBaseSum(long base, long power) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(powerBaseSum((2l), (100l)) == (115l));\n    assert(powerBaseSum((8l), (10l)) == (37l));\n    assert(powerBaseSum((8l), (15l)) == (62l));\n    assert(powerBaseSum((3l), (3l)) == (9l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().map(Character::getNumericValue).sum();",
    "        // Write your code here\n        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        return Stream.iterate(BigInteger.valueOf(base), i -> i.multiply(BigInteger.valueOf(base)))\n            .limit(power)\n            .reduce(BigInteger.valueOf(0), (a, b) -> a.add(b))\n            .toString()\n            .chars()\n            .map(Character::getNumericValue)\n            .sum();",
    "        long result = 0;\n        long temp = base;\n        for (int i = 1; i < power; i++) {\n            temp *= base;\n        }\n        String tempString = String.valueOf(temp);\n        for (int i = 0; i < tempString.length(); i++) {\n            result += Integer.parseInt(tempString.substring(i, i + 1));\n        }\n        return result;",
    "        BigInteger b = BigInteger.valueOf(base);\n        BigInteger p = BigInteger.valueOf(power);\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        BigInteger b = new BigInteger(Long.toString(base));\n        BigInteger p = new BigInteger(Long.toString(power));\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;",
    "        BigInteger b = new BigInteger(String.valueOf(base));\n        BigInteger p = new BigInteger(String.valueOf(power));\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Integer.parseInt(s.substring(i, i + 1));\n        }\n        return sum;",
    "        BigInteger b = BigInteger.valueOf(base);\n        BigInteger p = BigInteger.valueOf(power);\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;",
    "        BigInteger b = new BigInteger(Long.toString(base));\n        BigInteger p = new BigInteger(Long.toString(power));\n        BigInteger result = b.pow(p.intValue());\n        String str = result.toString();\n        long sum = 0;\n        for(int i = 0; i < str.length(); i++) {\n            sum += Character.getNumericValue(str.charAt(i));\n        }\n        return sum;",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger bigInteger = BigInteger.valueOf(base);\n        bigInteger = bigInteger.pow((int)power);\n        String number = bigInteger.toString();\n        long sum = 0;\n        for (int i = 0; i < number.length(); i++) {\n            sum += Character.getNumericValue(number.charAt(i));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String resultString = result.toString();\n        long sum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Integer.parseInt(resultString.substring(i, i + 1));\n        }\n        return sum;",
    "        BigInteger bigInteger = BigInteger.valueOf(base);\n        BigInteger bigInteger1 = bigInteger.pow((int) power);\n        String string = bigInteger1.toString();\n        long sum = 0;\n        for (int i = 0; i < string.length(); i++) {\n            sum += Integer.parseInt(string.substring(i, i + 1));\n        }\n        return sum;",
    "        long sum = 0;\n        BigInteger result = BigInteger.valueOf(base);\n        result = result.pow((int)power);\n        String str = result.toString();\n        for(int i = 0; i < str.length(); i++) {\n            sum += Character.getNumericValue(str.charAt(i));\n        }\n        return sum;",
    "        BigInteger n = new BigInteger(String.valueOf(base)).pow((int)power);\n        return n.toString().chars().map(Character::getNumericValue).sum();",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger b = new BigInteger(Long.toString(base));\n        BigInteger p = new BigInteger(Long.toString(power));\n        BigInteger result = b.pow(p.intValue());\n        String str = result.toString();\n        long sum = 0;\n        for (int i = 0; i < str.length(); i++) {\n            sum += Character.getNumericValue(str.charAt(i));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().map(Character::getNumericValue).sum();",
    "        BigInteger b = BigInteger.valueOf(base);\n        BigInteger p = BigInteger.valueOf(power);\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for(int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;",
    "        return Stream.iterate(BigInteger.valueOf(base), x -> x.multiply(BigInteger.valueOf(base))).limit(power).mapToLong(x -> x.toString().chars().mapToLong(y -> y - '0').sum()).sum();",
    "        long sum = 0;\n        long result = 1;\n        for (int i = 0; i < power; i++) {\n            result *= base;\n        }\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        long result = 1;\n        for (int i = 0; i < power; i++) {\n            result *= base;\n        }\n        return result;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().map(Character::getNumericValue).sum();",
    "        BigInteger b = new BigInteger(Long.toString(base));\n        BigInteger p = new BigInteger(Long.toString(power));\n        BigInteger result = b.pow(p.intValue());\n        String resultString = result.toString();\n        long sum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Integer.parseInt(resultString.substring(i, i + 1));\n        }\n        return sum;",
    "        BigInteger bigInteger = BigInteger.valueOf(base);\n        BigInteger result = bigInteger.pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        // Write your code here\n        BigInteger b = BigInteger.valueOf(base);\n        BigInteger p = BigInteger.valueOf(power);\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for(int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;",
    "        long sum = 0;\n        long result = 1;\n        for (int i = 0; i < power; i++) {\n            result *= base;\n        }\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        long sum = 0;\n        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String str = result.toString();\n        for(int i = 0; i < str.length(); i++) {\n            sum += Character.getNumericValue(str.charAt(i));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().map(Character::getNumericValue).sum();",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        long result = 0;\n        long temp = base;\n        for (int i = 1; i < power; i++) {\n            temp *= base;\n        }\n        while (temp > 0) {\n            result += temp % 10;\n            temp /= 10;\n        }\n        return result;",
    "        BigInteger b = new BigInteger(Long.toString(base));\n        BigInteger p = new BigInteger(Long.toString(power));\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        long result = 0;\n        long temp = base;\n        for (int i = 1; i < power; i++) {\n            temp = temp * base;\n        }\n        while (temp > 0) {\n            result += temp % 10;\n            temp /= 10;\n        }\n        return result;",
    "        BigInteger b = new BigInteger(String.valueOf(base));\n        BigInteger p = new BigInteger(String.valueOf(power));\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;",
    "        long result = 0;\n        long temp = base;\n        for (long i = 1; i < power; i++) {\n            temp *= base;\n        }\n        while (temp > 0) {\n            result += temp % 10;\n            temp /= 10;\n        }\n        return result;",
    "        BigInteger b = BigInteger.valueOf(base);\n        BigInteger p = BigInteger.valueOf(power);\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().map(Character::getNumericValue).sum();",
    "        long sum = 0;\n        BigInteger bigInteger = BigInteger.valueOf(base);\n        bigInteger = bigInteger.pow((int)power);\n        String string = bigInteger.toString();\n        for (int i = 0; i < string.length(); i++) {\n            sum += Integer.parseInt(string.substring(i, i + 1));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String resultString = result.toString();\n        long sum = 0;\n        for(int i = 0; i < resultString.length(); i++) {\n            sum += Character.getNumericValue(resultString.charAt(i));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().map(c -> c - '0').sum();",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        long sum = 0;\n        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String str = result.toString();\n        for (int i = 0; i < str.length(); i++) {\n            sum += Character.getNumericValue(str.charAt(i));\n        }\n        return sum;",
    "        return Long.toString(base).chars().map(Character::getNumericValue).sum();",
    "        return Stream.iterate(1L, i -> i * base).limit(power).reduce(0L, (a, b) -> a + b);",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String resultString = result.toString();\n        long sum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Character.getNumericValue(resultString.charAt(i));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String resultString = result.toString();\n        long sum = 0;\n        for(int i = 0; i < resultString.length(); i++) {\n            sum += Integer.parseInt(resultString.substring(i, i+1));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int) power);\n        String resultString = result.toString();\n        long sum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Character.getNumericValue(resultString.charAt(i));\n        }\n        return sum;",
    "        return 0;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String resultString = result.toString();\n        long sum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Character.getNumericValue(resultString.charAt(i));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().map(Character::getNumericValue).sum();",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String resultString = result.toString();\n        long sum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Character.getNumericValue(resultString.charAt(i));\n        }\n        return sum;",
    "        BigInteger b = BigInteger.valueOf(base);\n        BigInteger p = BigInteger.valueOf(power);\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Integer.parseInt(s.substring(i, i + 1));\n        }\n        return sum;",
    "        BigInteger big = BigInteger.valueOf(base);\n        big = big.pow((int)power);\n        String s = big.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String resultString = result.toString();\n        long sum = 0;\n        for(int i = 0; i < resultString.length(); i++) {\n            sum += Character.getNumericValue(resultString.charAt(i));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger b = BigInteger.valueOf(base);\n        BigInteger p = BigInteger.valueOf(power);\n        BigInteger result = b.pow(p.intValue());\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        BigInteger b = BigInteger.valueOf(base);\n        BigInteger p = BigInteger.valueOf(power);\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;",
    "        BigInteger bigInteger = new BigInteger(String.valueOf(base));\n        bigInteger = bigInteger.pow((int)power);\n        String string = bigInteger.toString();\n        long sum = 0;\n        for (int i = 0; i < string.length(); i++) {\n            sum += Integer.parseInt(string.substring(i, i+1));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().map(Character::getNumericValue).sum();",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        BigInteger bigInteger = new BigInteger(String.valueOf(base));\n        bigInteger = bigInteger.pow((int)power);\n        String bigIntegerString = bigInteger.toString();\n        long sum = 0;\n        for(int i = 0; i < bigIntegerString.length(); i++) {\n            sum += Character.getNumericValue(bigIntegerString.charAt(i));\n        }\n        return sum;",
    "        // Write your code here\n        BigInteger b = new BigInteger(Long.toString(base));\n        BigInteger p = new BigInteger(Long.toString(power));\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Integer.parseInt(s.substring(i, i + 1));\n        }\n        return sum;",
    "        long sum = 0;\n        long result = 1;\n        for (int i = 0; i < power; i++) {\n            result *= base;\n        }\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        BigInteger b = BigInteger.valueOf(base);\n        BigInteger p = BigInteger.valueOf(power);\n        BigInteger result = b.pow(p.intValue());\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().map(Character::getNumericValue).sum();",
    "        long sum = 0;\n        long result = 1;\n        for (int i = 0; i < power; i++) {\n            result *= base;\n        }\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        long sum = 0;\n        long result = 1;\n        for (long i = 0; i < power; i++) {\n            result *= base;\n        }\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String resultString = result.toString();\n        long sum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Character.getNumericValue(resultString.charAt(i));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().map(Character::getNumericValue).sum();",
    "        long sum = 0;\n        long result = 1;\n        for (int i = 0; i < power; i++) {\n            result *= base;\n        }\n        String resultString = String.valueOf(result);\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(resultString.charAt(i)));\n        }\n        return sum;",
    "        BigInteger b = BigInteger.valueOf(base);\n        BigInteger p = BigInteger.valueOf(power);\n        BigInteger result = b.pow(p.intValue());\n        return result.toString().chars().map(Character::getNumericValue).sum();",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().map(Character::getNumericValue).sum();",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String resultString = result.toString();\n        long sum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Integer.parseInt(resultString.substring(i, i + 1));\n        }\n        return sum;",
    "        BigInteger b = BigInteger.valueOf(base);\n        BigInteger p = BigInteger.valueOf(power);\n        BigInteger result = b.pow(p.intValue());\n        return result.toString().chars().map(Character::getNumericValue).sum();",
    "        long result = 1;\n        for (int i = 0; i < power; i++) {\n            result *= base;\n        }\n        return sumDigits(result);",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String resultString = result.toString();\n        long sum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Character.getNumericValue(resultString.charAt(i));\n        }\n        return sum;",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger bigInteger = BigInteger.valueOf(base);\n        BigInteger bigInteger1 = bigInteger.pow((int) power);\n        String s = bigInteger1.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += s.charAt(i) - '0';\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        long result = (long) Math.pow(base, power);\n        long sum = 0;\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger b = new BigInteger(String.valueOf(base));\n        BigInteger p = new BigInteger(String.valueOf(power));\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Integer.parseInt(s.substring(i, i + 1));\n        }\n        return sum;",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        BigInteger b = new BigInteger(String.valueOf(base));\n        BigInteger p = new BigInteger(String.valueOf(power));\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Integer.parseInt(s.substring(i, i + 1));\n        }\n        return sum;",
    "        BigInteger b = new BigInteger(Long.toString(base));\n        BigInteger p = new BigInteger(Long.toString(power));\n        BigInteger result = b.pow(p.intValue());\n        String str = result.toString();\n        long sum = 0;\n        for(int i = 0; i < str.length(); i++) {\n            sum += Character.getNumericValue(str.charAt(i));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base);\n        result = result.pow((int)power);\n        String resultString = result.toString();\n        long sum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Integer.parseInt(resultString.substring(i, i + 1));\n        }\n        return sum;",
    "        long result = 1;\n        for (long i = 0; i < power; i++) {\n            result *= base;\n        }\n        return result;",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger b = new BigInteger(Long.toString(base));\n        BigInteger p = new BigInteger(Long.toString(power));\n        BigInteger result = b.pow(p.intValue());\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        long sum = 0;\n        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String str = result.toString();\n        for (int i = 0; i < str.length(); i++) {\n            sum += Character.getNumericValue(str.charAt(i));\n        }\n        return sum;",
    "        // Write your code here\n        long result = 1;\n        for (int i = 0; i < power; i++) {\n            result *= base;\n        }\n        return sumOfDigits(result);",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String resultString = result.toString();\n        long sum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Integer.parseInt(resultString.substring(i, i+1));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String str = result.toString();\n        long sum = 0;\n        for (int i = 0; i < str.length(); i++) {\n            sum += Character.getNumericValue(str.charAt(i));\n        }\n        return sum;",
    "        long sum = 0;\n        for (int i = 0; i < power; i++) {\n            sum += base;\n        }\n        return sum;",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().map(Character::getNumericValue).sum();",
    "        long sum = 0;\n        long result = 1;\n        for (int i = 0; i < power; i++) {\n            result *= base;\n        }\n        String str = String.valueOf(result);\n        for (int i = 0; i < str.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(str.charAt(i)));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String resultString = result.toString();\n        long sum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Character.getNumericValue(resultString.charAt(i));\n        }\n        return sum;",
    "        BigInteger b = BigInteger.valueOf(base);\n        BigInteger p = BigInteger.valueOf(power);\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().map(Character::getNumericValue).sum();",
    "        long sum = 0;\n        long result = 1;\n        for (int i = 1; i <= power; i++) {\n            result *= base;\n        }\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String resultString = result.toString();\n        long sum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Character.getNumericValue(resultString.charAt(i));\n        }\n        return sum;",
    "        long sum = 0;\n        for (int i = 0; i < power; i++) {\n            sum += base;\n        }\n        return sum;",
    "        long sum = 0;\n        long result = (long)Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String resultString = result.toString();\n        long sum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Character.getNumericValue(resultString.charAt(i));\n        }\n        return sum;",
    "        BigInteger b = BigInteger.valueOf(base);\n        BigInteger p = BigInteger.valueOf(power);\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        BigInteger b = new BigInteger(String.valueOf(base));\n        BigInteger p = new BigInteger(String.valueOf(power));\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;",
    "        BigInteger bigInteger = BigInteger.valueOf(base);\n        BigInteger result = bigInteger.pow((int)power);\n        String resultString = result.toString();\n        long sum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Character.getNumericValue(resultString.charAt(i));\n        }\n        return sum;",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        return Stream.iterate(BigInteger.valueOf(base), i -> i.multiply(BigInteger.valueOf(base))).limit(power).reduce(BigInteger.ZERO, BigInteger::add).toString().chars().map(i -> i - '0').sum();",
    "        long sum = 0;\n        for (long i = 0; i < power; i++) {\n            sum += base;\n        }\n        return sum;",
    "        long sum = 0;\n        long result = 1;\n        for (int i = 0; i < power; i++) {\n            result *= base;\n        }\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        // Write your code here\n        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger b = BigInteger.valueOf(base);\n        BigInteger p = BigInteger.valueOf(power);\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Integer.parseInt(s.substring(i, i + 1));\n        }\n        return sum;",
    "        return Stream.iterate(BigInteger.valueOf(base), i -> i.multiply(BigInteger.valueOf(base)))\n            .limit(power)\n            .reduce(BigInteger.ONE, BigInteger::multiply)\n            .toString()\n            .chars()\n            .map(Character::getNumericValue)\n            .sum();",
    "        return 0;",
    "        BigInteger b = BigInteger.valueOf(base);\n        BigInteger p = BigInteger.valueOf(power);\n        BigInteger result = b.pow(p.intValue());\n        return result.toString().chars().map(Character::getNumericValue).sum();",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        return Stream.iterate(BigInteger.valueOf(base), n -> n.multiply(BigInteger.valueOf(base)))\n            .limit(power)\n            .reduce(BigInteger.ONE, (a, b) -> a.multiply(b))\n            .toString()\n            .chars()\n            .mapToLong(Character::getNumericValue)\n            .sum();",
    "        return Stream.iterate(1L, i -> i * base)\n            .limit(power)\n            .reduce(0L, (a, b) -> a + b)\n            .toString()\n            .chars()\n            .map(Character::getNumericValue)\n            .reduce(0, (a, b) -> a + b);",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        long sum = 0;\n        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String str = result.toString();\n        for (int i = 0; i < str.length(); i++) {\n            sum += Character.getNumericValue(str.charAt(i));\n        }\n        return sum;",
    "        return BigInteger.valueOf(base).pow((int)power).toString().chars().map(Character::getNumericValue).sum();",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        long sum = 0;\n        long result = 1;\n        for (int i = 0; i < power; i++) {\n            result *= base;\n        }\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String resultString = result.toString();\n        long sum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Character.getNumericValue(resultString.charAt(i));\n        }\n        return sum;",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String resultString = result.toString();\n        long sum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Character.getNumericValue(resultString.charAt(i));\n        }\n        return sum;",
    "        BigInteger b = new BigInteger(Long.toString(base));\n        BigInteger p = new BigInteger(Long.toString(power));\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().map(Character::getNumericValue).sum();",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        long sum = 0;\n        long result = 1;\n        for (int i = 0; i < power; i++) {\n            result *= base;\n        }\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger b = new BigInteger(Long.toString(base));\n        BigInteger p = new BigInteger(Long.toString(power));\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += s.charAt(i) - '0';\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().map(Character::getNumericValue).sum();",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        BigInteger bigInteger = BigInteger.valueOf(base);\n        BigInteger result = bigInteger.pow((int) power);\n        String resultString = result.toString();\n        long resultSum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            resultSum += Character.getNumericValue(resultString.charAt(i));\n        }\n        return resultSum;",
    "        BigInteger b = BigInteger.valueOf(base);\n        BigInteger p = BigInteger.valueOf(power);\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        // Write your code here\n        BigInteger b = new BigInteger(String.valueOf(base));\n        BigInteger p = new BigInteger(String.valueOf(power));\n        BigInteger result = b.pow(p.intValue());\n        String resultString = result.toString();\n        long sum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Integer.parseInt(resultString.substring(i, i + 1));\n        }\n        return sum;",
    "        BigInteger b = new BigInteger(Long.toString(base));\n        BigInteger p = new BigInteger(Long.toString(power));\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Integer.parseInt(s.substring(i, i + 1));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        return Long.parseLong(BigInteger.valueOf(base).pow((int)power).toString().chars().mapToLong(Character::getNumericValue).sum() + \"\");",
    "        BigInteger b = new BigInteger(Long.toString(base));\n        BigInteger p = new BigInteger(Long.toString(power));\n        BigInteger result = b.pow(p.intValue());\n        String resultString = result.toString();\n        long sum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Character.getNumericValue(resultString.charAt(i));\n        }\n        return sum;",
    "        long sum = 0;\n        BigInteger result = BigInteger.valueOf(base);\n        result = result.pow((int)power);\n        while (result.compareTo(BigInteger.ZERO) > 0) {\n            sum += result.mod(BigInteger.TEN).longValue();\n            result = result.divide(BigInteger.TEN);\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        long result = 0;\n        long temp = base;\n        for (int i = 1; i < power; i++) {\n            temp *= base;\n        }\n        while (temp > 0) {\n            result += temp % 10;\n            temp /= 10;\n        }\n        return result;",
    "        long sum = 0;\n        BigInteger result = BigInteger.valueOf(base);\n        for (int i = 1; i < power; i++) {\n            result = result.multiply(BigInteger.valueOf(base));\n        }\n        String resultString = result.toString();\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Integer.parseInt(resultString.substring(i, i + 1));\n        }\n        return sum;",
    "        BigInteger b = new BigInteger(String.valueOf(base));\n        BigInteger p = new BigInteger(String.valueOf(power));\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Integer.parseInt(s.substring(i, i + 1));\n        }\n        return sum;",
    "        BigInteger bigInteger = new BigInteger(String.valueOf(base));\n        bigInteger = bigInteger.pow((int) power);\n        String bigIntegerString = bigInteger.toString();\n        long sum = 0;\n        for (int i = 0; i < bigIntegerString.length(); i++) {\n            sum += Integer.parseInt(bigIntegerString.substring(i, i + 1));\n        }\n        return sum;",
    "        BigInteger b = BigInteger.valueOf(base);\n        BigInteger p = BigInteger.valueOf(power);\n        BigInteger result = b.pow(p.intValue());\n        return result.toString().chars().map(Character::getNumericValue).sum();",
    "        long sum = 0;\n        long result = 1;\n        for (int i = 0; i < power; i++) {\n            result *= base;\n        }\n        String str = String.valueOf(result);\n        for (int i = 0; i < str.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(str.charAt(i)));\n        }\n        return sum;",
    "        BigInteger b = new BigInteger(Long.toString(base));\n        BigInteger p = new BigInteger(Long.toString(power));\n        BigInteger result = b.pow(p.intValue());\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String resultString = result.toString();\n        return resultString.chars().mapToLong(Character::getNumericValue).sum();",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().map(Character::getNumericValue).sum();",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        long sum = 0;\n        long result = 1;\n        for (int i = 0; i < power; i++) {\n            result *= base;\n        }\n        String resultString = String.valueOf(result);\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Character.getNumericValue(resultString.charAt(i));\n        }\n        return sum;",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result = result / 10;\n        }\n        return sum;",
    "        BigInteger b = BigInteger.valueOf(base);\n        BigInteger p = BigInteger.valueOf(power);\n        BigInteger result = b.pow(p.intValue());\n        long sum = 0;\n        while (result.compareTo(BigInteger.ZERO) > 0) {\n            sum += result.mod(BigInteger.TEN).longValue();\n            result = result.divide(BigInteger.TEN);\n        }\n        return sum;",
    "        BigInteger b = BigInteger.valueOf(base);\n        BigInteger p = BigInteger.valueOf(power);\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Integer.parseInt(s.substring(i, i + 1));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().map(Character::getNumericValue).sum();",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        long sum = 0;\n        for (char c : result.toString().toCharArray()) {\n            sum += Character.getNumericValue(c);\n        }\n        return sum;",
    "        BigInteger b = BigInteger.valueOf(base);\n        BigInteger p = BigInteger.valueOf(power);\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().map(Character::getNumericValue).sum();",
    "        long sum = 0;\n        long result = (long)Math.pow(base, power);\n        while(result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger b = new BigInteger(Long.toString(base));\n        BigInteger p = new BigInteger(Long.toString(power));\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base);\n        result = result.pow((int)power);\n        String str = result.toString();\n        long sum = 0;\n        for (int i = 0; i < str.length(); i++) {\n            sum += Character.getNumericValue(str.charAt(i));\n        }\n        return sum;",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        BigInteger b = BigInteger.valueOf(base);\n        BigInteger p = BigInteger.valueOf(power);\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for(int i = 0; i < s.length(); i++) {\n            sum += s.charAt(i) - '0';\n        }\n        return sum;",
    "        long sum = 0;\n        long temp = base;\n        for(int i = 1; i < power; i++) {\n            temp *= base;\n            sum += temp;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        String resultString = result.toString();\n        long sum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            sum += Integer.parseInt(resultString.substring(i, i + 1));\n        }\n        return sum;",
    "        // Write your code here\n        long sum = 0;\n        long result = 1;\n        for (int i = 0; i < power; i++) {\n            result *= base;\n        }\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;",
    "        BigInteger b = new BigInteger(String.valueOf(base));\n        BigInteger p = new BigInteger(String.valueOf(power));\n        BigInteger result = b.pow(p.intValue());\n        String s = result.toString();\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().map(x -> x - '0').sum();",
    "        BigInteger result = BigInteger.valueOf(base).pow((int)power);\n        return result.toString().chars().mapToLong(Character::getNumericValue).sum();",
    "        return Stream.iterate(1L, i -> i * base).limit(power).mapToLong(i -> i).sum();",
    "        long sum = 0;\n        long result = (long) Math.pow(base, power);\n        while (result > 0) {\n            sum += result % 10;\n            result /= 10;\n        }\n        return sum;"
  ]
}