{
  "name": "mbpp_618_div_list",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to divide two lists element wise.\n    public static ArrayList<Float> divList(ArrayList<Long> nums1, ArrayList<Long> nums2) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(divList((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Float>(Arrays.asList((float)4.0f, (float)2.5f, (float)2.0f)))));\n    assert(divList((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))).equals((new ArrayList<Float>(Arrays.asList((float)3.0f, (float)0.5f)))));\n    assert(divList((new ArrayList<Long>(Arrays.asList((long)90l, (long)120l))), (new ArrayList<Long>(Arrays.asList((long)50l, (long)70l)))).equals((new ArrayList<Float>(Arrays.asList((float)1.8f, (float)1.7142857142857142f)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        ArrayList<Float> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add((float)nums1.get(i) / (float)nums2.get(i));\n        }\n        return result;",
    "        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add((float) nums1.get(i) / nums2.get(i));\n        }\n        return result;",
    "        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add((float)nums1.get(i) / (float)nums2.get(i));\n        }\n        return result;",
    "        ArrayList<Float> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add((float)nums1.get(i) / (float)nums2.get(i));\n        }\n        return result;",
    "        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add((float)nums1.get(i) / (float)nums2.get(i));\n        }\n        return result;",
    "        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add((float) nums1.get(i) / nums2.get(i));\n        }\n        return result;",
    "        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add((float) nums1.get(i) / nums2.get(i));\n        }\n        return result;",
    "        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add((float)nums1.get(i) / (float)nums2.get(i));\n        }\n        return result;",
    "        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add((float)nums1.get(i) / (float)nums2.get(i));\n        }\n        return result;",
    "        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) / nums2.get(i));\n        }\n        return result;",
    "        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add((float) nums1.get(i) / nums2.get(i));\n        }\n        return result;",
    "        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) / nums2.get(i));\n        }\n        return result;",
    "        ArrayList<Float> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) / nums2.get(i));\n        }\n        return result;",
    "        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add((float) nums1.get(i) / nums2.get(i));\n        }\n        return result;",
    "        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) / nums2.get(i));\n        }\n        return result;",
    "        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add((float) nums1.get(i) / nums2.get(i));\n        }\n        return result;",
    "        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add((float) nums1.get(i) / nums2.get(i));\n        }\n        return result;",
    "        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add((float)nums1.get(i) / (float)nums2.get(i));\n        }\n        return result;",
    "        ArrayList<Float> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add((float) nums1.get(i) / (float) nums2.get(i));\n        }\n        return result;",
    "        ArrayList<Float> result = new ArrayList<Float>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add((float) nums1.get(i) / nums2.get(i));\n        }\n        return result;"
  ]
}