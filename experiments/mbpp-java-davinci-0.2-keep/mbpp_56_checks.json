{
  "name": "mbpp_56_checks",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to check if a given number is one less than twice its reverse.\n    public static boolean checks(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(checks((70l)) == (false));\n    assert(checks((23l)) == (false));\n    assert(checks((73l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long rev = 0;\n        long temp = n;\n        while (temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == rev * 2 - 1;",
    "        String s = Long.toString(n);\n        StringBuilder sb = new StringBuilder(s);\n        sb.reverse();\n        long r = Long.parseLong(sb.toString());\n        return n == 2 * r - 1;",
    "        long rev = Long.parseLong(new StringBuilder(Long.toString(n)).reverse().toString());\n        return n == 2 * rev - 1;",
    "        long rev = 0;\n        long temp = n;\n        while (temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == rev * 2 - 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r * 2 - 1;",
    "        String s = Long.toString(n);\n        StringBuilder sb = new StringBuilder(s);\n        String r = sb.reverse().toString();\n        return n == 2 * Long.parseLong(r) - 1;",
    "        String s = Long.toString(n);\n        String r = new StringBuilder(s).reverse().toString();\n        return n == 2 * Long.parseLong(r) - 1;",
    "        long r = reverse(n);\n        return n == 2 * r - 1;",
    "        long rev = 0;\n        long temp = n;\n        while (temp != 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == rev + 1 || n == rev - 1;",
    "        String s = Long.toString(n);\n        String r = new StringBuilder(s).reverse().toString();\n        return n == (Long.parseLong(r) * 2) - 1;",
    "        long rev = reverse(n);\n        return n == rev * 2 - 1;",
    "        String s = Long.toString(n);\n        StringBuilder sb = new StringBuilder(s);\n        sb.reverse();\n        return n == 2 * Long.parseLong(sb.toString()) - 1;",
    "        long rev = 0;\n        long temp = n;\n        while (temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == rev * 2 - 1;",
    "        String s = Long.toString(n);\n        StringBuilder sb = new StringBuilder(s);\n        sb.reverse();\n        long r = Long.parseLong(sb.toString());\n        return n == 2 * r - 1;",
    "        long r = reverse(n);\n        return n == 2 * r - 1;",
    "        long r = reverse(n);\n        return n == 2 * r - 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r * 2 - 1;",
    "        long r = reverse(n);\n        return n == 2 * r - 1;",
    "        long rev = 0;\n        long temp = n;\n        while (temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == rev * 2 - 1;",
    "        long r = 0;\n        long t = n;\n        while (t > 0) {\n            r = r * 10 + t % 10;\n            t /= 10;\n        }\n        return n == r * 2 - 1;"
  ]
}