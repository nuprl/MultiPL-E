{
  "name": "mbpp_414_overlapping",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to check whether any value in a sequence exists in a sequence or not.\n    public static boolean overlapping(ArrayList<Long> list1, ArrayList<Long> list2) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(overlapping((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l, (long)9l)))) == (false));\n    assert(overlapping((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))) == (false));\n    assert(overlapping((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)5l)))) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        HashSet<Long> set1 = new HashSet<Long>(list1);\n        HashSet<Long> set2 = new HashSet<Long>(list2);\n        set1.retainAll(set2);\n        return !set1.isEmpty();",
    "        HashSet<Long> set1 = new HashSet<Long>(list1);\n        HashSet<Long> set2 = new HashSet<Long>(list2);\n        for (Long i : set1) {\n            if (set2.contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long l : list1) {\n            set.add(l);\n        }\n        for (Long l : list2) {\n            if (set.contains(l)) {\n                return true;\n            }\n        }\n        return false;",
    "        HashSet<Long> set1 = new HashSet<Long>(list1);\n        HashSet<Long> set2 = new HashSet<Long>(list2);\n        for (Long i : set1) {\n            if (set2.contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long x : list1) {\n            set.add(x);\n        }\n        for (Long x : list2) {\n            if (set.contains(x)) {\n                return true;\n            }\n        }\n        return false;",
    "        HashSet<Long> set = new HashSet<>();\n        for (Long i : list1) {\n            set.add(i);\n        }\n        for (Long i : list2) {\n            if (set.contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long i : list1) {\n            set.add(i);\n        }\n        for (Long i : list2) {\n            if (set.contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long i : list1) {\n            set.add(i);\n        }\n        for (Long i : list2) {\n            if (set.contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long l : list1) {\n            set.add(l);\n        }\n        for (Long l : list2) {\n            if (set.contains(l)) {\n                return true;\n            }\n        }\n        return false;",
    "        HashSet<Long> set = new HashSet<>();\n        for (Long i : list1) {\n            set.add(i);\n        }\n        for (Long i : list2) {\n            if (set.contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        for (Long i : list1) {\n            if (list2.contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long i : list1) {\n            set.add(i);\n        }\n        for (Long i : list2) {\n            if (set.contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        for (Long i : list1) {\n            if (list2.contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        HashSet<Long> set1 = new HashSet<Long>(list1);\n        HashSet<Long> set2 = new HashSet<Long>(list2);\n        for (Long i : set1) {\n            if (set2.contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long i : list1) {\n            set.add(i);\n        }\n        for (Long i : list2) {\n            if (set.contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        HashSet<Long> set = new HashSet<>();\n        for (Long i : list1) {\n            set.add(i);\n        }\n        for (Long i : list2) {\n            if (set.contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        HashSet<Long> set1 = new HashSet<Long>(list1);\n        HashSet<Long> set2 = new HashSet<Long>(list2);\n        return !Collections.disjoint(set1, set2);",
    "        HashSet<Long> set = new HashSet<>();\n        for (Long l : list1) {\n            set.add(l);\n        }\n        for (Long l : list2) {\n            if (set.contains(l)) {\n                return true;\n            }\n        }\n        return false;",
    "        HashSet<Long> set = new HashSet<>();\n        for (Long i : list1) {\n            set.add(i);\n        }\n        for (Long i : list2) {\n            if (set.contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        for (Long i : list1) {\n            if (list2.contains(i)) {\n                return true;\n            }\n        }\n        return false;"
  ]
}