{
  "name": "mbpp_392_get_max_sum",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    public static long getMaxSum(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n <= 0) {\n            return 0;\n        }\n        long sum = 0;\n        if (n % 2 == 0) {\n            sum += getMaxSum(n / 2);\n        }\n        if (n % 3 == 0) {\n            sum += getMaxSum(n / 3);\n        }\n        if (n % 4 == 0) {\n            sum += getMaxSum(n / 4);\n        }\n        if (n % 5 == 0) {\n            sum += getMaxSum(n / 5);\n        }\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long max = n;\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = getMaxSum(n / i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = 0;\n        sum = Math.max(sum, getMaxSum(n / 2));\n        sum = Math.max(sum, getMaxSum(n / 3));\n        sum = Math.max(sum, getMaxSum(n / 4));\n        sum = Math.max(sum, getMaxSum(n / 5));\n        return sum + n;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 4;\n        if (n == 5) return 5;\n        long sum = getMaxSum(n/2) + getMaxSum(n/3) + getMaxSum(n/4) + getMaxSum(n/5);\n        return Math.max(sum, n);",
    "        if (n == 0) {\n            return 0;\n        }\n        long sum = n;\n        long sum1 = getMaxSum(n / 2);\n        long sum2 = getMaxSum(n / 3);\n        long sum3 = getMaxSum(n / 4);\n        long sum4 = getMaxSum(n / 5);\n        sum = Math.max(sum, sum1 + sum2 + sum3 + sum4);\n        return sum;",
    "        if (n < 12) return n;\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        dp[6] = 6;\n        dp[7] = 7;\n        dp[8] = 8;\n        dp[9] = 9;\n        dp[10] = 10;\n        dp[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            dp[i] = Math.max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i);\n        }\n        return dp[(int)n];",
    "        if (n == 0) {\n            return 0;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = Math.max(sum, getMaxSum(n / i));\n        }\n        return sum + n;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        long max = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = getMaxSum(n/i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max + n;",
    "        if (n == 0) {\n            return 0;\n        }\n        long a = getMaxSum(n / 2);\n        long b = getMaxSum(n / 3);\n        long c = getMaxSum(n / 4);\n        long d = getMaxSum(n / 5);\n        return Math.max(n, a + b + c + d);",
    "        if (n <= 0) {\n            return 0;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = 0;\n        sum = Math.max(sum, getMaxSum(n / 2));\n        sum = Math.max(sum, getMaxSum(n / 3));\n        sum = Math.max(sum, getMaxSum(n / 4));\n        sum = Math.max(sum, getMaxSum(n / 5));\n        return sum + n;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        sum += getMaxSum(n/2);\n        sum += getMaxSum(n/3);\n        sum += getMaxSum(n/4);\n        sum += getMaxSum(n/5);\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long max = n;\n        for (int i = 2; i <= 5; i++) {\n            long sum = getMaxSum(n / i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        if (n <= 0) {\n            return 0;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = Math.max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = 0;\n        sum = Math.max(sum, getMaxSum(n / 2));\n        sum = Math.max(sum, getMaxSum(n / 3));\n        sum = Math.max(sum, getMaxSum(n / 4));\n        sum = Math.max(sum, getMaxSum(n / 5));\n        return sum + n;",
    "        if (n <= 0) {\n            return 0;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; ++i) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long sum1 = getMaxSum(n / 2);\n        long sum2 = getMaxSum(n / 3);\n        long sum3 = getMaxSum(n / 4);\n        long sum4 = getMaxSum(n / 5);\n        sum = Math.max(sum1 + sum2 + sum3 + sum4, n);\n        return sum;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long max = n;\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = getMaxSum(n / i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        if (n <= 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 4;\n        if (n == 5) return 5;\n        long sum = 0;\n        sum = Math.max(sum, getMaxSum(n/2) + getMaxSum(n/3) + getMaxSum(n/4) + getMaxSum(n/5));\n        sum = Math.max(sum, n);\n        return sum;",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = Math.max(sum, getMaxSum(n / i));\n        }\n        return sum + n;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long max = n;\n        for (int i = 2; i <= 5; i++) {\n            max = Math.max(max, getMaxSum(n / i) + getMaxSum(n % i));\n        }\n        return max;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum += getMaxSum(n / i);\n        }\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long[] dp = new long[(int)n+1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            dp[i] = Math.max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum += getMaxSum(n / i);\n        }\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return sum > n ? sum : n;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long n1 = getMaxSum(n / 2);\n        long n2 = getMaxSum(n / 3);\n        long n3 = getMaxSum(n / 4);\n        long n4 = getMaxSum(n / 5);\n        sum = Math.max(n1 + n2 + n3 + n4, n);\n        return sum;",
    "        if (n <= 0) {\n            return 0;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = 0;\n        sum += getMaxSum(n / 2);\n        sum += getMaxSum(n / 3);\n        sum += getMaxSum(n / 4);\n        sum += getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        sum = Math.max(sum, getMaxSum(n / 2));\n        sum = Math.max(sum, getMaxSum(n / 3));\n        sum = Math.max(sum, getMaxSum(n / 4));\n        sum = Math.max(sum, getMaxSum(n / 5));\n        return sum + n;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        sum = Math.max(sum, getMaxSum(n/2) + getMaxSum(n/3) + getMaxSum(n/4) + getMaxSum(n/5));\n        sum = Math.max(sum, n);\n        return sum;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        sum = Math.max(sum, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5));\n        sum = Math.max(sum, n);\n        return sum;",
    "        if (n <= 0) {\n            return 0;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long a = getMaxSum(n / 2);\n        long b = getMaxSum(n / 3);\n        long c = getMaxSum(n / 4);\n        long d = getMaxSum(n / 5);\n        long max = Math.max(n, a + b + c + d);\n        return max;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        sum = Math.max(sum, getMaxSum(n/2) + getMaxSum(n/3) + getMaxSum(n/4) + getMaxSum(n/5));\n        sum = Math.max(sum, n);\n        return sum;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long max = 0;\n        max = Math.max(max, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5));\n        max = Math.max(max, n);\n        return max;",
    "        if(n <= 0) {\n            return 0;\n        }\n        if(n <= 5) {\n            return n;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        for(int i = 6; i <= n; i++) {\n            dp[i] = Math.max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = 0;\n        sum += getMaxSum(n/2);\n        sum += getMaxSum(n/3);\n        sum += getMaxSum(n/4);\n        sum += getMaxSum(n/5);\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long max = 0;\n        max = Math.max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n);\n        return max;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long max = Math.max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n);\n        return max;",
    "        if (n == 0) {\n            return 0;\n        }\n        long a = getMaxSum(n / 2);\n        long b = getMaxSum(n / 3);\n        long c = getMaxSum(n / 4);\n        long d = getMaxSum(n / 5);\n        return Math.max(n, a + b + c + d);",
    "        if (n == 0) {\n            return 0;\n        }\n        long a = getMaxSum(n/2);\n        long b = getMaxSum(n/3);\n        long c = getMaxSum(n/4);\n        long d = getMaxSum(n/5);\n        long e = n;\n        return Math.max(a+b+c+d, e);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long max = n;\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = getMaxSum(n / i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        long half = n / 2;\n        long third = n / 3;\n        long fourth = n / 4;\n        long fifth = n / 5;\n        sum += getMaxSum(half);\n        sum += getMaxSum(third);\n        sum += getMaxSum(fourth);\n        sum += getMaxSum(fifth);\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        sum = Math.max(sum, getMaxSum(n/2));\n        sum = Math.max(sum, getMaxSum(n/3));\n        sum = Math.max(sum, getMaxSum(n/4));\n        sum = Math.max(sum, getMaxSum(n/5));\n        return sum + n;",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        sum = Math.max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n);\n        return sum;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long[] dp = new long[(int)n+1];\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            dp[i] = Math.max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long[] dp = new long[(int)n+1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            dp[i] = Math.max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long[] dp = new long[(int)n + 1];\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            dp[i] = Math.max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i);\n        }\n        return dp[(int)n];",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 4;\n        if (n == 5) return 5;\n        long sum = 0;\n        sum = Math.max(sum, getMaxSum(n/2) + getMaxSum(n/3) + getMaxSum(n/4) + getMaxSum(n/5));\n        sum = Math.max(sum, n);\n        return sum;",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long max = n;\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = getMaxSum(n / i);\n            if (sum > max) max = sum;\n        }\n        return max;",
    "        if (n <= 0) {\n            return 0;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        long[] memo = new long[(int)n + 1];\n        Arrays.fill(memo, -1);\n        return getMaxSum(n, memo);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long maxSum = getMaxSum(n/2) + getMaxSum(n/3) + getMaxSum(n/4) + getMaxSum(n/5);\n        if (maxSum > n) {\n            return maxSum;\n        } else {\n            return n;\n        }",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long result = 0;\n        long temp = 0;\n        temp = getMaxSum(n / 2);\n        result = Math.max(result, temp);\n        temp = getMaxSum(n / 3);\n        result = Math.max(result, temp);\n        temp = getMaxSum(n / 4);\n        result = Math.max(result, temp);\n        temp = getMaxSum(n / 5);\n        result = Math.max(result, temp);\n        result += n;\n        return result;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long result = 0;\n        long temp = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        if (temp > n) {\n            result = temp;\n        } else {\n            result = n;\n        }\n        return result;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = 0;\n        sum = Math.max(sum, getMaxSum(n / 2));\n        sum = Math.max(sum, getMaxSum(n / 3));\n        sum = Math.max(sum, getMaxSum(n / 4));\n        sum = Math.max(sum, getMaxSum(n / 5));\n        return sum + n;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        if (n == 6) {\n            return 6;\n        }\n        if (n == 7) {\n            return 7;\n        }\n        if (n == 8) {\n            return 8;\n        }\n        if (n == 9) {\n            return 9;\n        }\n        if (n == 10) {\n            return 10;\n        }\n        if (n == 11) {\n            return 11;\n        }\n        if (n == 12) {\n            return 12;\n        }\n        if (n == 13) {\n            return 13;\n        }\n        if (n == 14) {\n            return 14;\n        }\n        if (n == 15) {\n            return 15;\n        }\n        if (n == 16) {\n            return 16;\n        }\n        if (n == 17) {\n            return 17;\n        }\n        if (n == 18) {\n            return 18;\n        }\n        if (n == 19) {\n            return 19;\n        }\n        if (n == 20) {\n            return 20;\n        }\n        if (n == 21) {\n            return 21;\n        }\n        if (n == 22) {\n            return 22;\n        }\n        if (n == 23) {\n            return 23;\n        }\n        if (n == 24) {\n            return 24;\n        }\n        if (n == 25) {\n            return 25;\n        }\n        if (n == 26) {\n            return 26;\n        }\n        if (n == 27) {\n            return 27;\n        }\n        if (n == 28) {\n            return 28;\n        }\n        if (n == 29) {\n            return 29;\n        }\n       ",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long max = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = getMaxSum(n / i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max + n;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long a = getMaxSum(n / 2);\n        long b = getMaxSum(n / 3);\n        long c = getMaxSum(n / 4);\n        long d = getMaxSum(n / 5);\n        long e = getMaxSum(n / 6);\n        long max = Math.max(a, b);\n        max = Math.max(max, c);\n        max = Math.max(max, d);\n        max = Math.max(max, e);\n        return Math.max(max + n, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long max = n;\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = getMaxSum(n / i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = Math.max(sum, getMaxSum(n / i));\n        }\n        return sum + n;",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = Math.max(sum, getMaxSum(n / i));\n        }\n        return sum + n;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        long max = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = getMaxSum(n / i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max + n;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            long max = i;\n            for (int j = 2; j <= 5; j++) {\n                if (i % j == 0) {\n                    max = Math.max(max, dp[i / j]);\n                }\n            }\n            dp[i] = max;\n        }\n        return dp[(int)n];",
    "        if (n < 0) return 0;\n        if (n <= 5) return n;\n        long max = n;\n        for (int i = 2; i <= 5; i++) {\n            max = Math.max(max, getMaxSum(n / i) * i);\n        }\n        return max;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        long max = n;\n        for (long i = 2; i <= 5; i++) {\n            sum = getMaxSum(n / i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long max = n;\n        long[] memo = new long[(int)n + 1];\n        memo[0] = 0;\n        memo[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            memo[i] = Math.max(memo[i / 2] + memo[i / 3] + memo[i / 4] + memo[i / 5], i);\n        }\n        return memo[(int)n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = 0;\n        sum += getMaxSum(n / 2);\n        sum += getMaxSum(n / 3);\n        sum += getMaxSum(n / 4);\n        sum += getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long max = n;\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = getMaxSum(n / i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long max = n;\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = getMaxSum(n / i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        return Math.max(getMaxSum(n/2) + getMaxSum(n/3) + getMaxSum(n/4) + getMaxSum(n/5), n);",
    "        if(n < 0) {\n            return 0;\n        }\n        if(n == 0) {\n            return 0;\n        }\n        if(n == 1) {\n            return 1;\n        }\n        long sum = 0;\n        sum += getMaxSum(n/2);\n        sum += getMaxSum(n/3);\n        sum += getMaxSum(n/4);\n        sum += getMaxSum(n/5);\n        return Math.max(sum, n);",
    "        if (n < 12) {\n            return n;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        dp[6] = 6;\n        dp[7] = 7;\n        dp[8] = 8;\n        dp[9] = 9;\n        dp[10] = 10;\n        dp[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            dp[i] = Math.max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i);\n        }\n        return dp[(int)n];",
    "        if (n < 12) {\n            return n;\n        }\n        long max = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return max > n ? max : n;",
    "        if (n <= 0) {\n            return 0;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        long half = n / 2;\n        long third = n / 3;\n        long fourth = n / 4;\n        long fifth = n / 5;\n        sum += getMaxSum(half);\n        sum += getMaxSum(third);\n        sum += getMaxSum(fourth);\n        sum += getMaxSum(fifth);\n        if (sum > n) {\n            return sum;\n        }\n        return n;",
    "        if (n == 0) {\n            return 0;\n        }\n        long sum = 0;\n        sum = Math.max(sum, getMaxSum(n / 2));\n        sum = Math.max(sum, getMaxSum(n / 3));\n        sum = Math.max(sum, getMaxSum(n / 4));\n        sum = Math.max(sum, getMaxSum(n / 5));\n        return sum + n;",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        long sum1 = getMaxSum(n / 2);\n        long sum2 = getMaxSum(n / 3);\n        long sum3 = getMaxSum(n / 4);\n        long sum4 = getMaxSum(n / 5);\n        sum = Math.max(sum1 + sum2 + sum3 + sum4, n);\n        return sum;",
    "        if (n < 12) {\n            return n;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        dp[6] = 6;\n        dp[7] = 7;\n        dp[8] = 8;\n        dp[9] = 9;\n        dp[10] = 10;\n        dp[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        return Math.max(getMaxSum(n/2) + getMaxSum(n/3) + getMaxSum(n/4) + getMaxSum(n/5), n);",
    "        if (n < 12) {\n            return n;\n        }\n        long max = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return max > n ? max : n;",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return sum > n ? sum : n;",
    "        if (n == 0) {\n            return 0;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long[] dp = new long[(int)n+1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            dp[i] = Math.max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i);\n        }\n        return dp[(int)n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if (n == 0) {\n            return 0;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = Math.max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = getMaxSum(n/2) + getMaxSum(n/3) + getMaxSum(n/4) + getMaxSum(n/5);\n        return Math.max(n, sum);",
    "        if (n < 12) {\n            return n;\n        }\n        long[] memo = new long[(int)n + 1];\n        memo[0] = 0;\n        memo[1] = 1;\n        memo[2] = 2;\n        memo[3] = 3;\n        memo[4] = 4;\n        memo[5] = 5;\n        memo[6] = 6;\n        memo[7] = 7;\n        memo[8] = 8;\n        memo[9] = 9;\n        memo[10] = 10;\n        memo[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            memo[i] = Math.max(memo[i/2] + memo[i/3] + memo[i/4] + memo[i/5], i);\n        }\n        return memo[(int)n];",
    "        // Base case\n        if (n <= 0) {\n            return 0;\n        }\n        // Recursive case\n        long max = n;\n        long max1 = getMaxSum(n/2);\n        long max2 = getMaxSum(n/3);\n        long max3 = getMaxSum(n/4);\n        long max4 = getMaxSum(n/5);\n        if (max1 + max2 + max3 + max4 > max) {\n            max = max1 + max2 + max3 + max4;\n        }\n        return max;",
    "        if(n <= 0) {\n            return 0;\n        }\n        if(n == 1) {\n            return 1;\n        }\n        long sum = 0;\n        sum += getMaxSum(n/2);\n        sum += getMaxSum(n/3);\n        sum += getMaxSum(n/4);\n        sum += getMaxSum(n/5);\n        return Math.max(sum, n);",
    "        if (n == 0) {\n            return 0;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if(n == 0) {\n            return 0;\n        }\n        long a = getMaxSum(n/2);\n        long b = getMaxSum(n/3);\n        long c = getMaxSum(n/4);\n        long d = getMaxSum(n/5);\n        long e = a + b + c + d;\n        return Math.max(e, n);",
    "        if(n <= 0) {\n            return 0;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for(int i = 2; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if (n < 12) {\n            return n;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        if (sum > n) {\n            return sum;\n        }\n        return n;",
    "        if (n < 12) {\n            return n;\n        }\n        long a = getMaxSum(n / 2);\n        long b = getMaxSum(n / 3);\n        long c = getMaxSum(n / 4);\n        long d = getMaxSum(n / 5);\n        return Math.max(a + b + c + d, n);",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            long sum = 0;\n            for (int j = 2; j <= 5; j++) {\n                if (i - j >= 0) {\n                    sum += dp[i - j];\n                }\n            }\n            dp[i] = Math.max(sum, i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = Math.max(sum, getMaxSum(n / i));\n        }\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        sum = Math.max(sum, getMaxSum(n / 2));\n        sum = Math.max(sum, getMaxSum(n / 3));\n        sum = Math.max(sum, getMaxSum(n / 4));\n        sum = Math.max(sum, getMaxSum(n / 5));\n        return sum + n;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if (n < 12) {\n            return n;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return sum > n ? sum : n;",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 4;\n        if (n == 5) return 5;\n        if (n == 6) return 6;\n        if (n == 7) return 7;\n        if (n == 8) return 8;\n        if (n == 9) return 9;\n        if (n == 10) return 10;\n        if (n == 11) return 11;\n        if (n == 12) return 13;\n        if (n == 13) return 14;\n        if (n == 14) return 15;\n        if (n == 15) return 16;\n        if (n == 16) return 17;\n        if (n == 17) return 18;\n        if (n == 18) return 19;\n        if (n == 19) return 20;\n        if (n == 20) return 22;\n        if (n == 21) return 23;\n        if (n == 22) return 24;\n        if (n == 23) return 25;\n        if (n == 24) return 26;\n        if (n == 25) return 27;\n        if (n == 26) return 28;\n        if (n == 27) return 29;\n        if (n == 28) return 30;\n        if (n == 29) return 31;\n        if (n == 30) return 33;\n        if (n == 31) return 34;\n        if (n == 32) return 35;\n        if (n == 33) return 36;\n        if (n == 34) return 37;\n        if (n == 35) return 38;\n        if (n == 36) return 39;\n        if (n == 37) return 40;\n        if (n == 38) return 41;\n        if (n == 39) return 42;\n        if (n == 40) return 44;\n        if (n == 41) return 45;\n        if (n == 42) return 46;\n        if (n == 43) return 47;\n        if (n == 44) return 48;\n        if (n == 45) return 49;\n        if (n ==",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        sum = Math.max(sum, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5));\n        sum = Math.max(sum, n);\n        return sum;",
    "        if (n == 0) {\n            return 0;\n        }\n        long a = getMaxSum(n / 2);\n        long b = getMaxSum(n / 3);\n        long c = getMaxSum(n / 4);\n        long d = getMaxSum(n / 5);\n        long e = n;\n        return Math.max(a + b + c + d, e);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            dp[i] = Math.max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum += getMaxSum(n / i);\n        }\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return sum > n ? sum : n;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        sum = Math.max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n);\n        return sum;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long a = getMaxSum(n / 2);\n        long b = getMaxSum(n / 3);\n        long c = getMaxSum(n / 4);\n        long d = getMaxSum(n / 5);\n        long e = n;\n        return Math.max(a + b + c + d, e);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return n;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long[] dp = new long[(int) n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int) n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        dp[6] = 6;\n        dp[7] = 7;\n        dp[8] = 8;\n        dp[9] = 9;\n        dp[10] = 10;\n        dp[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            dp[i] = Math.max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long max = 0;\n        for (int i = 2; i <= 5; i++) {\n            max = Math.max(max, getMaxSum(n / i));\n        }\n        return max + n;",
    "        if(n <= 0) {\n            return 0;\n        }\n        if(n == 1) {\n            return 1;\n        }\n        long sum = getMaxSum(n/2) + getMaxSum(n/3) + getMaxSum(n/4) + getMaxSum(n/5);\n        return Math.max(n, sum);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long n2 = getMaxSum(n / 2);\n        long n3 = getMaxSum(n / 3);\n        long n4 = getMaxSum(n / 4);\n        long n5 = getMaxSum(n / 5);\n        long sum = n2 + n3 + n4 + n5;\n        return Math.max(sum, n);",
    "        if (n < 12) {\n            return n;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        dp[6] = 6;\n        dp[7] = 7;\n        dp[8] = 8;\n        dp[9] = 9;\n        dp[10] = 10;\n        dp[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            dp[i] = Math.max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        sum = Math.max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n);\n        return sum;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        sum = Math.max(sum, getMaxSum(n / 2));\n        sum = Math.max(sum, getMaxSum(n / 3));\n        sum = Math.max(sum, getMaxSum(n / 4));\n        sum = Math.max(sum, getMaxSum(n / 5));\n        return sum + n;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        return Math.max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n);",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 4;\n        if (n == 5) return 5;\n        long sum = 0;\n        sum = Math.max(sum, getMaxSum(n/2));\n        sum = Math.max(sum, getMaxSum(n/3));\n        sum = Math.max(sum, getMaxSum(n/4));\n        sum = Math.max(sum, getMaxSum(n/5));\n        return sum + n;",
    "        if (n < 12) {\n            return n;\n        }\n        long n2 = getMaxSum(n / 2);\n        long n3 = getMaxSum(n / 3);\n        long n4 = getMaxSum(n / 4);\n        long n5 = getMaxSum(n / 5);\n        return Math.max(n, n2 + n3 + n4 + n5);",
    "        if (n == 0) {\n            return 0;\n        }\n        long sum = n;\n        long sum1 = getMaxSum(n / 2);\n        long sum2 = getMaxSum(n / 3);\n        long sum3 = getMaxSum(n / 4);\n        long sum4 = getMaxSum(n / 5);\n        if (sum1 + sum2 + sum3 + sum4 > n) {\n            sum = sum1 + sum2 + sum3 + sum4;\n        }\n        return sum;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = 0;\n        long max = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = getMaxSum(n / i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max + n;",
    "        if (n <= 0) {\n            return 0;\n        }\n        long[] cache = new long[(int) n + 1];\n        Arrays.fill(cache, -1);\n        return getMaxSum(n, cache);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long max = n;\n        long a = getMaxSum(n/2);\n        long b = getMaxSum(n/3);\n        long c = getMaxSum(n/4);\n        long d = getMaxSum(n/5);\n        long sum = a + b + c + d;\n        if (sum > max) {\n            max = sum;\n        }\n        return max;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long maxSum = n;\n        for (int i = 2; i <= 5; i++) {\n            maxSum = Math.max(maxSum, getMaxSum(n / i) + getMaxSum(n % i));\n        }\n        return maxSum;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        return Math.max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5));",
    "        if (n <= 0) {\n            return 0;\n        }\n        long[] dp = new long[(int) n + 1];\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int) n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            dp[i] = Math.max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = Math.max(sum, getMaxSum(n / i));\n        }\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = Math.max(sum, getMaxSum(n / i));\n        }\n        return sum + n;",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long[] dp = new long[(int)n+1];\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            dp[i] = Math.max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        if (n == 6) return 9;\n        long max = n;\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum += getMaxSum(n / i);\n        }\n        max = Math.max(max, sum);\n        return max;",
    "        if (n <= 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 4;\n        if (n == 5) return 5;\n        return Math.max(n, getMaxSum(n/2) + getMaxSum(n/3) + getMaxSum(n/4) + getMaxSum(n/5));",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = Math.max(sum, getMaxSum(n / i));\n        }\n        return sum + n;",
    "        if (n < 12) {\n            return n;\n        }\n        long n1 = getMaxSum(n / 2);\n        long n2 = getMaxSum(n / 3);\n        long n3 = getMaxSum(n / 4);\n        long n4 = getMaxSum(n / 5);\n        return Math.max(n, n1 + n2 + n3 + n4);",
    "        if (n == 0) {\n            return 0;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if(n <= 0) return 0;\n        if(n <= 5) return n;\n        long[] dp = new long[(int)n+1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        for(int i = 6; i <= n; i++) {\n            dp[i] = Math.max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long maxSum = 0;\n        for (int i = 2; i <= 5; i++) {\n            maxSum = Math.max(maxSum, getMaxSum(n / i));\n        }\n        maxSum += n;\n        return maxSum;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        sum += getMaxSum(n / 2);\n        sum += getMaxSum(n / 3);\n        sum += getMaxSum(n / 4);\n        sum += getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long max = Math.max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n);\n        return max;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        return Math.max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        long a = getMaxSum(n / 2);\n        long b = getMaxSum(n / 3);\n        long c = getMaxSum(n / 4);\n        long d = getMaxSum(n / 5);\n        long e = n;\n        return Math.max(a + b + c + d, e);",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = Math.max(sum, getMaxSum(n / i));\n        }\n        return sum + n;",
    "        if (n < 12) {\n            return n;\n        }\n        long n2 = getMaxSum(n / 2);\n        long n3 = getMaxSum(n / 3);\n        long n4 = getMaxSum(n / 4);\n        long n5 = getMaxSum(n / 5);\n        return Math.max(n, n2 + n3 + n4 + n5);",
    "        if (n <= 0) {\n            return 0;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = Math.max(sum, getMaxSum(n / i));\n        }\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum += getMaxSum(n / i);\n        }\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = 0;\n        sum = Math.max(sum, getMaxSum(n / 2));\n        sum = Math.max(sum, getMaxSum(n / 3));\n        sum = Math.max(sum, getMaxSum(n / 4));\n        sum = Math.max(sum, getMaxSum(n / 5));\n        return sum + n;",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long[] dp = new long[(int)n + 1];\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        sum = Math.max(sum, getMaxSum(n / 2));\n        sum = Math.max(sum, getMaxSum(n / 3));\n        sum = Math.max(sum, getMaxSum(n / 4));\n        sum = Math.max(sum, getMaxSum(n / 5));\n        return sum + n;",
    "        if (n == 0) {\n            return 0;\n        }\n        long a = getMaxSum(n / 2);\n        long b = getMaxSum(n / 3);\n        long c = getMaxSum(n / 4);\n        long d = getMaxSum(n / 5);\n        return Math.max(a + b + c + d, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = 0;\n        sum += getMaxSum(n / 2);\n        sum += getMaxSum(n / 3);\n        sum += getMaxSum(n / 4);\n        sum += getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        return Math.max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = Math.max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i);\n        }\n        return dp[(int)n];",
    "        if (n < 12) {\n            return n;\n        }\n        long n1 = getMaxSum(n / 2);\n        long n2 = getMaxSum(n / 3);\n        long n3 = getMaxSum(n / 4);\n        long n4 = getMaxSum(n / 5);\n        return Math.max(n1 + n2 + n3 + n4, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        sum = Math.max(sum, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5));\n        sum = Math.max(sum, n);\n        return sum;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = 0;\n        for (long i = 2; i <= 5; i++) {\n            sum += getMaxSum(n / i);\n        }\n        return Math.max(sum, n);",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        if (n <= 10) return n;\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        if (sum > n) {\n            return sum;\n        }\n        return n;",
    "        if (n < 12) {\n            return n;\n        }\n        long[] dp = new long[(int) n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        dp[6] = 6;\n        dp[7] = 7;\n        dp[8] = 8;\n        dp[9] = 9;\n        dp[10] = 10;\n        dp[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int) n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = 0;\n        if (n % 2 == 0) {\n            sum += getMaxSum(n / 2);\n        }\n        if (n % 3 == 0) {\n            sum += getMaxSum(n / 3);\n        }\n        if (n % 4 == 0) {\n            sum += getMaxSum(n / 4);\n        }\n        if (n % 5 == 0) {\n            sum += getMaxSum(n / 5);\n        }\n        return Math.max(sum, n);",
    "        if (n < 12) {\n            return n;\n        }\n        long maxSum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(maxSum, n);",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long[] dp = new long[(int)n+1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        for (int i = 6; i <= n; i++) {\n            dp[i] = Math.max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i);\n        }\n        return dp[(int)n];",
    "        if (n < 12) {\n            return n;\n        }\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        dp[2] = 2;\n        dp[3] = 3;\n        dp[4] = 4;\n        dp[5] = 5;\n        dp[6] = 6;\n        dp[7] = 7;\n        dp[8] = 8;\n        dp[9] = 9;\n        dp[10] = 10;\n        dp[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            dp[i] = Math.max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i);\n        }\n        return dp[(int)n];",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long result = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(result, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long a = getMaxSum(n / 2);\n        long b = getMaxSum(n / 3);\n        long c = getMaxSum(n / 4);\n        long d = getMaxSum(n / 5);\n        long max = Math.max(a + b + c + d, n);\n        return max;",
    "        if (n <= 0) return 0;\n        if (n <= 5) return n;\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = Math.max(sum, getMaxSum(n / i));\n        }\n        return Math.max(sum, n);",
    "        if (n == 0) {\n            return 0;\n        }\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = Math.max(sum, getMaxSum(n / i));\n        }\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n < 12) {\n            return n;\n        }\n        long[] cache = new long[(int)n + 1];\n        cache[0] = 0;\n        cache[1] = 1;\n        cache[2] = 2;\n        cache[3] = 3;\n        cache[4] = 4;\n        cache[5] = 5;\n        cache[6] = 6;\n        cache[7] = 7;\n        cache[8] = 8;\n        cache[9] = 9;\n        cache[10] = 10;\n        cache[11] = 11;\n        for (int i = 12; i <= n; i++) {\n            cache[i] = Math.max(cache[i / 2] + cache[i / 3] + cache[i / 4] + cache[i / 5], i);\n        }\n        return cache[(int)n];",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        long sum = 0;\n        sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n        return Math.max(sum, n);",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = getMaxSum(n/2) + getMaxSum(n/3) + getMaxSum(n/4) + getMaxSum(n/5);\n        if (sum > n) {\n            return sum;\n        }\n        return n;",
    "        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 5) {\n            return n;\n        }\n        long maxSum = n;\n        long sum = 0;\n        for (int i = 2; i <= 5; i++) {\n            sum = getMaxSum(n / i);\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        return maxSum;"
  ]
}