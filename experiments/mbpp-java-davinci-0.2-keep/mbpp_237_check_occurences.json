{
  "name": "mbpp_237_check_occurences",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;",
    "        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;",
    "        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;",
    "        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;",
    "        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;",
    "        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;",
    "        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;",
    "        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;",
    "        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long element : test_list) {\n            if (occurences.containsKey(element)) {\n                occurences.put(element, occurences.get(element) + 1);\n            } else {\n                occurences.put(element, 1L);\n            }\n        }\n        return occurences;",
    "        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;",
    "        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;",
    "        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;",
    "        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;",
    "        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for(int i = 0; i < test_list.size(); i++) {\n            if(occurences.containsKey(test_list.get(i))) {\n                occurences.put(test_list.get(i), occurences.get(test_list.get(i)) + 1);\n            } else {\n                occurences.put(test_list.get(i), 1L);\n            }\n        }\n        return occurences;",
    "        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;",
    "        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;",
    "        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;",
    "        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;",
    "        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;",
    "        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;"
  ]
}