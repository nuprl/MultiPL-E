{
  "name": "mbpp_777_find_sum",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a python function to find the sum of non-repeated elements in a given list.\n    public static long findSum(ArrayList<Long> arr) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(findSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)1l, (long)1l, (long)4l, (long)5l, (long)6l)))) == (21l));\n    assert(findSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)9l, (long)4l, (long)2l, (long)10l, (long)10l, (long)45l, (long)4l)))) == (71l));\n    assert(findSum((new ArrayList<Long>(Arrays.asList((long)12l, (long)10l, (long)9l, (long)45l, (long)2l, (long)10l, (long)10l, (long)45l, (long)10l)))) == (78l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (i == arr.lastIndexOf(arr.get(i))) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;",
    "        long sum = 0;\n        for (Long i : arr) {\n            if (Collections.frequency(arr, i) == 1) {\n                sum += i;\n            }\n        }\n        return sum;",
    "        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n            if (!arr.subList(i + 1, arr.size()).contains(num)) {\n                sum += num;\n            }\n        }\n        return sum;",
    "        return arr.stream().distinct().mapToLong(Long::longValue).sum();",
    "        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n            if (arr.indexOf(num) == arr.lastIndexOf(num)) {\n                sum += num;\n            }\n        }\n        return sum;",
    "        HashSet<Long> set = new HashSet<>();\n        long sum = 0;\n        for (long i : arr) {\n            if (!set.contains(i)) {\n                sum += i;\n                set.add(i);\n            }\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i : arr) {\n            if (!arr.contains(i)) {\n                sum += i;\n            }\n        }\n        return sum;",
    "        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.indexOf(arr.get(i)) == arr.lastIndexOf(arr.get(i))) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;",
    "        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.indexOf(arr.get(i)) == arr.lastIndexOf(arr.get(i))) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;",
    "        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (!arr.subList(i + 1, arr.size()).contains(arr.get(i))) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;",
    "        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long curr = arr.get(i);\n            if (arr.indexOf(curr) == arr.lastIndexOf(curr)) {\n                sum += curr;\n            }\n        }\n        return sum;",
    "        // Write your code here\n        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n            if (arr.indexOf(num) == arr.lastIndexOf(num)) {\n                sum += num;\n            }\n        }\n        return sum;",
    "        return arr.stream().distinct().mapToLong(x -> x).sum();",
    "        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n            if (!arr.contains(num)) {\n                sum += num;\n            }\n        }\n        return sum;",
    "        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n            if (!arr.contains(num)) {\n                sum += num;\n            }\n        }\n        return sum;",
    "        return arr.stream().distinct().mapToLong(Long::longValue).sum();",
    "        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long curr = arr.get(i);\n            if (arr.indexOf(curr) == arr.lastIndexOf(curr)) {\n                sum += curr;\n            }\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i : arr) {\n            if (!arr.contains(i)) {\n                sum += i;\n            }\n        }\n        return sum;",
    "        // Write your code here\n        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.indexOf(arr.get(i)) == arr.lastIndexOf(arr.get(i))) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;",
    "        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n            if (!arr.subList(i + 1, arr.size()).contains(num)) {\n                sum += num;\n            }\n        }\n        return sum;"
  ]
}