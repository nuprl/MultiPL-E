language: java
name: HumanEval_19_sort_numbers
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] digits = new int[10];\n        for (String s : numbers.split(\"\
    \ \")) {\n            switch (s) {\n                case \"zero\":\n         \
    \           digits[0]++;\n                    break;\n                case \"\
    one\":\n                    digits[1]++;\n                    break;\n       \
    \         case \"two\":\n                    digits[2]++;\n                  \
    \  break;\n                case \"three\":\n                    digits[3]++;\n\
    \                    break;\n                case \"four\":\n                \
    \    digits[4]++;\n                    break;\n                case \"five\":\n\
    \                    digits[5]++;\n                    break;\n              \
    \  case \"six\":\n                    digits[6]++;\n                    break;\n\
    \                case \"seven\":\n                    digits[7]++;\n         \
    \           break;\n                case \"eight\":\n                    digits[8]++;\n\
    \                    break;\n                case \"nine\":\n                \
    \    digits[9]++;\n                    break;\n            }\n        }\n    \
    \    StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < 10;\
    \ i++) {\n            for (int j = 0; j < digits[i]; j++) {\n                switch\
    \ (i) {\n                    case 0:\n                        sb.append(\"zero\
    \ \");\n                        break;\n                    case 1:\n        \
    \                sb.append(\"one \");\n                        break;\n      \
    \              case 2:\n                        sb.append(\"two \");\n       \
    \                 break;\n                    case 3:\n                      \
    \  sb.append(\"three \");\n                        break;\n                  \
    \  case 4:\n                        sb.append(\"four \");\n                  \
    \      break;\n                    case 5:\n                        sb.append(\"\
    five \");\n                        break;\n                    case 6:\n     \
    \                   sb.append(\"six \");\n                        break;\n   \
    \                 case 7:\n                        sb.append(\"seven \");\n  \
    \                      break;\n                    case 8:\n                 \
    \       sb.append(\"eight \");\n                        break;\n             \
    \       case 9:\n                        sb.append(\"nine \");\n             \
    \           break;\n                }\n            }\n        }\n        return\
    \ sb.toString().trim();\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] num = new int[10];\n        for (String str : numbers.split(\"\
    \ \")) {\n            num[numeralToNum(str)]++;\n        }\n        StringBuilder\
    \ res = new StringBuilder();\n        for (int i = 0; i < 10; i++) {\n       \
    \     if (num[i] == 0) continue;\n            for (int j = 0; j < num[i]; j++)\
    \ {\n                res.append(numToNumeral(i));\n                res.append(\"\
    \ \");\n            }\n        }\n        return res.toString().trim();\n}\n \
    \   public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplrd39_xr.java:17: error: cannot find symbol\n            num[numeralToNum(str)]++;\n\
    \                ^\n  symbol:   method numeralToNum(String)\n  location: class\
    \ Problem\n/tmp/tmplrd39_xr.java:23: error: cannot find symbol\n             \
    \   res.append(numToNumeral(i));\n                           ^\n  symbol:   method\
    \ numToNumeral(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] numArray = new int[numbers.split(\" \").length];\n        int\
    \ index = 0;\n        for (String num : numbers.split(\" \")) {\n            numArray[index]\
    \ = toInt(num);\n            index++;\n        }\n        Arrays.sort(numArray);\n\
    \        String nums = \"\";\n        for (int i : numArray) {\n            nums\
    \ += toWord(i) + \" \";\n        }\n        return nums.trim();\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp76doe3is.java:18: error: cannot find symbol\n            numArray[index]\
    \ = toInt(num);\n                              ^\n  symbol:   method toInt(String)\n\
    \  location: class Problem\n/tmp/tmp76doe3is.java:24: error: cannot find symbol\n\
    \            nums += toWord(i) + \" \";\n                    ^\n  symbol:   method\
    \ toWord(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] items = numbers.split(\" \");\n        int[] ordered = Arrays.stream(items).mapToInt(item\
    \ -> {\n            switch (item) {\n                case \"zero\":\n        \
    \            return 0;\n                case \"one\":\n                    return\
    \ 1;\n                case \"two\":\n                    return 2;\n         \
    \       case \"three\":\n                    return 3;\n                case \"\
    four\":\n                    return 4;\n                case \"five\":\n     \
    \               return 5;\n                case \"six\":\n                   \
    \ return 6;\n                case \"seven\":\n                    return 7;\n\
    \                case \"eight\":\n                    return 8;\n            \
    \    case \"nine\":\n                    return 9;\n                default:\n\
    \                    return -1;\n            }\n        }).toArray();\n      \
    \  Arrays.sort(ordered);\n        return Arrays.stream(ordered).mapToObj(item\
    \ -> {\n            switch (item) {\n                case 0:\n               \
    \     return \"zero\";\n                case 1:\n                    return \"\
    one\";\n                case 2:\n                    return \"two\";\n       \
    \         case 3:\n                    return \"three\";\n                case\
    \ 4:\n                    return \"four\";\n                case 5:\n        \
    \            return \"five\";\n                case 6:\n                    return\
    \ \"six\";\n                case 7:\n                    return \"seven\";\n \
    \               case 8:\n                    return \"eight\";\n             \
    \   case 9:\n                    return \"nine\";\n                default:\n\
    \                    return \"\";\n            }\n        }).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums,\
    \ new Comparator<String>() {\n                public int compare(String a, String\
    \ b) {\n                    return number_from_numeral(a) - number_from_numeral(b);\n\
    \                }\n            });\n        return String.join(\" \", nums);\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2d37ce9d.java:18: error: cannot find symbol\n                 \
    \   return number_from_numeral(a) - number_from_numeral(b);\n                \
    \           ^\n  symbol: method number_from_numeral(String)\n/tmp/tmp2d37ce9d.java:18:\
    \ error: cannot find symbol\n                    return number_from_numeral(a)\
    \ - number_from_numeral(b);\n                                                \
    \    ^\n  symbol: method number_from_numeral(String)\n2 errors\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Your code here\n        String [] ar = numbers.split(\" \");\n\
    \        String result = \"\";\n        int [] num = new int[ar.length];\n   \
    \     for(int i = 0; i < ar.length; i++){\n            if(ar[i].equals(\"zero\"\
    )) num[i] = 0;\n            if(ar[i].equals(\"one\")) num[i] = 1;\n          \
    \  if(ar[i].equals(\"two\")) num[i] = 2;\n            if(ar[i].equals(\"three\"\
    )) num[i] = 3;\n            if(ar[i].equals(\"four\")) num[i] = 4;\n         \
    \   if(ar[i].equals(\"five\")) num[i] = 5;\n            if(ar[i].equals(\"six\"\
    )) num[i] = 6;\n            if(ar[i].equals(\"seven\")) num[i] = 7;\n        \
    \    if(ar[i].equals(\"eight\")) num[i] = 8;\n            if(ar[i].equals(\"nine\"\
    )) num[i] = 9;\n        }\n        Arrays.sort(num);\n        for(int i = 0; i\
    \ < num.length; i++){\n            if(num[i] == 0) result += \"zero \";\n    \
    \        if(num[i] == 1) result += \"one \";\n            if(num[i] == 2) result\
    \ += \"two \";\n            if(num[i] == 3) result += \"three \";\n          \
    \  if(num[i] == 4) result += \"four \";\n            if(num[i] == 5) result +=\
    \ \"five \";\n            if(num[i] == 6) result += \"six \";\n            if(num[i]\
    \ == 7) result += \"seven \";\n            if(num[i] == 8) result += \"eight \"\
    ;\n            if(num[i] == 9) result += \"nine \";\n        }\n        return\
    \ result.trim();\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgxe803sg.java:47)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numStr = numbers.split(\" \");\n        List<Integer> nums\
    \ = new ArrayList<>();\n        for (String num : numStr) {\n            nums.add(numeralToInteger(num));\n\
    \        }\n        Collections.sort(nums);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int num : nums) {\n            sb.append(integerToNumeral(num) +\
    \ \" \");\n        }\n        return sb.toString().trim();\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcjlfng6p.java:18: error: cannot find symbol\n            nums.add(numeralToInteger(num));\n\
    \                     ^\n  symbol:   method numeralToInteger(String)\n  location:\
    \ class Problem\n/tmp/tmpcjlfng6p.java:23: error: cannot find symbol\n       \
    \     sb.append(integerToNumeral(num) + \" \");\n                      ^\n  symbol:\
    \   method integerToNumeral(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // TODO: implement sortNumbers\n        HashMap<String, Integer>\
    \ numeralMap = new HashMap<String, Integer>();\n        numeralMap.put(\"zero\"\
    , 0);\n        numeralMap.put(\"one\", 1);\n        numeralMap.put(\"two\", 2);\n\
    \        numeralMap.put(\"three\", 3);\n        numeralMap.put(\"four\", 4);\n\
    \        numeralMap.put(\"five\", 5);\n        numeralMap.put(\"six\", 6);\n \
    \       numeralMap.put(\"seven\", 7);\n        numeralMap.put(\"eight\", 8);\n\
    \        numeralMap.put(\"nine\", 9);\n        String[] tokens = numbers.split(\"\
    \ \");\n        int[] array = new int[tokens.length];\n        for (int i = 0;\
    \ i < tokens.length; i++) {\n            array[i] = numeralMap.get(tokens[i]);\n\
    \        }\n        Arrays.sort(array);\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < array.length; i++) {\n            result.append(array[i]);\n\
    \            if (i < array.length - 1) {\n                result.append(\" \"\
    );\n            }\n        }\n        return result.toString();\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.HashMap.get(Object)\"\
    \ is null\n\tat Problem.sortNumbers(tmp3kxsbb1c.java:30)\n\tat Problem.main(tmp3kxsbb1c.java:43)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> numbersList = Arrays.asList(numbers.split(\" \"));\n\
    \        ArrayList<Integer> intNumbers = new ArrayList<Integer>();\n        for\
    \ (String number: numbersList) {\n            int integer = convertToInteger(number);\n\
    \            intNumbers.add(integer);\n        }\n        Collections.sort(intNumbers);\n\
    \        List<String> numbersList2 = new ArrayList<String>();\n        for (Integer\
    \ integer: intNumbers) {\n            String number = convertToNumber(integer);\n\
    \            numbersList2.add(number);\n        }\n        String numbers2 = String.join(\"\
    \ \", numbersList2);\n        return numbers2;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgkye7s3k.java:18: error: cannot find symbol\n            int integer\
    \ = convertToInteger(number);\n                          ^\n  symbol:   method\
    \ convertToInteger(String)\n  location: class Problem\n/tmp/tmpgkye7s3k.java:24:\
    \ error: cannot find symbol\n            String number = convertToNumber(integer);\n\
    \                            ^\n  symbol:   method convertToNumber(Integer)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n      String[] split = numbers.split(\" \");\n      Map<String, Integer>\
    \ map = new HashMap<>();\n      map.put(\"zero\", 0);\n      map.put(\"one\",\
    \ 1);\n      map.put(\"two\", 2);\n      map.put(\"three\", 3);\n      map.put(\"\
    four\", 4);\n      map.put(\"five\", 5);\n      map.put(\"six\", 6);\n      map.put(\"\
    seven\", 7);\n      map.put(\"eight\", 8);\n      map.put(\"nine\", 9);\n    \
    \  List<Integer> nums = new ArrayList<>();\n      for (String s : split)\n   \
    \   {\n        nums.add(map.get(s));\n      }\n      Collections.sort(nums);\n\
    \      List<String> output = new ArrayList<>();\n      for (Integer n : nums)\n\
    \      {\n        for (Map.Entry<String, Integer> entry : map.entrySet())\n  \
    \      {\n          if (entry.getValue().equals(n))\n          {\n           \
    \ output.add(entry.getKey());\n          }\n        }\n      }\n      return String.join(\"\
    \ \", output);\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011496
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> unordered = Arrays.stream(numbers.split(\" \")).map(number\
    \ -> {\n            return switch (number) {\n                case \"zero\" ->\
    \ 0;\n                case \"one\" -> 1;\n                case \"two\" -> 2;\n\
    \                case \"three\" -> 3;\n                case \"four\" -> 4;\n \
    \               case \"five\" -> 5;\n                case \"six\" -> 6;\n    \
    \            case \"seven\" -> 7;\n                case \"eight\" -> 8;\n    \
    \            case \"nine\" -> 9;\n                default -> -1;\n           \
    \ };\n        }).collect(Collectors.toList());\n        Collections.sort(unordered);\n\
    \        return unordered.stream().map(number -> {\n            return switch\
    \ (number) {\n                case 0 -> \"zero\";\n                case 1 -> \"\
    one\";\n                case 2 -> \"two\";\n                case 3 -> \"three\"\
    ;\n                case 4 -> \"four\";\n                case 5 -> \"five\";\n\
    \                case 6 -> \"six\";\n                case 7 -> \"seven\";\n  \
    \              case 8 -> \"eight\";\n                case 9 -> \"nine\";\n   \
    \             default -> \"\";\n            };\n        }).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011497
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // write code here\n        String[] numArray = numbers.split(\"\
    \ \");\n        TreeMap<Integer, String> map = new TreeMap<>();\n        for (String\
    \ s : numArray) {\n            map.put(getNum(s), s);\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (Map.Entry<Integer, String> entry : map.entrySet())\
    \ {\n            sb.append(entry.getValue() + \" \");\n        }\n        return\
    \ sb.toString().trim();\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc3mqd1mj.java:19: error: cannot find symbol\n            map.put(getNum(s),\
    \ s);\n                    ^\n  symbol:   method getNum(String)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return Arrays.stream(numbers.split(\" \"))\n            .map(x ->\
    \ new Pair<Integer, String>(convertNumeralToDigit(x), x))\n            .sorted(Comparator.comparing(Pair::getValue0))\n\
    \            .map(Pair::getValue1)\n            .collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgmymy0sl.java:16: error: cannot find symbol\n            .map(x\
    \ -> new Pair<Integer, String>(convertNumeralToDigit(x), x))\n               \
    \                                 ^\n  symbol:   method convertNumeralToDigit(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String string = new String();\n        String[] stringArray = numbers.split(\"\
    \ \");\n        int[] intArray = new int[stringArray.length];\n        for (int\
    \ i = 0; i < stringArray.length; i++) {\n            switch (stringArray[i]) {\n\
    \                case \"zero\":\n                    intArray[i] = 0;\n      \
    \              break;\n                case \"one\":\n                    intArray[i]\
    \ = 1;\n                    break;\n                case \"two\":\n          \
    \          intArray[i] = 2;\n                    break;\n                case\
    \ \"three\":\n                    intArray[i] = 3;\n                    break;\n\
    \                case \"four\":\n                    intArray[i] = 4;\n      \
    \              break;\n                case \"five\":\n                    intArray[i]\
    \ = 5;\n                    break;\n                case \"six\":\n          \
    \          intArray[i] = 6;\n                    break;\n                case\
    \ \"seven\":\n                    intArray[i] = 7;\n                    break;\n\
    \                case \"eight\":\n                    intArray[i] = 8;\n     \
    \               break;\n                case \"nine\":\n                    intArray[i]\
    \ = 9;\n                    break;\n            }\n        }\n        Arrays.sort(intArray);\n\
    \        for (int i = 0; i < intArray.length; i++) {\n            switch (intArray[i])\
    \ {\n                case 0:\n                    string += \"zero \";\n     \
    \               break;\n                case 1:\n                    string +=\
    \ \"one \";\n                    break;\n                case 2:\n           \
    \         string += \"two \";\n                    break;\n                case\
    \ 3:\n                    string += \"three \";\n                    break;\n\
    \                case 4:\n                    string += \"four \";\n         \
    \           break;\n                case 5:\n                    string += \"\
    five \";\n                    break;\n                case 6:\n              \
    \      string += \"six \";\n                    break;\n                case 7:\n\
    \                    string += \"seven \";\n                    break;\n     \
    \           case 8:\n                    string += \"eight \";\n             \
    \       break;\n                case 9:\n                    string += \"nine\
    \ \";\n                    break;\n            }\n        }\n        return string.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp85izb_ef.java:90)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> num_list = Arrays.asList(numbers.split(\" \"));\n  \
    \      List<Integer> num_ints = new ArrayList<Integer>();\n        Map<String,\
    \ Integer> word_to_int = new HashMap<String, Integer>();\n        word_to_int.put(\"\
    zero\", 0);\n        word_to_int.put(\"one\", 1);\n        word_to_int.put(\"\
    two\", 2);\n        word_to_int.put(\"three\", 3);\n        word_to_int.put(\"\
    four\", 4);\n        word_to_int.put(\"five\", 5);\n        word_to_int.put(\"\
    six\", 6);\n        word_to_int.put(\"seven\", 7);\n        word_to_int.put(\"\
    eight\", 8);\n        word_to_int.put(\"nine\", 9);\n        for (String num :\
    \ num_list) {\n            num_ints.add(word_to_int.get(num));\n        }\n  \
    \      Collections.sort(num_ints);\n        List<String> num_strings = new ArrayList<String>();\n\
    \        for (Integer num : num_ints) {\n            for (Map.Entry<String, Integer>\
    \ entry : word_to_int.entrySet()) {\n                if (entry.getValue().equals(num))\
    \ {\n                    num_strings.add(entry.getKey());\n                }\n\
    \            }\n        }\n        return String.join(\" \", num_strings);\n}\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums,\
    \ (a, b) -> Integer.parseInt(a) - Integer.parseInt(b));\n        return String.join(\"\
    \ \", nums);\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"five\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.lambda$sortNumbers$0(tmpo0nod8et.java:16)\n\tat java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)\n\
    \tat java.base/java.util.TimSort.sort(TimSort.java:220)\n\tat java.base/java.util.Arrays.sort(Arrays.java:1233)\n\
    \tat Problem.sortNumbers(tmpo0nod8et.java:16)\n\tat Problem.main(tmpo0nod8et.java:22)\n"
  stdout: ''
  timestamp: 1660011497
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Convert the string to a list of strings, then sort the list and\
    \ then convert it back to a string\n        return Arrays.stream(numbers.split(\"\
    \ \")).sorted().collect(Collectors.joining(\" \"));\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppf42c44u.java:21)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        final List<String> words = Arrays.asList(numbers.split(\" \"));\n\
    \        final List<Integer> integers = words.stream().map(word -> Integer.parseInt(Numbers.get(word))).collect(Collectors.toList());\n\
    \        Collections.sort(integers);\n        return integers.stream().map(integer\
    \ -> Numbers.get(integer)).collect(Collectors.joining(\" \"));\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk2wuq3yx.java:16: error: cannot find symbol\n        final List<Integer>\
    \ integers = words.stream().map(word -> Integer.parseInt(Numbers.get(word))).collect(Collectors.toList());\n\
    \                                                                            \
    \       ^\n  symbol:   variable Numbers\n  location: class Problem\n/tmp/tmpk2wuq3yx.java:16:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \      final List<Integer> integers = words.stream().map(word -> Integer.parseInt(Numbers.get(word))).collect(Collectors.toList());\n\
    \                                                                            \
    \                                  ^\n    equality constraints: Integer\n    lower\
    \ bounds: Object\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>toList()\n/tmp/tmpk2wuq3yx.java:18: error: cannot find symbol\n\
    \        return integers.stream().map(integer -> Numbers.get(integer)).collect(Collectors.joining(\"\
    \ \"));\n                                                ^\n  symbol:   variable\
    \ Numbers\n  location: class Problem\n/tmp/tmpk2wuq3yx.java:18: error: no suitable\
    \ method found for collect(Collector<CharSequence,CAP#1,String>)\n        return\
    \ integers.stream().map(integer -> Numbers.get(integer)).collect(Collectors.joining(\"\
    \ \"));\n                                                                    \
    \ ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,? super Object>,BiConsumer<R#1,R#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) R#1\n        (actual\
    \ and formal argument lists differ in length))\n    method Stream.<R#2,A>collect(Collector<?\
    \ super Object,A,R#2>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String> cannot\
    \ be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A are type-variables:\n\
    \    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object "
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] array = numbers.split(\" \");\n        int[] ints = new\
    \ int[array.length];\n        for (int i = 0; i < array.length; i++) {\n     \
    \       switch (array[i]) {\n                case \"zero\":\n                \
    \    ints[i] = 0;\n                    break;\n                case \"one\":\n\
    \                    ints[i] = 1;\n                    break;\n              \
    \  case \"two\":\n                    ints[i] = 2;\n                    break;\n\
    \                case \"three\":\n                    ints[i] = 3;\n         \
    \           break;\n                case \"four\":\n                    ints[i]\
    \ = 4;\n                    break;\n                case \"five\":\n         \
    \           ints[i] = 5;\n                    break;\n                case \"\
    six\":\n                    ints[i] = 6;\n                    break;\n       \
    \         case \"seven\":\n                    ints[i] = 7;\n                \
    \    break;\n                case \"eight\":\n                    ints[i] = 8;\n\
    \                    break;\n                case \"nine\":\n                \
    \    ints[i] = 9;\n                    break;\n            }\n        }\n    \
    \    Arrays.sort(ints);\n        for (int i = 0; i < array.length; i++) {\n  \
    \          switch (ints[i]) {\n                case 0:\n                    array[i]\
    \ = \"zero\";\n                    break;\n                case 1:\n         \
    \           array[i] = \"one\";\n                    break;\n                case\
    \ 2:\n                    array[i] = \"two\";\n                    break;\n  \
    \              case 3:\n                    array[i] = \"three\";\n          \
    \          break;\n                case 4:\n                    array[i] = \"\
    four\";\n                    break;\n                case 5:\n               \
    \     array[i] = \"five\";\n                    break;\n                case 6:\n\
    \                    array[i] = \"six\";\n                    break;\n       \
    \         case 7:\n                    array[i] = \"seven\";\n               \
    \     break;\n                case 8:\n                    array[i] = \"eight\"\
    ;\n                    break;\n                case 9:\n                    array[i]\
    \ = \"nine\";\n                    break;\n            }\n        }\n        String\
    \ result = \"\";\n        for (int i = 0; i < array.length\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0szi7fp4.java:87: error: ';' expected\n        for (int i = 0;\
    \ i < array.length\n                                        ^\n/tmp/tmp0szi7fp4.java:88:\
    \ error: illegal start of expression\n}\n^\n2 errors\n"
  stdout: ''
  timestamp: 1660011495
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n}\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmp_1s4ww6t.java:18)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        List<Integer> numNums\
    \ = new ArrayList<>();\n        for (String num : nums) {\n            numNums.add(numeralToInt(num));\n\
    \        }\n        Collections.sort(numNums);\n        List<String> numeralNums\
    \ = new ArrayList<>();\n        for (Integer num : numNums) {\n            numeralNums.add(intToNumeral(num));\n\
    \        }\n        return String.join(\" \", numeralNums);\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplvzklfw_.java:18: error: cannot find symbol\n            numNums.add(numeralToInt(num));\n\
    \                        ^\n  symbol:   method numeralToInt(String)\n  location:\
    \ class Problem\n/tmp/tmplvzklfw_.java:23: error: cannot find symbol\n       \
    \     numeralNums.add(intToNumeral(num));\n                            ^\n  symbol:\
    \   method intToNumeral(Integer)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        int[] num = new int[nums.length];\n\
    \        for (int i = 0; i < nums.length; i++) {\n            if (nums[i].equals(\"\
    zero\")) {\n                num[i] = 0;\n            } else if (nums[i].equals(\"\
    one\")) {\n                num[i] = 1;\n            } else if (nums[i].equals(\"\
    two\")) {\n                num[i] = 2;\n            } else if (nums[i].equals(\"\
    three\")) {\n                num[i] = 3;\n            } else if (nums[i].equals(\"\
    four\")) {\n                num[i] = 4;\n            } else if (nums[i].equals(\"\
    five\")) {\n                num[i] = 5;\n            } else if (nums[i].equals(\"\
    six\")) {\n                num[i] = 6;\n            } else if (nums[i].equals(\"\
    seven\")) {\n                num[i] = 7;\n            } else if (nums[i].equals(\"\
    eight\")) {\n                num[i] = 8;\n            } else if (nums[i].equals(\"\
    nine\")) {\n                num[i] = 9;\n            }\n        }\n        int\
    \ temp;\n        String tempStr;\n        for (int i = 0; i < num.length; i++)\
    \ {\n            for (int j = 0; j < num.length; j++) {\n                if (num[i]\
    \ < num[j]) {\n                    temp = num[i];\n                    num[i]\
    \ = num[j];\n                    num[j] = temp;\n                    tempStr =\
    \ nums[i];\n                    nums[i] = nums[j];\n                    nums[j]\
    \ = tempStr;\n                }\n            }\n        }\n        String result\
    \ = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            result\
    \ += \" \" + nums[i];\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011497
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<String, Integer> numerals = new HashMap<>();\n        numerals.put(\"\
    zero\", 0);\n        numerals.put(\"one\", 1);\n        numerals.put(\"two\",\
    \ 2);\n        numerals.put(\"three\", 3);\n        numerals.put(\"four\", 4);\n\
    \        numerals.put(\"five\", 5);\n        numerals.put(\"six\", 6);\n     \
    \   numerals.put(\"seven\", 7);\n        numerals.put(\"eight\", 8);\n       \
    \ numerals.put(\"nine\", 9);\n        String[] split = numbers.split(\" \");\n\
    \        return Arrays.stream(split)\n            .map(numerals::get)\n      \
    \      .sorted()\n            .mapToObj(Integer::toString)\n            .collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2bv2joy8.java:30: error: cannot find symbol\n            .mapToObj(Integer::toString)\n\
    \            ^\n  symbol:   method mapToObj(Integer::toString)\n  location: interface\
    \ Stream<Integer>\n1 error\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n}\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmp_1s4ww6t.java:18)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums,\
    \ String.CASE_INSENSITIVE_ORDER);\n        return String.join(\" \", nums);\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwytf18q6.java:22)\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return Arrays.stream(numbers.split(\" \"))\n            .map(numeral\
    \ -> numeralToInt(numeral))\n            .sorted()\n            .mapToObj(num\
    \ -> intToNumeral(num))\n            .collect(Collectors.joining(\" \"));\n}\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj5ds0vxq.java:16: error: cannot find symbol\n            .map(numeral\
    \ -> numeralToInt(numeral))\n                            ^\n  symbol:   method\
    \ numeralToInt(String)\n  location: class Problem\n/tmp/tmpj5ds0vxq.java:18: error:\
    \ cannot find symbol\n            .mapToObj(num -> intToNumeral(num))\n      \
    \      ^\n  symbol:   method mapToObj((num)->int[...](num))\n  location: interface\
    \ Stream<Object>\n2 errors\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        int[] nums_int = new\
    \ int[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n       \
    \     switch (nums[i]) {\n                case \"zero\":\n                   \
    \ nums_int[i] = 0;\n                    break;\n                case \"one\":\n\
    \                    nums_int[i] = 1;\n                    break;\n          \
    \      case \"two\":\n                    nums_int[i] = 2;\n                 \
    \   break;\n                case \"three\":\n                    nums_int[i] =\
    \ 3;\n                    break;\n                case \"four\":\n           \
    \         nums_int[i] = 4;\n                    break;\n                case \"\
    five\":\n                    nums_int[i] = 5;\n                    break;\n  \
    \              case \"six\":\n                    nums_int[i] = 6;\n         \
    \           break;\n                case \"seven\":\n                    nums_int[i]\
    \ = 7;\n                    break;\n                case \"eight\":\n        \
    \            nums_int[i] = 8;\n                    break;\n                case\
    \ \"nine\":\n                    nums_int[i] = 9;\n                    break;\n\
    \            }\n        }\n        Arrays.sort(nums_int);\n        StringBuilder\
    \ result = new StringBuilder();\n        for (int i = 0; i < nums_int.length;\
    \ i++) {\n            switch (nums_int[i]) {\n                case 0:\n      \
    \              result.append(\"zero\");\n                    break;\n        \
    \        case 1:\n                    result.append(\"one\");\n              \
    \      break;\n                case 2:\n                    result.append(\"two\"\
    );\n                    break;\n                case 3:\n                    result.append(\"\
    three\");\n                    break;\n                case 4:\n             \
    \       result.append(\"four\");\n                    break;\n               \
    \ case 5:\n                    result.append(\"five\");\n                    break;\n\
    \                case 6:\n                    result.append(\"six\");\n      \
    \              break;\n                case 7:\n                    result.append(\"\
    seven\");\n                    break;\n                case 8:\n             \
    \       result.append(\"eight\");\n                    break;\n              \
    \  case 9:\n                    result.append(\"nine\");\n                   \
    \ break;\n           \n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpygagm0l1.java:87: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011497
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        String[] nums2 = new\
    \ String[nums.length];\n        int j = 0;\n        for (int i = 0; i < nums.length;\
    \ i++) {\n            if (nums[i].equals(\"zero\")) {\n                nums2[j]\
    \ = \"0\";\n                j++;\n            } else if (nums[i].equals(\"one\"\
    )) {\n                nums2[j] = \"1\";\n                j++;\n            } else\
    \ if (nums[i].equals(\"two\")) {\n                nums2[j] = \"2\";\n        \
    \        j++;\n            } else if (nums[i].equals(\"three\")) {\n         \
    \       nums2[j] = \"3\";\n                j++;\n            } else if (nums[i].equals(\"\
    four\")) {\n                nums2[j] = \"4\";\n                j++;\n        \
    \    } else if (nums[i].equals(\"five\")) {\n                nums2[j] = \"5\"\
    ;\n                j++;\n            } else if (nums[i].equals(\"six\")) {\n \
    \               nums2[j] = \"6\";\n                j++;\n            } else if\
    \ (nums[i].equals(\"seven\")) {\n                nums2[j] = \"7\";\n         \
    \       j++;\n            } else if (nums[i].equals(\"eight\")) {\n          \
    \      nums2[j] = \"8\";\n                j++;\n            } else if (nums[i].equals(\"\
    nine\")) {\n                nums2[j] = \"9\";\n                j++;\n        \
    \    }\n        }\n        String[] nums3 = Arrays.copyOf(nums2, j);\n       \
    \ Arrays.sort(nums3);\n        String[] nums4 = new String[nums3.length];\n  \
    \      for (int i = 0; i < nums3.length; i++) {\n            if (nums3[i].equals(\"\
    0\")) {\n                nums4[i] = \"zero\";\n            } else if (nums3[i].equals(\"\
    1\")) {\n                nums4[i] =\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe4rcpvkj.java:59: error: illegal start of expression\n}\n^\n/tmp/tmpe4rcpvkj.java:60:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011497
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numSplit = numbers.split(\" \");\n        String[] nums\
    \ = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"};\n        HashMap<String, Integer> numMap = new HashMap<String,\
    \ Integer>();\n        for (int i = 0; i < nums.length; i++) {\n            numMap.put(nums[i],\
    \ i);\n        }\n        Arrays.sort(numSplit, new Comparator<String>() {\n \
    \           public int compare(String a, String b) {\n                return numMap.get(a)\
    \ - numMap.get(b);\n            }\n        });\n        return String.join(\"\
    \ \", numSplit);\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011498
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Convert to Integer array and then sort\n        String[] numberStringArray\
    \ = numbers.split(\" \");\n        Integer[] numberArray = Arrays.stream(numberStringArray).map(s\
    \ -> convertNumeralsToIntegers(s)).toArray(Integer[]::new);\n        Arrays.sort(numberArray);\n\
    \        // Convert back to word form and return\n        return Arrays.stream(numberArray).map(i\
    \ -> convertIntegersToNumerals(i)).collect(Collectors.joining(\" \"));\n}\n  \
    \  public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7c8kyxxo.java:17: error: cannot find symbol\n        Integer[]\
    \ numberArray = Arrays.stream(numberStringArray).map(s -> convertNumeralsToIntegers(s)).toArray(Integer[]::new);\n\
    \                                                                          ^\n\
    \  symbol:   method convertNumeralsToIntegers(String)\n  location: class Problem\n\
    /tmp/tmp7c8kyxxo.java:20: error: cannot find symbol\n        return Arrays.stream(numberArray).map(i\
    \ -> convertIntegersToNumerals(i)).collect(Collectors.joining(\" \"));\n     \
    \                                              ^\n  symbol:   method convertIntegersToNumerals(Integer)\n\
    \  location: class Problem\n/tmp/tmp7c8kyxxo.java:20: error: no suitable method\
    \ found for collect(Collector<CharSequence,CAP#1,String>)\n        return Arrays.stream(numberArray).map(i\
    \ -> convertIntegersToNumerals(i)).collect(Collectors.joining(\" \"));\n     \
    \                                                                           ^\n\
    \    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,? super Object>,BiConsumer<R#1,R#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) R#1\n        (actual\
    \ and formal argument lists differ in length))\n    method Stream.<R#2,A>collect(Collector<?\
    \ super Object,A,R#2>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String> cannot\
    \ be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A are type-variables:\n\
    \    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n3 errors\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        try {\n            String[] nums = numbers.split(\" \");\n      \
    \      int[] numInts = new int[nums.length];\n            for (int i = 0; i <\
    \ nums.length; i++) {\n                //System.out.println(nums[i]);\n      \
    \          numInts[i] = numIntToInt(nums[i]);\n            }\n            Arrays.sort(numInts);\n\
    \            for (int i = 0; i < numInts.length; i++) {\n                //System.out.println(numInts[i]);\n\
    \                nums[i] = intToNumInt(numInts[i]);\n            }\n         \
    \   String out = String.join(\" \", nums);\n            //System.out.println(out);\n\
    \            return out;\n        } catch (Exception e) {\n            System.out.println(e);\n\
    \            return \"\";\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp1nn4p35.java:20: error: cannot find symbol\n                numInts[i]\
    \ = numIntToInt(nums[i]);\n                             ^\n  symbol:   method\
    \ numIntToInt(String)\n  location: class Problem\n/tmp/tmpp1nn4p35.java:25: error:\
    \ cannot find symbol\n                nums[i] = intToNumInt(numInts[i]);\n   \
    \                       ^\n  symbol:   method intToNumInt(int)\n  location: class\
    \ Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        String[] sorted_nums\
    \ = numbers.split(\" \");\n        Arrays.sort(sorted_nums);\n        String[]\
    \ output = new String[sorted_nums.length];\n        for (int i = 0; i < sorted_nums.length;\
    \ i++) {\n            for (int j = 0; j < nums.length; j++) {\n              \
    \  if (sorted_nums[i].equals(nums[j])) {\n                    output[i] = nums[j];\n\
    \                    nums[j] = \" \";\n                    break;\n          \
    \      }\n            }\n        }\n        return String.join(\" \", output);\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5gt_vndo.java:33)\n"
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Your code here\n        return \"\";\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3t9pt2mk.java:20)\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        for (int i = 0; i\
    \ < nums.length; i++) {\n            for (int j = 0; j < nums.length; j++) {\n\
    \                if (toNumber(nums[i]) < toNumber(nums[j])) {\n              \
    \      String tmp = nums[i];\n                    nums[i] = nums[j];\n       \
    \             nums[j] = tmp;\n                }\n            }\n        }\n  \
    \      return String.join(\" \", nums);\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfoc88dsb.java:18: error: cannot find symbol\n                if\
    \ (toNumber(nums[i]) < toNumber(nums[j])) {\n                    ^\n  symbol:\
    \   method toNumber(String)\n  location: class Problem\n/tmp/tmpfoc88dsb.java:18:\
    \ error: cannot find symbol\n                if (toNumber(nums[i]) < toNumber(nums[j]))\
    \ {\n                                        ^\n  symbol:   method toNumber(String)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> nums = Arrays.asList(numbers.split(\" \"));\n      \
    \  String[] numsArray = nums.toArray(new String[nums.size()]);\n        Arrays.sort(numsArray,\
    \ new Comparator<String>() {\n            @Override\n            public int compare(String\
    \ o1, String o2) {\n                return nums.indexOf(o1) - nums.indexOf(o2);\n\
    \            }\n        });\n        return String.join(\" \", numsArray);\n}\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl4lfxwpt.java:29)\n"
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        int[] num_ints = new\
    \ int[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n       \
    \     num_ints[i] = numberToInt(nums[i]);\n        }\n        Arrays.sort(num_ints);\n\
    \        String[] num_strings = new String[num_ints.length];\n        for (int\
    \ i = 0; i < num_ints.length; i++) {\n            num_strings[i] = intToNumber(num_ints[i]);\n\
    \        }\n        return String.join(\" \", num_strings);\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgkbip4po.java:18: error: cannot find symbol\n            num_ints[i]\
    \ = numberToInt(nums[i]);\n                          ^\n  symbol:   method numberToInt(String)\n\
    \  location: class Problem\n/tmp/tmpgkbip4po.java:23: error: cannot find symbol\n\
    \            num_strings[i] = intToNumber(num_ints[i]);\n                    \
    \         ^\n  symbol:   method intToNumber(int)\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] num_tokens = numbers.split(\" \");\n        Map<String,\
    \ Integer> numeral_map = new HashMap<String, Integer>();\n        numeral_map.put(\"\
    zero\", 0);\n        numeral_map.put(\"one\", 1);\n        numeral_map.put(\"\
    two\", 2);\n        numeral_map.put(\"three\", 3);\n        numeral_map.put(\"\
    four\", 4);\n        numeral_map.put(\"five\", 5);\n        numeral_map.put(\"\
    six\", 6);\n        numeral_map.put(\"seven\", 7);\n        numeral_map.put(\"\
    eight\", 8);\n        numeral_map.put(\"nine\", 9);\n        List<Integer> numbers_list\
    \ = new ArrayList<Integer>();\n        for (String num : num_tokens) {\n     \
    \       numbers_list.add(numeral_map.get(num));\n        }\n        Collections.sort(numbers_list);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (Integer num : numbers_list)\
    \ {\n            for (Map.Entry<String, Integer> kv : numeral_map.entrySet())\
    \ {\n                if (kv.getValue().equals(num)) {\n                    sb.append(kv.getKey());\n\
    \                    sb.append(\" \");\n                }\n            }\n   \
    \     }\n        return sb.toString().trim();\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n}\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmp_1s4ww6t.java:18)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numbersArray = numbers.split(\" \");\n        List<String>\
    \ numbersList = Arrays.asList(numbersArray);\n        Collections.sort(numbersList,\
    \ new NumberComparator());\n        return String.join(\" \", numbersList);\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpi61yu8vd.java:17: error: cannot find symbol\n        Collections.sort(numbersList,\
    \ new NumberComparator());\n                                          ^\n  symbol:\
    \   class NumberComparator\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberArray = numbers.split(\" \");\n        int[] numberValues\
    \ = new int[numberArray.length];\n        for (int i = 0; i < numberArray.length;\
    \ i++) {\n            numberValues[i] = numberToInt(numberArray[i]);\n       \
    \ }\n        Arrays.sort(numberValues);\n        String sortedNumbers = \"\";\n\
    \        for (int i = 0; i < numberValues.length; i++) {\n            sortedNumbers\
    \ += intToNumber(numberValues[i]) + \" \";\n        }\n        return sortedNumbers.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp45yqjwn3.java:18: error: cannot find symbol\n            numberValues[i]\
    \ = numberToInt(numberArray[i]);\n                              ^\n  symbol: \
    \  method numberToInt(String)\n  location: class Problem\n/tmp/tmp45yqjwn3.java:23:\
    \ error: cannot find symbol\n            sortedNumbers += intToNumber(numberValues[i])\
    \ + \" \";\n                             ^\n  symbol:   method intToNumber(int)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        int z = 0, o = 0, t = 0, th = 0, f = 0, fi = 0, s = 0, se = 0, e\
    \ = 0, n = 0;\n        String[] tokens = numbers.split(\" \");\n        for (String\
    \ token : tokens) {\n            switch (token) {\n                case \"zero\"\
    :\n                    z++;\n                    break;\n                case\
    \ \"one\":\n                    o++;\n                    break;\n           \
    \     case \"two\":\n                    t++;\n                    break;\n  \
    \              case \"three\":\n                    th++;\n                  \
    \  break;\n                case \"four\":\n                    f++;\n        \
    \            break;\n                case \"five\":\n                    fi++;\n\
    \                    break;\n                case \"six\":\n                 \
    \   s++;\n                    break;\n                case \"seven\":\n      \
    \              se++;\n                    break;\n                case \"eight\"\
    :\n                    e++;\n                    break;\n                case\
    \ \"nine\":\n                    n++;\n                    break;\n          \
    \  }\n        }\n        StringBuilder sb = new StringBuilder();\n        while\
    \ (z > 0) {\n            sb.append(\"zero \");\n            z--;\n        }\n\
    \        while (o > 0) {\n            sb.append(\"one \");\n            o--;\n\
    \        }\n        while (t > 0) {\n            sb.append(\"two \");\n      \
    \      t--;\n        }\n        while (th > 0) {\n            sb.append(\"three\
    \ \");\n            th--;\n        }\n        while (f > 0) {\n            sb.append(\"\
    four \");\n            f--;\n        }\n        while (fi > 0) {\n           \
    \ sb.append(\"five \");\n            fi--;\n        }\n        while (s > 0) {\n\
    \            sb.append(\"six \");\n            s--;\n        }\n        while\
    \ (se > 0) {\n            sb.append(\"seven \");\n            se--;\n        }\n\
    \        while (e > 0) {\n            sb.append(\"eight \");\n            e--;\n\
    \        }\n        while (n > 0) {\n            sb.append(\"nine \");\n     \
    \       n--;\n        }\n        sb.deleteCharAt(sb.length()\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpntzr9t91.java:92: error: ')' expected\n        sb.deleteCharAt(sb.length()\n\
    \                                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011497
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] split = numbers.split(\" \");\n        HashMap<String, Integer>\
    \ map = new HashMap<>();\n        map.put(\"zero\", 0);\n        map.put(\"one\"\
    , 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n        map.put(\"\
    four\", 4);\n        map.put(\"five\", 5);\n        map.put(\"six\", 6);\n   \
    \     map.put(\"seven\", 7);\n        map.put(\"eight\", 8);\n        map.put(\"\
    nine\", 9);\n        int[] sort = new int[split.length];\n        int i = 0;\n\
    \        for (String s : split) {\n            sort[i] = map.get(s);\n       \
    \     i++;\n        }\n        Arrays.sort(sort);\n        StringBuilder sorted\
    \ = new StringBuilder();\n        for (int x : sort) {\n            for (Map.Entry<String,\
    \ Integer> entry : map.entrySet()) {\n                if (entry.getValue() ==\
    \ x) {\n                    sorted.append(entry.getKey() + \" \");\n         \
    \       }\n            }\n        }\n        return sorted.toString().trim();\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.HashMap.get(Object)\"\
    \ is null\n\tat Problem.sortNumbers(tmp9kbi0axg.java:30)\n\tat Problem.main(tmp9kbi0axg.java:45)\n"
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return Arrays.stream(numbers.split(\" \"))\n                .map(i\
    \ -> Pair.with(i, numbersToInts.get(i)))\n                .sorted(Comparator.comparing(Pair::getValue1))\n\
    \                .map(Pair::getValue0)\n                .collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpnuyzmddq.java:16: error: cannot find symbol\n                .map(i\
    \ -> Pair.with(i, numbersToInts.get(i)))\n                                   \
    \    ^\n  symbol:   variable numbersToInts\n  location: class Problem\n/tmp/tmpnuyzmddq.java:17:\
    \ error: incompatible types: cannot infer type-variable(s) T,U\n             \
    \   .sorted(Comparator.comparing(Pair::getValue1))\n                         \
    \                   ^\n    (argument mismatch; invalid method reference\n    \
    \  method getValue1 in class Pair<A,B> cannot be applied to given types\n    \
    \    required: no arguments\n        found:    Object\n        reason: actual\
    \ and formal argument lists differ in length)\n  where T,U,A,B are type-variables:\n\
    \    T extends Object declared in method <T,U>comparing(Function<? super T,? extends\
    \ U>)\n    U extends Comparable<? super U> declared in method <T,U>comparing(Function<?\
    \ super T,? extends U>)\n    A extends Object declared in class Pair\n    B extends\
    \ Object declared in class Pair\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // TODO\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqm7rzytn.java:20)\n"
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n}\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmp_1s4ww6t.java:18)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numbersList = numbers.split(\" \");\n        Arrays.sort(numbersList,\
    \ new Comparator<String>() {\n            public int compare(String a, String\
    \ b) {\n                if (Integer.parseInt(a) < Integer.parseInt(b)) {\n   \
    \                 return -1;\n                } else if (Integer.parseInt(a) >\
    \ Integer.parseInt(b)) {\n                    return 1;\n                } else\
    \ {\n                    return 0;\n                }\n            }\n       \
    \ });\n        return String.join(\" \", numbersList);\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"five\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem$1.compare(tmp63_i0sds.java:18)\n\tat Problem$1.compare(tmp63_i0sds.java:16)\n\
    \tat java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)\n\t\
    at java.base/java.util.TimSort.sort(TimSort.java:220)\n\tat java.base/java.util.Arrays.sort(Arrays.java:1233)\n\
    \tat Problem.sortNumbers(tmp63_i0sds.java:16)\n\tat Problem.main(tmp63_i0sds.java:32)\n"
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        throw new NotImplementedException();\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaejd6_cq.java:15: error: cannot find symbol\n        throw new\
    \ NotImplementedException();\n                  ^\n  symbol:   class NotImplementedException\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        for (int i = 0; i\
    \ < nums.length; i++) {\n            nums[i] = toNumber(nums[i]);\n        }\n\
    \        Arrays.sort(nums);\n        for (int i = 0; i < nums.length; i++) {\n\
    \            nums[i] = toWord(nums[i]);\n        }\n        return join(nums);\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps8oz3egz.java:17: error: cannot find symbol\n            nums[i]\
    \ = toNumber(nums[i]);\n                      ^\n  symbol:   method toNumber(String)\n\
    \  location: class Problem\n/tmp/tmps8oz3egz.java:21: error: cannot find symbol\n\
    \            nums[i] = toWord(nums[i]);\n                      ^\n  symbol:  \
    \ method toWord(String)\n  location: class Problem\n/tmp/tmps8oz3egz.java:23:\
    \ error: cannot find symbol\n        return join(nums);\n               ^\n  symbol:\
    \   method join(String[])\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String output = \"\";\n        String[] nums = numbers.split(\" \"\
    );\n        HashMap<String, Integer> num_to_int = new HashMap<String, Integer>();\n\
    \        num_to_int.put(\"zero\", 0);\n        num_to_int.put(\"one\", 1);\n \
    \       num_to_int.put(\"two\", 2);\n        num_to_int.put(\"three\", 3);\n \
    \       num_to_int.put(\"four\", 4);\n        num_to_int.put(\"five\", 5);\n \
    \       num_to_int.put(\"six\", 6);\n        num_to_int.put(\"seven\", 7);\n \
    \       num_to_int.put(\"eight\", 8);\n        num_to_int.put(\"nine\", 9);\n\
    \        HashMap<Integer, String> int_to_num = new HashMap<Integer, String>();\n\
    \        int_to_num.put(0, \"zero\");\n        int_to_num.put(1, \"one\");\n \
    \       int_to_num.put(2, \"two\");\n        int_to_num.put(3, \"three\");\n \
    \       int_to_num.put(4, \"four\");\n        int_to_num.put(5, \"five\");\n \
    \       int_to_num.put(6, \"six\");\n        int_to_num.put(7, \"seven\");\n \
    \       int_to_num.put(8, \"eight\");\n        int_to_num.put(9, \"nine\");\n\
    \        int[] num_arr = new int[nums.length];\n        for (int i = 0; i < nums.length;\
    \ i++) {\n            num_arr[i] = num_to_int.get(nums[i]);\n        }\n     \
    \   Arrays.sort(num_arr);\n        for (int i = 0; i < num_arr.length; i++) {\n\
    \            output += int_to_num.get(num_arr[i]) + \" \";\n        }\n      \
    \  return output.trim();\n}\n    public static void main(String[] args) {\n  \
    \  assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.HashMap.get(Object)\"\
    \ is null\n\tat Problem.sortNumbers(tmpudtpyg6p.java:41)\n\tat Problem.main(tmpudtpyg6p.java:50)\n"
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] input = numbers.split(\" \");\n        int[] output = new\
    \ int[input.length];\n        for (int i = 0; i < input.length; i++) {\n     \
    \       if (input[i].equals(\"zero\")) {\n                output[i] = 0;\n   \
    \         } else if (input[i].equals(\"one\")) {\n                output[i] =\
    \ 1;\n            } else if (input[i].equals(\"two\")) {\n                output[i]\
    \ = 2;\n            } else if (input[i].equals(\"three\")) {\n               \
    \ output[i] = 3;\n            } else if (input[i].equals(\"four\")) {\n      \
    \          output[i] = 4;\n            } else if (input[i].equals(\"five\")) {\n\
    \                output[i] = 5;\n            } else if (input[i].equals(\"six\"\
    )) {\n                output[i] = 6;\n            } else if (input[i].equals(\"\
    seven\")) {\n                output[i] = 7;\n            } else if (input[i].equals(\"\
    eight\")) {\n                output[i] = 8;\n            } else if (input[i].equals(\"\
    nine\")) {\n                output[i] = 9;\n            }\n        }\n       \
    \ Arrays.sort(output);\n        String ret = \"\";\n        for (int i = 0; i\
    \ < output.length; i++) {\n            if (output[i] == 0) {\n               \
    \ ret += \"zero\";\n            } else if (output[i] == 1) {\n               \
    \ ret += \"one\";\n            } else if (output[i] == 2) {\n                ret\
    \ += \"two\";\n            } else if (output[i] == 3) {\n                ret +=\
    \ \"three\";\n            } else if (output[i] == 4) {\n                ret +=\
    \ \"four\";\n            } else if (output[i] == 5) {\n                ret +=\
    \ \"five\";\n            } else if (output[i] == 6) {\n                ret +=\
    \ \"six\";\n            } else if (output[i] == 7) {\n                ret += \"\
    seven\";\n            } else if (output[i] == 8) {\n\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppyrgvlrl.java:62: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String s[] = numbers.split(\" \");\n        Integer a[] = new Integer[s.length];\n\
    \        for (int i = 0; i < s.length; i++) {\n            switch (s[i]) {\n \
    \               case \"zero\":\n                    a[i] = 0;\n              \
    \      break;\n                case \"one\":\n                    a[i] = 1;\n\
    \                    break;\n                case \"two\":\n                 \
    \   a[i] = 2;\n                    break;\n                case \"three\":\n \
    \                   a[i] = 3;\n                    break;\n                case\
    \ \"four\":\n                    a[i] = 4;\n                    break;\n     \
    \           case \"five\":\n                    a[i] = 5;\n                  \
    \  break;\n                case \"six\":\n                    a[i] = 6;\n    \
    \                break;\n                case \"seven\":\n                   \
    \ a[i] = 7;\n                    break;\n                case \"eight\":\n   \
    \                 a[i] = 8;\n                    break;\n                case\
    \ \"nine\":\n                    a[i] = 9;\n                    break;\n     \
    \       }\n        }\n        Arrays.sort(a);\n        String res = \"\";\n  \
    \      for (int i = 0; i < a.length; i++) {\n            switch (a[i]) {\n   \
    \             case 0:\n                    res += \"zero \";\n               \
    \     break;\n                case 1:\n                    res += \"one \";\n\
    \                    break;\n                case 2:\n                    res\
    \ += \"two \";\n                    break;\n                case 3:\n        \
    \            res += \"three \";\n                    break;\n                case\
    \ 4:\n                    res += \"four \";\n                    break;\n    \
    \            case 5:\n                    res += \"five \";\n                \
    \    break;\n                case 6:\n                    res += \"six \";\n \
    \                   break;\n                case 7:\n                    res +=\
    \ \"seven \";\n                    break;\n                case 8:\n         \
    \           res += \"eight \";\n                    break;\n                case\
    \ 9:\n                    res += \"nine \";\n                    break;\n    \
    \        }\n        }\n        return res.trim();\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because \"<local2>[<local4>]\" is null\n\t\
    at Problem.sortNumbers(tmp4fucyebk.java:54)\n\tat Problem.main(tmp4fucyebk.java:90)\n"
  stdout: ''
  timestamp: 1660011500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] nums = parseNumbers(numbers);\n        Arrays.sort(nums);\n\
    \        return Arrays.stream(nums).mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxvp2ag1x.java:15: error: cannot find symbol\n        int[] nums\
    \ = parseNumbers(numbers);\n                     ^\n  symbol:   method parseNumbers(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<String, Integer> myMap = new HashMap<String, Integer>();\n  \
    \      myMap.put(\"zero\", 0);\n        myMap.put(\"one\", 1);\n        myMap.put(\"\
    two\", 2);\n        myMap.put(\"three\", 3);\n        myMap.put(\"four\", 4);\n\
    \        myMap.put(\"five\", 5);\n        myMap.put(\"six\", 6);\n        myMap.put(\"\
    seven\", 7);\n        myMap.put(\"eight\", 8);\n        myMap.put(\"nine\", 9);\n\
    \        String[] nums = numbers.split(\" \");\n        int[] numNums = new int[nums.length];\n\
    \        for (int i = 0; i < nums.length; i++) {\n            numNums[i] = myMap.get(nums[i]);\n\
    \        }\n        Arrays.sort(numNums);\n        String result = \"\";\n   \
    \     for (int i = 0; i < numNums.length; i++) {\n            result += Integer.toString(numNums[i])\
    \ + \" \";\n        }\n        return result.trim();\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.sortNumbers(tmpea02tfbj.java:29)\n\tat Problem.main(tmpea02tfbj.java:39)\n"
  stdout: ''
  timestamp: 1660011501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return \"\";\n}\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gv6_x36.java:19)\n"
  stdout: ''
  timestamp: 1660011500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> tmp_numbers = new ArrayList<String>(Arrays.asList(numbers.split(\"\
    \ \")));\n        List<Integer> tmp_numbers_int = new ArrayList<Integer>();\n\
    \        for (String number : tmp_numbers) {\n            switch (number) {\n\
    \                case \"zero\":\n                    tmp_numbers_int.add(0);\n\
    \                    break;\n                case \"one\":\n                 \
    \   tmp_numbers_int.add(1);\n                    break;\n                case\
    \ \"two\":\n                    tmp_numbers_int.add(2);\n                    break;\n\
    \                case \"three\":\n                    tmp_numbers_int.add(3);\n\
    \                    break;\n                case \"four\":\n                \
    \    tmp_numbers_int.add(4);\n                    break;\n                case\
    \ \"five\":\n                    tmp_numbers_int.add(5);\n                   \
    \ break;\n                case \"six\":\n                    tmp_numbers_int.add(6);\n\
    \                    break;\n                case \"seven\":\n               \
    \     tmp_numbers_int.add(7);\n                    break;\n                case\
    \ \"eight\":\n                    tmp_numbers_int.add(8);\n                  \
    \  break;\n                case \"nine\":\n                    tmp_numbers_int.add(9);\n\
    \                    break;\n            }\n        }\n        Collections.sort(tmp_numbers_int);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (Integer number\
    \ : tmp_numbers_int) {\n            switch (number) {\n                case 0:\n\
    \                    sb.append(\"zero \");\n                    break;\n     \
    \           case 1:\n                    sb.append(\"one \");\n              \
    \      break;\n                case 2:\n                    sb.append(\"two \"\
    );\n                    break;\n                case 3:\n                    sb.append(\"\
    three \");\n                    break;\n                case 4:\n            \
    \        sb.append(\"four \");\n                    break;\n                case\
    \ 5:\n                    sb.append(\"five \");\n                    break;\n\
    \                case 6:\n                    sb.append(\"six \");\n         \
    \           break;\n                case 7:\n                    sb.append(\"\
    seven \");\n                    break;\n                case 8:\n            \
    \       \n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2y_1cgqf.java:82: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011499
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] output = numbers.split(\" \");\n        Arrays.sort(output);\n\
    \        return String.join(\" \", output);\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpntcjzln6.java:22)\n"
  stdout: ''
  timestamp: 1660011501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Your code here\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpga5adtvf.java:16: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] n = numbers.split(\" \");\n        Integer[] n_i = new Integer[n.length];\n\
    \        String[] n_s = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\"};\n        for (int i = 0; i < n.length;\
    \ i++) {\n            for (int j = 0; j < n_s.length; j++) {\n               \
    \ if (n[i].equals(n_s[j])) {\n                    n_i[i] = j;\n              \
    \  }\n            }\n        }\n        Arrays.sort(n_i);\n        for (int i\
    \ = 0; i < n.length; i++) {\n            n[i] = n_s[n_i[i]];\n        }\n    \
    \    return String.join(\" \", n);\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because \"<local2>[<local4>]\" is null\n\t\
    at Problem.sortNumbers(tmp4tpyzwu6.java:27)\n\tat Problem.main(tmp4tpyzwu6.java:32)\n"
  stdout: ''
  timestamp: 1660011501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Good luck!\n        int[] sorted = Arrays.stream(numbers.split(\"\
    \ \")).mapToInt(i -> Integer.parseInt(\n                i.replace(\"zero\", \"\
    0\").replace(\"one\", \"1\").replace(\"two\", \"2\").replace(\"three\", \"3\"\
    ).replace(\"four\", \"4\").replace(\"five\", \"5\").replace(\"six\", \"6\").replace(\"\
    seven\", \"7\").replace(\"eight\", \"8\").replace(\"nine\", \"9\"))).sorted().toArray();\n\
    \        return Arrays.stream(sorted).mapToObj(i -> String.valueOf(i).replace(\"\
    0\", \"zero\").replace(\"1\", \"one\").replace(\"2\", \"two\").replace(\"3\",\
    \ \"three\").replace(\"4\", \"four\").replace(\"5\", \"five\").replace(\"6\",\
    \ \"six\").replace(\"7\", \"seven\").replace(\"8\", \"eight\").replace(\"9\",\
    \ \"nine\")).collect(Collectors.joining(\" \"));\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.lambda$sortNumbers$0(tmp02mf4m6p.java:16)\n\tat java.base/java.util.stream.ReferencePipeline$4$1.accept(ReferencePipeline.java:214)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:575)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:260)\n\
    \tat java.base/java.util.stream.IntPipeline.toArray(IntPipeline.java:562)\n\t\
    at Problem.sortNumbers(tmp02mf4m6p.java:17)\n\tat Problem.main(tmp02mf4m6p.java:21)\n"
  stdout: ''
  timestamp: 1660011501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return IntStream.of(Arrays.stream(numbers.split(\" \")).mapToInt(i\
    \ -> Integer.parseInt(i)).toArray()).sorted().mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.lambda$sortNumbers$0(tmp8rm7qc89.java:15)\n\tat java.base/java.util.stream.ReferencePipeline$4$1.accept(ReferencePipeline.java:214)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:575)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:260)\n\
    \tat java.base/java.util.stream.IntPipeline.toArray(IntPipeline.java:562)\n\t\
    at Problem.sortNumbers(tmp8rm7qc89.java:15)\n\tat Problem.main(tmp8rm7qc89.java:18)\n"
  stdout: ''
  timestamp: 1660011501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n      List<Integer> nums = Arrays.asList(numbers.split(\" \")).stream().map(x\
    \ -> numeralToNumber(x)).collect(Collectors.toList());\n      Collections.sort(nums);\n\
    \      return nums.stream().map(x -> numberToNumeral(x)).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpww4j160u.java:15: error: cannot find symbol\n      List<Integer>\
    \ nums = Arrays.asList(numbers.split(\" \")).stream().map(x -> numeralToNumber(x)).collect(Collectors.toList());\n\
    \                                                                            \
    \   ^\n  symbol:   method numeralToNumber(String)\n  location: class Problem\n\
    /tmp/tmpww4j160u.java:15: error: incompatible types: inference variable T has\
    \ incompatible bounds\n      List<Integer> nums = Arrays.asList(numbers.split(\"\
    \ \")).stream().map(x -> numeralToNumber(x)).collect(Collectors.toList());\n \
    \                                                                            \
    \                             ^\n    equality constraints: Integer\n    lower\
    \ bounds: Object\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>toList()\n/tmp/tmpww4j160u.java:17: error: cannot find symbol\n\
    \      return nums.stream().map(x -> numberToNumeral(x)).collect(Collectors.joining(\"\
    \ \"));\n                                    ^\n  symbol:   method numberToNumeral(Integer)\n\
    \  location: class Problem\n/tmp/tmpww4j160u.java:17: error: no suitable method\
    \ found for collect(Collector<CharSequence,CAP#1,String>)\n      return nums.stream().map(x\
    \ -> numberToNumeral(x)).collect(Collectors.joining(\" \"));\n               \
    \                                        ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collect"
  stdout: ''
  timestamp: 1660011501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n      // TODO: complete this function\n\n      return \"\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmjmxtkax.java:21)\n"
  stdout: ''
  timestamp: 1660011501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] input = numbers.split(\" \");\n        String[] output =\
    \ new String[input.length];\n        for (int i = 0; i < input.length; i++) {\n\
    \            output[Integer.parseInt(input[i])] = input[i];\n        }\n     \
    \   return String.join(\" \", output);\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.sortNumbers(tmp4mjug81b.java:18)\n\tat Problem.main(tmp4mjug81b.java:23)\n"
  stdout: ''
  timestamp: 1660011501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numStrings = numbers.split(\" \");\n        int[] nums =\
    \ new int[numStrings.length];\n        for (int i = 0; i < numStrings.length;\
    \ i++) {\n            nums[i] = toInt(numStrings[i]);\n        }\n        Arrays.sort(nums);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ nums.length; i++) {\n            sb.append(toString(nums[i]));\n           \
    \ if (i < nums.length - 1) {\n                sb.append(\" \");\n            }\n\
    \        }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp7md7vy8.java:18: error: cannot find symbol\n            nums[i]\
    \ = toInt(numStrings[i]);\n                      ^\n  symbol:   method toInt(String)\n\
    \  location: class Problem\n/tmp/tmpp7md7vy8.java:23: error: method toString in\
    \ class Object cannot be applied to given types;\n            sb.append(toString(nums[i]));\n\
    \                      ^\n  required: no arguments\n  found:    int\n  reason:\
    \ actual and formal argument lists differ in length\n2 errors\n"
  stdout: ''
  timestamp: 1660011501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Use split to convert input string to a list of strings\n     \
    \   String[] numberList = numbers.split(\" \");\n        // Convert strings to\
    \ integers, sorted\n        // Use mapToInt to convert a stream of strings to\
    \ a stream of integers\n        // Sort the numbers in ascending order\n     \
    \   List<Integer> nums = Arrays.stream(numberList).mapToInt(Integer::parseInt).sorted().boxed().collect(Collectors.toList());\n\
    \        // Convert the list of numbers to a list of strings\n        String[]\
    \ numsStr = nums.stream().map(String::valueOf).toArray(String[]::new);\n     \
    \   // Use String.join() to convert the list of strings back to a single string\n\
    \        String result = String.join(\" \", numsStr);\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat java.base/java.util.stream.ReferencePipeline$4$1.accept(ReferencePipeline.java:214)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.sortNumbers(tmp0_pkg2dj.java:20)\n\tat Problem.main(tmp0_pkg2dj.java:28)\n"
  stdout: ''
  timestamp: 1660011502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        int zero = 0;\n        int one = 0;\n        int two = 0;\n     \
    \   int three = 0;\n        int four = 0;\n        int five = 0;\n        int\
    \ six = 0;\n        int seven = 0;\n        int eight = 0;\n        int nine =\
    \ 0;\n        int sum = 0;\n        int carry = 0;\n        int borrowed = 0;\n\
    \        int temp = 0;\n        boolean done = false;\n        boolean borrow\
    \ = false;\n        String num = \"\";\n        String[] parts = numbers.split(\"\
    \ \");\n        for (int i = 0; i < parts.length; i++) {\n            switch (parts[i])\
    \ {\n                case \"zero\":\n                    zero++;\n           \
    \         break;\n                case \"one\":\n                    one++;\n\
    \                    break;\n                case \"two\":\n                 \
    \   two++;\n                    break;\n                case \"three\":\n    \
    \                three++;\n                    break;\n                case \"\
    four\":\n                    four++;\n                    break;\n           \
    \     case \"five\":\n                    five++;\n                    break;\n\
    \                case \"six\":\n                    six++;\n                 \
    \   break;\n                case \"seven\":\n                    seven++;\n  \
    \                  break;\n                case \"eight\":\n                 \
    \   eight++;\n                    break;\n                case \"nine\":\n   \
    \                 nine++;\n                    break;\n            }\n       \
    \ }\n        carry = (four + eight + nine) / 2;\n        borrowed = carry * 2;\n\
    \        if (five + borrowed >= 3) {\n            five -= 3;\n            borrowed\
    \ -= 3;\n        } else {\n            five = 0;\n            borrowed = 0;\n\
    \        }\n        four -= borrowed;\n        borrow = false;\n        if (two\
    \ - borrowed < 0) {\n            temp = 2 - borrowed;\n            borrowed =\
    \ 2;\n            borrow = true;\n        } else {\n            borrowed -= two;\n\
    \        }\n        if (borrow) {\n            if (one - borrowed < 0) {\n   \
    \             temp = 1 - borrowed;\n                borrowed = 1;\n          \
    \  } else {\n                borrowed -= one;\n            }\n        }\n    \
    \    done = false;\n        while (!done) {\n            switch (temp) {\n   \
    \             case 0:\n                    done = true;\n                    break;\n\
    \n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3009c2vu.java:101: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] num = new int[10];\n        String[] nums = numbers.split(\"\
    \ \");\n        for (String s : nums) {\n            if (s.equals(\"zero\")) {\n\
    \                num[0]++;\n            } else if (s.equals(\"one\")) {\n    \
    \            num[1]++;\n            } else if (s.equals(\"two\")) {\n        \
    \        num[2]++;\n            } else if (s.equals(\"three\")) {\n          \
    \      num[3]++;\n            } else if (s.equals(\"four\")) {\n             \
    \   num[4]++;\n            } else if (s.equals(\"five\")) {\n                num[5]++;\n\
    \            } else if (s.equals(\"six\")) {\n                num[6]++;\n    \
    \        } else if (s.equals(\"seven\")) {\n                num[7]++;\n      \
    \      } else if (s.equals(\"eight\")) {\n                num[8]++;\n        \
    \    } else if (s.equals(\"nine\")) {\n                num[9]++;\n           \
    \ }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < 10; i++) {\n            for (int j = 0; j < num[i]; j++) {\n    \
    \            sb.append(i + \" \");\n            }\n        }\n        sb.deleteCharAt(sb.length()\
    \ - 1);\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ index -1, length 0\n\tat java.base/java.lang.String.checkIndex(String.java:4563)\n\
    \tat java.base/java.lang.AbstractStringBuilder.deleteCharAt(AbstractStringBuilder.java:970)\n\
    \tat java.base/java.lang.StringBuilder.deleteCharAt(StringBuilder.java:298)\n\t\
    at Problem.sortNumbers(tmp9xful5op.java:46)\n\tat Problem.main(tmp9xful5op.java:50)\n"
  stdout: ''
  timestamp: 1660011501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] n = numbers.split(\" \");\n        Arrays.sort(n);\n   \
    \     StringBuilder result = new StringBuilder();\n        for (int i = 0; i <\
    \ n.length; i++) {\n            result.append(n[i]);\n            if (i != n.length\
    \ - 1) {\n                result.append(\" \");\n            }\n        }\n  \
    \      return result.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf897wv8l.java:29)\n"
  stdout: ''
  timestamp: 1660011501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        throw new UnsupportedOperationException(\"not implemented\");\n}\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: not\
    \ implemented\n\tat Problem.sortNumbers(tmppivg7ud9.java:15)\n\tat Problem.main(tmppivg7ud9.java:18)\n"
  stdout: ''
  timestamp: 1660011501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] s = numbers.split(\" \");\n        int[] nums = new int[s.length];\n\
    \        for (int i = 0; i < s.length; i++) {\n            nums[i] = convert(s[i]);\n\
    \        }\n        Arrays.sort(nums);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < nums.length; i++) {\n            sb.append(convert(nums[i]));\n\
    \            if (i < nums.length - 1) {\n                sb.append(\" \");\n \
    \           }\n        }\n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpadfkf3lw.java:18: error: cannot find symbol\n            nums[i]\
    \ = convert(s[i]);\n                      ^\n  symbol:   method convert(String)\n\
    \  location: class Problem\n/tmp/tmpadfkf3lw.java:23: error: cannot find symbol\n\
    \            sb.append(convert(nums[i]));\n                      ^\n  symbol:\
    \   method convert(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numeralMap = {\"zero\", \"one\", \"two\", \"three\", \"\
    four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n        return null;\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmpqavruu_i.java:19)\n"
  stdout: ''
  timestamp: 1660011501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] parts = numbers.split(\" \");\n        ArrayList<Integer>\
    \ ints = new ArrayList<Integer>();\n        for (String numeral : parts) {\n \
    \           ints.add(numeral_to_int(numeral));\n        }\n        Collections.sort(ints);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int num : ints)\
    \ {\n            sb.append(int_to_numeral(num) + \" \");\n        }\n        return\
    \ sb.toString().trim();\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpweqdvemi.java:18: error: cannot find symbol\n            ints.add(numeral_to_int(numeral));\n\
    \                     ^\n  symbol:   method numeral_to_int(String)\n  location:\
    \ class Problem\n/tmp/tmpweqdvemi.java:23: error: cannot find symbol\n       \
    \     sb.append(int_to_numeral(num) + \" \");\n                      ^\n  symbol:\
    \   method int_to_numeral(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011501
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        String[] numsOriginal\
    \ = numbers.split(\" \");\n        String[] output = new String[nums.length];\n\
    \        int index = 0;\n        for (int i = 0; i < nums.length; i++) {\n   \
    \         switch (nums[i]) {\n                case \"zero\":\n               \
    \     nums[i] = \"0\";\n                    break;\n                case \"one\"\
    :\n                    nums[i] = \"1\";\n                    break;\n        \
    \        case \"two\":\n                    nums[i] = \"2\";\n               \
    \     break;\n                case \"three\":\n                    nums[i] = \"\
    3\";\n                    break;\n                case \"four\":\n           \
    \         nums[i] = \"4\";\n                    break;\n                case \"\
    five\":\n                    nums[i] = \"5\";\n                    break;\n  \
    \              case \"six\":\n                    nums[i] = \"6\";\n         \
    \           break;\n                case \"seven\":\n                    nums[i]\
    \ = \"7\";\n                    break;\n                case \"eight\":\n    \
    \                nums[i] = \"8\";\n                    break;\n              \
    \  case \"nine\":\n                    nums[i] = \"9\";\n                    break;\n\
    \            }\n        }\n        Arrays.sort(nums);\n        for (int i = 0;\
    \ i < nums.length; i++) {\n            for (int j = 0; j < numsOriginal.length;\
    \ j++) {\n                if (nums[i].equals(numsOriginal[j])) {\n           \
    \         output[index] = numsOriginal[j];\n                    index++;\n   \
    \             }\n            }\n        }\n        String out = String.join(\"\
    \ \", output);\n        return out;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpet7w0vtx.java:67)\n"
  stdout: ''
  timestamp: 1660011502
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        if (numbers == null || numbers.length() == 0) {\n            return\
    \ numbers;\n        }\n        String[] numbersWords = numbers.split(\" \");\n\
    \        if (numbersWords.length == 0) {\n            return numbers;\n      \
    \  }\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"\
    zero\", 0);\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n    \
    \    map.put(\"three\", 3);\n        map.put(\"four\", 4);\n        map.put(\"\
    five\", 5);\n        map.put(\"six\", 6);\n        map.put(\"seven\", 7);\n  \
    \      map.put(\"eight\", 8);\n        map.put(\"nine\", 9);\n        Arrays.sort(numbersWords,\
    \ new Comparator<String>() {\n            @Override\n            public int compare(String\
    \ s1, String s2) {\n                return map.get(s1) - map.get(s2);\n      \
    \      }\n        });\n        StringBuilder sb = new StringBuilder();\n     \
    \   sb.append(numbersWords[0]);\n        for (int i = 1; i < numbersWords.length;\
    \ i++) {\n            sb.append(\" \");\n            sb.append(numbersWords[i]);\n\
    \        }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        int[] numeral_nums\
    \ = new int[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n \
    \           numeral_nums[i] = numeralToInt(nums[i]);\n        }\n        Arrays.sort(numeral_nums);\n\
    \        String out = \"\";\n        for (int n : numeral_nums) {\n          \
    \  out += intToNumeral(n) + \" \";\n        }\n        return out.trim();\n}\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcsw25g2s.java:18: error: cannot find symbol\n            numeral_nums[i]\
    \ = numeralToInt(nums[i]);\n                              ^\n  symbol:   method\
    \ numeralToInt(String)\n  location: class Problem\n/tmp/tmpcsw25g2s.java:23: error:\
    \ cannot find symbol\n            out += intToNumeral(n) + \" \";\n          \
    \         ^\n  symbol:   method intToNumeral(int)\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Write your code here\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp4tbuch6b.java:16: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] splitNumbers = numbers.split(\" \");\n        // create\
    \ a hashmap for numberal to digit\n        HashMap<String, Integer> numbersMap\
    \ = new HashMap<String, Integer>();\n        numbersMap.put(\"zero\", 0);\n  \
    \      numbersMap.put(\"one\", 1);\n        numbersMap.put(\"two\", 2);\n    \
    \    numbersMap.put(\"three\", 3);\n        numbersMap.put(\"four\", 4);\n   \
    \     numbersMap.put(\"five\", 5);\n        numbersMap.put(\"six\", 6);\n    \
    \    numbersMap.put(\"seven\", 7);\n        numbersMap.put(\"eight\", 8);\n  \
    \      numbersMap.put(\"nine\", 9);\n        // convert them to numberals\n  \
    \      int[] nums = new int[splitNumbers.length];\n        for (int i = 0; i <\
    \ splitNumbers.length; i++) {\n            nums[i] = numbersMap.get(splitNumbers[i]);\n\
    \        }\n        // sort the array\n        Arrays.sort(nums);\n        //\
    \ convert them back to numberals\n        for (int i = 0; i < splitNumbers.length;\
    \ i++) {\n            splitNumbers[i] = numbersMap.get(nums[i]);\n        }\n\
    \        // return the sorted numbers\n        return String.join(\" \", splitNumbers);\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp31fclaxe.java:37: error: incompatible types: Integer cannot be\
    \ converted to String\n            splitNumbers[i] = numbersMap.get(nums[i]);\n\
    \                                            ^\n1 error\n"
  stdout: ''
  timestamp: 1660011502
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Convert string to a list of numbers\n        List<Integer> numberList\
    \ = Arrays.stream(numbers.split(\" \"))\n            .map(x -> \"zero\".equals(x)\
    \ ? 0 : \"one\".equals(x) ? 1 : \"two\".equals(x) ? 2 : \"three\".equals(x) ?\
    \ 3 : \"four\".equals(x) ? 4 : \"five\".equals(x) ? 5 : \"six\".equals(x) ? 6\
    \ : \"seven\".equals(x) ? 7 : \"eight\".equals(x) ? 8 : \"nine\".equals(x) ? 9\
    \ : -1)\n            .collect(Collectors.toList());\n        // Sort number list\n\
    \        Collections.sort(numberList);\n        // Convert list of numbers to\
    \ string\n        return numberList.stream()\n            .map(x -> x == 0 ? \"\
    zero\" : x == 1 ? \"one\" : x == 2 ? \"two\" : x == 3 ? \"three\" : x == 4 ? \"\
    four\" : x == 5 ? \"five\" : x == 6 ? \"six\" : x == 7 ? \"seven\" : x == 8 ?\
    \ \"eight\" : x == 9 ? \"nine\" : \"\")\n            .collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011503
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> lst = Arrays.asList(numbers.split(\" \"));\n       \
    \ Collections.sort(lst, new Comparator<String>() {\n            @Override\n  \
    \          public int compare(String a, String b) {\n                List<String>\
    \ choices = Arrays.asList(\"zero\", \"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\");\n                return choices.indexOf(a)\
    \ - choices.indexOf(b);\n            }\n        });\n        return String.join(\"\
    \ \", lst);\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011503
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        TreeMap<Integer, String> word_number_map = new TreeMap<>();\n   \
    \     word_number_map.put(0, \"zero\");\n        word_number_map.put(1, \"one\"\
    );\n        word_number_map.put(2, \"two\");\n        word_number_map.put(3, \"\
    three\");\n        word_number_map.put(4, \"four\");\n        word_number_map.put(5,\
    \ \"five\");\n        word_number_map.put(6, \"six\");\n        word_number_map.put(7,\
    \ \"seven\");\n        word_number_map.put(8, \"eight\");\n        word_number_map.put(9,\
    \ \"nine\");\n        List<Integer> numbers_list = Arrays.stream(numbers.split(\"\
    \ \")).map(word -> {\n            for (Map.Entry<Integer, String> pair : word_number_map.entrySet())\
    \ {\n                if (pair.getValue().equals(word)) {\n                   \
    \ return pair.getKey();\n                }\n            }\n            return\
    \ -1;\n        }).collect(Collectors.toList());\n        Collections.sort(numbers_list);\n\
    \        return numbers_list.stream().map(num -> word_number_map.get(num)).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6qao8j6r.java:38)\n"
  stdout: ''
  timestamp: 1660011504
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums,\
    \ (a, b) -> {\n            if(Integer.parseInt(a) < Integer.parseInt(b)) {\n \
    \               return -1;\n            } else if(Integer.parseInt(a) > Integer.parseInt(b))\
    \ {\n                return 1;\n            } else {\n                return 0;\n\
    \            }\n        });\n        return String.join(\" \", nums);\n}\n   \
    \ public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"five\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.lambda$sortNumbers$0(tmps63c2fzx.java:17)\n\tat java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)\n\
    \tat java.base/java.util.TimSort.sort(TimSort.java:220)\n\tat java.base/java.util.Arrays.sort(Arrays.java:1233)\n\
    \tat Problem.sortNumbers(tmps63c2fzx.java:16)\n\tat Problem.main(tmps63c2fzx.java:30)\n"
  stdout: ''
  timestamp: 1660011503
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums,\
    \ (a, b) -> numeralToInt(a) - numeralToInt(b));\n        return String.join(\"\
    \ \", nums);\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpuvaw8dcq.java:16: error: cannot find symbol\n        Arrays.sort(nums,\
    \ (a, b) -> numeralToInt(a) - numeralToInt(b));\n                            \
    \        ^\n  symbol:   method numeralToInt(String)\n  location: class Problem\n\
    /tmp/tmpuvaw8dcq.java:16: error: cannot find symbol\n        Arrays.sort(nums,\
    \ (a, b) -> numeralToInt(a) - numeralToInt(b));\n                            \
    \                          ^\n  symbol:   method numeralToInt(String)\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011503
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"zero\"\
    , 0);\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"\
    three\", 3);\n        map.put(\"four\", 4);\n        map.put(\"five\", 5);\n \
    \       map.put(\"six\", 6);\n        map.put(\"seven\", 7);\n        map.put(\"\
    eight\", 8);\n        map.put(\"nine\", 9);\n        String[] split = numbers.split(\"\
    \ \");\n        int[] arr = new int[split.length];\n        for (int i = 0; i\
    \ < split.length; i++) {\n            arr[i] = map.get(split[i]);\n        }\n\
    \        Arrays.sort(arr);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < arr.length; i++) {\n            sb.append(map.get(split[i]));\n\
    \            if (i != arr.length - 1) sb.append(\" \");\n        }\n        return\
    \ sb.toString();\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.sortNumbers(tmprw5_n7km.java:29)\n\tat Problem.main(tmprw5_n7km.java:40)\n"
  stdout: ''
  timestamp: 1660011503
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] n = numbers.split(\" \");\n        String[] num = new String[n.length];\n\
    \        for (int i = 0; i < n.length; i++) {\n            if (n[i].equals(\"\
    zero\")) {\n                num[i] = \"0\";\n            } else if (n[i].equals(\"\
    one\")) {\n                num[i] = \"1\";\n            } else if (n[i].equals(\"\
    two\")) {\n                num[i] = \"2\";\n            } else if (n[i].equals(\"\
    three\")) {\n                num[i] = \"3\";\n            } else if (n[i].equals(\"\
    four\")) {\n                num[i] = \"4\";\n            } else if (n[i].equals(\"\
    five\")) {\n                num[i] = \"5\";\n            } else if (n[i].equals(\"\
    six\")) {\n                num[i] = \"6\";\n            } else if (n[i].equals(\"\
    seven\")) {\n                num[i] = \"7\";\n            } else if (n[i].equals(\"\
    eight\")) {\n                num[i] = \"8\";\n            } else if (n[i].equals(\"\
    nine\")) {\n                num[i] = \"9\";\n            }\n        }\n      \
    \  Arrays.sort(num);\n        String res = \"\";\n        for (int i = 0; i <\
    \ num.length; i++) {\n            if (num[i].equals(\"0\")) {\n              \
    \  res += \"zero \";\n            } else if (num[i].equals(\"1\")) {\n       \
    \         res += \"one \";\n            } else if (num[i].equals(\"2\")) {\n \
    \               res += \"two \";\n            } else if (num[i].equals(\"3\"))\
    \ {\n                res += \"three \";\n            } else if (num[i].equals(\"\
    4\")) {\n                res += \"four \";\n            } else if (num[i].equals(\"\
    5\")) {\n                res += \"five \";\n            } else if (num[i].equals(\"\
    6\")) {\n                res += \"six \";\n            } else if\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppr9patln.java:57: error: '(' expected\n            } else if\n\
    \                     ^\n/tmp/tmppr9patln.java:58: error: illegal start of expression\n\
    }\n^\n/tmp/tmppr9patln.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011502
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // BEGIN SOLUTION\n        String[] words = numbers.split(\" \");\n\
    \        int[] digits = new int[words.length];\n        for (int i = 0; i < words.length;\
    \ i++) {\n            digits[i] = toDigit(words[i]);\n        }\n        Arrays.sort(digits);\n\
    \        String[] sortedWords = new String[words.length];\n        for (int i\
    \ = 0; i < digits.length; i++) {\n            sortedWords[i] = toWord(digits[i]);\n\
    \        }\n        return String.join(\" \", sortedWords);\n        // END SOLUTION\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp26r3qhjg.java:19: error: cannot find symbol\n            digits[i]\
    \ = toDigit(words[i]);\n                        ^\n  symbol:   method toDigit(String)\n\
    \  location: class Problem\n/tmp/tmp26r3qhjg.java:24: error: cannot find symbol\n\
    \            sortedWords[i] = toWord(digits[i]);\n                           \
    \  ^\n  symbol:   method toWord(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011503
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        int maxN = 10;\n        String[] words = numbers.split(\" \");\n\
    \        int n = words.length;\n        int[] nums = new int[n];\n        for\
    \ (int i = 0; i < n; i++) {\n            nums[i] = numToInt(words[i]);\n     \
    \   }\n        int[] counts = new int[maxN];\n        for (int i = 0; i < n; i++)\
    \ {\n            counts[nums[i]]++;\n        }\n        int pos = 0;\n       \
    \ for (int i = 0; i < maxN; i++) {\n            for (int j = 0; j < counts[i];\
    \ j++) {\n                nums[pos] = i;\n                pos++;\n           \
    \ }\n        }\n        String[] words2 = new String[n];\n        for (int i =\
    \ 0; i < n; i++) {\n            words2[i] = intToNum(nums[i]);\n        }\n  \
    \      return String.join(\" \", words2);\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp66bnu0t4.java:20: error: cannot find symbol\n            nums[i]\
    \ = numToInt(words[i]);\n                      ^\n  symbol:   method numToInt(String)\n\
    \  location: class Problem\n/tmp/tmp66bnu0t4.java:35: error: cannot find symbol\n\
    \            words2[i] = intToNum(nums[i]);\n                        ^\n  symbol:\
    \   method intToNum(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011503
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberSet = numbers.split(\" \");\n        int[] temp =\
    \ new int[numberSet.length];\n        for (int i = 0; i < numberSet.length; i++)\
    \ {\n            switch (numberSet[i]) {\n                case \"zero\":\n   \
    \                 temp[i] = 0;\n                    break;\n                case\
    \ \"one\":\n                    temp[i] = 1;\n                    break;\n   \
    \             case \"two\":\n                    temp[i] = 2;\n              \
    \      break;\n                case \"three\":\n                    temp[i] =\
    \ 3;\n                    break;\n                case \"four\":\n           \
    \         temp[i] = 4;\n                    break;\n                case \"five\"\
    :\n                    temp[i] = 5;\n                    break;\n            \
    \    case \"six\":\n                    temp[i] = 6;\n                    break;\n\
    \                case \"seven\":\n                    temp[i] = 7;\n         \
    \           break;\n                case \"eight\":\n                    temp[i]\
    \ = 8;\n                    break;\n                case \"nine\":\n         \
    \           temp[i] = 9;\n                    break;\n            }\n        }\n\
    \        Arrays.sort(temp);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < temp.length; i++) {\n            switch (temp[i])\
    \ {\n                case 0:\n                    sb.append(\"zero \");\n    \
    \                break;\n                case 1:\n                    sb.append(\"\
    one \");\n                    break;\n                case 2:\n              \
    \      sb.append(\"two \");\n                    break;\n                case\
    \ 3:\n                    sb.append(\"three \");\n                    break;\n\
    \                case 4:\n                    sb.append(\"four \");\n        \
    \            break;\n                case 5:\n                    sb.append(\"\
    five \");\n                    break;\n                case 6:\n             \
    \       sb.append(\"six \");\n                    break;\n                case\
    \ 7:\n                    sb.append(\"seven \");\n                    break;\n\
    \                case 8:\n                    sb.append(\"eight \");\n       \
    \             break;\n                case 9:\n                    sb.append(\"\
    nine \");\n                    break;\n            }\n        }\n        return\
    \ sb.toString().trim();\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4fog1vkf.java:90)\n"
  stdout: ''
  timestamp: 1660011503
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // YOUR CODE HERE\n        return \"\";\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8_cxyxc3.java:20)\n"
  stdout: ''
  timestamp: 1660011504
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Convert the string to an array of numberal names\n        String[]\
    \ words = numbers.split(\" \");\n        // Now convert each numberal name to\
    \ the corresponding number\n        int[] nums = new int[words.length];\n    \
    \    for (int i = 0; i < words.length; i++) {\n            nums[i] = numToInt(words[i]);\n\
    \        }\n        // Sort the numbers\n        Arrays.sort(nums);\n        //\
    \ Now convert back to numberal names\n        String[] numWords = new String[nums.length];\n\
    \        for (int i = 0; i < nums.length; i++) {\n            numWords[i] = intToNum(nums[i]);\n\
    \        }\n        // Return the result\n        return String.join(\" \", numWords);\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp27gwz7zt.java:20: error: cannot find symbol\n            nums[i]\
    \ = numToInt(words[i]);\n                      ^\n  symbol:   method numToInt(String)\n\
    \  location: class Problem\n/tmp/tmp27gwz7zt.java:27: error: cannot find symbol\n\
    \            numWords[i] = intToNum(nums[i]);\n                          ^\n \
    \ symbol:   method intToNum(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011503
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        System.out.println(\"Sorting numbers: \" + numbers);\n        return\
    \ \"one three five\";\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3sybl0hd.java:19)\n"
  stdout: "Sorting numbers: \n"
  timestamp: 1660011504
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        int [] sortedNumbers = new int[3];\n        for (int i = 0; i < numbers.split(\"\
    \ \").length; i++) {\n            if (numbers.split(\" \")[i].equals(\"zero\"\
    )) {\n                sortedNumbers[i] = 0;\n            } else if (numbers.split(\"\
    \ \")[i].equals(\"one\")) {\n                sortedNumbers[i] = 1;\n         \
    \   } else if (numbers.split(\" \")[i].equals(\"two\")) {\n                sortedNumbers[i]\
    \ = 2;\n            } else if (numbers.split(\" \")[i].equals(\"three\")) {\n\
    \                sortedNumbers[i] = 3;\n            } else if (numbers.split(\"\
    \ \")[i].equals(\"four\")) {\n                sortedNumbers[i] = 4;\n        \
    \    } else if (numbers.split(\" \")[i].equals(\"five\")) {\n                sortedNumbers[i]\
    \ = 5;\n            } else if (numbers.split(\" \")[i].equals(\"six\")) {\n  \
    \              sortedNumbers[i] = 6;\n            } else if (numbers.split(\"\
    \ \")[i].equals(\"seven\")) {\n                sortedNumbers[i] = 7;\n       \
    \     } else if (numbers.split(\" \")[i].equals(\"eight\")) {\n              \
    \  sortedNumbers[i] = 8;\n            } else if (numbers.split(\" \")[i].equals(\"\
    nine\")) {\n                sortedNumbers[i] = 9;\n            }\n        }\n\
    \        Arrays.sort(sortedNumbers);\n        String numbersAsStrings[] = {\"\
    zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"\
    eight\", \"nine\"};\n        StringBuilder sb = new StringBuilder();\n       \
    \ for (int x : sortedNumbers) {\n            sb.append(numbersAsStrings[x]);\n\
    \            sb.append(\" \");\n        }\n        return sb.toString().trim();\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu2quudp4.java:49)\n"
  stdout: ''
  timestamp: 1660011504
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return \"\";\n}\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gv6_x36.java:19)\n"
  stdout: ''
  timestamp: 1660011500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // fill this in\n        String[] nums = numbers.split(\" \");\n\
    \        int[] converted = new int[nums.length];\n        String[] numStrings\
    \ = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"};\n        for (int i = 0; i < nums.length; i++) {\n   \
    \         for (int j = 0; j < numStrings.length; j++) {\n                if (nums[i].equals(numStrings[j]))\
    \ {\n                    converted[i] = j;\n                }\n            }\n\
    \        }\n        Arrays.sort(converted);\n        String ret = \"\";\n    \
    \    for (int i = 0; i < converted.length; i++) {\n            ret += numStrings[converted[i]]\
    \ + \" \";\n        }\n        return ret.trim();\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_tzid6np.java:34)\n"
  stdout: ''
  timestamp: 1660011504
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String input_numbers = numbers;\n        String[] input_arr = input_numbers.split(\"\
    \ \");\n        String output_numbers = \"\";\n        String[] output_arr = new\
    \ String[input_arr.length];\n        Integer[] num_arr = new Integer[input_arr.length];\n\
    \        for (int i = 0; i < input_arr.length; i++) {\n            switch (input_arr[i])\
    \ {\n                case \"zero\":\n                    num_arr[i] = 0;\n   \
    \                 break;\n                case \"one\":\n                    num_arr[i]\
    \ = 1;\n                    break;\n                case \"two\":\n          \
    \          num_arr[i] = 2;\n                    break;\n                case \"\
    three\":\n                    num_arr[i] = 3;\n                    break;\n  \
    \              case \"four\":\n                    num_arr[i] = 4;\n         \
    \           break;\n                case \"five\":\n                    num_arr[i]\
    \ = 5;\n                    break;\n                case \"six\":\n          \
    \          num_arr[i] = 6;\n                    break;\n                case \"\
    seven\":\n                    num_arr[i] = 7;\n                    break;\n  \
    \              case \"eight\":\n                    num_arr[i] = 8;\n        \
    \            break;\n                case \"nine\":\n                    num_arr[i]\
    \ = 9;\n                    break;\n            }\n        }\n        Arrays.sort(num_arr);\n\
    \        for (int i = 0; i < input_arr.length; i++) {\n            switch (num_arr[i])\
    \ {\n                case 0:\n                    output_arr[i] = \"zero\";\n\
    \                    break;\n                case 1:\n                    output_arr[i]\
    \ = \"one\";\n                    break;\n                case 2:\n          \
    \          output_arr[i] = \"two\";\n                    break;\n            \
    \    case 3:\n                    output_arr[i] = \"three\";\n               \
    \     break;\n                case 4:\n                    output_arr[i] = \"\
    four\";\n                    break;\n                case 5:\n               \
    \     output_arr[i] = \"five\";\n                    break;\n                case\
    \ 6:\n                    output_arr[i] = \"six\";\n                    break;\n\
    \                case 7:\n}\n    public static void main(String[] args) {\n  \
    \  assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz698gkij.java:80: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011503
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numbersArray = numbers.split(\" \");\n        int[] numbersIntArray\
    \ = new int[numbersArray.length];\n        for (int i = 0; i < numbersArray.length;\
    \ i++) {\n            numbersIntArray[i] = getInt(numbersArray[i]);\n        }\n\
    \        Arrays.sort(numbersIntArray);\n        StringBuilder stringBuilder =\
    \ new StringBuilder();\n        for (int i = 0; i < numbersIntArray.length; i++)\
    \ {\n            if (i > 0) {\n                stringBuilder.append(\" \");\n\
    \            }\n            stringBuilder.append(getString(numbersIntArray[i]));\n\
    \        }\n        return stringBuilder.toString();\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm_gvt5u5.java:18: error: cannot find symbol\n            numbersIntArray[i]\
    \ = getInt(numbersArray[i]);\n                                 ^\n  symbol:  \
    \ method getInt(String)\n  location: class Problem\n/tmp/tmpm_gvt5u5.java:26:\
    \ error: cannot find symbol\n            stringBuilder.append(getString(numbersIntArray[i]));\n\
    \                                 ^\n  symbol:   method getString(int)\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011504
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n}\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmp_1s4ww6t.java:18)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        List<Integer> numList\
    \ = new ArrayList<Integer>();\n        for (String num : nums) {\n           \
    \ numList.add(numToInt(num));\n        }\n        Collections.sort(numList);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ numList.size(); i++) {\n            sb.append(intToNum(numList.get(i)));\n \
    \           if (i < numList.size() - 1) {\n                sb.append(\" \");\n\
    \            }\n        }\n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp80s2imq5.java:18: error: cannot find symbol\n            numList.add(numToInt(num));\n\
    \                        ^\n  symbol:   method numToInt(String)\n  location: class\
    \ Problem\n/tmp/tmp80s2imq5.java:23: error: cannot find symbol\n            sb.append(intToNum(numList.get(i)));\n\
    \                      ^\n  symbol:   method intToNum(Integer)\n  location: class\
    \ Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011504
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> nums = Arrays.stream(numbers.split(\" \")).map(x ->\
    \ numeralToInt(x)).collect(Collectors.toList());\n        Collections.sort(nums);\n\
    \        return nums.stream().map(x -> intToNumeral(x)).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbol_u4cn.java:15: error: cannot find symbol\n        List<Integer>\
    \ nums = Arrays.stream(numbers.split(\" \")).map(x -> numeralToInt(x)).collect(Collectors.toList());\n\
    \                                                                        ^\n \
    \ symbol:   method numeralToInt(String)\n  location: class Problem\n/tmp/tmpbol_u4cn.java:15:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \      List<Integer> nums = Arrays.stream(numbers.split(\" \")).map(x -> numeralToInt(x)).collect(Collectors.toList());\n\
    \                                                                            \
    \                    ^\n    equality constraints: Integer\n    lower bounds: Object\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>toList()\n\
    /tmp/tmpbol_u4cn.java:17: error: cannot find symbol\n        return nums.stream().map(x\
    \ -> intToNumeral(x)).collect(Collectors.joining(\" \"));\n                  \
    \                    ^\n  symbol:   method intToNumeral(Integer)\n  location:\
    \ class Problem\n/tmp/tmpbol_u4cn.java:17: error: no suitable method found for\
    \ collect(Collector<CharSequence,CAP#1,String>)\n        return nums.stream().map(x\
    \ -> intToNumeral(x)).collect(Collectors.joining(\" \"));\n                  \
    \                                    ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object de"
  stdout: ''
  timestamp: 1660011504
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // >>> sort_numbers('three one five')\n        // 'one three five'\n\
    \        var map = new HashMap<String, Integer>();\n        map.put(\"zero\",\
    \ 0);\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"\
    three\", 3);\n        map.put(\"four\", 4);\n        map.put(\"five\", 5);\n \
    \       map.put(\"six\", 6);\n        map.put(\"seven\", 7);\n        map.put(\"\
    eight\", 8);\n        map.put(\"nine\", 9);\n        // >>> sort_numbers('three\
    \ one five')\n        // 'one three five'\n        List<Integer> list = Stream.of(numbers.split(\"\
    \ \")).map(s -> map.get(s)).collect(Collectors.toList());\n        // >>> sort_numbers('three\
    \ one five')\n        // 'one three five'\n        Collections.sort(list);\n \
    \       // >>> sort_numbers('three one five')\n        // 'one three five'\n \
    \       var listOfString = list.stream().map(s -> {\n            if (s == 0) return\
    \ \"zero\";\n            if (s == 1) return \"one\";\n            if (s == 2)\
    \ return \"two\";\n            if (s == 3) return \"three\";\n            if (s\
    \ == 4) return \"four\";\n            if (s == 5) return \"five\";\n         \
    \   if (s == 6) return \"six\";\n            if (s == 7) return \"seven\";\n \
    \           if (s == 8) return \"eight\";\n            if (s == 9) return \"nine\"\
    ;\n            return \"\";\n        }).collect(Collectors.toList());\n      \
    \  // >>> sort_numbers('three one five')\n        // 'one three five'\n      \
    \  return String.join(\" \", listOfString);\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because \"<parameter1>\" is null\n\tat Problem.lambda$sortNumbers$1(tmpqusy8fk3.java:37)\n\
    \tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\
    \tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.sortNumbers(tmpqusy8fk3.java:48)\n\tat Problem.main(tmpqusy8fk3.java:54)\n"
  stdout: ''
  timestamp: 1660011505
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Put your code here!\n        String[] nums = numbers.split(\"\
    \ \");\n        String[] nums_lower = new String[nums.length];\n        for (int\
    \ i = 0; i < nums.length; i++) {\n            nums_lower[i] = nums[i].toLowerCase();\n\
    \        }\n        int[] numbers_sorted = new int[nums.length];\n        for\
    \ (int i = 0; i < nums.length; i++) {\n            switch (nums_lower[i]) {\n\
    \                case \"zero\":\n                    numbers_sorted[i] = 0;\n\
    \                    break;\n                case \"one\":\n                 \
    \   numbers_sorted[i] = 1;\n                    break;\n                case \"\
    two\":\n                    numbers_sorted[i] = 2;\n                    break;\n\
    \                case \"three\":\n                    numbers_sorted[i] = 3;\n\
    \                    break;\n                case \"four\":\n                \
    \    numbers_sorted[i] = 4;\n                    break;\n                case\
    \ \"five\":\n                    numbers_sorted[i] = 5;\n                    break;\n\
    \                case \"six\":\n                    numbers_sorted[i] = 6;\n \
    \                   break;\n                case \"seven\":\n                \
    \    numbers_sorted[i] = 7;\n                    break;\n                case\
    \ \"eight\":\n                    numbers_sorted[i] = 8;\n                   \
    \ break;\n                case \"nine\":\n                    numbers_sorted[i]\
    \ = 9;\n                    break;\n            }\n        }\n        Arrays.sort(numbers_sorted);\n\
    \        String[] numbers_final = new String[nums.length];\n        for (int i\
    \ = 0; i < nums.length; i++) {\n            switch (numbers_sorted[i]) {\n   \
    \             case 0:\n                    numbers_final[i] = \"zero\";\n    \
    \                break;\n                case 1:\n                    numbers_final[i]\
    \ = \"one\";\n                    break;\n                case 2:\n          \
    \          numbers_final[i] = \"two\";\n                    break;\n         \
    \       case 3:\n                    numbers_final[i] = \"three\";\n         \
    \           break;\n                case 4:\n                    numbers_final[i]\
    \ =\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvwrru3_i.java:74: error: illegal start of expression\n}\n^\n/tmp/tmpvwrru3_i.java:75:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011504
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Obviously, if you were to solve this using the string-processing\
    \ classes from the standard Java library, this would be a trivial problem.\n \
    \       // But you're going to make it interesting by doing it with arrays and\
    \ streams, and then we're going to make it much more interesting.\n\n        //\
    \ Convert the string into an array of ints.\n        // Hint: You can use Stream.of(numbers.split(\"\
    \ \")) to get a stream of strings,\n        // and then you can use mapToInt()\
    \ to map that stream to a stream of ints.\n        int[] numbersArray = Stream.of(numbers.split(\"\
    \ \"))\n            .mapToInt(w -> wordToNumber(w))\n            .toArray();\n\
    \n        // If you did it right, you'll have a _sorted_ array of ints.\n    \
    \    // That's not exactly what we want. But it'll help you.\n\n        // Convert\
    \ the array back into a string.\n        // Hint: Use Arrays.stream(numbersArray)\
    \ to get a stream of ints,\n        // and then map each int to a string using\
    \ numberToWord().\n        String sorted = Arrays.stream(numbersArray)\n     \
    \       .mapToObj(w -> numberToWord(w))\n            .collect(Collectors.joining(\"\
    \ \"));\n\n        // You should have an array of ints, sorted from smallest to\
    \ largest.\n        // Now you're going to do something interesting with it.\n\
    \        // You're going to convert it back into an array of ints,\n        //\
    \ but this time, you're going to start with the largest int and work backwards.\n\
    \        // After all, it's a lot easier to get from a sorted array to a sorted-in-reverse\
    \ array,\n        // than it is to get from a sorted-in-reverse array to a sorted\
    \ array.\n        //\n        // Hint: You already have a sorted array. To get\
    \ the largest element,\n        // you can use numbersArray[numbersArray.length\
    \ - 1].\n        // To get the array of ints in reverse order,\n        // use\
    \ Arrays.stream(numbersArray).map(x -> 0 - x).toArray()\n        // to convert\
    \ the array of ints into an array of negative ints,\n        // and then use Ar\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o_lirpv.java:22: error: cannot find symbol\n            .mapToInt(w\
    \ -> wordToNumber(w))\n                           ^\n  symbol:   method wordToNumber(String)\n\
    \  location: class Problem\n/tmp/tmp7o_lirpv.java:32: error: cannot find symbol\n\
    \            .mapToObj(w -> numberToWord(w))\n                           ^\n \
    \ symbol:   method numberToWord(int)\n  location: class Problem\n/tmp/tmp7o_lirpv.java:33:\
    \ error: no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \            .collect(Collectors.joining(\" \"));\n            ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n3 errors\n"
  stdout: ''
  timestamp: 1660011505
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        numbers = numbers.trim();\n        if (numbers.isEmpty()) {\n   \
    \         return \"\";\n        }\n        HashMap<String, Integer> values = new\
    \ HashMap<>();\n        values.put(\"zero\", 0);\n        values.put(\"one\",\
    \ 1);\n        values.put(\"two\", 2);\n        values.put(\"three\", 3);\n  \
    \      values.put(\"four\", 4);\n        values.put(\"five\", 5);\n        values.put(\"\
    six\", 6);\n        values.put(\"seven\", 7);\n        values.put(\"eight\", 8);\n\
    \        values.put(\"nine\", 9);\n        String[] number_array = numbers.split(\"\
    \ \");\n        int[] num_array = new int[number_array.length];\n        for (int\
    \ i = 0; i < number_array.length; i++) {\n            num_array[i] = values.get(number_array[i]);\n\
    \        }\n        int temp;\n        int size = num_array.length;\n        for\
    \ (int i = 0; i < size; i++) {\n            for (int j = i + 1; j < size; j++)\
    \ {\n                if (num_array[i] > num_array[j]) {\n                    temp\
    \ = num_array[i];\n                    num_array[i] = num_array[j];\n        \
    \            num_array[j] = temp;\n                }\n            }\n        }\n\
    \        String ans = \"\";\n        for (int i = 0; i < num_array.length; i++)\
    \ {\n            for (Map.Entry<String, Integer> entry : values.entrySet()) {\n\
    \                if (num_array[i] == entry.getValue()) {\n                   \
    \ ans += entry.getKey() + \" \";\n                }\n            }\n        }\n\
    \        return ans.trim();\n}\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011505
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] sorted = numbers.split(\" \");\n        Arrays.sort(sorted,\
    \ Comparator.comparingInt(a -> Integer.parseInt(a)));\n        return String.join(\"\
    \ \", sorted);\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"five\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.lambda$sortNumbers$0(tmp_e2ferzs.java:16)\n\tat java.base/java.util.Comparator.lambda$comparingInt$7b0bb60$1(Comparator.java:494)\n\
    \tat java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)\n\t\
    at java.base/java.util.TimSort.sort(TimSort.java:220)\n\tat java.base/java.util.Arrays.sort(Arrays.java:1233)\n\
    \tat Problem.sortNumbers(tmp_e2ferzs.java:16)\n\tat Problem.main(tmp_e2ferzs.java:22)\n"
  stdout: ''
  timestamp: 1660011505
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n}\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmp_1s4ww6t.java:18)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n}\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmp_1s4ww6t.java:18)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] split = numbers.split(\" \");\n        int[] nums = new\
    \ int[split.length];\n        for (int i = 0; i < split.length; i++) {\n     \
    \       nums[i] = numToInt(split[i]);\n        }\n        Arrays.sort(nums);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ nums.length; i++) {\n            sb.append(intToNum(nums[i]));\n           \
    \ if (i != nums.length - 1) {\n                sb.append(\" \");\n           \
    \ }\n        }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp5dw1u7f.java:18: error: cannot find symbol\n            nums[i]\
    \ = numToInt(split[i]);\n                      ^\n  symbol:   method numToInt(String)\n\
    \  location: class Problem\n/tmp/tmpp5dw1u7f.java:23: error: cannot find symbol\n\
    \            sb.append(intToNum(nums[i]));\n                      ^\n  symbol:\
    \   method intToNum(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011505
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        int[] num = new int[nums.length];\n\
    \        HashMap<String, Integer> numerals = new HashMap<String, Integer>();\n\
    \        numerals.put(\"zero\", 0);\n        numerals.put(\"one\", 1);\n     \
    \   numerals.put(\"two\", 2);\n        numerals.put(\"three\", 3);\n        numerals.put(\"\
    four\", 4);\n        numerals.put(\"five\", 5);\n        numerals.put(\"six\"\
    , 6);\n        numerals.put(\"seven\", 7);\n        numerals.put(\"eight\", 8);\n\
    \        numerals.put(\"nine\", 9);\n        for (int i = 0; i < nums.length;\
    \ i++) {\n            num[i] = numerals.get(nums[i]);\n        }\n        Arrays.sort(num);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ num.length; i++) {\n            sb.append(num[i]);\n            if (i < num.length\
    \ - 1) {\n                sb.append(\" \");\n            }\n        }\n      \
    \  return sb.toString();\n}\n    public static void main(String[] args) {\n  \
    \  assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.HashMap.get(Object)\"\
    \ is null\n\tat Problem.sortNumbers(tmpumzwug3c.java:29)\n\tat Problem.main(tmpumzwug3c.java:42)\n"
  stdout: ''
  timestamp: 1660011506
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] num = numbers.split(\" \");\n        int[] nums = new int[num.length];\n\
    \        HashMap<String, Integer> mp = new HashMap<>();\n        mp.put(\"zero\"\
    , 0);\n        mp.put(\"one\", 1);\n        mp.put(\"two\", 2);\n        mp.put(\"\
    three\", 3);\n        mp.put(\"four\", 4);\n        mp.put(\"five\", 5);\n   \
    \     mp.put(\"six\", 6);\n        mp.put(\"seven\", 7);\n        mp.put(\"eight\"\
    , 8);\n        mp.put(\"nine\", 9);\n        for (int i = 0; i < num.length; i++)\
    \ {\n            nums[i] = mp.get(num[i]);\n        }\n        Arrays.sort(nums);\n\
    \        String res = \"\";\n        for (int i = 0; i < nums.length; i++) {\n\
    \            if (i == nums.length - 1) {\n                res += Integer.toString(nums[i]);\n\
    \            } else {\n                res += Integer.toString(nums[i]) + \" \"\
    ;\n            }\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.HashMap.get(Object)\"\
    \ is null\n\tat Problem.sortNumbers(tmpgtfryhs9.java:29)\n\tat Problem.main(tmpgtfryhs9.java:43)\n"
  stdout: ''
  timestamp: 1660011506
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] arr = numbers.split(\" \");\n        List<String> list =\
    \ Arrays.asList(arr);\n        Collections.sort(list);\n        String res = \"\
    \";\n        for (String num : list) {\n            res += num + \" \";\n    \
    \    }\n        return res.trim();\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptz7m93a2.java:27)\n"
  stdout: ''
  timestamp: 1660011506
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        /* Enter your code here */\n        String[] tokens = numbers.split(\"\
    \ \");\n        int[] nums = new int[tokens.length];\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        map.put(\"zero\", 0);\n        map.put(\"one\"\
    , 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n        map.put(\"\
    four\", 4);\n        map.put(\"five\", 5);\n        map.put(\"six\", 6);\n   \
    \     map.put(\"seven\", 7);\n        map.put(\"eight\", 8);\n        map.put(\"\
    nine\", 9);\n        for (int i = 0; i < tokens.length; i++) {\n            nums[i]\
    \ = map.get(tokens[i]);\n        }\n        Arrays.sort(nums);\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < nums.length; i++) {\n\
    \            for (Map.Entry<String, Integer> entry : map.entrySet()) {\n     \
    \           if (entry.getValue() == nums[i]) {\n                    sb.append(entry.getKey());\n\
    \                    sb.append(\" \");\n                }\n            }\n   \
    \     }\n        String result = sb.toString();\n        return result.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.sortNumbers(tmpi4bsc9_f.java:30)\n\tat Problem.main(tmpi4bsc9_f.java:46)\n"
  stdout: ''
  timestamp: 1660011506
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // TODO: Complete this method\n        return \"\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpidzj3cuc.java:20)\n"
  stdout: ''
  timestamp: 1660011505
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        HashMap<String, Integer> numToInt = new HashMap<String, Integer>();\n\
    \        numToInt.put(\"zero\", 0);\n        numToInt.put(\"one\", 1);\n     \
    \   numToInt.put(\"two\", 2);\n        numToInt.put(\"three\", 3);\n        numToInt.put(\"\
    four\", 4);\n        numToInt.put(\"five\", 5);\n        numToInt.put(\"six\"\
    , 6);\n        numToInt.put(\"seven\", 7);\n        numToInt.put(\"eight\", 8);\n\
    \        numToInt.put(\"nine\", 9);\n        String[] words = numbers.split(\"\
    \ \");\n        List<Integer> numbersList = new ArrayList<Integer>();\n      \
    \  for (String word : words) {\n            numbersList.add(numToInt.get(word));\n\
    \        }\n        Collections.sort(numbersList);\n        StringBuilder sorted\
    \ = new StringBuilder();\n        for (Integer num : numbersList) {\n        \
    \    sorted.append(num.toString() + \" \");\n        }\n        return sorted.toString().trim();\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.toString()\" because \"<local6>\" is null\n\tat Problem.sortNumbers(tmpotbmgtp1.java:34)\n\
    \tat Problem.main(tmpotbmgtp1.java:39)\n"
  stdout: ''
  timestamp: 1660011506
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        if (numbers == null || numbers.isEmpty()) return \"\";\n        String[]\
    \ nums = numbers.split(\" \");\n        Set<String> set = new HashSet<>(Arrays.asList(nums));\n\
    \        TreeMap<Integer, String> map = new TreeMap<>();\n        map.put(1, \"\
    one\");\n        map.put(2, \"two\");\n        map.put(3, \"three\");\n      \
    \  map.put(4, \"four\");\n        map.put(5, \"five\");\n        map.put(6, \"\
    six\");\n        map.put(7, \"seven\");\n        map.put(8, \"eight\");\n    \
    \    map.put(9, \"nine\");\n        StringBuilder sb = new StringBuilder();\n\
    \        for (Integer i : map.keySet()) {\n            if (set.contains(map.get(i)))\
    \ {\n                sb.append(map.get(i));\n                sb.append(\" \");\n\
    \            }\n        }\n        return sb.toString().trim();\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdmc9zijj.java:41)\n"
  stdout: ''
  timestamp: 1660011506
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        String[] vals = new\
    \ String[]{\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\"};\n        HashMap<String, Integer> dict = new\
    \ HashMap<String, Integer>();\n        for (int i = 0; i < vals.length; i++) {\n\
    \            dict.put(vals[i], i);\n        }\n        Arrays.sort(nums, (a, b)\
    \ -> dict.get(a) - dict.get(b));\n        return String.join(\" \", nums);\n}\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011506
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] words = numbers.split(\" \");\n        Integer[] ints =\
    \ new Integer[words.length];\n        for (int i = 0; i < words.length; i++) {\n\
    \            switch (words[i]) {\n                case \"zero\":\n           \
    \         ints[i] = 0;\n                    break;\n                case \"one\"\
    :\n                    ints[i] = 1;\n                    break;\n            \
    \    case \"two\":\n                    ints[i] = 2;\n                    break;\n\
    \                case \"three\":\n                    ints[i] = 3;\n         \
    \           break;\n                case \"four\":\n                    ints[i]\
    \ = 4;\n                    break;\n                case \"five\":\n         \
    \           ints[i] = 5;\n                    break;\n                case \"\
    six\":\n                    ints[i] = 6;\n                    break;\n       \
    \         case \"seven\":\n                    ints[i] = 7;\n                \
    \    break;\n                case \"eight\":\n                    ints[i] = 8;\n\
    \                    break;\n                case \"nine\":\n                \
    \    ints[i] = 9;\n                    break;\n            }\n        }\n    \
    \    Arrays.sort(ints);\n        StringBuilder sb = new StringBuilder();\n   \
    \     for (int i = 0; i < ints.length; i++) {\n            switch (ints[i]) {\n\
    \                case 0:\n                    sb.append(\"zero\");\n         \
    \           break;\n                case 1:\n                    sb.append(\"\
    one\");\n                    break;\n                case 2:\n               \
    \     sb.append(\"two\");\n                    break;\n                case 3:\n\
    \                    sb.append(\"three\");\n                    break;\n     \
    \           case 4:\n                    sb.append(\"four\");\n              \
    \      break;\n                case 5:\n                    sb.append(\"five\"\
    );\n                    break;\n                case 6:\n                    sb.append(\"\
    six\");\n                    break;\n                case 7:\n               \
    \     sb.append(\"seven\");\n                    break;\n                case\
    \ 8:\n                    sb.append(\"eight\");\n                    break;\n\
    \                case 9:\n                    sb.append(\"nine\");\n         \
    \           break;\n            }\n            if (i < ints.length - 1) {\n  \
    \              sb.append(\" \"\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpllm9aj0_.java:87: error: ')' expected\n                sb.append(\"\
    \ \"\n                             ^\n/tmp/tmpllm9aj0_.java:89: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n2\
    \ errors\n"
  stdout: ''
  timestamp: 1660011505
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] arr = numbers.split(\" \");\n        // Arrays.sort(arr);\
    \ // default is alphabetic sort\n        Arrays.sort(arr, new Comparator<String>()\
    \ {\n            public int compare(String a, String b) {\n                int\
    \ aValue = convertToNumber(a);\n                int bValue = convertToNumber(b);\n\
    \                if (aValue < bValue) {\n                    return -1;\n    \
    \            } else if (aValue > bValue) {\n                    return 1;\n  \
    \              } else {\n                    return 0;\n                }\n  \
    \          }\n        });\n        String result = String.join(\" \", arr);\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz_v386vp.java:19: error: cannot find symbol\n                int\
    \ aValue = convertToNumber(a);\n                             ^\n  symbol: method\
    \ convertToNumber(String)\n/tmp/tmpz_v386vp.java:20: error: cannot find symbol\n\
    \                int bValue = convertToNumber(b);\n                          \
    \   ^\n  symbol: method convertToNumber(String)\n2 errors\n"
  stdout: ''
  timestamp: 1660011506
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return \"\";\n}\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gv6_x36.java:19)\n"
  stdout: ''
  timestamp: 1660011500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // 1. Split the string into an array based on spaces.\n        //\
    \ 2. Convert the numbers in the array to integers.\n        // 3. Sort the array\
    \ by the integers in ascending order.\n        // 4. Create a new array of the\
    \ numbers converted to strings, and\n        //    space delimit them in one string.\n\
    \        // 5. Return the string.\n        return Arrays.stream(numbers.split(\"\
    \ \"))\n            .map(NumberUtils::toInt)\n            .sorted()\n        \
    \    .map(String::valueOf)\n            .collect(Collectors.joining(\" \"));\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpswutlpv4.java:22: error: cannot find symbol\n            .map(NumberUtils::toInt)\n\
    \                 ^\n  symbol:   variable NumberUtils\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011506
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        int i, n = numbers.length();\n        Map<String, Integer> map =\
    \ new HashMap<>();\n        String[] strings = numbers.split(\" \");\n       \
    \ String res = \"\";\n        map.put(\"zero\", 0);\n        map.put(\"one\",\
    \ 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n        map.put(\"\
    four\", 4);\n        map.put(\"five\", 5);\n        map.put(\"six\", 6);\n   \
    \     map.put(\"seven\", 7);\n        map.put(\"eight\", 8);\n        map.put(\"\
    nine\", 9);\n        int[] nums = new int[strings.length];\n        for (i = 0;\
    \ i < strings.length; i++) {\n            nums[i] = map.get(strings[i]);\n   \
    \     }\n        Arrays.sort(nums);\n        for (i = 0; i < nums.length; i++)\
    \ {\n            for (Map.Entry<String, Integer> entry : map.entrySet()) {\n \
    \               if (entry.getValue() == nums[i]) {\n                    res +=\
    \ \" \" + entry.getKey();\n                }\n            }\n        }\n     \
    \   return res.substring(1);\n}\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.sortNumbers(tmpm9zdcfr1.java:31)\n\tat Problem.main(tmpm9zdcfr1.java:44)\n"
  stdout: ''
  timestamp: 1660011506
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        final String[] ordered_digits = {\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n        String[]\
    \ words = numbers.split(\" \");\n        int[] indices = new int[words.length];\n\
    \        for (int i = 0; i < words.length; i++) {\n            for (int j = 0;\
    \ j < ordered_digits.length; j++) {\n                if (words[i].equals(ordered_digits[j]))\
    \ {\n                    indices[i] = j;\n                    break;\n       \
    \         }\n            }\n        }\n        Arrays.sort(indices);\n       \
    \ StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < indices.length;\
    \ i++) {\n            sb.append(ordered_digits[indices[i]]);\n            if (i\
    \ < indices.length - 1) {\n                sb.append(\" \");\n            }\n\
    \        }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpps5yar5b.java:37)\n"
  stdout: ''
  timestamp: 1660011506
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> nums = new ArrayList<>();\n        String[] numList\
    \ = numbers.split(\" \");\n        for (String num : numList) {\n            if\
    \ (num.equals(\"zero\")) {\n                nums.add(0);\n            } else if\
    \ (num.equals(\"one\")) {\n                nums.add(1);\n            } else if\
    \ (num.equals(\"two\")) {\n                nums.add(2);\n            } else if\
    \ (num.equals(\"three\")) {\n                nums.add(3);\n            } else\
    \ if (num.equals(\"four\")) {\n                nums.add(4);\n            } else\
    \ if (num.equals(\"five\")) {\n                nums.add(5);\n            } else\
    \ if (num.equals(\"six\")) {\n                nums.add(6);\n            } else\
    \ if (num.equals(\"seven\")) {\n                nums.add(7);\n            } else\
    \ if (num.equals(\"eight\")) {\n                nums.add(8);\n            } else\
    \ if (num.equals(\"nine\")) {\n                nums.add(9);\n            }\n \
    \       }\n        Collections.sort(nums);\n        String result = \"\";\n  \
    \      for (int num : nums) {\n            if (num == 0) {\n                result\
    \ += \"zero \";\n            } else if (num == 1) {\n                result +=\
    \ \"one \";\n            } else if (num == 2) {\n                result += \"\
    two \";\n            } else if (num == 3) {\n                result += \"three\
    \ \";\n            } else if (num == 4) {\n                result += \"four \"\
    ;\n            } else if (num == 5) {\n                result += \"five \";\n\
    \            } else if (num == 6) {\n                result += \"six \";\n   \
    \         } else if (num == 7) {\n                result += \"seven \";\n    \
    \        } else if (num == 8) {\n                result += \"eight \";\n     \
    \       } else if (num == 9) {\n                result += \"nine \";\n       \
    \     }\n        }\n        return result.trim();\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011506
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] nums = new int[numbers.split(\" \").length];\n        for (int\
    \ i = 0; i < nums.length; i++) {\n            nums[i] = toInt(numbers.split(\"\
    \ \")[i]);\n        }\n        Arrays.sort(nums);\n        return toStr(nums);\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpnu87hetb.java:17: error: cannot find symbol\n            nums[i]\
    \ = toInt(numbers.split(\" \")[i]);\n                      ^\n  symbol:   method\
    \ toInt(String)\n  location: class Problem\n/tmp/tmpnu87hetb.java:20: error: cannot\
    \ find symbol\n        return toStr(nums);\n               ^\n  symbol:   method\
    \ toStr(int[])\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011506
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return \"\";\n}\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gv6_x36.java:19)\n"
  stdout: ''
  timestamp: 1660011500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        throw new RuntimeException(\"Not implemented\");\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.sortNumbers(tmpabjudn23.java:15)\n\tat Problem.main(tmpabjudn23.java:18)\n"
  stdout: ''
  timestamp: 1660011507
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return new Scanner(numbers).tokens().map(x -> Integer.parseInt(x)).sorted().map(x\
    \ -> x.toString()).collect(Collectors.joining(\" \"));\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"three\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.lambda$sortNumbers$0(tmp9kkca4fy.java:15)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\
    \tat java.base/java.util.Scanner$TokenSpliterator.tryAdvance(Scanner.java:2849)\n\
    \tat java.base/java.util.Spliterator.forEachRemaining(Spliterator.java:332)\n\t\
    at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.sortNumbers(tmp9kkca4fy.java:15)\n\tat Problem.main(tmp9kkca4fy.java:19)\n"
  stdout: ''
  timestamp: 1660011507
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // TODO: Implement this function\n        return \"\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnh6bev_b.java:20)\n"
  stdout: ''
  timestamp: 1660011507
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"zero\"\
    , 0);\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"\
    three\", 3);\n        map.put(\"four\", 4);\n        map.put(\"five\", 5);\n \
    \       map.put(\"six\", 6);\n        map.put(\"seven\", 7);\n        map.put(\"\
    eight\", 8);\n        map.put(\"nine\", 9);\n        String[] tokens = numbers.split(\"\
    \ \");\n        int[] nums = new int[tokens.length];\n        for (int i = 0;\
    \ i < tokens.length; i++) {\n            nums[i] = map.get(tokens[i]);\n     \
    \   }\n        Arrays.sort(nums);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < nums.length; i++) {\n            if (i > 0) {\n \
    \               sb.append(\" \");\n            }\n            int num = nums[i];\n\
    \            if (num == 0) {\n                sb.append(\"zero\");\n         \
    \   } else if (num == 1) {\n                sb.append(\"one\");\n            }\
    \ else if (num == 2) {\n                sb.append(\"two\");\n            } else\
    \ if (num == 3) {\n                sb.append(\"three\");\n            } else if\
    \ (num == 4) {\n                sb.append(\"four\");\n            } else if (num\
    \ == 5) {\n                sb.append(\"five\");\n            } else if (num ==\
    \ 6) {\n                sb.append(\"six\");\n            } else if (num == 7)\
    \ {\n                sb.append(\"seven\");\n            } else if (num == 8) {\n\
    \                sb.append(\"eight\");\n            } else if (num == 9) {\n \
    \               sb.append(\"nine\");\n            }\n        }\n        return\
    \ sb.toString();\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.sortNumbers(tmpmw_214go.java:29)\n\tat Problem.main(tmpmw_214go.java:63)\n"
  stdout: ''
  timestamp: 1660011507
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n}\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmp_1s4ww6t.java:18)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] array = numbers.split(\" \");\n        Arrays.sort(array,\
    \ (String a, String b) -> {\n            return Integer.compare(getInteger(a),\
    \ getInteger(b));\n        });\n        return String.join(\" \", array);\n}\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9mu1hijx.java:17: error: cannot find symbol\n            return\
    \ Integer.compare(getInteger(a), getInteger(b));\n                           \
    \        ^\n  symbol:   method getInteger(String)\n  location: class Problem\n\
    /tmp/tmp9mu1hijx.java:17: error: cannot find symbol\n            return Integer.compare(getInteger(a),\
    \ getInteger(b));\n                                                  ^\n  symbol:\
    \   method getInteger(String)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011507
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String res = new String();\n        List<Integer> list = new ArrayList<Integer>();\n\
    \        String[] split = numbers.split(\" \");\n        for (String s : split)\
    \ {\n            if (s.equals(\"zero\")) {\n                list.add(0);\n   \
    \         } else if (s.equals(\"one\")) {\n                list.add(1);\n    \
    \        } else if (s.equals(\"two\")) {\n                list.add(2);\n     \
    \       } else if (s.equals(\"three\")) {\n                list.add(3);\n    \
    \        } else if (s.equals(\"four\")) {\n                list.add(4);\n    \
    \        } else if (s.equals(\"five\")) {\n                list.add(5);\n    \
    \        } else if (s.equals(\"six\")) {\n                list.add(6);\n     \
    \       } else if (s.equals(\"seven\")) {\n                list.add(7);\n    \
    \        } else if (s.equals(\"eight\")) {\n                list.add(8);\n   \
    \         } else if (s.equals(\"nine\")) {\n                list.add(9);\n   \
    \         }\n        }\n        Collections.sort(list);\n        for (int i =\
    \ 0; i < list.size(); i++) {\n            if (list.get(i) == 0) {\n          \
    \      res += \"zero\";\n            } else if (list.get(i) == 1) {\n        \
    \        res += \"one\";\n            } else if (list.get(i) == 2) {\n       \
    \         res += \"two\";\n            } else if (list.get(i) == 3) {\n      \
    \          res += \"three\";\n            } else if (list.get(i) == 4) {\n   \
    \             res += \"four\";\n            } else if (list.get(i) == 5) {\n \
    \               res += \"five\";\n            } else if (list.get(i) == 6) {\n\
    \                res += \"six\";\n            } else if (list.get(i) == 7) {\n\
    \                res += \"seven\";\n            } else if (list.get(i) == 8) {\n\
    \                res += \"eight\";\n            } else if (list.get(i)\n}\n  \
    \  public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppgpxf57q.java:61: error: ')' expected\n            } else if (list.get(i)\n\
    \                                  ^\n/tmp/tmppgpxf57q.java:62: error: illegal\
    \ start of statement\n}\n^\n/tmp/tmppgpxf57q.java:63: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011506
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        String[] sorted =\
    \ new String[nums.length];\n        ArrayList<Integer> nums2 = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < nums.length; i++) {\n            nums2.add(numeralToInt(nums[i]));\n\
    \        }\n        Collections.sort(nums2);\n        for (int i = 0; i < nums.length;\
    \ i++) {\n            sorted[i] = intToNumeral(nums2.get(i));\n        }\n   \
    \     return String.join(\" \", sorted);\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvt6oidtn.java:19: error: cannot find symbol\n            nums2.add(numeralToInt(nums[i]));\n\
    \                      ^\n  symbol:   method numeralToInt(String)\n  location:\
    \ class Problem\n/tmp/tmpvt6oidtn.java:23: error: cannot find symbol\n       \
    \     sorted[i] = intToNumeral(nums2.get(i));\n                        ^\n  symbol:\
    \   method intToNumeral(Integer)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011507
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberals = numbers.split(\" \");\n        Integer[] parsed_numbers\
    \ = new Integer[numberals.length];\n        for (int i = 0; i < numberals.length;\
    \ i++) {\n            parsed_numbers[i] = numeralToInteger(numberals[i]);\n  \
    \      }\n        Arrays.sort(parsed_numbers);\n        String[] sorted_numberals\
    \ = new String[numberals.length];\n        for (int i = 0; i < numberals.length;\
    \ i++) {\n            sorted_numberals[i] = integerToNumeral(parsed_numbers[i]);\n\
    \        }\n        return String.join(\" \", sorted_numberals);\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzd532h14.java:18: error: cannot find symbol\n            parsed_numbers[i]\
    \ = numeralToInteger(numberals[i]);\n                                ^\n  symbol:\
    \   method numeralToInteger(String)\n  location: class Problem\n/tmp/tmpzd532h14.java:23:\
    \ error: cannot find symbol\n            sorted_numberals[i] = integerToNumeral(parsed_numbers[i]);\n\
    \                                  ^\n  symbol:   method integerToNumeral(Integer)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011507
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // >>> numbers.split(' ')\n        // ['three', 'one', 'five']\n\
    \        // >>> map(len, ['three', 'one', 'five'])\n        // [5, 3, 4]\n   \
    \     // >>> list(zip(['three', 'one', 'five'], [5, 3, 4]))\n        // [('three',\
    \ 5), ('one', 3), ('five', 4)]\n        // >>> sorted(list(zip(['three', 'one',\
    \ 'five'], [5, 3, 4])), key=lambda pair: pair[1])\n        // [('one', 3), ('five',\
    \ 4), ('three', 5)]\n        // >>> map(lambda pair: pair[0], sorted(list(zip(['three',\
    \ 'one', 'five'], [5, 3, 4])), key=lambda pair: pair[1]))\n        // ['one',\
    \ 'five', 'three']\n        return \" \".join(map(lambda pair: pair[0], sorted(list(zip(numbers.split('\
    \ '), map(len, numbers.split(' ')))), key=lambda pair: pair[1])));\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl72lpt_9.java:25: error: ')' expected\n        return \" \".join(map(lambda\
    \ pair: pair[0], sorted(list(zip(numbers.split(' '), map(len, numbers.split('\
    \ ')))), key=lambda pair: pair[1])));\n                                  ^\n/tmp/tmpl72lpt_9.java:25:\
    \ error: not a statement\n        return \" \".join(map(lambda pair: pair[0],\
    \ sorted(list(zip(numbers.split(' '), map(len, numbers.split(' ')))), key=lambda\
    \ pair: pair[1])));\n                                             ^\n/tmp/tmpl72lpt_9.java:25:\
    \ error: ';' expected\n        return \" \".join(map(lambda pair: pair[0], sorted(list(zip(numbers.split('\
    \ '), map(len, numbers.split(' ')))), key=lambda pair: pair[1])));\n         \
    \                                       ^\n/tmp/tmpl72lpt_9.java:25: error: ')'\
    \ expected\n        return \" \".join(map(lambda pair: pair[0], sorted(list(zip(numbers.split('\
    \ '), map(len, numbers.split(' ')))), key=lambda pair: pair[1])));\n         \
    \                                                                            \
    \                                           ^\n/tmp/tmpl72lpt_9.java:25: error:\
    \ not a statement\n        return \" \".join(map(lambda pair: pair[0], sorted(list(zip(numbers.split('\
    \ '), map(len, numbers.split(' ')))), key=lambda pair: pair[1])));\n         \
    \                                                                            \
    \                                                      ^\n/tmp/tmpl72lpt_9.java:25:\
    \ error: ';' expected\n        return \" \".join(map(lambda pair: pair[0], sorted(list(zip(numbers.split('\
    \ '), map(len, numbers.split(' ')))), key=lambda pair: pair[1])));\n         \
    \                                                                            \
    \                                                         ^\n6 errors\n"
  stdout: ''
  timestamp: 1660011507
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<String, Integer> mapping = new HashMap<>();\n        mapping.put(\"\
    zero\", 0);\n        mapping.put(\"one\", 1);\n        mapping.put(\"two\", 2);\n\
    \        mapping.put(\"three\", 3);\n        mapping.put(\"four\", 4);\n     \
    \   mapping.put(\"five\", 5);\n        mapping.put(\"six\", 6);\n        mapping.put(\"\
    seven\", 7);\n        mapping.put(\"eight\", 8);\n        mapping.put(\"nine\"\
    , 9);\n        List<Integer> sortedList = Stream.of(numbers.split(\" \")).map(mapping::get).sorted().collect(Collectors.toList());\n\
    \        return sortedList.stream().map(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\
    \tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.sortNumbers(tmp2vutw7gg.java:27)\n\tat Problem.main(tmp2vutw7gg.java:30)\n"
  stdout: ''
  timestamp: 1660011508
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        StringBuilder sb =\
    \ new StringBuilder();\n        for (int i = 0; i < nums.length; i++) {\n    \
    \        sb.append(word_to_num(nums[i]));\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjs8ttj6_.java:18: error: cannot find symbol\n            sb.append(word_to_num(nums[i]));\n\
    \                      ^\n  symbol:   method word_to_num(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011507
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return \"\";\n}\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gv6_x36.java:19)\n"
  stdout: ''
  timestamp: 1660011500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        for (int i = 0; i\
    \ < nums.length; i++) {\n            for (int j = 0; j < nums.length - 1; j++)\
    \ {\n                if (intFromString(nums[j]) > intFromString(nums[j + 1]))\
    \ {\n                    String tmp = nums[j];\n                    nums[j] =\
    \ nums[j + 1];\n                    nums[j + 1] = tmp;\n                }\n  \
    \          }\n        }\n        return String.join(\" \", nums);\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ugtmzfi.java:18: error: cannot find symbol\n                if\
    \ (intFromString(nums[j]) > intFromString(nums[j + 1])) {\n                  \
    \  ^\n  symbol:   method intFromString(String)\n  location: class Problem\n/tmp/tmp9ugtmzfi.java:18:\
    \ error: cannot find symbol\n                if (intFromString(nums[j]) > intFromString(nums[j\
    \ + 1])) {\n                                             ^\n  symbol:   method\
    \ intFromString(String)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011507
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"zero\"\
    , 0);\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"\
    three\", 3);\n        map.put(\"four\", 4);\n        map.put(\"five\", 5);\n \
    \       map.put(\"six\", 6);\n        map.put(\"seven\", 7);\n        map.put(\"\
    eight\", 8);\n        map.put(\"nine\", 9);\n        String[] nums = numbers.split(\"\
    \ \");\n        List<Integer> list = new ArrayList<>();\n        for (String s\
    \ : nums)\n            list.add(map.get(s));\n        Collections.sort(list);\n\
    \        List<String> lst = new ArrayList<>();\n        for (int i : list)\n \
    \           lst.add(map.get(i));\n        return String.join(\" \", lst);\n}\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppbenlyiv.java:33: error: incompatible types: Integer cannot be\
    \ converted to String\n            lst.add(map.get(i));\n                    \
    \       ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011508
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Remove spaces for consistency\n        numbers = numbers.replaceAll(\"\
    \\\\s\", \"\");\n        // Convert to list of strings\n        List<String> s\
    \ = Arrays.asList(numbers.split(\"\"));\n        // Convert to integers\n    \
    \    List<Integer> i = s.stream().map(x -> Integer.parseInt(x)).collect(Collectors.toList());\n\
    \        // Sort integers\n        Collections.sort(i);\n        // Convert to\
    \ strings\n        s = i.stream().map(x -> Integer.toString(x)).collect(Collectors.toList());\n\
    \        // Convert to single string\n        String s_new = String.join(\"\"\
    , s);\n        // Add spaces\n        String s_new_spaced = s_new.replaceAll(\"\
    (.{1})\", \"$1 \").trim();\n        return s_new_spaced;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.lambda$sortNumbers$0(tmprcbwbju1.java:20)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.sortNumbers(tmprcbwbju1.java:20)\n\tat Problem.main(tmprcbwbju1.java:32)\n"
  stdout: ''
  timestamp: 1660011509
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n}\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmp_1s4ww6t.java:18)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] val = {0,0,0,0,0,0,0,0,0,0};\n        for(String s : numbers.split(\"\
    \ \")) {\n            if(s.equals(\"zero\")) val[0]++;\n            if(s.equals(\"\
    one\")) val[1]++;\n            if(s.equals(\"two\")) val[2]++;\n            if(s.equals(\"\
    three\")) val[3]++;\n            if(s.equals(\"four\")) val[4]++;\n          \
    \  if(s.equals(\"five\")) val[5]++;\n            if(s.equals(\"six\")) val[6]++;\n\
    \            if(s.equals(\"seven\")) val[7]++;\n            if(s.equals(\"eight\"\
    )) val[8]++;\n            if(s.equals(\"nine\")) val[9]++;\n        }\n      \
    \  String[] sval = {\"zero\",\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"\
    ,\"seven\",\"eight\",\"nine\"};\n        StringBuilder sb = new StringBuilder();\n\
    \        for(int i = 0; i < 10; i++) {\n            for(int j = 0; j < val[i];\
    \ j++) {\n                sb.append(sval[i]);\n                sb.append(\" \"\
    );\n            }\n        }\n        return sb.toString().trim();\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011508
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n}\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmp_1s4ww6t.java:18)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // TODO: Write your code here\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmpqne9_jlv.java:19)\n"
  stdout: ''
  timestamp: 1660011509
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // >>> sort_numbers('three one five')\n        // 'one three five'\n\
    \        // >>> sort_numbers('nine eight seven four five six two three one zero')\n\
    \        // 'zero one two three four five six seven eight nine'\n        // >>>\
    \ sort_numbers('one one one one one one one one one one one')\n        // 'one\
    \ one one one one one one one one one one'\n        // >>> sort_numbers('eight\
    \ seven two six two six two six two six two')\n        // 'two two two two two\
    \ two six six six six seven eight'\n        // >>> sort_numbers('zero one two\
    \ three four five six seven eight nine')\n        // 'zero one two three four\
    \ five six seven eight nine'\n        return Arrays.stream(numbers.split(\" \"\
    ))\n                .map(numeral -> {\n                    switch (numeral) {\n\
    \                        case \"zero\":\n                            return \"\
    0\";\n                        case \"one\":\n                            return\
    \ \"1\";\n                        case \"two\":\n                            return\
    \ \"2\";\n                        case \"three\":\n                          \
    \  return \"3\";\n                        case \"four\":\n                   \
    \         return \"4\";\n                        case \"five\":\n            \
    \                return \"5\";\n                        case \"six\":\n      \
    \                      return \"6\";\n                        case \"seven\":\n\
    \                            return \"7\";\n                        case \"eight\"\
    :\n                            return \"8\";\n                        case \"\
    nine\":\n                            return \"9\";\n                        default:\n\
    \                            return \"\";\n                    }\n           \
    \     })\n                .sorted()\n                .map(number -> {\n      \
    \              switch (number) {\n                        case \"0\":\n      \
    \                      return \"zero\";\n                        case \"1\":\n\
    \                            return \"one\";\n                        case \"\
    2\":\n                            return \"two\";\n                        case\
    \ \"3\":\n                            return \"three\";\n                    \
    \    case \"4\":\n                            return \"four\";\n             \
    \           case \"5\":\n                            return \"five\";\n      \
    \                  case \"6\":\n                            return \"six\";\n\
    \                        case \"7\":\n                            return \"seven\"\
    ;\n                        case \"8\":\n                            return \"\
    eight\";\n                        case \"9\":\n                            return\
    \ \"nine\";\n                        default:\n                            return\
    \ \"\";\n                    }\n                })\n\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq6m8zzk2.java:78: error: ';' expected\n                })\n   \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011508
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numbersArray = numbers.split(\" \");\n        int[] numAsInts\
    \ = new int[numbersArray.length];\n        for (int i = 0; i < numbersArray.length;\
    \ i++) {\n            numAsInts[i] = parseNumber(numbersArray[i]);\n        }\n\
    \        Arrays.sort(numAsInts);\n        String[] numsAsWords = new String[numbersArray.length];\n\
    \        for (int i = 0; i < numAsInts.length; i++) {\n            numsAsWords[i]\
    \ = getNumberString(numAsInts[i]);\n        }\n        return String.join(\" \"\
    , numsAsWords);\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpz2rfpvr0.java:18: error: cannot find symbol\n            numAsInts[i]\
    \ = parseNumber(numbersArray[i]);\n                           ^\n  symbol:   method\
    \ parseNumber(String)\n  location: class Problem\n/tmp/tmpz2rfpvr0.java:23: error:\
    \ cannot find symbol\n            numsAsWords[i] = getNumberString(numAsInts[i]);\n\
    \                             ^\n  symbol:   method getNumberString(int)\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011508
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // convert to numbers\n        ArrayList<Integer> nums = new ArrayList<Integer>();\n\
    \        for (String numeral : numbers.split(\" \")) {\n            int num =\
    \ 0;\n            switch (numeral) {\n                case \"zero\":\n       \
    \             num = 0;\n                    break;\n                case \"one\"\
    :\n                    num = 1;\n                    break;\n                case\
    \ \"two\":\n                    num = 2;\n                    break;\n       \
    \         case \"three\":\n                    num = 3;\n                    break;\n\
    \                case \"four\":\n                    num = 4;\n              \
    \      break;\n                case \"five\":\n                    num = 5;\n\
    \                    break;\n                case \"six\":\n                 \
    \   num = 6;\n                    break;\n                case \"seven\":\n  \
    \                  num = 7;\n                    break;\n                case\
    \ \"eight\":\n                    num = 8;\n                    break;\n     \
    \           case \"nine\":\n                    num = 9;\n                   \
    \ break;\n            }\n            nums.add(num);\n        }\n        Collections.sort(nums);\n\
    \        String sorted = \"\";\n        for (int num : nums) {\n            String\
    \ numeral = \"\";\n            switch (num) {\n                case 0:\n     \
    \               numeral = \"zero\";\n                    break;\n            \
    \    case 1:\n                    numeral = \"one\";\n                    break;\n\
    \                case 2:\n                    numeral = \"two\";\n           \
    \         break;\n                case 3:\n                    numeral = \"three\"\
    ;\n                    break;\n                case 4:\n                    numeral\
    \ = \"four\";\n                    break;\n                case 5:\n         \
    \           numeral = \"five\";\n                    break;\n                case\
    \ 6:\n                    numeral = \"six\";\n                    break;\n   \
    \             case 7:\n                    numeral = \"seven\";\n            \
    \        break;\n                case 8:\n                    numeral = \"eight\"\
    ;\n                    break;\n                case 9:\n                    numeral\
    \ = \"nine\";\n                    break;\n            }\n            sorted +=\
    \ \" \" + numeral;\n        }\n        return sorted.substring(1);\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprsuyv1v0.java:94)\n"
  stdout: ''
  timestamp: 1660011509
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String [] num = numbers.split(\" \");\n        int [] numList = new\
    \ int[num.length];\n        for (int i = 0; i < num.length; i++) {\n         \
    \   numList[i] = mapNumToInt(num[i]);\n        }\n        Arrays.sort(numList);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ numList.length; i++) {\n            sb.append(mapIntToNum(numList[i]));\n  \
    \          if (i != numList.length - 1) {\n                sb.append(\" \");\n\
    \            }\n        }\n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd2nogxpg.java:18: error: cannot find symbol\n            numList[i]\
    \ = mapNumToInt(num[i]);\n                         ^\n  symbol:   method mapNumToInt(String)\n\
    \  location: class Problem\n/tmp/tmpd2nogxpg.java:23: error: cannot find symbol\n\
    \            sb.append(mapIntToNum(numList[i]));\n                      ^\n  symbol:\
    \   method mapIntToNum(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011508
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        int[] inums = new\
    \ int[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n       \
    \     inums[i] = numToInt(nums[i]);\n        }\n        Arrays.sort(inums);\n\
    \        String res = \"\";\n        for (int i = 0; i < inums.length; i++) {\n\
    \            res += intToNum(inums[i]) + \" \";\n        }\n        return res.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpahsw0czc.java:18: error: cannot find symbol\n            inums[i]\
    \ = numToInt(nums[i]);\n                       ^\n  symbol:   method numToInt(String)\n\
    \  location: class Problem\n/tmp/tmpahsw0czc.java:23: error: cannot find symbol\n\
    \            res += intToNum(inums[i]) + \" \";\n                   ^\n  symbol:\
    \   method intToNum(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011509
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return \"one three five\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6abj83zt.java:18)\n"
  stdout: ''
  timestamp: 1660011509
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        Map<String, Integer>\
    \ numMap = new HashMap<>();\n        numMap.put(\"zero\", 0);\n        numMap.put(\"\
    one\", 1);\n        numMap.put(\"two\", 2);\n        numMap.put(\"three\", 3);\n\
    \        numMap.put(\"four\", 4);\n        numMap.put(\"five\", 5);\n        numMap.put(\"\
    six\", 6);\n        numMap.put(\"seven\", 7);\n        numMap.put(\"eight\", 8);\n\
    \        numMap.put(\"nine\", 9);\n        Arrays.sort(nums, (a, b) -> {\n   \
    \         if (numMap.get(a) > numMap.get(b)) {\n                return 1;\n  \
    \          } else if (numMap.get(a) < numMap.get(b)) {\n                return\
    \ -1;\n            } else {\n                return 0;\n            }\n      \
    \  });\n        return String.join(\" \", nums);\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011509
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // >>> numbers.split(' ')\n        // ['three', 'one', 'five']\n\
    \        String[] array = numbers.split(\" \");\n        // >>> Integer.parseInt('3')\n\
    \        // 3\n        // >>> Integer.parseInt('1')\n        // 1\n        //\
    \ >>> Integer.parseInt('5')\n        // 5\n        List<Integer> list = Arrays.stream(array).map(Integer::parseInt).collect(Collectors.toList());\n\
    \        // >>> list.sort()\n        // >>> list\n        // [1, 3, 5]\n     \
    \   Collections.sort(list);\n        // >>> ' '.join(['1', '3', '5'])\n      \
    \  // '1 3 5'\n        return String.join(\" \", list.stream().map(String::valueOf).collect(Collectors.toList()));\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.sortNumbers(tmpean8tr11.java:24)\n\tat Problem.main(tmpean8tr11.java:34)\n"
  stdout: ''
  timestamp: 1660011509
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        HashMap<String, Integer> dictionary = new HashMap<String, Integer>();\n\
    \        dictionary.put(\"zero\", 0);\n        dictionary.put(\"one\", 1);\n \
    \       dictionary.put(\"two\", 2);\n        dictionary.put(\"three\", 3);\n \
    \       dictionary.put(\"four\", 4);\n        dictionary.put(\"five\", 5);\n \
    \       dictionary.put(\"six\", 6);\n        dictionary.put(\"seven\", 7);\n \
    \       dictionary.put(\"eight\", 8);\n        dictionary.put(\"nine\", 9);\n\
    \        String[] list_numbers = numbers.split(\" \");\n        List<Integer>\
    \ number_list = new ArrayList<Integer>();\n        for (String number : list_numbers)\
    \ {\n            number_list.add(dictionary.get(number));\n        }\n       \
    \ Collections.sort(number_list);\n        StringBuilder str = new StringBuilder();\n\
    \        for (Integer number : number_list) {\n            for (String key : dictionary.keySet())\
    \ {\n                if (dictionary.get(key) == number) {\n                  \
    \  str.append(key + \" \");\n                }\n            }\n        }\n   \
    \     return str.toString().trim();\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011509
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Your code here\n        int[] digits = Arrays.stream(numbers.split(\"\
    \ \")).mapToInt(Integer::parseInt).toArray();\n        Arrays.sort(digits);\n\
    \        return Arrays.stream(digits).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat java.base/java.util.stream.ReferencePipeline$4$1.accept(ReferencePipeline.java:214)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:575)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:260)\n\
    \tat java.base/java.util.stream.IntPipeline.toArray(IntPipeline.java:562)\n\t\
    at Problem.sortNumbers(tmpj0ophe5l.java:16)\n\tat Problem.main(tmpj0ophe5l.java:21)\n"
  stdout: ''
  timestamp: 1660011509
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return numbers;\n}\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvvblyeu8.java:21)\n"
  stdout: ''
  timestamp: 1660011509
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numbersArray = numbers.split(\" \");\n        List<Integer>\
    \ intList = new ArrayList<Integer>();\n        for (String number : numbersArray)\
    \ {\n            intList.add(intFromString(number));\n        }\n        Collections.sort(intList);\n\
    \        String[] intListStr = new String[intList.size()];\n        for (int i\
    \ = 0; i < intList.size(); i++) {\n            intListStr[i] = numeralFromInt(intList.get(i));\n\
    \        }\n        return String.join(\" \", intListStr);\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcx7xtbdg.java:18: error: cannot find symbol\n            intList.add(intFromString(number));\n\
    \                        ^\n  symbol:   method intFromString(String)\n  location:\
    \ class Problem\n/tmp/tmpcx7xtbdg.java:23: error: cannot find symbol\n       \
    \     intListStr[i] = numeralFromInt(intList.get(i));\n                      \
    \      ^\n  symbol:   method numeralFromInt(Integer)\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011509
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return \"\";\n}\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gv6_x36.java:19)\n"
  stdout: ''
  timestamp: 1660011500
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<String,Integer> numMap = new HashMap<String,Integer>();\n   \
    \     numMap.put(\"zero\",0);\n        numMap.put(\"one\",1);\n        numMap.put(\"\
    two\",2);\n        numMap.put(\"three\",3);\n        numMap.put(\"four\",4);\n\
    \        numMap.put(\"five\",5);\n        numMap.put(\"six\",6);\n        numMap.put(\"\
    seven\",7);\n        numMap.put(\"eight\",8);\n        numMap.put(\"nine\",9);\n\
    \        String result = \"\";\n        String[] nums = numbers.split(\" \");\n\
    \        List<Integer> numList = new ArrayList<Integer>();\n        for (String\
    \ num: nums) {\n            numList.add(numMap.get(num));\n        }\n       \
    \ Collections.sort(numList);\n        for (Integer num: numList) {\n         \
    \   for (Map.Entry<String,Integer> entry: numMap.entrySet()) {\n             \
    \   if (entry.getValue().equals(num)) {\n                    result += entry.getKey()\
    \ + \" \";\n                }\n            }\n        }\n        return result.trim();\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011510
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] num_words = numbers.split(\" \");\n        String[] words\
    \ = new String[]{\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"\
    six\", \"seven\", \"eight\", \"nine\"};\n        int[] nums = new int[num_words.length];\n\
    \        for (int i = 0; i < num_words.length; i++) {\n            for (int j\
    \ = 0; j < words.length; j++) {\n                if (num_words[i].equals(words[j]))\
    \ {\n                    nums[i] = j;\n                }\n            }\n    \
    \    }\n        Arrays.sort(nums);\n        String res = \"\";\n        for (int\
    \ i = 0; i < nums.length; i++) {\n            res += words[nums[i]] + \" \";\n\
    \        }\n        return res.trim();\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb7v9fpa.java:33)\n"
  stdout: ''
  timestamp: 1660011510
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<String, Integer> numbersMap = new HashMap<>();\n        numbersMap.put(\"\
    zero\", 0);\n        numbersMap.put(\"one\", 1);\n        numbersMap.put(\"two\"\
    , 2);\n        numbersMap.put(\"three\", 3);\n        numbersMap.put(\"four\"\
    , 4);\n        numbersMap.put(\"five\", 5);\n        numbersMap.put(\"six\", 6);\n\
    \        numbersMap.put(\"seven\", 7);\n        numbersMap.put(\"eight\", 8);\n\
    \        numbersMap.put(\"nine\", 9);\n        String[] numbersArray = numbers.split(\"\
    \ \");\n        String result = \"\";\n        for (int i = 0; i < numbersArray.length;\
    \ i++) {\n            for (int j = i + 1; j < numbersArray.length; j++) {\n  \
    \              if (numbersMap.get(numbersArray[i]) > numbersMap.get(numbersArray[j]))\
    \ {\n                    String temp = numbersArray[i];\n                    numbersArray[i]\
    \ = numbersArray[j];\n                    numbersArray[j] = temp;\n          \
    \      }\n            }\n            result += numbersArray[i] + \" \";\n    \
    \    }\n        return result.trim();\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011510
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] nums = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        for (String\
    \ number : numbers.split(\" \")) {\n            nums[numberMap.get(number)]++;\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < nums.length; i++) {\n            for (int j = 0; j < nums[i]; j++)\
    \ {\n                sb.append(numberMap.inverse().get(i));\n                sb.append(\"\
    \ \");\n            }\n        }\n        return sb.toString().trim();\n}\n  \
    \  public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpejhqdbpl.java:17: error: cannot find symbol\n            nums[numberMap.get(number)]++;\n\
    \                 ^\n  symbol:   variable numberMap\n  location: class Problem\n\
    /tmp/tmpejhqdbpl.java:22: error: cannot find symbol\n                sb.append(numberMap.inverse().get(i));\n\
    \                          ^\n  symbol:   variable numberMap\n  location: class\
    \ Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011510
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Implement the method\n        // Sort the given numbers in ascending\
    \ order\n        // Return the sorted string\n        return \"\";\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb5bk7fef.java:22)\n"
  stdout: ''
  timestamp: 1660011510
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        HashMap<String, Integer> nums = new HashMap<String, Integer>();\n\
    \        nums.put(\"zero\", 0);\n        nums.put(\"one\", 1);\n        nums.put(\"\
    two\", 2);\n        nums.put(\"three\", 3);\n        nums.put(\"four\", 4);\n\
    \        nums.put(\"five\", 5);\n        nums.put(\"six\", 6);\n        nums.put(\"\
    seven\", 7);\n        nums.put(\"eight\", 8);\n        nums.put(\"nine\", 9);\n\
    \        String[] split = numbers.split(\" \");\n        String[] converted =\
    \ new String[split.length];\n        for (int i = 0; i < split.length; i++) {\n\
    \            converted[i] = Integer.toString(nums.get(split[i]));\n        }\n\
    \        Arrays.sort(converted);\n        StringBuilder answer = new StringBuilder();\n\
    \        for (int i = 0; i < converted.length; i++) {\n            answer.append(converted[i]\
    \ + \" \");\n        }\n        return answer.toString().trim();\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.HashMap.get(Object)\"\
    \ is null\n\tat Problem.sortNumbers(tmp8rq8ahfk.java:29)\n\tat Problem.main(tmp8rq8ahfk.java:39)\n"
  stdout: ''
  timestamp: 1660011510
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] num = numbers.split(\" \");\n        Arrays.sort(num);\n\
    \        String result = String.join(\" \", num);\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwrahp321.java:23)\n"
  stdout: ''
  timestamp: 1660011510
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        final String[] string_numbers = numbers.split(\" \");\n        List<Integer>\
    \ list_numbers = Arrays.stream(string_numbers).map(x -> word_to_int(x)).collect(Collectors.toList());\n\
    \        Collections.sort(list_numbers);\n        return list_numbers.stream().map(x\
    \ -> int_to_word(x)).collect(Collectors.joining(\" \"));\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw6nxkgi4.java:16: error: cannot find symbol\n        List<Integer>\
    \ list_numbers = Arrays.stream(string_numbers).map(x -> word_to_int(x)).collect(Collectors.toList());\n\
    \                                                                            ^\n\
    \  symbol:   method word_to_int(String)\n  location: class Problem\n/tmp/tmpw6nxkgi4.java:16:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \      List<Integer> list_numbers = Arrays.stream(string_numbers).map(x -> word_to_int(x)).collect(Collectors.toList());\n\
    \                                                                            \
    \                       ^\n    equality constraints: Integer\n    lower bounds:\
    \ Object\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>toList()\n/tmp/tmpw6nxkgi4.java:18: error: cannot find symbol\n        return\
    \ list_numbers.stream().map(x -> int_to_word(x)).collect(Collectors.joining(\"\
    \ \"));\n                                              ^\n  symbol:   method int_to_word(Integer)\n\
    \  location: class Problem\n/tmp/tmpw6nxkgi4.java:18: error: no suitable method\
    \ found for collect(Collector<CharSequence,CAP#1,String>)\n        return list_numbers.stream().map(x\
    \ -> int_to_word(x)).collect(Collectors.joining(\" \"));\n                   \
    \                                          ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Object>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Object,A,R#2>) is not applicable\n \
    \     (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<?"
  stdout: ''
  timestamp: 1660011510
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        int[] num = new int[nums.length];\n\
    \        for (int i = 0; i < nums.length; i++) {\n            num[i] = convertNum(nums[i]);\n\
    \        }\n        Arrays.sort(num);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < num.length; i++) {\n            sb.append(convertToNum(num[i]));\n\
    \            if (i < num.length - 1) {\n                sb.append(\" \");\n  \
    \          }\n        }\n        return sb.toString();\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9g3dt5jt.java:18: error: cannot find symbol\n            num[i]\
    \ = convertNum(nums[i]);\n                     ^\n  symbol:   method convertNum(String)\n\
    \  location: class Problem\n/tmp/tmp9g3dt5jt.java:23: error: cannot find symbol\n\
    \            sb.append(convertToNum(num[i]));\n                      ^\n  symbol:\
    \   method convertToNum(int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011511
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        if (numbers == null || numbers.isEmpty()) {\n            return numbers;\n\
    \        }\n        String[] nums = numbers.split(\" \");\n        List<Integer>\
    \ numsInt = new ArrayList<>();\n        for (String num : nums) {\n          \
    \  numsInt.add(str2Int(num));\n        }\n        Collections.sort(numsInt);\n\
    \        String ret = \"\";\n        for (int num : numsInt) {\n            ret\
    \ += num2Str(num) + \" \";\n        }\n        ret = ret.trim();\n        return\
    \ ret;\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpy8gy0wt6.java:21: error: cannot find symbol\n            numsInt.add(str2Int(num));\n\
    \                        ^\n  symbol:   method str2Int(String)\n  location: class\
    \ Problem\n/tmp/tmpy8gy0wt6.java:26: error: cannot find symbol\n            ret\
    \ += num2Str(num) + \" \";\n                   ^\n  symbol:   method num2Str(int)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011511
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Your code here\n        return \"\";\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3t9pt2mk.java:20)\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> nums = Arrays.asList(numbers.split(\" \"));\n      \
    \  Collections.sort(nums, new Comparator<String>() {\n            public int compare(String\
    \ a, String b) {\n                String[] ref = new String[]{\"zero\", \"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    };\n                Integer idxA = Arrays.asList(ref).indexOf(a);\n          \
    \      Integer idxB = Arrays.asList(ref).indexOf(b);\n                return idxA\
    \ - idxB;\n            }\n        });\n        return String.join(\" \", nums);\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011511
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n}\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmp_1s4ww6t.java:18)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<String, Integer> dict = new HashMap<>();\n        dict.put(\"\
    zero\", 0);\n        dict.put(\"one\", 1);\n        dict.put(\"two\", 2);\n  \
    \      dict.put(\"three\", 3);\n        dict.put(\"four\", 4);\n        dict.put(\"\
    five\", 5);\n        dict.put(\"six\", 6);\n        dict.put(\"seven\", 7);\n\
    \        dict.put(\"eight\", 8);\n        dict.put(\"nine\", 9);\n        List<Integer>\
    \ nums = Arrays.stream(numbers.split(\" \")).map(n -> dict.get(n)).collect(Collectors.toList());\n\
    \        Collections.sort(nums);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            sb.append(nums.get(i));\n\
    \            if (i < nums.size() - 1) {\n                sb.append(\" \");\n \
    \           }\n        }\n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfa7gbzf8.java:38)\n"
  stdout: ''
  timestamp: 1660011511
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        //your code here\n        return numbers;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoi0qywbj.java:22)\n"
  stdout: ''
  timestamp: 1660011511
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Write your code here\n        Map<String, Integer> words = new\
    \ HashMap<>();\n        words.put(\"zero\", 0);\n        words.put(\"one\", 1);\n\
    \        words.put(\"two\", 2);\n        words.put(\"three\", 3);\n        words.put(\"\
    four\", 4);\n        words.put(\"five\", 5);\n        words.put(\"six\", 6);\n\
    \        words.put(\"seven\", 7);\n        words.put(\"eight\", 8);\n        words.put(\"\
    nine\", 9);\n        String[] n = numbers.split(\" \");\n        List<Integer>\
    \ l = new ArrayList<>();\n        for (String num : n) {\n            l.add(words.get(num));\n\
    \        }\n        Collections.sort(l);\n        String res = \"\";\n       \
    \ for (int num : l) {\n            res += String.valueOf(num) + \" \";\n     \
    \   }\n        return res.trim();\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Iterator.next()\"\
    \ is null\n\tat Problem.sortNumbers(tmpzazex1j9.java:34)\n\tat Problem.main(tmpzazex1j9.java:40)\n"
  stdout: ''
  timestamp: 1660011511
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Regex to split and select numbers in sequence\n        String[]\
    \ seq = numbers.split(\"[^a-z]+\");\n        // Map to translate words to numbers\n\
    \        Map<String, Integer> map = new HashMap<>();\n        map.put(\"zero\"\
    , 0);\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"\
    three\", 3);\n        map.put(\"four\", 4);\n        map.put(\"five\", 5);\n \
    \       map.put(\"six\", 6);\n        map.put(\"seven\", 7);\n        map.put(\"\
    eight\", 8);\n        map.put(\"nine\", 9);\n        // Sort string array based\
    \ on mapped number and join\n        return Arrays.stream(seq).sorted(Comparator.comparing(e\
    \ -> map.get(e))).collect(Collectors.joining(\" \"));\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011512
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] dict = new int[128];\n        dict['o'] = 0;\n        dict['n']\
    \ = 1;\n        dict['t'] = 2;\n        dict['w'] = 2;\n        dict['f'] = 4;\n\
    \        dict['r'] = 3;\n        dict['s'] = 6;\n        dict['e'] = 5;\n    \
    \    dict['v'] = 7;\n        dict['i'] = 8;\n        dict['g'] = 9;\n        dict['e']\
    \ = 5;\n        dict['n'] = 1;\n        dict['e'] = 5;\n        return new String();\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ta5qkyn.java:34)\n"
  stdout: ''
  timestamp: 1660011511
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] input = numbers.split(\" \");\n        String[] output =\
    \ Arrays.copyOf(input, input.length);\n        String[] ref = {\"zero\", \"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    };\n        Arrays.sort(output, (a, b) -> Arrays.asList(ref).indexOf(a) - Arrays.asList(ref).indexOf(b));\n\
    \        return String.join(\" \", output);\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011512
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // BEGIN SOLUTION\n        String[] split = numbers.split(\" \");\n\
    \        Map<String, Integer> stringToInt = new HashMap<>();\n        stringToInt.put(\"\
    zero\", 0);\n        stringToInt.put(\"one\", 1);\n        stringToInt.put(\"\
    two\", 2);\n        stringToInt.put(\"three\", 3);\n        stringToInt.put(\"\
    four\", 4);\n        stringToInt.put(\"five\", 5);\n        stringToInt.put(\"\
    six\", 6);\n        stringToInt.put(\"seven\", 7);\n        stringToInt.put(\"\
    eight\", 8);\n        stringToInt.put(\"nine\", 9);\n        Integer[] nums =\
    \ new Integer[split.length];\n        for (int i = 0; i < split.length; i++) {\n\
    \            nums[i] = stringToInt.get(split[i]);\n        }\n        Arrays.sort(nums);\n\
    \        Map<Integer, String> intToString = new HashMap<>();\n        intToString.put(0,\
    \ \"zero\");\n        intToString.put(1, \"one\");\n        intToString.put(2,\
    \ \"two\");\n        intToString.put(3, \"three\");\n        intToString.put(4,\
    \ \"four\");\n        intToString.put(5, \"five\");\n        intToString.put(6,\
    \ \"six\");\n        intToString.put(7, \"seven\");\n        intToString.put(8,\
    \ \"eight\");\n        intToString.put(9, \"nine\");\n        String[] sorted\
    \ = new String[split.length];\n        for (int i = 0; i < split.length; i++)\
    \ {\n            sorted[i] = intToString.get(nums[i]);\n        }\n        return\
    \ String.join(\" \", sorted);\n        // END SOLUTION\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptg55addk.java:52)\n"
  stdout: ''
  timestamp: 1660011511
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n}\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmp_1s4ww6t.java:18)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n}\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmp_1s4ww6t.java:18)\n"
  stdout: ''
  timestamp: 1660011496
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n\t\treturn null;\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmpnaw0hrd2.java:18)\n"
  stdout: ''
  timestamp: 1660011511
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] strArray = numbers.split(\" \");\n        List<Integer>\
    \ intList = new ArrayList<Integer>();\n        for (String str : strArray) {\n\
    \            if (str.equals(\"zero\")) {\n                intList.add(0);\n  \
    \          } else if (str.equals(\"one\")) {\n                intList.add(1);\n\
    \            } else if (str.equals(\"two\")) {\n                intList.add(2);\n\
    \            } else if (str.equals(\"three\")) {\n                intList.add(3);\n\
    \            } else if (str.equals(\"four\")) {\n                intList.add(4);\n\
    \            } else if (str.equals(\"five\")) {\n                intList.add(5);\n\
    \            } else if (str.equals(\"six\")) {\n                intList.add(6);\n\
    \            } else if (str.equals(\"seven\")) {\n                intList.add(7);\n\
    \            } else if (str.equals(\"eight\")) {\n                intList.add(8);\n\
    \            } else if (str.equals(\"nine\")) {\n                intList.add(9);\n\
    \            }\n        }\n        Collections.sort(intList);\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i : intList) {\n            if (i\
    \ == 0) {\n                sb.append(\"zero \");\n            } else if (i ==\
    \ 1) {\n                sb.append(\"one \");\n            } else if (i == 2) {\n\
    \                sb.append(\"two \");\n            } else if (i == 3) {\n    \
    \            sb.append(\"three \");\n            } else if (i == 4) {\n      \
    \          sb.append(\"four \");\n            } else if (i == 5) {\n         \
    \       sb.append(\"five \");\n            } else if (i == 6) {\n            \
    \    sb.append(\"six \");\n            } else if (i == 7) {\n                sb.append(\"\
    seven \");\n            } else if (i == 8) {\n                sb.append(\"eight\
    \ \");\n            } else if (i == 9) {\n                sb.append(\"nine \"\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphahcpafk.java:62: error: ')' expected\n                sb.append(\"\
    nine \"\n                                 ^\n/tmp/tmphahcpafk.java:64: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011511
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // your code here\n        String[] strArray = numbers.split(\" \"\
    );\n        int[] intArray = new int[strArray.length];\n        for (int i = 0;\
    \ i < strArray.length; i++) {\n            intArray[i] = Integer.parseInt(strArray[i]);\n\
    \        }\n        Arrays.sort(intArray);\n        String sortedString = \"\"\
    ;\n        for (int j = 0; j < intArray.length; j++) {\n            if (j != intArray.length\
    \ - 1) {\n                sortedString += intArray[j] + \" \";\n            }\
    \ else {\n                sortedString += intArray[j];\n            }\n      \
    \  }\n        return sortedString;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.sortNumbers(tmp4srnjtfo.java:19)\n\tat Problem.main(tmp4srnjtfo.java:33)\n"
  stdout: ''
  timestamp: 1660011512
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] s = numbers.split(\" \");\n        int[] map = new int[s.length];\n\
    \        for (int i = 0; i < s.length; i++) {\n            if (s[i].equals(\"\
    zero\")) {\n                map[i] = 0;\n            } else if (s[i].equals(\"\
    one\")) {\n                map[i] = 1;\n            } else if (s[i].equals(\"\
    two\")) {\n                map[i] = 2;\n            } else if (s[i].equals(\"\
    three\")) {\n                map[i] = 3;\n            } else if (s[i].equals(\"\
    four\")) {\n                map[i] = 4;\n            } else if (s[i].equals(\"\
    five\")) {\n                map[i] = 5;\n            } else if (s[i].equals(\"\
    six\")) {\n                map[i] = 6;\n            } else if (s[i].equals(\"\
    seven\")) {\n                map[i] = 7;\n            } else if (s[i].equals(\"\
    eight\")) {\n                map[i] = 8;\n            } else if (s[i].equals(\"\
    nine\")) {\n                map[i] = 9;\n            }\n        }\n        Arrays.sort(map);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ map.length; i++) {\n            if (map[i] == 0) {\n                sb.append(\"\
    zero\");\n            } else if (map[i] == 1) {\n                sb.append(\"\
    one\");\n            } else if (map[i] == 2) {\n                sb.append(\"two\"\
    );\n            } else if (map[i] == 3) {\n                sb.append(\"three\"\
    );\n            } else if (map[i] == 4) {\n                sb.append(\"four\"\
    );\n            } else if (map[i] == 5) {\n                sb.append(\"five\"\
    );\n            } else if (map[i] == 6) {\n                sb.append(\"six\");\n\
    \            } else if (map[i] == 7) {\n                sb\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd5ykoneo.java:58: error: not a statement\n                sb\n\
    \                ^\n/tmp/tmpd5ykoneo.java:58: error: ';' expected\n          \
    \      sb\n                  ^\n/tmp/tmpd5ykoneo.java:60: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011511
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] splitNumbers = numbers.split(\" \");\n        int[] ints\
    \ = new int[splitNumbers.length];\n        for (int i = 0; i < splitNumbers.length;\
    \ i++) {\n            ints[i] = convert(splitNumbers[i]);\n        }\n       \
    \ Arrays.sort(ints);\n        StringBuilder result = new StringBuilder();\n  \
    \      for (int x: ints) {\n            result.append(x);\n            result.append(\"\
    \ \");\n        }\n        return result.toString().trim();\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9uu_2odv.java:18: error: cannot find symbol\n            ints[i]\
    \ = convert(splitNumbers[i]);\n                      ^\n  symbol:   method convert(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011512
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        String[] numsReal\
    \ = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"};\n        int[] numsIndex = new int[nums.length];\n   \
    \     for (int i = 0; i < nums.length; i++) {\n            for (int j = 0; j <\
    \ numsReal.length; j++) {\n                if (nums[i].equals(numsReal[j])) {\n\
    \                    numsIndex[i] = j;\n                }\n            }\n   \
    \     }\n        Arrays.sort(numsIndex);\n        String[] answer = new String[nums.length];\n\
    \        for (int i = 0; i < nums.length; i++) {\n            answer[i] = numsReal[numsIndex[i]];\n\
    \        }\n        return String.join(\" \", answer);\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz7bgkvqj.java:33)\n"
  stdout: ''
  timestamp: 1660011512
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Declare an int array of size 10\n        int[] numbers_count =\
    \ new int[10];\n        // Split the input string on whitespace and store it in\
    \ an array of strings\n        String[] numbers_split = numbers.split(\" \");\n\
    \        // For each string in the input array, convert to an int and add 1 to\
    \ the corresponding index in the\n        // numbers_count array\n        for\
    \ (String num: numbers_split) {\n            switch (num) {\n                case\
    \ \"zero\":\n                    numbers_count[0] += 1;\n                    break;\n\
    \                case \"one\":\n                    numbers_count[1] += 1;\n \
    \                   break;\n                case \"two\":\n                  \
    \  numbers_count[2] += 1;\n                    break;\n                case \"\
    three\":\n                    numbers_count[3] += 1;\n                    break;\n\
    \                case \"four\":\n                    numbers_count[4] += 1;\n\
    \                    break;\n                case \"five\":\n                \
    \    numbers_count[5] += 1;\n                    break;\n                case\
    \ \"six\":\n                    numbers_count[6] += 1;\n                    break;\n\
    \                case \"seven\":\n                    numbers_count[7] += 1;\n\
    \                    break;\n                case \"eight\":\n               \
    \     numbers_count[8] += 1;\n                    break;\n                case\
    \ \"nine\":\n                    numbers_count[9] += 1;\n                    break;\n\
    \            }\n        }\n        // Declare an empty string to store the final\
    \ output\n        String output = \"\";\n        // for each index in the numbers_count\
    \ array, check if the value is greater than 0. If it is, multiply\n        //\
    \ the number corresponding to the index by that value and append it to the output\
    \ string\n        for (int i = 0; i < numbers_count.length; i++) {\n         \
    \   if (numbers_count[i] > 0) {\n                output += repeat(String.valueOf(i),\
    \ numbers_count[i]);\n            }\n        }\n        // return the output string\n\
    \        return output;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3_r6rqyq.java:61: error: cannot find symbol\n                output\
    \ += repeat(String.valueOf(i), numbers_count[i]);\n                          ^\n\
    \  symbol:   method repeat(String,int)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011512
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // @TODO\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmprdit9n4q.java:19)\n"
  stdout: ''
  timestamp: 1660011512
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // YOUR CODE HERE\n        return null;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmpzb1l_pc_.java:19)\n"
  stdout: ''
  timestamp: 1660011512
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        numbers = numbers.replaceAll(\"zero\", \"0\");\n        numbers =\
    \ numbers.replaceAll(\"one\", \"1\");\n        numbers = numbers.replaceAll(\"\
    two\", \"2\");\n        numbers = numbers.replaceAll(\"three\", \"3\");\n    \
    \    numbers = numbers.replaceAll(\"four\", \"4\");\n        numbers = numbers.replaceAll(\"\
    five\", \"5\");\n        numbers = numbers.replaceAll(\"six\", \"6\");\n     \
    \   numbers = numbers.replaceAll(\"seven\", \"7\");\n        numbers = numbers.replaceAll(\"\
    eight\", \"8\");\n        numbers = numbers.replaceAll(\"nine\", \"9\");\n   \
    \     String[] numbers_arr = numbers.split(\" \");\n        Arrays.sort(numbers_arr);\n\
    \        numbers = numbers_arr[0];\n        for (int i = 1; i < numbers_arr.length;\
    \ i++) {\n            numbers += \" \" + numbers_arr[i];\n        }\n        numbers\
    \ = numbers.replaceAll(\"0\", \"zero\");\n        numbers = numbers.replaceAll(\"\
    1\", \"one\");\n        numbers = numbers.replaceAll(\"2\", \"two\");\n      \
    \  numbers = numbers.replaceAll(\"3\", \"three\");\n        numbers = numbers.replaceAll(\"\
    4\", \"four\");\n        numbers = numbers.replaceAll(\"5\", \"five\");\n    \
    \    numbers = numbers.replaceAll(\"6\", \"six\");\n        numbers = numbers.replaceAll(\"\
    7\", \"seven\");\n        numbers = numbers.replaceAll(\"8\", \"eight\");\n  \
    \      numbers = numbers.replaceAll(\"9\", \"nine\");\n        return numbers;\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011512
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String s = \"\";\n        List<String> list = Arrays.asList(numbers.split(\"\
    \ \"));\n        Collections.sort(list);\n        for (String str : list)\n  \
    \          s += str + \" \";\n        return s.trim();\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpevnd7at4.java:25)\n"
  stdout: ''
  timestamp: 1660011512
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return \"\";\n}\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gv6_x36.java:19)\n"
  stdout: ''
  timestamp: 1660011500
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        String[] numWords\
    \ = new String[] { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\", \"seven\", \"eight\", \"nine\" };\n        int[] numVals = new int[nums.length];\n\
    \        int index = 0;\n        for (String num : nums) {\n            for (int\
    \ i = 0; i < numWords.length; i++) {\n                if (num.equals(numWords[i]))\
    \ {\n                    numVals[index] = i;\n                    index++;\n \
    \               }\n            }\n        }\n        Arrays.sort(numVals);\n \
    \       String sorted = \"\";\n        for (int i = 0; i < numVals.length; i++)\
    \ {\n            sorted += numWords[numVals[i]] + \" \";\n        }\n        return\
    \ sorted.trim();\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpccrqishj.java:35)\n"
  stdout: ''
  timestamp: 1660011512
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        System.out.println(\"Input: \" + numbers);\n        String[] numberals\
    \ = numbers.split(\" \");\n        Arrays.sort(numberals, new Comparator<String>()\
    \ {\n            @Override\n            public int compare(String a, String b)\
    \ {\n                if (a.equals(\"zero\")) {\n                    return -1;\n\
    \                } else if (b.equals(\"zero\")) {\n                    return\
    \ 1;\n                } else if (a.equals(\"one\")) {\n                    return\
    \ -1;\n                } else if (b.equals(\"one\")) {\n                    return\
    \ 1;\n                } else if (a.equals(\"two\")) {\n                    return\
    \ -1;\n                } else if (b.equals(\"two\")) {\n                    return\
    \ 1;\n                } else if (a.equals(\"three\")) {\n                    return\
    \ -1;\n                } else if (b.equals(\"three\")) {\n                   \
    \ return 1;\n                } else if (a.equals(\"four\")) {\n              \
    \      return -1;\n                } else if (b.equals(\"four\")) {\n        \
    \            return 1;\n                } else if (a.equals(\"five\")) {\n   \
    \                 return -1;\n                } else if (b.equals(\"five\")) {\n\
    \                    return 1;\n                } else if (a.equals(\"six\"))\
    \ {\n                    return -1;\n                } else if (b.equals(\"six\"\
    )) {\n                    return 1;\n                } else if (a.equals(\"seven\"\
    )) {\n                    return -1;\n                } else if (b.equals(\"seven\"\
    )) {\n                    return 1;\n                } else if (a.equals(\"eight\"\
    )) {\n                    return -1;\n                } else if (b.equals(\"eight\"\
    )) {\n                    return 1;\n                } else if (a.equals(\"nine\"\
    )) {\n                    return -1;\n                } else if (b.equals(\"nine\"\
    )) {\n                    return 1;\n                } else {\n              \
    \      return 0;\n                }\n            }\n        });\n        String\
    \ output = String.join(\" \", numberals);\n        System.out.println(\"Output:\
    \ \" + output);\n        return output;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: "Input: \nOutput: \nInput: three\nOutput: three\nInput: three five nine\n\
    Output: three five nine\nInput: five zero four seven nine eight\nOutput: zero\
    \ four five seven eight nine\nInput: six five four three two one zero\nOutput:\
    \ zero one two three four five six\n"
  timestamp: 1660011512
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String result = \"\";\n        String[] nums = numbers.split(\" \"\
    );\n        ArrayList<Integer> numList = new ArrayList<Integer>();\n        for\
    \ (String s : nums) {\n            switch (s) {\n                case \"zero\"\
    :\n                    numList.add(0);\n                    break;\n         \
    \       case \"one\":\n                    numList.add(1);\n                 \
    \   break;\n                case \"two\":\n                    numList.add(2);\n\
    \                    break;\n                case \"three\":\n               \
    \     numList.add(3);\n                    break;\n                case \"four\"\
    :\n                    numList.add(4);\n                    break;\n         \
    \       case \"five\":\n                    numList.add(5);\n                \
    \    break;\n                case \"six\":\n                    numList.add(6);\n\
    \                    break;\n                case \"seven\":\n               \
    \     numList.add(7);\n                    break;\n                case \"eight\"\
    :\n                    numList.add(8);\n                    break;\n         \
    \       case \"nine\":\n                    numList.add(9);\n                \
    \    break;\n            }\n        }\n        Collections.sort(numList);\n  \
    \      for (int i = 0; i < numList.size(); i++) {\n            switch (numList.get(i))\
    \ {\n                case 0:\n                    result += \"zero\";\n      \
    \              break;\n                case 1:\n                    result +=\
    \ \"one\";\n                    break;\n                case 2:\n            \
    \        result += \"two\";\n                    break;\n                case\
    \ 3:\n                    result += \"three\";\n                    break;\n \
    \               case 4:\n                    result += \"four\";\n           \
    \         break;\n                case 5:\n                    result += \"five\"\
    ;\n                    break;\n                case 6:\n                    result\
    \ += \"six\";\n                    break;\n                case 7:\n         \
    \           result += \"seven\";\n                    break;\n               \
    \ case 8:\n                    result += \"eight\";\n                    break;\n\
    \                case 9:\n                    result += \"nine\";\n          \
    \          break;\n            }\n            if (i != numList.size() - 1) {\n\
    \                result += \" \";\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011512
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Your code here\n        return \"\";\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3t9pt2mk.java:20)\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        StringTokenizer st = new StringTokenizer(numbers);\n        int[]\
    \ all = new int[st.countTokens()];\n        int i = 0;\n        while (st.hasMoreTokens())\
    \ {\n            all[i++] = Integer.parseInt(st.nextToken());\n        }\n   \
    \     Arrays.sort(all);\n        StringBuilder sb = new StringBuilder();\n   \
    \     for (int j = 0; j < all.length; j++) {\n            sb.append(all[j]);\n\
    \            if (j < all.length - 1) sb.append(\" \");\n        }\n        return\
    \ sb.toString();\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"three\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.sortNumbers(tmpfq09qppg.java:19)\n\tat Problem.main(tmpfq09qppg.java:31)\n"
  stdout: ''
  timestamp: 1660011512
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Your code here\n        return \"\";\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3t9pt2mk.java:20)\n"
  stdout: ''
  timestamp: 1660011498
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        // Your code here!\n        return null;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmp4gx6hjbm.java:19)\n"
  stdout: ''
  timestamp: 1660011512
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        String [] split = numbers.split(\" \");\n        List<Integer> num\
    \ = new ArrayList<>();\n        for (String s : split) {\n            if (s.equals(\"\
    zero\")) {\n                num.add(0);\n            } else if (s.equals(\"one\"\
    )) {\n                num.add(1);\n            } else if (s.equals(\"two\")) {\n\
    \                num.add(2);\n            } else if (s.equals(\"three\")) {\n\
    \                num.add(3);\n            } else if (s.equals(\"four\")) {\n \
    \               num.add(4);\n            } else if (s.equals(\"five\")) {\n  \
    \              num.add(5);\n            } else if (s.equals(\"six\")) {\n    \
    \            num.add(6);\n            } else if (s.equals(\"seven\")) {\n    \
    \            num.add(7);\n            } else if (s.equals(\"eight\")) {\n    \
    \            num.add(8);\n            } else if (s.equals(\"nine\")) {\n     \
    \           num.add(9);\n            }\n        }\n        Collections.sort(num);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i : num) {\n\
    \            if (i == 0) {\n                sb.append(\"zero \");\n          \
    \  } else if (i == 1) {\n                sb.append(\"one \");\n            } else\
    \ if (i == 2) {\n                sb.append(\"two \");\n            } else if (i\
    \ == 3) {\n                sb.append(\"three \");\n            } else if (i ==\
    \ 4) {\n                sb.append(\"four \");\n            } else if (i == 5)\
    \ {\n                sb.append(\"five \");\n            } else if (i == 6) {\n\
    \                sb.append(\"six \");\n            } else if (i == 7) {\n    \
    \            sb.append(\"seven \");\n            } else if (i == 8) {\n      \
    \          sb.append(\"eight \");\n            } else if (i == 9) {\n        \
    \        sb.append(\"nine \");\n            }\n        }\n        return sb.toString().\n\
    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpnihrpjv6.java:65: error: <identifier> expected\n        return\
    \ sb.toString().\n                             ^\n1 error\n"
  stdout: ''
  timestamp: 1660011512
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"zero\"\
    , 0);\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"\
    three\", 3);\n        map.put(\"four\", 4);\n        map.put(\"five\", 5);\n \
    \       map.put(\"six\", 6);\n        map.put(\"seven\", 7);\n        map.put(\"\
    eight\", 8);\n        map.put(\"nine\", 9);\n        String[] arr = numbers.split(\"\
    \ \");\n        Arrays.sort(arr, new Comparator<String>() {\n            @Override\n\
    \            public int compare(String o1, String o2) {\n                return\
    \ map.get(o1) - map.get(o2);\n            }\n        });\n        return String.join(\"\
    \ \", arr);\n}\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011513
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n\
    \    // 'one three five'\n    public static String sortNumbers(String numbers)\
    \ {\n        return null;\n}\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.sortNumbers(String)\"\
    \ is null\n\tat Problem.main(tmp_1s4ww6t.java:18)\n"
  stdout: ''
  timestamp: 1660011496
