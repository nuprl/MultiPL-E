completions:
- "        int originalSize = string.length();\n        string = string.replace(substring,\
  \ \"\");\n        return (originalSize - string.length()) / substring.length();"
- "        int counter = 0;\n        int index = 0;\n        while(true) {\n     \
  \       index = string.indexOf(substring, index);\n            if(index == -1)\n\
  \                break;\n            counter += 1;\n            index += 1;\n  \
  \      }\n        return counter;"
- "        int ret = 0;\n        int fromIdx = 0;\n        while (true) {\n      \
  \      int idx = string.indexOf(substring, fromIdx);\n            if (idx == -1)\
  \ {\n                break;\n            }\n            fromIdx = idx + 1;\n   \
  \         ret += 1;\n        }\n        return ret;"
- '        return 0;'
- "        int c=0;\n        for(int i=0;i<string.length();i++){\n            c+=string.substring(i).startsWith(substring)?1:0;\n\
  \        }\n        return c;"
- "        int count = 0;\n        if(string.isEmpty() || substring.isEmpty()) return\
  \ count;\n        int i = 0;\n        while(i < string.length()) {\n           \
  \ if(i + substring.length() > string.length()) break;\n            String part =\
  \ string.substring(i, i + substring.length());\n            if(part.equals(substring))\
  \ {\n                count += 1;\n                i += substring.length();\n   \
  \         } else {\n                i += 1;\n            }\n        }\n        return\
  \ count;"
- "        int count = 0;\n        if (string.isEmpty() || substring.isEmpty()) {\n\
  \            return count;\n        }\n        // string = \"aaa\"\n        // substring\
  \ = \"aa\"\n        // index(0) = \"a\"\n        // index(1) = \"a\"\n        //\
  \ index(2) = \"a\"\n        // index(3) = \"\"\n        for (int index = 0; index\
  \ < string.length(); index++) {\n            // string = \"aaa\"\n            //\
  \ substring = \"aa\"\n            // index(0) = \"a\"\n            // substringAtIndex(0)\
  \ = \"aa\"\n            String substringAtIndex = string.substring(index, index\
  \ + substring.length());\n            if (substringAtIndex.equals(substring)) {\n\
  \                count++;\n            }\n        }\n        return count;"
- "        int number_of_times = 0;\n        int step = substring.length();\n    \
  \    while (string.contains(substring)) {\n            string = string.substring(string.indexOf(substring)\
  \ + step);\n            number_of_times++;\n        }\n        return number_of_times;"
- "        int total = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           if (string.substring(i).startsWith(substring)) {\n                total++;\n\
  \            }\n        }\n        return total;"
- '        return string.length() - string.replace(substring, "").length();'
- '        return 0;'
- "        int len = substring.length();\n        if (len == 0) {\n            return\
  \ 0;\n        }\n\n        int count = 0;\n        int index = string.indexOf(substring);\n\
  \        while (index != -1) {\n            count++;\n            index = string.indexOf(substring,\
  \ index + len);\n        }\n        return count;"
- "        int len = substring.length();\n        int count = 0;\n        int c =\
  \ string.indexOf(substring);\n        while (c != -1) {\n            count++;\n\
  \            c = string.indexOf(substring, c + len);\n        }\n        return\
  \ count;"
- "        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           if (string.startsWith(substring, i)) {\n                count++;\n \
  \           }\n        }\n        return count;"
- "        int times = 0;\n        for (int i = 0; i <= string.length() - substring.length();\
  \ i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\
  \ {\n                times++;\n            }\n        }\n        return times;"
- "        int originalLength = string.length();\n        int substringLength = substring.length();\n\
  \        string = string.replace(substring, \"\");\n        return (originalLength\
  \ - string.length()) / substringLength;"
- "        int count = 0;\n        int index = 0;\n        while (index < string.length())\
  \ {\n            index = string.indexOf(substring, index);\n            if (index\
  \ == -1) {\n                break;\n            }\n            count++;\n      \
  \      index++;\n        }\n        return count;"
- "        // your code here\n        return 0;"
- "        // BEGIN SOLUTION\n        return string.length() - string.replace(substring,\
  \ \"\").length();\n        // END SOLUTION"
- "        int count = 0;\n        int index = 0;\n        while (index >= 0) {\n\
  \            index = string.indexOf(substring, index);\n            if (index >=\
  \ 0) {\n                count += 1;\n                index += 1;\n            }\n\
  \        }\n        return count;"
- "        int howMany = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
  \            int j = 0;\n            while (j < substring.length() && i + j < string.length()\
  \ && string.charAt(i + j) == substring.charAt(j)) {\n                j++;\n    \
  \        }\n            if (j == substring.length()) {\n                howMany++;\n\
  \            }\n        }\n        return howMany;"
- "        int counter = 0;\n        int fromIndex = 0;\n        while (fromIndex\
  \ != -1) {\n            fromIndex = string.indexOf(substring, fromIndex);\n    \
  \        if (fromIndex != -1) {\n                fromIndex += substring.length();\n\
  \                counter++;\n            }\n        }\n        return counter;"
- "        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           if (string.charAt(i) == substring.charAt(0)) {\n                if (i\
  \ + substring.length() <= string.length()) {\n                    if (string.substring(i,\
  \ i + substring.length()).equals(substring)) {\n                        count++;\n\
  \                    }\n                }\n            }\n        }\n        return\
  \ count;"
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");\n        int count = 0;\n        int index = 0;\n        while ((index\
  \ = string.indexOf(substring, index)) != -1) {\n            count++;\n         \
  \   index += substring.length();\n        }\n        return count;"
- '        return string.length() - string.replace(substring, "").length();'
- '        return string.length() - string.replace(substring, "").length();'
- "        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           if (string.charAt(i) == substring.charAt(0)) {\n                if (string.substring(i,\
  \ i + substring.length()).equals(substring)) {\n                    count++;\n \
  \               }\n            }\n        }\n        return count;"
- "        int c = 0;\n        for (int i = 0; i < string.length(); i++) {\n     \
  \       if (string.charAt(i) == substring.charAt(0)) {\n                if (string.length()\
  \ - i < substring.length()) {\n                    break;\n                }\n \
  \               String sub = string.substring(i, i + substring.length());\n    \
  \            if (sub.equals(substring)) {\n                    c++;\n          \
  \      }\n            }\n        }\n        return c;"
- "        int count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring,\
  \ index)) != -1) {\n            index += substring.length();\n            count++;\n\
  \        }\n        return count;"
- "        // Your code here\n        if (string.length() < substring.length()) {\n\
  \            return 0;\n        } else if (string.length() == substring.length())\
  \ {\n            return string.equals(substring) ? 1 : 0;\n        } else {\n  \
  \          if (string.substring(0, substring.length()).equals(substring)) {\n  \
  \              return 1 + howManyTimes(string.substring(1), substring);\n      \
  \      } else {\n                return howManyTimes(string.substring(1), substring);\n\
  \            }\n        }"
- "        int i=0;\n        int count=0;\n        while (true) {\n            int\
  \ index = string.indexOf(substring, i);\n            if (index == -1)\n        \
  \        break;\n            count++;\n            i = index + 1;\n        }\n \
  \       return count;"
- "        if (string.length() == 0 || substring.length() == 0) {\n            return\
  \ 0;\n        }\n        else {\n            return (string.length() - string.replace(substring,\
  \ \"\").length()) / substring.length();\n        }"
- "        if (string.isEmpty() || substring.isEmpty()) {\n            return 0;\n\
  \        }\n        int count = 0;\n        int index = 0;\n        int sublength\
  \ = substring.length();\n        int stringlength = string.length();\n        while\
  \ (index != -1) {\n            index = string.indexOf(substring, index);\n     \
  \       if (index != -1) {\n                count++;\n                index += sublength;\n\
  \            }\n        }\n        return count;"
- "        int result = 0;\n        int len = substring.length();\n        int i =\
  \ 0;\n        while (i < string.length()) {\n            if (string.substring(i,\
  \ i + len).equals(substring)) {\n                result += 1;\n                i\
  \ += len;\n            } else {\n                i += 1;\n            }\n      \
  \  }\n        return result;"
- '        return 0;'
- "        int count = 0;\n        if (string.length() >= substring.length()) {\n\
  \            int index = 0;\n            while (true) {\n                index =\
  \ string.indexOf(substring, index);\n                if (index == -1) {\n      \
  \              break;\n                }\n                count++;\n           \
  \     index += substring.length();\n            }\n        }\n        return count;"
- "        int max = string.length() - substring.length() + 1;\n        int count\
  \ = 0;\n        for (int i = 0; i < max; i++) {\n            if (string.substring(i,\
  \ i + substring.length()).equals(substring)) {\n                count++;\n     \
  \       }\n        }\n        return count;"
- '        return (string.length() - string.replace(substring, "").length()) / substring.length();'
- '        return (string.length() - string.replace(substring, "").length()) / substring.length();'
- "        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length();\
  \ i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        if (string.isEmpty() || substring.isEmpty()) {\n            return 0;\n\
  \        }\n        int result = 0;\n        int index = string.indexOf(substring);\n\
  \        while (index != -1) {\n            result += 1;\n            index = string.indexOf(substring,\
  \ index + 1);\n        }\n        return result;"
- "        if (string.length() == 0 || substring.length() == 0) {\n            return\
  \ 0;\n        }\n        int match = 0;\n        for (int i = 0; i < string.length();\
  \ i++) {\n            for (int j = 0; j < substring.length(); j++) {\n         \
  \       if (string.charAt(i) == substring.charAt(j)) {\n                    i++;\n\
  \                    if (j == substring.length() - 1) {\n                      \
  \  match++;\n                    }\n                } else {\n                 \
  \   i--;\n                    break;\n                }\n            }\n       \
  \ }\n        return match;"
- "        int count = 0;\n        int index = string.indexOf(substring);\n      \
  \  while (index != -1) {\n            index = string.indexOf(substring, index +\
  \ 1);\n            count++;\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length();\
  \ i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        String[] parts = string.split(substring);\n        return parts.length\
  \ == 0 ? 0 : parts.length - 1;"
- "        int result = 0;\n        int subLength = substring.length();\n        int\
  \ length = string.length();\n        for (int i = 0; i < length; i++) {\n      \
  \      if (string.substring(i, i + subLength).equals(substring)) {\n           \
  \     result++;\n            }\n        }\n        return result;"
- "        int count = 0;\n        for (int i = 0; i < string.length(); i += 1) {\n\
  \            if (string.charAt(i) == substring.charAt(0)) {\n                boolean\
  \ found = true;\n                for (int j = 1; j < substring.length(); j += 1)\
  \ {\n                    if (string.charAt(i + j) != substring.charAt(j)) {\n  \
  \                      found = false;\n                        break;\n        \
  \            }\n                }\n                if (found) {\n              \
  \      count += 1;\n                }\n            }\n        }\n        return\
  \ count;"
- "        int cnt = 0;\n        for (int i = 0; i < string.length(); i++) {\n   \
  \         if (string.startsWith(substring, i)) {\n                cnt++;\n     \
  \       }\n        }\n        return cnt;"
- "        int n = string.length();\n        int k = substring.length();\n       \
  \ int ans = 0;\n        for (int i = 0; i <= n - k; i++) {\n            if (string.substring(i,\
  \ i + k).equals(substring)) {\n                ans++;\n            }\n        }\n\
  \        return ans;"
- "        // TODO: Implement this function\n        int count = 0;\n        for (int\
  \ i = 0; i < string.length(); i++) {\n            for (int j = 0; j < substring.length();\
  \ j++) {\n                if (string.charAt(i + j) != substring.charAt(j)) {\n \
  \                   break;\n                }\n                if (j == substring.length()\
  \ - 1) {\n                    count++;\n                }\n            }\n     \
  \   }\n        return count;"
- "        int string_size = string.length();\n        int substring_size = substring.length();\n\
  \        int count = 0;\n        for (int i = 0; i <= string_size - substring_size;\
  \ i++) {\n            if (string.substring(i, i + substring_size).equals(substring))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           if (string.substring(i).startsWith(substring)) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        if (string.length() < substring.length()) {\n            return 0;\n  \
  \      }\n        int count = 0;\n        int index = string.indexOf(substring);\n\
  \        while (index != -1) {\n            count++;\n            index = string.indexOf(substring,\
  \ index + 1);\n        }\n        return count;"
- "        // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
  \        // Python code\n        // >>> def how_many_times(string, substring):\n\
  \        // ...     current = 0\n        // ...     count = 0\n        // ...  \
  \   while current < len(string):\n        // ...         position = string.find(substring,\
  \ current)\n        // ...         if position == -1:\n        // ...          \
  \   break\n        // ...         count += 1\n        // ...         current = position\
  \ + 1\n        // ...     return count\n        // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
  \        int current = 0;\n        int count = 0;\n        while (current < string.length())\
  \ {\n            int position = string.indexOf(substring, current);\n          \
  \  if (position == -1) {\n                break;\n            }\n            count\
  \ += 1;\n            current = position + 1;\n        }\n        return count;"
- "        // Implement this placeholder.\n        return 0;"
- "        int n = string.length();\n        int m = substring.length();\n       \
  \ int count = 0;\n        int i = 0;\n        while (i <= n - m) {\n           \
  \ if (string.substring(i, i + m).equals(substring)) {\n                count +=\
  \ 1;\n                i += m;\n            } else {\n                i += 1;\n \
  \           }\n        }\n        return count;"
- '        return 0;'
- "        if (string.isEmpty() || substring.isEmpty()) {\n            return 0;\n\
  \        }\n\n        // Guard against substrings of length > string length.\n \
  \       int maxLength = string.length() - substring.length() + 1;\n        int count\
  \ = 0;\n        for (int i = 0; i < maxLength; i++) {\n            if (string.substring(i,\
  \ i + substring.length()).equals(substring)) {\n                count++;\n     \
  \       }\n        }\n        return count;"
- "        int count = 0;\n        int index = 0;\n        while (index < string.length())\
  \ {\n            index = string.indexOf(substring, index);\n            if (index\
  \ != -1) {\n                count++;\n                index++;\n            } else\
  \ {\n                break;\n            }\n        }\n        return count;"
- "        int counter = 0;\n        // write your code here\n        Pattern pattern\
  \ = Pattern.compile(substring);\n        Matcher matcher = pattern.matcher(string);\n\
  \        while (matcher.find()) {\n            counter++;\n        }\n        return\
  \ counter;"
- "        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length();\
  \ i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        int result = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
  \            int j = 0;\n            while (j < substring.length() && i + j < string.length()\
  \ && string.charAt(i + j) == substring.charAt(j)) {\n                j++;\n    \
  \        }\n            if (j == substring.length()) {\n                result++;\n\
  \            }\n        }\n        return result;"
- "        // Fill in the code here\n        int count = 0;\n        int i = 0;\n\
  \        while (i <= string.length() - substring.length()) {\n            int j\
  \ = 0;\n            while (j < substring.length() && string.charAt(i+j) == substring.charAt(j))\
  \ {\n                j++;\n            }\n            if (j == substring.length())\
  \ {\n                count++;\n            }\n            i++;\n        }\n    \
  \    return count;"
- "        int n = string.length();\n        int m = substring.length();\n       \
  \ int result = 0;\n        for (int i = 0; i < n; i++) {\n            if (string.substring(i,\
  \ i + m).equals(substring)) {\n                result++;\n            }\n      \
  \  }\n        return result;"
- "        int count = 0;\n        int start = 0;\n        while (true) {\n      \
  \      start = string.indexOf(substring, start);\n            if (start == -1) {\n\
  \                break;\n            }\n            count += 1;\n            start\
  \ += 1;\n        }\n        return count;"
- "        int count = 0;\n        int index = 0;\n        while (index != -1) {\n\
  \            index = string.indexOf(substring, index);\n            if (index !=\
  \ -1) {\n                count++;\n                index += substring.length();\n\
  \            }\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length();\
  \ i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- '        return 0;'
- "        // 1. Construct a hash function that can map substring to a number\n  \
  \      // 2. Construct another hash function that can map string[i:i+len(substring)]\
  \ to a number\n        // 3. For each substring use the hash function on it and\
  \ see if the value is present in the hash table or not.\n\n        HashMap<Integer,\
  \ Integer> hash = new HashMap<>();\n        int p = 1000000007;\n        int x =\
  \ 31;\n        int substringHash = 0;\n        for (int i = 0; i < substring.length();\
  \ i++) {\n            substringHash = (substringHash * x + substring.charAt(i))\
  \ % p;\n        }\n        int currentHash = 0;\n        for (int i = 0; i < string.length();\
  \ i++) {\n            currentHash = (currentHash * x + string.charAt(i)) % p;\n\
  \            if (i < substring.length() - 1) {\n                continue;\n    \
  \        }\n            if (i >= substring.length()) {\n                currentHash\
  \ = currentHash - (string.charAt(i - substring.length()) * Math.pow(x, substring.length()\
  \ - 1)) % p;\n                if (currentHash < 0) {\n                    currentHash\
  \ += p;\n                }\n            }\n            hash.put(currentHash, hash.getOrDefault(currentHash,\
  \ 0) + 1);\n        }\n        return hash.getOrDefault(substringHash, 0);"
- "        int occurences = 0;\n        int fromIndex = 0;\n        while (fromIndex\
  \ < string.length()) {\n            int index = string.indexOf(substring, fromIndex);\n\
  \            if (index == -1) {\n                break;\n            }\n       \
  \     occurences++;\n            fromIndex = index + 1;\n        }\n        return\
  \ occurences;"
- "        int count = 0;\n        int j = 0;\n        for (int i = 0; i < string.length();\
  \ i++) {\n            if (string.charAt(i) == substring.charAt(j)) {\n         \
  \       j++;\n                if (j == substring.length()) {\n                 \
  \   count++;\n                    j = 0;\n                }\n            } else\
  \ {\n                j = 0;\n            }\n        }\n        return count;"
- '        return 0;'
- "        if (string.length() < substring.length()) {\n            return 0;\n  \
  \      }\n        int count = 0;\n        for (int i = 0; i < string.length() -\
  \ substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        int endIndex = substring.length();\n        for\
  \ (int i = 0; i < string.length(); i++) {\n            if (string.substring(i, endIndex).equals(substring))\
  \ {\n                count++;\n            }\n            endIndex++;\n        }\n\
  \        return count;"
- "        int count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring,\
  \ index)) != -1) {\n            index++;\n            count++;\n        }\n    \
  \    return count;"
- '        return (string.length() - string.replace(substring, "").length()) / substring.length();'
- "        if (string.length() == 0 || substring.length() == 0) {\n            return\
  \ 0;\n        }\n        int count = 0;\n        int i = 0;\n        while ((i =\
  \ string.indexOf(substring, i)) != -1) {\n            i += substring.length();\n\
  \            count++;\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           if (string.charAt(i) == substring.charAt(0)) {\n                if (string.substring(i,\
  \ substring.length() + i).equals(substring)) {\n                    count++;\n \
  \               }\n            }\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           if (string.substring(i).startsWith(substring)) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        if (string.isEmpty() || substring.isEmpty()) return 0;\n        int count\
  \ = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i)\
  \ == substring.charAt(0)) {\n                boolean found = true;\n           \
  \     for (int j = 1; j < substring.length(); j++) {\n                    if (i\
  \ + j >= string.length() || string.charAt(i + j) != substring.charAt(j)) {\n   \
  \                     found = false;\n                        break;\n         \
  \           }\n                }\n                if (found) count++;\n        \
  \    }\n        }\n        return count;"
- '        return (string.length() - string.replace(substring, "").length()) / substring.length();'
- "        int n = string.length();\n        int m = substring.length();\n       \
  \ int count = 0;\n        for (int i = 0; i <= n - m; i++) {\n            if (string.substring(i,\
  \ i + m).equals(substring)) {\n                count++;\n            }\n       \
  \ }\n        return count;"
- "        int howMany = 0;\n        int index = 0;\n        int length = substring.length();\n\
  \        while(index < string.length()) {\n            String current = string.substring(index,\
  \ index + length);\n            if(current.equals(substring)) {\n              \
  \  howMany++;\n            }\n            index++;\n        }\n        return howMany;"
- "        // Insert your code here\n        return 0;"
- "        int count = 0;\n        int index = 0;\n        while (index >= 0) {\n\
  \            index = string.indexOf(substring, index);\n            if (index >=\
  \ 0) {\n                count++;\n                index++;\n            }\n    \
  \    }\n        return count;"
- "        if (string.length() < substring.length()) {\n            return 0;\n  \
  \      }\n        else if (string.length() == substring.length()) {\n          \
  \  return string.equals(substring) ? 1 : 0;\n        }\n        else {\n       \
  \     if (string.substring(0, substring.length()).equals(substring)) {\n       \
  \         return 1 + howManyTimes(string.substring(1), substring);\n           \
  \ }\n            else {\n                return howManyTimes(string.substring(1),\
  \ substring);\n            }\n        }"
- "        int ret = 0;\n        for (int i = 0; i <= string.length() - substring.length();\
  \ i++) {\n            String cur = string.substring(i, i + substring.length());\n\
  \            if (cur.equals(substring)) {\n                ret++;\n            }\n\
  \        }\n        return ret;"
- "        if (string.length() == 0 || substring.length() == 0) {\n            return\
  \ 0;\n        }\n\n        int counter = 0;\n        int stringIndex = 0;\n    \
  \    while (stringIndex < string.length()) {\n            if (string.charAt(stringIndex)\
  \ == substring.charAt(0)) {\n                int substringIndex = 0;\n         \
  \       int tempIndex = stringIndex;\n                while (substringIndex < substring.length()\
  \ && tempIndex < string.length()) {\n                    if (string.charAt(tempIndex)\
  \ == substring.charAt(substringIndex)) {\n                        substringIndex++;\n\
  \                        tempIndex++;\n                    } else {\n          \
  \              break;\n                    }\n                }\n              \
  \  if (substringIndex == substring.length()) {\n                    counter++;\n\
  \                }\n            }\n            stringIndex++;\n        }\n     \
  \   return counter;"
- "        if (string.length() < substring.length()) {\n            return 0;\n  \
  \      }\n        int count = 0;\n        for (int i = 0; i < string.length() -\
  \ substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- '        return -1;'
- "      int count = 0;\n      for (int i = 0; i < string.length(); i++) {\n     \
  \   String sub = string.substring(i);\n        if (sub.startsWith(substring)) {\n\
  \          count++;\n        }\n      }\n      return count;"
- "        // assert substring.length() <= string.length()\n        if (substring.length()\
  \ > string.length()) {\n            return 0;\n        }\n        int count = 0;\n\
  \        int index = 0;\n        while (true) {\n            index = string.indexOf(substring,\
  \ index);\n            if (index == -1) {\n                break;\n            }\n\
  \            count++;\n            index++;\n        }\n        return count;"
- "        int length = string.length();\n        int subLength = substring.length();\n\
  \        int total = 0;\n        for (int i = 0; i <= length - subLength; i++) {\n\
  \            if (string.substring(i, i + subLength).equals(substring)) {\n     \
  \           total += 1;\n            }\n        }\n        return total;"
- "      Pattern pattern = Pattern.compile(substring);\n      Matcher matcher = pattern.matcher(string);\n\
  \      int count = 0;\n      while (matcher.find()) {\n        count++;\n      }\n\
  \      return count;"
- "        Pattern p = Pattern.compile(substring);\n        Matcher m = p.matcher(string);\n\
  \        int count = 0;\n        while (m.find()) {\n            count++;\n    \
  \    }\n        return count;"
- "        int index = 0;\n        int count = 0;\n        while ((index = string.indexOf(substring,\
  \ index)) != -1) {\n            index++;\n            count++;\n        }\n    \
  \    return count;"
- '        return string.length() == 0 ? 0 : string.split(substring, -1).length -
  1;'
- "        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           if (string.substring(i).startsWith(substring)) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        Pattern p = Pattern.compile(substring);\n        Matcher m = p.matcher(string);\n\
  \        int count = 0;\n        while (m.find()) {\n            count += 1;\n \
  \       }\n        return count;"
- '        return -1;'
- "        int counter = 0;\n        for (int i = 0; i <= string.length() - substring.length();\
  \ i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\
  \ {\n                counter++;\n            }\n        }\n        return counter;"
- '        return 0;'
- "        if (string.isEmpty() || substring.isEmpty()) return 0;\n        int count\
  \ = 0;\n        for (int i = 0; i < string.length(); i++) {\n            int index\
  \ = string.indexOf(substring, i);\n            if (index < 0) break;\n         \
  \   count++;\n            i = index;\n        }\n        return count;"
- "        int i = 0;\n        while (string.contains(substring)) {\n            string\
  \ = string.replaceFirst(substring, \"\");\n            i++;\n        }\n       \
  \ return i;"
- "        if (string.length() == 0 || substring.length() == 0) {\n            return\
  \ 0;\n        }\n        int length = substring.length();\n        int result =\
  \ 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i,\
  \ i + length).equals(substring)) {\n                result++;\n            }\n \
  \       }\n        return result;"
- '        return Collections.frequency(new ArrayList<String>(Arrays.asList(string.split(substring))),
  "");'
- "        int count = 0;\n        int index = string.indexOf(substring);\n      \
  \  while (index != -1) {\n            count++;\n            index = string.indexOf(substring,\
  \ index + 1);\n        }\n        return count;"
- "        int length = string.length();\n        int subLength = substring.length();\n\
  \        int count = 0;\n        for (int i = 0; i <= length - subLength; i++) {\n\
  \            if (string.substring(i, i + subLength).equals(substring)) {\n     \
  \           count++;\n            }\n        }\n        return count;"
- "        int ret = 0;\n        int i = 0;\n        int len = substring.length();\n\
  \        while (true) {\n            i = string.indexOf(substring, i);\n       \
  \     if (i == -1) {\n                break;\n            }\n            ret++;\n\
  \            i += len;\n        }\n        return ret;"
- "        int count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring,\
  \ index)) != -1) {\n            count++;\n            index += substring.length();\n\
  \        }\n        return count;"
- '        return 0;'
- "        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           if (string.substring(i).startsWith(substring)) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int count = 0;\n        if (string.contains(substring)) {\n           \
  \ for (int i = 0; i < string.length(); i++) {\n                if (string.substring(i).startsWith(substring))\
  \ {\n                    count++;\n                }\n            }\n        }\n\
  \        return count;"
- "        int count = 0;\n        int index = 0;\n        do {\n            index\
  \ = string.indexOf(substring, index);\n            if (index != -1) {\n        \
  \        count++;\n                index += substring.length();\n            }\n\
  \        } while (index != -1);\n        return count;"
- "        int count = 0;\n        int index = 0;\n        while (index != -1) {\n\
  \            index = string.indexOf(substring, index);\n            if (index !=\
  \ -1) {\n                count++;\n                index++;\n            }\n   \
  \     }\n        return count;"
- "        int occ = 0;\n        for (int i = 0; i < string.length(); i++) {\n   \
  \         if (string.substring(i).startsWith(substring)) {\n                occ++;\n\
  \            }\n        }\n        return occ;"
- "        int count = 0;\n        int last = 0;\n        // The indexOf method takes\
  \ a start index, which lets us skip all\n        // occurences before the start\
  \ index.\n        while(last > -1) {\n            last = string.indexOf(substring,\
  \ last);\n            if(last > -1) {\n                count++;\n              \
  \  last += substring.length();\n            }\n        }\n        return count;"
- "        // TODO\n        return 0;"
- '        return 0;'
- "        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           if (string.charAt(i) == substring.charAt(0)) {\n                if (string.length()\
  \ - i >= substring.length()) {\n                    String test = string.substring(i,\
  \ i + substring.length());\n                    if (test.equals(substring)) {\n\
  \                        count++;\n                    }\n                }\n  \
  \          }\n        }\n        return count;"
- "        int max = string.length() - substring.length() + 1;\n        int count\
  \ = 0;\n        for (int i = 0; i < max; i++) {\n            if (string.substring(i,\
  \ i + substring.length()).equals(substring)) {\n                count++;\n     \
  \       }\n        }\n        return count;"
- '        return 0;'
- "        // your code here\n        String result = string.replaceAll(substring,\
  \ \"\");\n        return (string.length() - result.length()) / substring.length();"
- "        int howMany = 0;\n        int i = 0;\n        while(i < string.length())\
  \ {\n            if(string.startsWith(substring, i)) {\n                howMany++;\n\
  \                i += substring.length();\n            } else {\n              \
  \  i++;\n            }\n        }\n        return howMany;"
- "        if (string.length() < substring.length()) {\n            return 0;\n  \
  \      }\n        int length = string.length();\n        int subLength = substring.length();\n\
  \        int count = 0;\n        for (int i = 0; i < length; i++) {\n          \
  \  if (string.substring(i, i + subLength).equals(substring)) {\n               \
  \ count++;\n            }\n        }\n        return count;"
- "        if (string.length() < substring.length()) return 0;\n        int count\
  \ = 0;\n        int idx = 0;\n        while ((idx = string.indexOf(substring, idx))\
  \ != -1) {\n            idx += substring.length();\n            count++;\n     \
  \   }\n        return count;"
- "        // >>> how_many_times('', 'a')\n        // 0\n        if (string.length()\
  \ == 0 || substring.length() == 0) {\n            return 0;\n        }\n       \
  \ // >>> how_many_times('a', 'a')\n        // 1\n        if (string.length() ==\
  \ 1 && substring.length() == 1) {\n            return 1;\n        }\n        int\
  \ len = substring.length();\n        int count = 0;\n        for (int i = 0; i <\
  \ string.length(); i++) {\n            if (string.charAt(i) == substring.charAt(0))\
  \ {\n                if (string.substring(i, i + len).equals(substring)) {\n   \
  \                 count++;\n                }\n            }\n        }\n      \
  \  return count;"
- "        int count = 0;\n        Pattern p = Pattern.compile(substring);\n     \
  \   Matcher m = p.matcher(string);\n        while (m.find()) {\n            count++;\n\
  \        }\n        return count;"
- "        int count = 0;\n        if (string.length() == 0 || substring.length()\
  \ == 0) return count;\n        int n = string.length();\n        int m = substring.length();\n\
  \        for (int i = 0; i <= n - m; i++) {\n            if (string.substring(i,\
  \ i + m).equals(substring)) count++;\n        }\n        return count;"
- '        return 0;'
- "        int len = substring.length();\n        int n = 0;\n        int idx = string.indexOf(substring);\n\
  \        while (idx != -1) {\n            n++;\n            idx = string.indexOf(substring,\
  \ idx + len);\n        }\n        return n;"
- "        if (string.equals(\"\") || substring.equals(\"\")) {\n            return\
  \ 0;\n        }\n        int occurrences = 0;\n        for (int i = 0; i < string.length();\
  \ i++) {\n            if (string.substring(i).startsWith(substring)) {\n       \
  \         occurrences++;\n            }\n        }\n        return occurrences;"
- "        int count = 0;\n        int index = string.indexOf(substring);\n      \
  \  while (index != -1) {\n            count += 1;\n            index = string.indexOf(substring,\
  \ index + 1);\n        }\n        return count;"
- "        if (string.length() < substring.length()) return 0;\n        if (string.length()\
  \ == substring.length()) return string.equals(substring) ? 1 : 0;\n        int count\
  \ = 0;\n        for (int i = 0; i < string.length() - substring.length() + 1; i++)\
  \ {\n            for (int j = 0; j < substring.length(); j++) {\n              \
  \  if (string.charAt(i + j) != substring.charAt(j)) break;\n                if (j\
  \ == substring.length() - 1) count++;\n            }\n        }\n        return\
  \ count;"
- '        throw new UnsupportedOperationException("Not implemented yet");'
- "        int count = 0;\n        int n = string.length();\n        int m = substring.length();\n\
  \        for (int i = 0; i < n; i++) {\n            if (n - i < m) break;\n    \
  \        if (string.substring(i, i + m).equals(substring)) count++;\n        }\n\
  \        return count;"
- "        int count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring,\
  \ index)) != -1) {\n            count++;\n            index += substring.length();\n\
  \        }\n        return count;"
- "        if (string.length() < substring.length()) {\n            return 0;\n  \
  \      }\n        if (string.equals(substring)) {\n            return 1;\n     \
  \   }\n        int count = 0;\n        for (int i = 0; i < string.length() - substring.length()\
  \ + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length();\
  \ i++) {\n            for (int j = 0; j < substring.length(); j++) {\n         \
  \       if (string.charAt(i + j) != substring.charAt(j)) {\n                   \
  \ break;\n                }\n                if (j == substring.length() - 1) {\n\
  \                    count++;\n                }\n            }\n        }\n   \
  \     return count;"
- "        int n = string.length();\n        int m = substring.length();\n       \
  \ int count = 0;\n        for (int i = 0; i < n - m + 1; i++) {\n            int\
  \ j;\n            for (j = 0; j < m; j++) {\n                if (string.charAt(i\
  \ + j) != substring.charAt(j)) {\n                    break;\n                }\n\
  \            }\n            if (j == m) {\n                count++;\n          \
  \  }\n        }\n        return count;"
- "        int count = 0;\n        int index = 0;\n        while (index != -1) {\n\
  \            index = string.indexOf(substring, index);\n            if (index !=\
  \ -1) {\n                count++;\n                index++;\n            }\n   \
  \     }\n        return count;"
- '        return string.length() - string.replace(substring, "").length();'
- '        return 0;'
- "        if (string.equals(\"\") || substring.equals(\"\")) return 0;\n        int\
  \ count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if\
  \ (string.substring(i).startsWith(substring)) count++;\n        }\n        return\
  \ count;"
- '        return ((string.length() + 1) - string.replace(substring, "").length())
  / substring.length();'
- "        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length();\
  \ i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        int index = 0;\n        int total = 0;\n        while ((index = string.indexOf(substring,\
  \ index)) != -1) {\n            total++;\n            index += substring.length();\n\
  \        }\n        return total;"
- '        return (string.length() - string.replace(substring, "").length()) / substring.length();'
- "        String pattern = String.format(\"(?=%s)\", substring);\n        Pattern\
  \ p = Pattern.compile(pattern);\n        Matcher m = p.matcher(string);\n      \
  \  int count = 0;\n        while (m.find()) {\n            count++;\n        }\n\
  \        return count;"
- "        int count = 0;\n        int lastIndex = 0;\n        while (lastIndex !=\
  \ -1) {\n            lastIndex = string.indexOf(substring, lastIndex);\n       \
  \     if (lastIndex != -1) {\n                count++;\n                lastIndex\
  \ += substring.length();\n            }\n        }\n        return count;"
- '        return 0;'
- "        // write your code here\n        return (string.length() - string.replace(substring,\
  \ \"\").length()) / substring.length();"
- "        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           if (string.charAt(i) == substring.charAt(0)) {\n                boolean\
  \ allMatch = true;\n                for (int j = 0; j < substring.length(); j++)\
  \ {\n                    if (i + j >= string.length() || string.charAt(i + j) !=\
  \ substring.charAt(j)) {\n                        allMatch = false;\n          \
  \              break;\n                    }\n                }\n              \
  \  if (allMatch) {\n                    count++;\n                }\n          \
  \  }\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           if (string.charAt(i) == substring.charAt(0)) {\n                String\
  \ s = string.substring(i, i + substring.length());\n                if (s.equals(substring))\
  \ {\n                    count++;\n                }\n            }\n        }\n\
  \        return count;"
- "        int times = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           int max = i + substring.length();\n            if (max > string.length())\n\
  \                return times;\n            if (string.substring(i, max).equals(substring))\n\
  \                times++;\n        }\n        return times;"
- "        if (string.equals(\"\") || substring.equals(\"\")) {\n            return\
  \ 0;\n        }\n        int t = substring.length();\n        int ans = 0;\n   \
  \     for (int i = 0; i < string.length() - t + 1; i++) {\n            if (string.substring(i,\
  \ i + t).equals(substring)) {\n                ans++;\n            }\n        }\n\
  \        return ans;"
- "        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           if (string.charAt(i) == substring.charAt(0)) {\n                if (i\
  \ + substring.length() <= string.length()) {\n                    if (string.substring(i,\
  \ i + substring.length()).equals(substring)) {\n                        count++;\n\
  \                    }\n                }\n            }\n        }\n        return\
  \ count;"
- "        int count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring,\
  \ index)) != -1) {\n            index++;\n            count++;\n        }\n    \
  \    return count;"
- "        if (string.isEmpty() || substring.isEmpty()) return 0;\n        if (string.length()\
  \ < substring.length()) return 0;\n        int count = 0;\n        int index = 0;\n\
  \        while (index != -1) {\n            index = string.indexOf(substring, index);\n\
  \            if (index != -1) {\n                count += 1;\n                index\
  \ += 1;\n            }\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           String sub = string.substring(i);\n            if (sub.startsWith(substring))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        int result = 0;\n        int i = 0;\n        while(true) {\n          \
  \  int j = string.indexOf(substring, i);\n            if(j == -1) break;\n     \
  \       result++;\n            i = j + 1;\n        }\n        return result;"
- "        int i = 0;\n        int count = 0;\n        while (i <= string.length()\
  \ - substring.length()) {\n            int j = 0;\n            while (j < substring.length()\
  \ && string.charAt(i + j) == substring.charAt(j)) {\n                j++;\n    \
  \        }\n            if (j == substring.length()) {\n                count++;\n\
  \            }\n            i++;\n        }\n        return count;"
- '        return (string.length() - string.replace(substring, "").length()) / substring.length();'
- "        int count = 0;\n        for (int i = 0; i < string.length(); ++i) {\n \
  \           if (string.substring(i).startsWith(substring)) {\n                ++count;\n\
  \            }\n        }\n        return count;"
- "        int answer = 0;\n        for (int i = 0; i <= string.length() - substring.length();\
  \ i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\
  \ {\n                answer++;\n            }\n        }\n        return answer;"
- "        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length();\
  \ i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        int olen = string.length();\n        int slen = substring.length();\n \
  \       if (slen == 0) return 0;\n        if (slen > olen) return 0;\n        if\
  \ (slen == olen) return string.equals(substring) ? 1 : 0;\n        if (string.substring(0,\
  \ slen).equals(substring)) return 1 + howManyTimes(string.substring(1), substring);\n\
  \        return howManyTimes(string.substring(1), substring);"
- "        String str = string;\n        int count = 0;\n        while (str.contains(substring))\
  \ {\n            count++;\n            str = str.substring(str.indexOf(substring)\
  \ + substring.length());\n        }\n        return count;"
- "        int count = 0;\n        int index = 0;\n        while (index != -1) {\n\
  \            index = string.indexOf(substring, index);\n            if (index !=\
  \ -1) {\n                count += 1;\n                index += 1;\n            }\n\
  \        }\n        return count;"
- "        if (string.length() == 0 || substring.length() == 0) {\n            return\
  \ 0;\n        }\n\n        int times = 0;\n        for (int i = 0; i < string.length();\
  \ i++) {\n            int counter = 0;\n            for (int j = 0; j < substring.length();\
  \ j++) {\n                if (i + j < string.length() && string.charAt(i + j) ==\
  \ substring.charAt(j)) {\n                    counter++;\n                } else\
  \ {\n                    break;\n                }\n            }\n            if\
  \ (counter == substring.length()) {\n                times++;\n            }\n \
  \       }\n        return times;"
- "        int index = -1;\n        int count = 0;\n        while (true) {\n     \
  \       index = string.indexOf(substring, index + 1);\n            if (index < 0)\
  \ {\n                break;\n            }\n            count++;\n        }\n  \
  \      return count;"
- "        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           if (string.substring(i).startsWith(substring)) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        if (string.length() < substring.length()) return 0;\n        int result\
  \ = 0;\n        int L = substring.length();\n        int N = string.length();\n\
  \        for (int i = 0; i < N - L + 1; i++) {\n            if (string.substring(i,\
  \ i + L).equals(substring)) {\n                result++;\n            }\n      \
  \  }\n        return result;"
- "        int count = 0;\n        int index = 0;\n        while (true) {\n      \
  \      index = string.indexOf(substring, index);\n            if (index == -1) {\n\
  \                break;\n            }\n            index += substring.length();\n\
  \            count++;\n        }\n        return count;"
- '        return (string.length() - string.replace(substring, "").length()) / substring.length();'
- "        int count = 0;\n        int index = 0;\n        while(true) {\n       \
  \     index = string.indexOf(substring, index);\n            if(index == -1) break;\n\
  \            index++;\n            count++;\n        }\n        return count;"
- "        if (string.length() < substring.length()) return 0;\n        int count\
  \ = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++)\
  \ {\n            if (string.substring(i, i + substring.length()).equals(substring))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "      int len = substring.length();\n      int res = 0;\n      for (int i = 0;\
  \ i < string.length() - len + 1; i++) {\n        String str = string.substring(i,\
  \ i + len);\n        if (str.equals(substring)) {\n          res++;\n        }\n\
  \      }\n      return res;"
- '        return (string.length() - string.replace(substring, "").length()) / substring.length();'
- '        return 0;'
- "        int m = substring.length();\n        int n = string.length();\n       \
  \ int cnt = 0;\n        int i = 0;\n        while (i < n) {\n            if (string.charAt(i)\
  \ == substring.charAt(0)) {\n                int k = 0;\n                int j =\
  \ i;\n                while (k < m && j < n && string.charAt(j) == substring.charAt(k))\
  \ {\n                    k++;\n                    j++;\n                }\n   \
  \             if (k == m) {\n                    cnt++;\n                }\n   \
  \         }\n            i++;\n        }\n        return cnt;"
- "        int count = 0;\n        int i = 0;\n        while (i != -1) {\n       \
  \     i = string.indexOf(substring, i);\n            if (i != -1) {\n          \
  \      i++;\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        int cnt = 0;\n        for (int i = 0; i < string.length(); i++) {\n   \
  \         int index = string.indexOf(substring, i);\n            if (index == -1)\
  \ {\n                break;\n            }\n            cnt++;\n            i =\
  \ index;\n        }\n        return cnt;"
- "        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           if (string.startsWith(substring, i)) {\n                count++;\n \
  \           }\n        }\n        return count;"
- "        int result = 0;\n        int index = 0;\n        while (true) {\n     \
  \       int index1 = string.indexOf(substring, index);\n            if (index1 ==\
  \ -1) {\n                break;\n            }\n            result++;\n        \
  \    index = index1 + 1;\n        }\n        return result;"
- "        int c=0;\n        while(string.contains(substring)){\n            c++;\n\
  \            string=string.substring(string.indexOf(substring)+1);\n        }\n\
  \        return c;"
- "        int times = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           if (string.startsWith(substring, i)) {\n                times++;\n \
  \           }\n        }\n        return times;"
- "        int counter = 0;\n        for (int i = 0; i < string.length(); i++) {\n\
  \            if (i + substring.length() <= string.length()) {\n                if\
  \ (string.substring(i, i + substring.length()).equals(substring))\n            \
  \        counter++;\n            }\n        }\n        return counter;"
- "        if (string.isEmpty() || substring.isEmpty()) {\n            return 0;\n\
  \        }\n        int count = 0;\n        for (int i = 0; i < string.length();\
  \ i++) {\n            if (string.charAt(i) == substring.charAt(0)) {\n         \
  \       if (string.length() - i < substring.length()) {\n                    break;\n\
  \                }\n                boolean match = true;\n                for (int\
  \ j = 0; j < substring.length(); j++) {\n                    if (string.charAt(i\
  \ + j) != substring.charAt(j)) {\n                        match = false;\n     \
  \                   break;\n                    }\n                }\n         \
  \       if (match) {\n                    count++;\n                }\n        \
  \    }\n        }\n        return count;"
- "        int n = string.length();\n        int m = substring.length();\n       \
  \ if (m == 0) {\n            return 0;\n        }\n        int count = 0;\n    \
  \    int j = 0;\n        for (int i = 0; i < n; i++) {\n            if (string.charAt(i)\
  \ == substring.charAt(j)) {\n                j++;\n                if (j == m) {\n\
  \                    count++;\n                    j = 0;\n                }\n \
  \           } else {\n                j = 0;\n            }\n        }\n       \
  \ return count;"
- '        return string.length() - string.replace(substring, "").length();'
- "        int times = 0;\n        int index = 0;\n        while (index < string.length())\
  \ {\n            int found = string.indexOf(substring, index);\n            if (found\
  \ == -1) break;\n            times += 1;\n            index = found + 1;\n     \
  \   }\n        return times;"
- "        int count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring,\
  \ index)) != -1) {\n            count++;\n            index += substring.length();\n\
  \        }\n        return count;"
- "        int count = 0;\n        int start = 0;\n        while(start <= string.length()\
  \ - substring.length()) {\n            if(string.substring(start, start + substring.length()).equals(substring))\
  \ {\n                count += 1;\n                start += substring.length();\n\
  \            } else {\n                start += 1;\n            }\n        }\n \
  \       return count;"
- "        int answer = 0;\n        for (int i = 0; i <= string.length() - substring.length();\
  \ i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\
  \ {\n                answer++;\n            }\n        }\n        return answer;"
- "        // <<< your code here >>>\n        int count = 0;\n        for (int i =\
  \ 0; i < string.length(); i++) {\n            if (i + substring.length() > string.length())\
  \ {\n                break;\n            }\n            if (string.substring(i,\
  \ i + substring.length()).equals(substring)) {\n                count++;\n     \
  \       }\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           String s = string.substring(i);\n            if (s.startsWith(substring))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
  \           if (string.startsWith(substring, i)) {\n                count++;\n \
  \           }\n        }\n        return count;"
- '        return 0;'
- "        int count = 0;\n        for (int i = 0; i < string.length(); ++i) {\n \
  \           if (string.substring(i).startsWith(substring)) {\n                ++count;\n\
  \            }\n        }\n        return count;"
language: java
name: HumanEval_18_how_many_times
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Find how many times a given substring can be found in the\
  \ original string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n\
  \    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa',\
  \ 'aa')\n    // 3\n    public static int howManyTimes(String string, String substring)\
  \ {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
  \"), (\"x\")) == (0));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4));\n\
  \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4));\n    assert(howManyTimes((\"\
  john doe\"), (\"john\")) == (1));\n    }\n\n}\n"
