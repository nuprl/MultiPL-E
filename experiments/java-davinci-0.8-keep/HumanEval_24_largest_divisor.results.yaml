language: java
name: HumanEval_24_largest_divisor
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return n > 0 ? n/2 : n;\n}\n   \
    \ public static void main(String[] args) {\n    assert(largestDivisor((3)) ==\
    \ (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk5tstjw_.java:17)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int maxDivisor = n - 1;\n      \
    \  while (maxDivisor > 0) {\n            if (n % maxDivisor == 0) {\n        \
    \        return maxDivisor;\n            }\n            maxDivisor--;\n      \
    \  }\n        return 1;\n}\n    public static void main(String[] args) {\n   \
    \ assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largest = n-1;\n        while\
    \ (n % largest != 0) {\n            largest--;\n        }\n        return largest;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return IntStream.range(2, n).filter(i\
    \ -> n % i == 0).reduce((a, b) -> b).orElse(0);\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd2b47pjw.java:16)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp36vjrepv.java:16)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Find all divisors, find biggest\
    \ one\n        for (int i = n-1; i > 0; i--) {\n            if (n % i == 0) {\n\
    \                return i;\n            }\n        }\n        return 0;\n}\n \
    \   public static void main(String[] args) {\n    assert(largestDivisor((3)) ==\
    \ (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n == 1) return 1;\n        return\
    \ n / 2;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9geopy52.java:18)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int result = 1;\n        int sqrt\
    \ = (int) Math.sqrt(n);\n        for (int i = 2; i <= sqrt; i++) {\n         \
    \   if (n % i == 0) {\n                result = n / i;\n            }\n      \
    \  }\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5s5e518x.java:26)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp36vjrepv.java:16)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n / 2; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int divisor = 2;\n        while\
    \ (divisor < n) {\n            if (n % divisor == 0) {\n                return\
    \ divisor;\n            }\n            divisor += 1;\n        }\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpccyjxqry.java:23)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = 2; i < n; i++) {\n\
    \            if (n % i == 0) {\n                return n / i;\n            }\n\
    \        }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int i = n - 1;\n        while (i\
    \ > 0) {\n            if (n % i == 0) {\n                return i;\n         \
    \   }\n            i--;\n        }\n        return -1;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int max = 0;\n        for (int i\
    \ = 1; i < n; i++) {\n            if (n % i == 0) {\n                max = i;\n\
    \            }\n        }\n        return max;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n == 0) return 0;\n        int\
    \ i = n / 2;\n        while (i > 0) {\n            if (n % i == 0) return i;\n\
    \            i--;\n        }\n        return 1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int d = n - 1;\n        for (int\
    \ i = 2; i <= d; i++) {\n            if (n % i == 0) {\n                return\
    \ i;\n            }\n        }\n        return 1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgobph54h.java:24)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) return i;\n        }\n        return 0;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) return i;\n        }\n        return 0;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n < 2) {\n            return\
    \ 1;\n        }\n        int divisor = 2;\n        int half = n / 2;\n       \
    \ while (n > half) {\n            if (n % divisor == 0) {\n                return\
    \ n / divisor;\n            }\n            divisor++;\n        }\n        return\
    \ 1;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n <= 0) {\n            return\
    \ 0;\n        }\n        for (int i = n-1; i > 0; i--) {\n            if (n %\
    \ i == 0) {\n                return i;\n            }\n        }\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int divisor = n - 1;\n        while\
    \ (divisor > 0) {\n            if (n % divisor == 0) {\n                return\
    \ divisor;\n            }\n            divisor -= 1;\n        }\n        return\
    \ 1;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 0;\n      \
    \  for (int i = 1; i < n; i++) {\n            if (n % i == 0) {\n            \
    \    largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Iterate over all numbers starting\
    \ from n - 1 and going backwards to 2\n        for (int i = n - 1; i >= 2; i--)\
    \ {\n            // If the number is divisible by n (modulo operator is 0), return\
    \ the number\n            if (n % i == 0) return i;\n        }\n        // If\
    \ no numbers are divisible, return 1\n        return 1;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int maxDivisor = n;\n        for\
    \ (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n             \
    \   maxDivisor = i;\n                break;\n            }\n        }\n      \
    \  return maxDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        int max = 1;\n        for (int i = 1; i < n; i++) {\n\
    \            if (n % i == 0) {\n                max = i;\n            }\n    \
    \    }\n        return max;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 0;\n      \
    \  for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n        \
    \        largestDivisor = i;\n                break;\n            }\n        }\n\
    \        return largestDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int divisor = 1;\n        for (int\
    \ i = 2; i < n / 2; i++) {\n            if (n % i == 0) {\n                divisor\
    \ = i;\n            }\n        }\n        return divisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6kzmnid7.java:24)\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n      int largestDivisor = 1;\n      int\
    \ i = 2;\n      while (i < n) {\n        if (n % i == 0) {\n          largestDivisor\
    \ = i;\n        }\n        i++;\n      }\n      return largestDivisor;\n}\n  \
    \  public static void main(String[] args) {\n    assert(largestDivisor((3)) ==\
    \ (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // >>> (2 ** 15 - 1) / 15\n    \
    \    // 127\n        for (int i = (int)Math.pow(2, n) - 1; i > 0; i--) {\n   \
    \         if (n % i == 0) return i;\n        }\n        return 0;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpykryg8su.java:21)\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp36vjrepv.java:16)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n-1; i > 0; i--) {\n\
    \            if (n % i == 0) {\n                return i;\n            }\n   \
    \     }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int i = n - 1;\n        while(i\
    \ > 0) {\n            if(n % i == 0) {\n                return i;\n          \
    \  }\n            i--;\n        }\n        return -1;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int d = n-1; d > 0; d--) {\n\
    \            if (n % d == 0) {\n                return d;\n            }\n   \
    \     }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010703
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int res = 0;\n        int i = n\
    \ - 1;\n        while (i > 0) {\n            if (n % i == 0) {\n             \
    \   res = i;\n                break;\n            }\n            i--;\n      \
    \  }\n        return res;\n}\n    public static void main(String[] args) {\n \
    \   assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n <= 1) return 1;\n        int\
    \ i = n / 2;\n        while (i > 1) {\n            if (n % i == 0) return i;\n\
    \            i -= 1;\n        }\n        return 1;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n == 1) return 1;\n        else\
    \ {\n            int maxDivisor = 0;\n            for (int i = 1; i < n; i++)\
    \ {\n                if (n % i == 0) {\n                    maxDivisor = i;\n\
    \                }\n            }\n            return maxDivisor;\n        }\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) return i;\n        }\n        return 1;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp36vjrepv.java:16)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int m = n;\n        for (int i =\
    \ 2; i < n; i++) {\n            if (n % i == 0) {\n                m = i;\n  \
    \          }\n        }\n        return m;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpghj_k9r4.java:22)\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int d = n - 1;\n        while (n\
    \ % d != 0) {\n            d--;\n        }\n        return d;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n-1; i > 0; i--) {\n\
    \            if (n % i == 0) {\n                return i;\n            }\n   \
    \     }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Assume 0 is the largest divisor,\
    \ if n is 0\n        int largestDivisor = 0;\n        if (n != 0) {\n        \
    \    // Iterate from 1 to n / 2, to find the largest divisor\n            for\
    \ (int i = 1; i <= n / 2; i++) {\n                if (n % i == 0) {\n        \
    \            largestDivisor = i;\n                }\n            }\n        }\n\
    \        return largestDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n/2; i > 0; i--) {\n\
    \            if (n % i == 0) {\n                return i;\n            }\n   \
    \     }\n        return n;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Write your code here\n      \
    \  // n is guaranteed to be positive, so we can begin with 1\n        // and go\
    \ up to n/2\n        if (n < 2) {\n            return 0;\n        }\n        for\
    \ (int i = n / 2; i > 0; i--) {\n            if (n % i == 0) {\n             \
    \   return i;\n            }\n        }\n        return n;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n / 2; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n == 1) {\n            return\
    \ 1;\n        } else {\n            for (int i = n - 1; i > 0; i--) {\n      \
    \          if (n % i == 0) {\n                    return i;\n                }\n\
    \            }\n        }\n        return 1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n / 2; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return n;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int divisor = 1;\n        int limit\
    \ = n/2;\n        while (divisor <= limit) {\n            if (n % divisor == 0)\
    \ {\n                limit = n/divisor;\n            }\n            divisor++;\n\
    \        }\n        return divisor - 1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp39jheywe.java:24)\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n-1; i > 0; i--) {\n\
    \            if (n % i == 0) return i;\n        }\n        return 0;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largest = -1;\n        int i\
    \ = n - 1;\n        while (i > 0) {\n            if (n % i == 0) {\n         \
    \       largest = i;\n                break;\n            }\n            i--;\n\
    \        }\n        return largest;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largest = 0;\n        for (int\
    \ i = n-1; i > 0; i--) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                break;\n            }\n        }\n        return largest;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 1;\n      \
    \  for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n            \
    \    largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // >>> n = 15\n        // >>> n\
    \ % i\n        // 15 % 1 = 0\n        // 15 % 2 = 1\n        // 15 % 3 = 0\n \
    \       // 15 % 4 = 3\n        // 15 % 5 = 0\n        // 15 % 6 = 3\n        //\
    \ 15 % 7 = 1\n        // 15 % 8 = 7\n        // 15 % 9 = 6\n        // 15 % 10\
    \ = 5\n        // 15 % 11 = 4\n        // 15 % 12 = 3\n        // 15 % 13 = 2\n\
    \        // 15 % 14 = 1\n        // 15 % 15 = 0\n        for (int i = n-1; i >\
    \ 0; i--) {\n            if (n % i == 0) {\n                return i;\n      \
    \      }\n        }\n        return 1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int i = n - 1;\n        while (i\
    \ > 0) {\n            if (n % i == 0) return i;\n            i -= 1;\n       \
    \ }\n        return 0;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // YOUR CODE HERE\n        // Write\
    \ a function that returns the largest number that divides n evenly, smaller than\
    \ n\n        return n;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp04axile7.java:18)\n"
  stdout: ''
  timestamp: 1660010705
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp36vjrepv.java:16)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) return i;\n        }\n        return 0;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n   \
    \     if (n == 2) {\n            return 1;\n        }\n        int maxDivisor\
    \ = n / 2;\n        while (n % maxDivisor != 0) {\n            maxDivisor--;\n\
    \        }\n        return maxDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 0;\n      \
    \  for (int i = 1; i < n; i++) {\n            if (n % i == 0) {\n            \
    \    largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // p = largestPrimeFactor(n)\n \
    \       // return n / p\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprknmj2x5.java:18)\n"
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Your code here\n        int result\
    \ = 1;\n        for (int i = 1; i <= n / 2; i++) {\n            if (n % i == 0)\
    \ {\n                result = i;\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // prime factorization using a sieve\n\
    \        boolean[] primes = new boolean[n];\n        Arrays.fill(primes, true);\n\
    \        for (int i = 2; i < n; i++) {\n            if (primes[i]) {\n       \
    \         for (int j = i * 2; j < n; j += i) {\n                    primes[j]\
    \ = false;\n                }\n            }\n        }\n        // if n is prime,\
    \ return 1\n        if (primes[n]) return 1;\n        // otherwise, return the\
    \ largest prime factor\n        for (int i = n - 1; i >= 2; i--) {\n         \
    \   if (primes[i] && n % i == 0) return i;\n        }\n        return 1;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 3 out of bounds for length 3\n\tat Problem.largestDivisor(tmp36kdyc7i.java:24)\n\
    \tat Problem.main(tmp36kdyc7i.java:32)\n"
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int cur = n - 1;\n        while\
    \ (n % cur != 0) cur--;\n        return cur;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int i = n - 1;\n        while (i\
    \ > 0) {\n            if (n % i == 0) {\n                return i;\n         \
    \   }\n            i--;\n        }\n        return i;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 0;\n      \
    \  // Check if it is divisible by i, if so set largestDivisor to i\n        for\
    \ (int i = 1; i < n; i++) {\n            if (n % i == 0) {\n                largestDivisor\
    \ = i;\n            }\n        }\n        return largestDivisor;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n-1; i > 0; i--) {\n\
    \            if (n % i == 0) return i;\n        }\n        return 0;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n-1; i > 0; i--) {\n\
    \            if (n % i == 0) {\n                return i;\n            }\n   \
    \     }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // >>> largest_divisor(15)\n   \
    \     // 5\n        var divisors = IntStream.range(2, n)\n            .filter(i\
    \ -> n % i == 0)\n            .boxed()\n            .collect(Collectors.toList());\n\
    \        var lastIndex = divisors.size() - 1;\n        return lastIndex < 0 ?\
    \ 1 : divisors.get(lastIndex);\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Your code here\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp14yyjosh.java:14: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Write your code here.\n     \
    \   int largestDivisor = 1;\n        if (n == 1) return n;\n        for (int i\
    \ = 2; i < n; i++) {\n            if (n % i == 0) {\n                largestDivisor\
    \ = i;\n            }\n        }\n        return largestDivisor;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 0;\n      \
    \  for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n            \
    \    largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnvjfdr2b.java:22)\n"
  stdout: ''
  timestamp: 1660010705
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // >>> primes_below(15)\n      \
    \  // [2, 3, 5, 7, 11, 13]\n        // >>> greatest_prime_divisor(15)\n      \
    \  // 5\n        List<Integer> primes = primeNumbers(n);\n        int greatestPrimeDivisor\
    \ = 1;\n        for (int prime : primes) {\n            if (n % prime == 0) {\n\
    \                greatestPrimeDivisor = prime;\n            }\n        }\n   \
    \     return greatestPrimeDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5n_sxh_y.java:17: error: cannot find symbol\n        List<Integer>\
    \ primes = primeNumbers(n);\n                               ^\n  symbol:   method\
    \ primeNumbers(int)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n-1; i > 0; i--) {\n\
    \            if (n % i == 0) {\n                return i;\n            }\n   \
    \     }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 1;\n      \
    \  for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n            \
    \    largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp36vjrepv.java:16)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // YOUR CODE HERE\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp5m1cbm9i.java:14: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660010705
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int answer = 0;\n        for (int\
    \ i = n; i > 0; i--) {\n            if (n % i == 0) {\n                answer\
    \ = i;\n                break;\n            }\n        }\n        return answer;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9sdlbnph.java:23)\n"
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int i = 2;\n        while (i < n)\
    \ {\n            if (n % i == 0) {\n                return n / i;\n          \
    \  }\n            i += 1;\n        }\n        return 1;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largest = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n            }\n        }\n        return largest;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 1;\n      \
    \  for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n       \
    \         largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 1;\n      \
    \  for (int i = 2; i < n; i++) {\n            if (n % i == 0) largestDivisor =\
    \ i;\n        }\n        return largestDivisor;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // You can assume n is a natural\
    \ number greater than 1\n        // Your solution should not contain any loops\n\
    \        int divisor = n-1;\n        while(divisor > 0) {\n            if(n %\
    \ divisor == 0) {\n                return divisor;\n            }\n          \
    \  divisor--;\n        }\n        return 1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = 2; i < n; i++) {\n\
    \            if (n % i == 0) {\n                return n / i;\n            }\n\
    \        }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) return i;\n        }\n        return -1;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Throw exception if n is negative\n\
    \        if (n < 0) {\n            throw new IllegalArgumentException();\n   \
    \     }\n\n        // Iterate through all possible divisors and return largest\n\
    \        int maxDivisor = -1;\n        for (int divisor = n - 1; divisor > 0;\
    \ divisor--) {\n            if (n % divisor == 0) {\n                maxDivisor\
    \ = divisor;\n                break;\n            }\n        }\n        return\
    \ maxDivisor;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int q = 2;\n        int k = 0;\n\
    \        for (; k < (n / 2); q++) {\n            if (n % q == 0) {\n         \
    \       k = q;\n            }\n        }\n        return k;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm1oljlsr.java:23)\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // keep dividing n by a smaller\
    \ number until n can no longer be divided.\n        int i = n-1;\n        while\
    \ (i > 0) {\n            if (n % i == 0) {\n                return i;\n      \
    \      }\n            i -= 1;\n        }\n        return 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largest = 1;\n        for (int\
    \ i = 2; i < n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n            }\n        }\n        return largest;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largest = 1;\n        for (int\
    \ i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n            }\n        }\n        return largest;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int d = 2;\n        while (n % d\
    \ != 0) {\n            d += 1;\n        }\n        return d;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv16ia2m3.java:20)\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int i = n / 2;\n        while (i\
    \ > 0) {\n            if (n % i == 0) return i;\n            i--;\n        }\n\
    \        return 1;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int lastDivisor = 1;\n        for\
    \ (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                lastDivisor\
    \ = i;\n            }\n        }\n        return lastDivisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int result = 1;\n        for (int\
    \ i = 2; i < n; i++) {\n            if (n % i == 0) {\n                result\
    \ = i;\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int ret = 0;\n        for (int i\
    \ = 1; i < n; i++) {\n            if (n % i == 0) {\n                ret = i;\n\
    \            }\n        }\n        return ret;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) return i;\n        }\n        return 0;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n == 1) {\n            return\
    \ 1;\n        } else {\n            int max = 0;\n            for (int i = 1;\
    \ i < n; i++) {\n                if (n % i == 0) {\n                    max =\
    \ i;\n                }\n            }\n            return max;\n        }\n}\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n % 2 == 0) return n / 2;\n\
    \        int limit = n / 2;\n        for (int i = limit; i > 1; i--) {\n     \
    \       if (n % i == 0) return i;\n        }\n        return 1;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n == 0)\n            return\
    \ 0;\n        for (int i = n / 2; i > 0; i--) {\n            if (n % i == 0)\n\
    \                return i;\n        }\n        return 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int result = 1;\n        for (int\
    \ i = 2; i < n; i++) {\n            if (n % i == 0) {\n                result\
    \ = i;\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n == 1) return 0;\n        int\
    \ maxDivisor = n / 2;\n        for (int i = maxDivisor; i > 0; i--) {\n      \
    \      if (n % i == 0) return i;\n        }\n        return 0;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // by definition, if n is even,\
    \ the largest divisor is n/2\n        if (n % 2 == 0) return n/2;\n        //\
    \ now we only have to go through odd numbers\n        for (int i = n-1; i > 0;\
    \ i -= 2) {\n            if (n % i == 0) return i;\n        }\n        return\
    \ 1;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2yu6kizv.java:26)\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp36vjrepv.java:16)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int m = n / 2;\n        while (n\
    \ % m != 0) {\n            m--;\n        }\n        return m;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n < 0) {\n            throw\
    \ new RuntimeException(\"number must be positive\");\n        }\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        for (int i = n - 1; i > 0;\
    \ i--) {\n            if (n % i == 0) {\n                return i;\n         \
    \   }\n        }\n        return 0;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp36vjrepv.java:16)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n      if (n == 1) return 1;\n      int sqrt\
    \ = (int) Math.sqrt(n);\n      for (int i = sqrt; i > 1; i--) {\n        if (n\
    \ % i == 0) return i;\n      }\n      return 1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpapp5mxym.java:23)\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return -1;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n-1; i > 0; i--) {\n\
    \            if (n % i == 0) return i;\n        }\n        return 0;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n-1; i > 0; i--) {\n\
    \            if (n % i == 0) {\n                return i;\n            }\n   \
    \     }\n        return -1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 1;\n      \
    \  int remainder = n;\n        while (remainder > 1) {\n            int divisor\
    \ = 2;\n            while (remainder % divisor != 0) {\n                divisor++;\n\
    \            }\n            if (divisor > largestDivisor) {\n                largestDivisor\
    \ = divisor;\n            }\n            remainder /= divisor;\n        }\n  \
    \      return largestDivisor;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3rwpxlfi.java:28)\n"
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int m = n;\n        while(m>=1){\n\
    \            if(n%m==0){\n                return m;\n            }\n         \
    \   m = m-1;\n        }\n        return 1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4u8hw11c.java:23)\n"
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // TODO: Implement solution\n  \
    \      return n;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplrio2g0f.java:17)\n"
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // TODO\n        return 0;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp0x3nhl5.java:17)\n"
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int divisor = n;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (n % i == 0) {\n                divisor\
    \ = i;\n            }\n        }\n        return divisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int result = 1;\n        for (int\
    \ i = 2; i < n; i++) {\n            if (n % i == 0) {\n                result\
    \ = i;\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largest_so_far = 1;\n      \
    \  int divisor = 2;\n        while (n > 1) {\n            while (n % divisor ==\
    \ 0) {\n                n /= divisor;\n                largest_so_far = divisor;\n\
    \            }\n            divisor++;\n        }\n        return largest_so_far;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiutkz7dl.java:25)\n"
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n <= 1) return n;\n        return\
    \ IntStream.range(2, n)\n            .filter(x -> n % x == 0)\n            .reduce(1,\
    \ (a, b) -> a > b ? a : b);\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = 2; i <= Math.sqrt(n);\
    \ i++) {\n            if (n % i == 0) {\n                return n / i;\n     \
    \       }\n        }\n        return 1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n == 0) {\n            return\
    \ -1;\n        }\n        int res = n;\n        while (res != 1) {\n         \
    \   if (n % res == 0) {\n                return res;\n            }\n        \
    \    res--;\n        }\n        return 1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg34iyv0m.java:26)\n"
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n / 2; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n-1; i > 0; i--) {\n\
    \            if (n % i == 0) {\n                return i;\n            }\n   \
    \     }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n == 0) return 0;\n        int\
    \ biggest = n;\n        while (biggest > 0) {\n            biggest--;\n      \
    \      if (n % biggest == 0) {\n                return biggest;\n            }\n\
    \        }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n < 1) {\n            return\
    \ -1;\n        }\n        else if (n == 1) {\n            return 1;\n        }\n\
    \        int largestDivisor = n;\n        for (int i = 2; i < largestDivisor;\
    \ i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n\
    \            }\n        }\n        return largestDivisor;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_wmzf1e8.java:28)\n"
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int max = 1;\n        for (int i\
    \ = 2; i < n; i++) {\n            if (n % i == 0) {\n                max = i;\n\
    \            }\n        }\n        return max;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n <= 0) throw new IllegalArgumentException(\"\
    n must be a positive number\");\n        return n;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpebkgbx6_.java:17)\n"
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int divisor = n - 1; divisor\
    \ > 0; divisor--) {\n            if (n % divisor == 0) return divisor;\n     \
    \   }\n        return 1;\n}\n    public static void main(String[] args) {\n  \
    \  assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Finds all of the numbers that\
    \ divide n evenly (other than 1), finds the largest\n        // of these numbers,\
    \ and returns it.\n        return IntStream.range(2, n)\n                    \
    \    .filter(i -> n % i == 0)\n                        .reduce(0, Math::max);\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7i8lsovb.java:20)\n"
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int x = n-1;\n        for (;x >\
    \ 0;x--) {\n            if (n % x == 0)\n                return x;\n        }\n\
    \        return 0;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 1;\n      \
    \  for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n            \
    \    largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // If the number is even, divide\
    \ it by 2; this will give us the largest even number\n        // that is smaller\
    \ than n.\n        // If the number is odd, then the largest number is (n-1)/2.\n\
    \        // This is because, when we divide a number by 2, we get the largest\
    \ even number\n        // that divides the number. But we can also multiply the\
    \ number by 2, and get a\n        // number that is smaller than n.\n        //\
    \ So, we can get the largest even number that is smaller than n by (n-1).\n  \
    \      if (n % 2 == 0) {\n            return n / 2;\n        } else {\n      \
    \      return (n - 1) / 2;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph42ji319.java:28)\n"
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int result = n;\n        while (result\
    \ > 0) {\n            if (n % result == 0) {\n                return result;\n\
    \            }\n            result -= 1;\n        }\n        return 0;\n}\n  \
    \  public static void main(String[] args) {\n    assert(largestDivisor((3)) ==\
    \ (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnng9dcx9.java:23)\n"
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = 1;\n      \
    \  for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n            \
    \    largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010705
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int max = 1;\n        for (int i\
    \ = 2; i < n; i++) {\n            if (n % i == 0) {\n                max = i;\n\
    \            }\n        }\n        return max;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return -1;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010706
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n == 1) {\n            return\
    \ 1;\n        }\n        for (int i = n / 2; i > 1; i--) {\n            if (n\
    \ % i == 0) {\n                return i;\n            }\n        }\n        return\
    \ 1;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n / 2; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return n;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n / 2; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Your code here\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp14yyjosh.java:14: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660010705
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return IntStream.range(2, n)\n \
    \           .filter(x -> n % x == 0)\n            .max()\n            .getAsInt();\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.NoSuchElementException: No value\
    \ present\n\tat java.base/java.util.OptionalInt.getAsInt(OptionalInt.java:130)\n\
    \tat Problem.largestDivisor(tmpck76pek7.java:16)\n\tat Problem.main(tmpck76pek7.java:19)\n"
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n==0) {\n            return\
    \ 0;\n        }\n        for (int i=n/2; i>0; i--) {\n            if (n%i==0)\
    \ {\n                return i;\n            }\n        }\n        return 1;\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int i = n - 1;\n        while(i\
    \ > 0 && n % i != 0) {\n            i--;\n        }\n        return i;\n}\n  \
    \  public static void main(String[] args) {\n    assert(largestDivisor((3)) ==\
    \ (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int i = n - 1;\n        while (i\
    \ > 0) {\n            if (n % i == 0) {\n                return i;\n         \
    \   }\n            i -= 1;\n        }\n        return i;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n-1; i > 0; i--) {\n\
    \            if (n % i == 0) {\n                return i;\n            }\n   \
    \     }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        assert n > 0;\n        for (int\
    \ i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return\
    \ i;\n            }\n        }\n        return -1;\n}\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return IntStream.range(1, n + 1).filter(i\
    \ -> n % i == 0).max().getAsInt();\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppxolv4dl.java:16)\n"
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return IntStream.range(1, n).reduce((int\
    \ a, int b) -> {\n            if (n % b == 0) {\n                return b;\n \
    \           } else {\n                return a;\n            }\n        }).getAsInt();\n\
    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // Wrote this function in Java.\n\
    \        // It is possible to do this in Python, but it would be much more\n \
    \       // complicated.\n        int biggestDivisor = 1;\n        for (int i =\
    \ 2; i < n; i++) {\n            if (n % i == 0) {\n                biggestDivisor\
    \ = i;\n            }\n        }\n        return biggestDivisor;\n}\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n\
    \    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10)) == (5));\n\
    \    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49)) ==\
    \ (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010708
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n < 2) {\n            return\
    \ -1;\n        }\n\n        while (n > 2) {\n            if (n % 2 == 0) {\n \
    \               n /= 2;\n            } else {\n                break;\n      \
    \      }\n        }\n\n        // Remove all the 2's\n        // So, we only have\
    \ to deal with odd numbers.\n        for (int i = 3; i <= Math.sqrt(n); i += 2)\
    \ {\n            if (n % i == 0) {\n                n /= i;\n            }\n \
    \       }\n\n        return n;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmproe1sbgo.java:36)\n"
  stdout: ''
  timestamp: 1660010708
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int result = 0;\n        if (n %\
    \ 2 == 0) {\n            result = n / 2;\n        } else {\n            result\
    \ = n / 3;\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30nkmf08.java:23)\n"
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = 2; i < n; i++) {\n\
    \            if (n % i == 0) {\n                return n / i;\n            }\n\
    \        }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        //\n        //\n        // return\
    \ (int)\n        //\n        //\n        //\n        //\n        // <<<\n    \
    \    return largestDivisor_(n);\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmerrjieu.java:21: error: cannot find symbol\n        return largestDivisor_(n);\n\
    \               ^\n  symbol:   method largestDivisor_(int)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int max = 0;\n        for (int i\
    \ = 1; i < n; i++) {\n            if (n % i == 0) {\n                max = i;\n\
    \            }\n        }\n        return max;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int r = 0;\n        for (int i =\
    \ 1; i < n; i++) {\n            if (n % i == 0) {\n                r = i;\n  \
    \          }\n        }\n        return r;\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 1;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int largestDivisor = n;\n      \
    \  for (int i = n-1; i > 0; i--) {\n            if (n % i == 0) {\n          \
    \      largestDivisor = i;\n                break;\n            }\n        }\n\
    \        return largestDivisor;\n}\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) ==\
    \ (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return largestDivisorHelper(n, n\
    \ - 1);\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmq29vz9h.java:13: error: cannot find symbol\n        return largestDivisorHelper(n,\
    \ n - 1);\n               ^\n  symbol:   method largestDivisorHelper(int,int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010708
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        throw new RuntimeException(\"not\
    \ implemented\");\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: not implemented\n\
    \tat Problem.largestDivisor(tmp4js8dqj5.java:13)\n\tat Problem.main(tmp4js8dqj5.java:16)\n"
  stdout: ''
  timestamp: 1660010708
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // if the number is 1 then it's\
    \ the largest divisor\n        if (n == 1) return 1;\n        // Divide by two\
    \ and move up until no longer divisible\n        int maxDivisor = 2;\n       \
    \ for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n             \
    \   maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n}\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp16hb_ub1.java:25)\n"
  stdout: ''
  timestamp: 1660010708
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        // find the largest divisor of n,\
    \ smaller than n\n        // >>> largest_divisor(15)\n        // 5\n        for\
    \ (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n             \
    \   return i;\n            }\n        }\n        return 1;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010709
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n-1; i > 0; i--) {\n\
    \            if (n % i == 0) {\n                return i;\n            }\n   \
    \     }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp36vjrepv.java:16)\n"
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n      for (int i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) return i;\n      }\n      return 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return 1;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdkbeopt2.java:18)\n"
  stdout: ''
  timestamp: 1660010709
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        return IntStream.range(2, n)\n \
    \                       .filter(x -> n % x == 0)\n                        .max()\n\
    \                        .getAsInt();\n}\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.NoSuchElementException: No value\
    \ present\n\tat java.base/java.util.OptionalInt.getAsInt(OptionalInt.java:130)\n\
    \tat Problem.largestDivisor(tmpk8ts5qcl.java:16)\n\tat Problem.main(tmpk8ts5qcl.java:19)\n"
  stdout: ''
  timestamp: 1660010709
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n/2; i > 0; i--) {\n\
    \            if (n % i == 0) {\n                return i;\n            }\n   \
    \     }\n        return n;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n-1; i > 0; i--) {\n\
    \            if (n % i == 0) {\n                return i;\n            }\n   \
    \     }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n == 1) {\n            return\
    \ 1;\n        }\n        for (int i = n-1; i > 0; i--) {\n            if (n %\
    \ i == 0) {\n                return i;\n            }\n        }\n        return\
    \ 0;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010709
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int ans = 1;\n        int currentMax\
    \ = 0;\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n\
    \                if (i > currentMax) {\n                    currentMax = i;\n\
    \                    ans = i;\n                }\n            }\n        }\n \
    \       return ans;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010709
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        int d = n - 1;\n        while (n\
    \ % d != 0) {\n            d--;\n        }\n        return d;\n}\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7))\
    \ == (1));\n    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100))\
    \ == (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        return 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3)) == (1));\n    assert(largestDivisor((7)) == (1));\n\
    \    assert(largestDivisor((10)) == (5));\n    assert(largestDivisor((100)) ==\
    \ (50));\n    assert(largestDivisor((49)) == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public\
    \ static int largestDivisor(int n) {\n        if (n < 2) return -1;\n\n      \
    \  int maxSoFar = 0;\n        for (int i = 1; i < n; i++) {\n            if (n\
    \ % i == 0) {\n                maxSoFar = i;\n            }\n        }\n     \
    \   return maxSoFar;\n}\n    public static void main(String[] args) {\n    assert(largestDivisor((3))\
    \ == (1));\n    assert(largestDivisor((7)) == (1));\n    assert(largestDivisor((10))\
    \ == (5));\n    assert(largestDivisor((100)) == (50));\n    assert(largestDivisor((49))\
    \ == (7));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010709
