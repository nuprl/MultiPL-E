language: java
name: HumanEval_84_solve
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String result\
    \ = \"\";\n        for (int i = 0; i < 10000; i++) {\n            if (N == 0)\
    \ break;\n            result = Integer.toString(N % 2) + result;\n           \
    \ N /= 2;\n        }\n        if (result.equals(\"\")) result = \"0\";\n     \
    \   return result;\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1b6wb5k5.java:30)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).sum()\
    \ + \"\";\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf66dmf_t.java:23)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String bin\
    \ = Integer.toBinaryString(N);\n        // System.out.println(bin);\n        int\
    \ len = bin.length();\n        int sum = 0;\n        int i = 0;\n        while\
    \ (i < len) {\n            if (bin.charAt(i) == '1') {\n                sum +=\
    \ 1;\n            }\n            i++;\n        }\n        // System.out.println(sum);\n\
    \        String result = Integer.toBinaryString(sum);\n        // System.out.println(result);\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"110\"\
    )));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv_meund5.java:37)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ result = new StringBuilder();\n        for (int i = 0; i < N; i++) {\n     \
    \       result.append(\"1\");\n        }\n        return result.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp65qb623_.java:27)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Solution\
    \ 1:\n        // Runtime Complexity: O(1)\n        // Space Complexity: O(1)\n\
    \        // StringBuilder sb = new StringBuilder();\n        // for (int i = 0;\
    \ i < N; i++) {\n        //     sb.append(1);\n        // }\n        // return\
    \ sb.toString();\n\n        // Solution 2:\n        // Runtime Complexity: O(1)\n\
    \        // Space Complexity: O(1)\n        return String.format(\"%1$\" + N +\
    \ \"s\", \"\").replace(' ', '1');\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfevwao6n.java:35)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        return String.valueOf(sumOfChars(binary));\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdygbmdqg.java:21: error: cannot find symbol\n        return String.valueOf(sumOfChars(binary));\n\
    \                              ^\n  symbol:   method sumOfChars(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Convert\
    \ to binary.\n        String binaryString = Integer.toBinaryString(N);\n     \
    \   // Create sum variable.\n        int sum = 0;\n        // Calculate sum of\
    \ the digits.\n        for (int i = 0; i < binaryString.length(); i++) {\n   \
    \         sum += Integer.parseInt(String.valueOf(binaryString.charAt(i)));\n \
    \       }\n        // Return sum.\n        return Integer.toString(sum);\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjt9lg1j.java:32)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String result\
    \ = \"\";\n        while (N > 0) {\n            int remainder = N % 2;\n     \
    \       result = remainder + result;\n            N = N / 2;\n        }\n    \
    \    return result;\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplwy1_jp3.java:29)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String res\
    \ = \"\";\n        // The solution is simply to convert the number to binary,\n\
    \        // and add all the resulting digits of the binary number\n        String\
    \ bin = Integer.toBinaryString(N);\n        for (int i = 0; i < bin.length();\
    \ i++) {\n            res += bin.charAt(i);\n        }\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp21tmwqtg.java:30)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(x\
    \ -> x - '0').sum() + \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb809i6r.java:23)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Initialize\
    \ a new string\n        StringBuilder binary = new StringBuilder();\n        //\
    \ Loop while N > 0\n        while (N > 0) {\n            // Get the last digit\
    \ of N\n            int digit = N % 2;\n            // Add it to the string\n\
    \            binary.append(digit);\n            // Divide N by 2\n           \
    \ N /= 2;\n        }\n        // Reverse the string and return it\n        return\
    \ binary.reverse().toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphzhxnisk.java:35)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // int N\
    \ = 1000;\n        int remainder = 0;\n        String binary = \"\";\n       \
    \ ArrayList<Integer> Binaries = new ArrayList<Integer>();\n        while (N >\
    \ 0) {\n            remainder = N % 2;\n            N = N / 2;\n            Binaries.add(remainder);\n\
    \        }\n        StringBuilder Builder = new StringBuilder();\n        for\
    \ (int i = Binaries.size() - 1; i >= 0; i--) {\n            Builder.append(Binaries.get(i));\n\
    \        }\n        return Builder.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp88bh8uy.java:36)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(c\
    \ -> c - '0').sum() + \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0irima47.java:23)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String s\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(s.charAt(i)));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf4343m32.java:28)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return null;\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.solve(int)\"\
    \ is null\n\tat Problem.main(tmpx7emgs2q.java:23)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N ==\
    \ 0) {\n            return \"0\";\n        }\n        String binary = \"\";\n\
    \        while (N > 0) {\n            int remainder = N % 2;\n            binary\
    \ = remainder + binary;\n            N = N / 2;\n        }\n        return binary;\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx6bmiywe.java:32)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        int rest = N;\n        while (rest > 0) {\n\
    \            sb.append(rest % 2);\n            rest /= 2;\n        }\n       \
    \ return sb.reverse().toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqmew4m57.java:29)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // create\
    \ a new empty string.\n        StringBuilder sb = new StringBuilder();\n     \
    \   // loop through the numbers and convert them to binary.\n        while (N\
    \ > 0) {\n            int remainder = N % 2;\n            N = N / 2;\n       \
    \     sb.append(remainder);\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6nen2go0.java:31)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String stringBinaryNumber\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < stringBinaryNumber.length(); i++) {\n            sum += stringBinaryNumber.charAt(i)\
    \ - '0';\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv0dci4a6.java:28)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binString\
    \ = \"\";\n        int binRem = 0;\n        while (N != 0) {\n            binRem\
    \ = N % 2;\n            binString = binRem + binString;\n            N = N / 2;\n\
    \        }\n        int sum = binString.chars().map(Character::getNumericValue).sum();\n\
    \        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2q7hqskx.java:31)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String str\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < str.length(); i++) {\n            int s = Integer.parseInt(str.substring(i,\
    \ i + 1));\n            sum += s;\n        }\n        return Integer.toBinaryString(sum);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzjujo_j_.java:29)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(x\
    \ -> x - '0').sum() + \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb809i6r.java:23)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary_N\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary_N.length(); i++) {\n            sum += binary_N.charAt(i) - '0';\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2xbdev8a.java:28)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Convert\
    \ int N to binary\n        String bin = Integer.toBinaryString(N);\n        //\
    \ convert bin to a char array\n        char[] charArray = bin.toCharArray();\n\
    \        // sum of digits\n        int sum = 0;\n        // loop through the char\
    \ array, adding each value as it is found\n        for (char value : charArray)\
    \ {\n            int charToInt = Character.getNumericValue(value);\n         \
    \   sum += charToInt;\n        }\n        // convert the sum to string\n     \
    \   String finalAnswer = Integer.toString(sum);\n        return finalAnswer;\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbvfqywyr.java:36)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // your code\
    \ here\n        return Integer.toBinaryString(N);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprv5o79fo.java:24)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        int binaryNumber = 0;\n        for (int i = 0; i < 100; i++) {\n\
    \            int n = N;\n            n = n >> i;\n            binaryNumber +=\
    \ (n & 1) * Math.pow(10, i);\n        }\n        //System.out.println(binaryNumber);\n\
    \        for (int i = 0; i < binaryNumber.toString().length(); i++) {\n      \
    \      sum += binaryNumber.toString().charAt(i) - '0';\n        }\n        //System.out.println(sum);\n\
    \        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz9dvfg5z.java:28: error: int cannot be dereferenced\n        for\
    \ (int i = 0; i < binaryNumber.toString().length(); i++) {\n                 \
    \                       ^\n/tmp/tmpz9dvfg5z.java:29: error: int cannot be dereferenced\n\
    \            sum += binaryNumber.toString().charAt(i) - '0';\n               \
    \                ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code here...\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8rdch88s.java:24)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code here\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfl9g3j6_.java:24)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        System.out.println(binary);\n        int\
    \ sum = binary.chars().sum() - 48 * binary.length();\n        return Integer.toString(sum);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphf0xi0nt.java:26)\n"
  stdout: '1111101000

    '
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        // convert string to list\n        List<String>\
    \ list = new ArrayList<String>(Arrays.asList(binary.split(\"\")));\n        //\
    \ convert list to stream and sum\n        String sumOfDigits = list.stream().mapToInt(Integer::parseInt).sum()\
    \ + \"\";\n        return sumOfDigits;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9evd1acs.java:28)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        do {\n            sb.append(N % 2);\n   \
    \         N /= 2;\n        } while (N > 0);\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeme8sift.java:28)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).sum()\
    \ + \"\";\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf66dmf_t.java:23)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(x\
    \ -> x-'0').sum()+\"\";\n}\n    public static void main(String[] args) {\n   \
    \ assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"110\"\
    )));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzggoeqfb.java:23)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String bin\
    \ = Integer.toBinaryString(N);\n        StringBuilder bin2 = new StringBuilder();\n\
    \        int l = bin.length();\n        for (int i = 0; i < l; i++) {\n      \
    \      if (bin.charAt(i) == '1')\n                bin2.append(1);\n        }\n\
    \        return Integer.toString(bin2.length());\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_krixj4i.java:30)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code here\n        // Hint: To convert to a binary number, use Integer.toBinaryString(int).\n\
    \        return \"\";\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9r75mxhc.java:25)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        String number = Integer.toBinaryString(N);\n        for (int i =\
    \ 0; i < number.length(); i++) {\n            sum += Integer.parseInt(number.substring(i,\
    \ i + 1));\n        }\n        return String.valueOf(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy3lnnbcn.java:28)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ result = new StringBuilder();\n        while (N > 0) {\n            result.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return result.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdk75bxxz.java:28)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmm3pi8xp.java:23)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return \"\
    \";\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1vg7g3lm.java:23)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        String result = \"\";\n        int total\
    \ = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            char\
    \ currentDigit = binary.charAt(i);\n            int digit = Character.getNumericValue(currentDigit);\n\
    \            total += digit;\n        }\n        result = Integer.toString(total);\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"110\"\
    )));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxpt114hc.java:32)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String result\
    \ = \"\";\n        while (N > 0) {\n            result = N % 2 + result;\n   \
    \         N /= 2;\n        }\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppvet2iij.java:28)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code here\n        int count = 0;\n        String binaryRep = \"\";\n \
    \       String ret = \"\";\n        int temp = N;\n        if (N == 0) {\n   \
    \         return \"0\";\n        }\n        while (temp > 0) {\n            binaryRep\
    \ += temp % 2;\n            temp /= 2;\n        }\n        for (int i = binaryRep.length()\
    \ - 1; i >= 0; i--) {\n            ret += binaryRep.charAt(i);\n        }\n  \
    \      return ret;\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpji68wer1.java:38)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // create\
    \ string of binary number\n        // create the string of binary number\n   \
    \     String binary_number = Integer.toBinaryString(N);\n        // create new\
    \ array of characters to store the binary number\n        char[] binary_chars\
    \ = binary_number.toCharArray();\n        // create a new array of integers to\
    \ store the binary numbers\n        int[] binary_int = new int[binary_chars.length];\n\
    \        // store integers of binary number in an array\n        for (int i =\
    \ 0; i < binary_chars.length; i++) {\n            binary_int[i] = Integer.parseInt(String.valueOf(binary_chars[i]));\n\
    \        }\n        // create sum of binary numbers\n        int sum = 0;\n  \
    \      for (int i = 0; i < binary_int.length; i++) {\n            sum += binary_int[i];\n\
    \        }\n        // return sum of binary numbers\n        return Integer.toString(sum);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp78dlk6a4.java:40)\n"
  stdout: ''
  timestamp: 1660011829
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String res\
    \ = \"\";\n        while (N > 0) {\n            res = (N % 2) + res;\n       \
    \     N /= 2;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6zctvojq.java:28)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Solve\
    \ the problem\n        String sum = \"\";\n        int temp = N;\n        while\
    \ (temp > 0) {\n            int rem = temp % 2;\n            sum = rem + sum;\n\
    \            temp = temp / 2;\n        }\n        return sum;\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphixqwm8_.java:31)\n"
  stdout: ''
  timestamp: 1660011829
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code here, try to do it without arithmetic operators.\n        // This\
    \ program converts a positive integer N to its binary representation.\n      \
    \  // It then sums up the values of each binary digit.\n        // Since, for\
    \ positive integers, the highest digit can't be zero, the size of the\n      \
    \  // array is equal to the number of digits in N's binary representation.\n \
    \       String binary = \"\";\n        int exponent = 0;\n        int pow = 1;\n\
    \        int sum = 0;\n        int length = (int) Math.ceil(Math.log(N) / Math.log(2));\n\
    \n        for (int i = 0; i < length; i++) {\n            if (N >= pow) {\n  \
    \              binary += \"1\";\n                N -= pow;\n            } else\
    \ {\n                binary += \"0\";\n            }\n            pow *= 2;\n\
    \        }\n\n        // System.out.println(binary);\n\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n\n        return Integer.toString(sum);\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxw8z5xti.java:50)\n"
  stdout: ''
  timestamp: 1660011829
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // return\
    \ decimalToBinary(N);\n        return decimalToBinaryBitShift(N);\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfpnx9olm.java:21: error: cannot find symbol\n        return decimalToBinaryBitShift(N);\n\
    \               ^\n  symbol:   method decimalToBinaryBitShift(int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int result\
    \ = 0;\n        // loop though number\n        for (int i = 0; i < N; i++) {\n\
    \            // get the binary representation and split into an array of chars\n\
    \            String binary = Integer.toBinaryString(i);\n            char[] binaryCharArray\
    \ = binary.toCharArray();\n            // loop through the array of binary chars\n\
    \            for (int j = 0; j < binaryCharArray.length; j++) {\n            \
    \    // add up the values of each digit in the binary string\n               \
    \ result += Integer.parseInt(Character.toString(binaryCharArray[j]));\n      \
    \      }\n        }\n        return Integer.toString(result);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprvp6yv1f.java:35)\n"
  stdout: ''
  timestamp: 1660011829
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code here.\n        return toBinary(N);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd04zx8vi.java:21: error: cannot find symbol\n        return toBinary(N);\n\
    \               ^\n  symbol:   method toBinary(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011829
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String s\
    \ = Integer.toBinaryString(N);\n        int result = 0;\n        for (int i =\
    \ 0; i < s.length(); i++) {\n            result += Character.getNumericValue(s.charAt(i));\n\
    \        }\n        return Integer.toString(result);\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx8ar7bx2.java:28)\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(x\
    \ -> x - '0').sum() + \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb809i6r.java:23)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // This is\
    \ the main code\n        String result = \"\";\n        while (N != 0) {\n   \
    \         int remainder = N % 2;\n            result = remainder + result;\n \
    \           N = N / 2;\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy78swrxy.java:30)\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // \u7B49\
    \u4E8E0\u7684\u60C5\u51B5\n        if (N == 0) {\n            return \"0\";\n\
    \        }\n        // \u904D\u5386\u8F93\u51FA\n        StringBuilder result\
    \ = new StringBuilder();\n        while (N != 0) {\n            result.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return result.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsb5_hag9.java:33)\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int totalSum\
    \ = 0;\n        String result = \"\";\n        while (N > 0) {\n            int\
    \ digit = N % 2;\n            result = digit + result;\n            totalSum +=\
    \ digit;\n            N /= 2;\n        }\n        return String.valueOf(totalSum);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5m4yh8oj.java:31)\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code here\n        // Hint: This is the first question,\n        // you\
    \ can try to solve this question with the language you like.\n        // In this\
    \ case, you can use Java, C++ or C#.\n        // For example, you can use C++\
    \ as follows:\n        int count = 0;\n        int temp = N;\n        // Calculate\
    \ the number of digits\n        while (temp != 0) {\n            temp /= 2;\n\
    \            count++;\n        }\n        // Fill the array by dividing\n    \
    \    int[] binary = new int[count];\n        for (int i = 0; i < count; i++) {\n\
    \            binary[i] = N % 2;\n            N /= 2;\n        }\n        // Reverse\
    \ the array\n        for (int i = 0; i < count / 2; i++) {\n            int temp2\
    \ = binary[i];\n            binary[i] = binary[count - i - 1];\n            binary[count\
    \ - i - 1] = temp2;\n        }\n        // Make string\n        String result\
    \ = \"\";\n        for (int i = 0; i < count; i++) {\n            result += Integer.toString(binary[i]);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5drdk6p8.java:52)\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // @b The\
    \ string of binary number\n        String b = \"\";\n        // @r The remainder\
    \ of N and 2\n        int r = 0;\n        // @q The quotient of N and 2\n    \
    \    int q = 0;\n        // Iterate until N == 0\n        while (N != 0) {\n \
    \           // q = N / 2\n            q = N / 2;\n            // r = N % 2\n \
    \           r = N % 2;\n            // b = string of r + b\n            b = String.valueOf(r)\
    \ + b;\n            // N = q\n            N = q;\n        }\n        // Return\
    \ b\n        return b;\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu4vtuxw7.java:41)\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N ==\
    \ 0) return \"0\";\n        StringBuilder result = new StringBuilder();\n    \
    \    while (N > 0) {\n            result.append(N % 2);\n            N = N / 2;\n\
    \        }\n        return result.reverse().toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgplo4z2r.java:29)\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // write\
    \ your code here...\n        String[] binary = Integer.toBinaryString(N).split(\"\
    \");\n        int sum = 0;\n        for (String s : binary) {\n            sum\
    \ += Integer.parseInt(s);\n        }\n        return String.valueOf(sum);\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp__0tznpg.java:29)\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String s\
    \ = new String();\n        s = Integer.toBinaryString(N);\n        String[] sa\
    \ = s.split(\"\");\n        int n = sa.length;\n        int S = 0;\n        for\
    \ (int i = 0; i < n; i++) {\n            S += Integer.parseInt(sa[i]);\n     \
    \   }\n        s = Integer.toString(S);\n        return s;\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5zkj7dl_.java:32)\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int totalSum\
    \ = 0;\n        String binaryString = Integer.toBinaryString(N);\n        char[]\
    \ arrayOfBinary = binaryString.toCharArray();\n        for (char binaryDigit :\
    \ arrayOfBinary) {\n            int number = Character.getNumericValue(binaryDigit);\n\
    \            totalSum += number;\n        }\n        String totalSumString = Integer.toString(totalSum);\n\
    \        return totalSumString;\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_5qxtzgf.java:31)\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().reduce(0,\
    \ (a, b) -> a + b - '0');\n}\n    public static void main(String[] args) {\n \
    \   assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwatym2u.java:20: error: incompatible types: int cannot be converted\
    \ to String\n        return Integer.toBinaryString(N).chars().reduce(0, (a, b)\
    \ -> a + b - '0');\n                                                       ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // This function\n\
    \        // Converts the input N to a binary string\n        // then calculates\
    \ the sum of the digits\n        // by using an accumulator.\n        // The value\
    \ is returned\n        // as a string.\n        return Arrays.stream(\n      \
    \      Integer.toBinaryString(N).split(\"\")\n        ).mapToInt(Integer::parseInt).sum()\
    \ + \"\";\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6qsmtln7.java:31)\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmm3pi8xp.java:23)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String answer\
    \ = \"\";\n        while (N > 0) {\n            answer = Integer.toString(N %\
    \ 2) + answer;\n            N /= 2;\n        }\n        int sum = 0;\n       \
    \ for (int i = 0; i < answer.length(); i++) {\n            sum += Integer.parseInt(answer.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyaqxx43k.java:32)\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code here...\n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8rdch88s.java:24)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmm3pi8xp.java:23)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ binary = new StringBuilder();\n        int temp = N;\n        int mod = 0;\n\
    \        while (temp > 0) {\n            mod = temp % 2;\n            temp = temp\
    \ / 2;\n            binary.append(mod);\n        }\n        return binary.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbx3etpif.java:31)\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmm3pi8xp.java:23)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String ans\
    \ = Integer.toBinaryString(N);\n        int total = 0;\n        for (int i = 0;\
    \ i < ans.length(); i++) {\n            if (ans.charAt(i) == '1') total++;\n \
    \       }\n        return Integer.toString(total);\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp062eh9qt.java:28)\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(x\
    \ -> x - '0').sum() + \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyb809i6r.java:23)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            char c = binary.charAt(i);\n      \
    \      sum += Character.getNumericValue(c);\n        }\n        return Integer.toString(sum);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn0ts5rhd.java:29)\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String s\
    \ = Integer.toBinaryString(N);\n        int sum = s.chars().sum();\n        return\
    \ Integer.toBinaryString(sum);\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppw1wdgay.java:25)\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ result = new StringBuilder();\n        while (N > 0) {\n            result.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return result.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdk75bxxz.java:28)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int count\
    \ = 0;\n        int temp = N;\n        while (temp >= 2) {\n            temp /=\
    \ 2;\n            count++;\n        }\n        int output = 0;\n        while\
    \ (count >= 0) {\n            int divisor = (int) Math.pow(2, count);\n      \
    \      if (N >= divisor) {\n                output = output * 10 + 1;\n      \
    \          N -= divisor;\n            } else {\n                output *= 10;\n\
    \            }\n            count--;\n        }\n        return String.valueOf(output);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaydjp8.java:40)\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binaryString\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binaryString.length(); i++) {\n            char digit = binaryString.charAt(i);\n\
    \            sum += Character.getNumericValue(digit);\n        }\n        return\
    \ String.valueOf(sum);\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4g8ld4ti.java:29)\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        // First we'll find the greatest base-2 power\
    \ N can be.\n        for (int i = 0; i < 10000; i++) {\n            if (Math.pow(2,\
    \ i) > N) {\n                sb.append(1);\n                N -= Math.pow(2, i\
    \ - 1);\n                break;\n            }\n        }\n        // Next, we'll\
    \ figure out the rest of the binary digits.\n        for (int i = 0; i < 4; i++)\
    \ {\n            if (Math.pow(2, i) > N) {\n                sb.append(0);\n  \
    \          } else {\n                sb.append(1);\n                N -= Math.pow(2,\
    \ i);\n            }\n        }\n        return sb.toString();\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd_f9lcnz.java:41)\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Stream.of(Integer.toBinaryString(N).split(\"\
    \"))\n            .mapToInt(Integer::parseInt)\n            .sum() + \"\";\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp6k3skco.java:25)\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Solution:\n\
    \        // Main:\n        // Convert integer to a string,\n        // Split the\
    \ string,\n        // Multiply each digit by its multiplier,\n        // Add up\
    \ the results,\n        // Convert the result to binary.\n        // Variables:\n\
    \        // @N integer\n        // @result string\n        // @sum integer\n \
    \       // @i integer\n        // @j integer\n        // @multiplier integer\n\
    \        // @nth integer\n        // @digit integer\n        // @power integer\n\
    \        // @digit_in_binary integer\n        // @length integer\n        // @length_of_binary\
    \ integer\n        // @array integer array\n        // Solution:\n        // Main:\n\
    \        // Convert integer to a string,\n        // Split the string,\n     \
    \   // Multiply each digit by its multiplier,\n        // Add up the results,\n\
    \        // Convert the result to binary.\n        // Convert integer to a string:\n\
    \        String result = Integer.toString(N);\n        // Split the string:\n\
    \        String[] array = result.split(\"\");\n        // Multiply each digit\
    \ by its multiplier:\n        // Initialize:\n        int sum = 0;\n        int\
    \ i = 0;\n        int multiplier = 1;\n        int length = array.length;\n  \
    \      while (i < length) {\n            // Initialize:\n            int digit\
    \ = Integer.parseInt(array[i]);\n            int j = i + 1;\n            // Multiply\
    \ each digit by its multiplier:\n            while (j < length) {\n          \
    \      multiplier *= 10;\n                j++;\n            }\n            //\
    \ Convert string to int,\n            // Multiply by its multiplier,\n       \
    \     // Add up the results:\n            sum += digit * multiplier;\n       \
    \     // Initialize:\n            multiplier = 1;\n            i++;\n        }\n\
    \        // Convert the result to binary:\n        // Initialize:\n        int\
    \ nth = sum;\n        String power = \"\";\n        String digit_in_binary = \"\
    \";\n        String length_of_binary = \"\";\n        String sum_in_binary = \"\
    \";\n        // Convert the result to binary:\n        while (nth > 0) {\n   \
    \         // Initialize:\n            int remainder = n\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp06z5rtes.java:85: error: ';' expected\n            int remainder\
    \ = n\n                             ^\n/tmp/tmp06z5rtes.java:87: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n2\
    \ errors\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String bin\
    \ = Integer.toBinaryString(N);\n        int result = bin.chars().map(Character::getNumericValue).sum();\n\
    \        return String.valueOf(result);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3ebv48s0.java:25)\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmm3pi8xp.java:23)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmm3pi8xp.java:23)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code here.\n        int number = N;\n        int binaryNumber = 0;\n  \
    \      int i = 1;\n        while (number > 0) {\n            int rem = number\
    \ % 2;\n            number = number / 2;\n            binaryNumber = binaryNumber\
    \ + rem * i;\n            i = i * 10;\n        }\n        return String.valueOf(binaryNumber);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1wymwwyj.java:33)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).sum()\
    \ + \"\";\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf66dmf_t.java:23)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String s\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeipy8zw2.java:28)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // For N\
    \ = 1000, the sum of digits will be 1 the output should be \"1\".\n        //\n\
    \        // For N = 150, the sum of digits will be 6 the output should be \"110\"\
    .\n        //\n        // For N = 147, the sum of digits will be 12 the output\
    \ should be \"1100\".\n        //\n        // Variables:\n        // @N integer\n\
    \        // Constraints: 0 \u2264 N \u2264 10000.\n        // Output:\n      \
    \  // a string of binary number\n        //\n        // 1. Given a positive integer\
    \ N, return the total sum of its digits in binary.\n        //\n        // String\
    \ str = Integer.toBinaryString(n);\n        // String str = Integer.toBinaryString(n);\n\
    \        // String str = Integer.toBinaryString(n);\n        // String str = Integer.toBinaryString(n);\n\
    \        // String str = Integer.toBinaryString(n);\n        // String str = Integer.toBinaryString(n);\n\
    \        // String str = Integer.toBinaryString(n);\n        // String str = Integer.toBinaryString(n);\n\
    \        // String str = Integer.toBinaryString(n);\n        // String str = Integer.toBinaryString(n);\n\
    \        // String str = Integer.toBinaryString(n);\n        // String str = Integer.toBinaryString(n);\n\
    \        // String str = Integer.toBinaryString(n);\n        // String str = Integer.toBinaryString(n);\n\
    \        // String str = Integer.toBinaryString(n);\n        // String str = Integer.toBinaryString(n);\n\
    \        // String str = Integer.toBinaryString(n);\n        // String str = Integer.toBinaryString(n);\n\
    \        // String str = Integer.toBinaryString(n);\n        // String str = Integer.toBinaryString(n);\n\
    \        // String str = Integer.toBinaryString(n);\n        // String str = Integer.toBinaryString(n);\n\
    \        // String str = Integer.toBinaryString(n);\n        // String str = Integer.toBinaryString(n);\n\
    \        // String str = Integer.toBinaryString\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpr3vv4qi2.java:59: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int factor\
    \ = 1;\n        //sum of digits in the binary representation of n.\n        int\
    \ decimalResult = 0;\n        //step 1: get the binary representation of N\n \
    \       String binaryNumber = Integer.toBinaryString(N);\n        //step 2: compute\
    \ the sum of digits\n        for (int i = 0; i < binaryNumber.length(); i++) {\n\
    \            if (binaryNumber.charAt(i) == '1') {\n                decimalResult\
    \ += factor;\n            }\n            factor *= 2;\n        }\n        //step\
    \ 3: return the result\n        return \"\" + decimalResult;\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplqkfh7p6.java:36)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String bin\
    \ = Integer.toBinaryString(N);\n        String[] arr = bin.split(\"\");\n    \
    \    int sum = 0;\n        for (String num : arr) {\n            sum += Integer.parseInt(num);\n\
    \        }\n        return sum + \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl6p4iv9x.java:29)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return \"\
    \";\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1vg7g3lm.java:23)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return toBinaryString(N).chars().map(Character::getNumericValue).sum()\
    \ + \"\";\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc9bjhj4h.java:20: error: cannot find symbol\n        return toBinaryString(N).chars().map(Character::getNumericValue).sum()\
    \ + \"\";\n               ^\n  symbol:   method toBinaryString(int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnfipycux.java:28)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ binary = new StringBuilder();\n        int rem = 0;\n        int quo = N;\n\
    \        while (quo != 0) {\n            rem = quo % 2;\n            quo = quo\
    \ / 2;\n            binary.append(rem);\n        }\n        binary.reverse();\n\
    \        return binary.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppcdrio2j.java:32)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int result\
    \ = 0;\n        while (N > 0) {\n            result += N % 2;\n            N /=\
    \ 2;\n        }\n        return Integer.toString(result);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpexigwsq9.java:28)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = binary.chars().map(Character::getNumericValue).sum();\n\
    \        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzlo_pmbf.java:25)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Solution\
    \ here\n        return \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsepv4jwe.java:24)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Convert\
    \ to binary\n        String bin = Integer.toBinaryString(N);\n        // Initialize\
    \ sum of digits\n        int sum = 0;\n        // Iterate through each digit of\
    \ binary number\n        for (int i = 0; i < bin.length(); i++) {\n          \
    \  // add to sum\n            sum += Integer.parseInt(String.valueOf(bin.charAt(i)));\n\
    \        }\n        // return sum\n        return String.valueOf(sum);\n}\n  \
    \  public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqglsecf6.java:33)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // let n\
    \ = 1000\n        // n >>= 1\n        // 500 >>= 1\n        // 250 >>= 1\n   \
    \     // 125 >>= 1\n        // 62 >>= 1\n        // 31 >>= 1\n        // 15 >>=\
    \ 1\n        // 7 >>= 1\n        // 3 >>= 1\n        // 1 >>= 1\n        // 0\
    \ >>= 1\n        // int n = N;\n        // StringBuilder sb = new StringBuilder();\n\
    \        // while (n > 0) {\n        //     if (n % 2 == 0) {\n        //    \
    \     sb.append('0');\n        //     } else {\n        //         sb.append('1');\n\
    \        //     }\n        //     n >>= 1;\n        // }\n        // return sb.reverse().toString();\n\
    \        // Because n is positive, we can use this simple for loop\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < 16; i++) {\n        \
    \    if ((N & 1) == 1) {\n                sb.append('1');\n            } else\
    \ {\n                sb.append('0');\n            }\n            N >>= 1;\n  \
    \      }\n        return sb.reverse().toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpar8btl7j.java:56)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String result\
    \ = \"\";\n        while (N > 0) {\n            result = (N % 2) + result;\n \
    \           N /= 2;\n        }\n        // for (int i = N; i > 0; i /= 2) {\n\
    \        //     result = (i % 2) + result;\n        // }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpatfnq1id.java:31)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += binary.charAt(i) - '0';\n  \
    \      }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc6h6e6fj.java:28)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String res\
    \ = \"\";\n        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = 0; i < N; i++) {\n            sb.append(\"0\");\n        }\n        sb.append(\"\
    1\");\n        res = sb.toString();\n        return res;\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoa0wh6ay.java:30)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // If N is\
    \ zero\n        if (N == 0) return \"0\";\n        // Store the binary digits\
    \ into a list\n        List<Integer> digits = new ArrayList<>();\n        // Iterate\
    \ N until it is zero\n        while (N > 0) {\n            // Get the remainder\
    \ of N when divided by 2 and add it to the list\n            digits.add(N % 2);\n\
    \            // Divide N by 2 (integer division, rounds down)\n            N /=\
    \ 2;\n        }\n        // Convert the list of digits into a string and return\
    \ it\n        return digits.stream().map(String::valueOf).collect(Collectors.joining());\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc61puqu5.java:35)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int base\
    \ = 2;\n        char[] binaryDigits = {'0', '1'};\n        return Integer.toString(N,\
    \ base);\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplhb9qomt.java:25)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String result\
    \ = \"\";\n        while (N > 0) {\n            int digit = N % 2;\n         \
    \   result = Integer.toString(digit) + result;\n            N = N / 2;\n     \
    \   }\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyvx2py4e.java:29)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // #1 convert\
    \ N to binary\n        // #2 split binary string into a char array\n        //\
    \ #3 convert char array into a int array\n        // #4 return the array sum\n\
    \        // O(1)\n        return Arrays.stream(Integer.toBinaryString(N).split(\"\
    \")).mapToInt(Integer::parseInt).sum() + \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_1f1thp8.java:28)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // write\
    \ your code in Java SE 8\n        String binary = Integer.toBinaryString(N);\n\
    \        int count = 0;\n        for (int i = 0; i < binary.length(); i++) {\n\
    \            if (binary.charAt(i) == '1') {\n                count++;\n      \
    \      }\n        }\n        return Integer.toString(count);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpttwdgzqb.java:31)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N ==\
    \ 0) return \"0\";\n        StringBuilder sb = new StringBuilder();\n        while\
    \ (N > 0) {\n            sb.append(N % 2);\n            N /= 2;\n        }\n \
    \       return sb.reverse().toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0togf121.java:29)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String ret\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < ret.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(ret.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5n9hcmbi.java:28)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).sum()\
    \ + \"\";\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf66dmf_t.java:23)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binaryNum\
    \ = Integer.toBinaryString(N);\n        int sum = Arrays.stream(binaryNum.split(\"\
    \"))\n                .mapToInt(Integer::parseInt)\n                .sum();\n\
    \        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd1pp203s.java:27)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmm3pi8xp.java:23)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmm3pi8xp.java:23)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return \"\
    \";\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1vg7g3lm.java:23)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binaryString\
    \ = Integer.toBinaryString(N);\n        return binaryString;\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphd9hy5uj.java:24)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj03sroa9.java:28)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Take the\
    \ integer N, convert it to binary, and then add each digit together, 1+1+0+0\n\
    \        // return the string of digits that make up the sum\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).sum()\
    \ + \"\";\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjokgod5c.java:25)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnfipycux.java:28)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ result = new StringBuilder();\n        String b = Integer.toBinaryString(N);\n\
    \        for (int i = 0; i < b.length(); i++) {\n            result.append(b.charAt(i));\n\
    \        }\n        return result.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0mw6iuar.java:28)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String bin\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < bin.length(); i++) {\n            sum += Character.getNumericValue(bin.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsmdd1mbn.java:28)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Solution\
    \ 1:\n        // Convert from decimal to binary\n        // Using custom methods:\n\
    \        // Integer.toBinaryString(N);\n        // Solve for the problem\n   \
    \     // Simple solution:\n        // String binaryString = Integer.toBinaryString(N);\n\
    \        // return String.valueOf(Arrays.stream(binaryString.split(\"\")).mapToInt(Integer::parseInt).sum());\n\
    \        // Best Solution:\n        // String binaryString = Integer.toBinaryString(N);\n\
    \        // int sumOfBinary = 0;\n        // for (int i = 0; i < binaryString.length();\
    \ i++) {\n        //     sumOfBinary += Integer.parseInt(binaryString.substring(i,\
    \ i + 1));\n        // }\n        // return String.valueOf(sumOfBinary);\n   \
    \     // Solution 2:\n        // Using bitwise operations:\n        // int sumOfBinary\
    \ = 0;\n        // while (N > 0) {\n        //     sumOfBinary += N & 1;\n   \
    \     //     N >>= 1;\n        // }\n        // return String.valueOf(sumOfBinary);\n\
    \        // Solution 3:\n        // This solution uses a mathematical formula:\n\
    \        // int sumOfBinary = 0;\n        // while (N > 0) {\n        //     sumOfBinary\
    \ += N - (N >> 1 << 1);\n        //     N >>= 1;\n        // }\n        // return\
    \ String.valueOf(sumOfBinary);\n        // Solution 4:\n        // This solution\
    \ uses a mathematical formula:\n        // int sumOfBinary = 0;\n        // while\
    \ (N > 0) {\n        //     sumOfBinary += N & 1;\n        //     N >>= 1;\n \
    \       // }\n        // return String.valueOf(sumOfBinary);\n        // Solution\
    \ 5:\n        // This solution uses a mathematical formula:\n        // return\
    \ String.valueOf(Integer.bitCount(N));\n        // Solution 6:\n        // This\
    \ solution uses a mathematical formula:\n        return String.valueOf(N == 0\
    \ ? 0 : 1 + (N & (N - 1)) % 2);\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjaby3rld.java:68)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String str\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < str.length(); i++) {\n            sum += str.charAt(i) - '0';\n        }\n\
    \        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpglqjlc5f.java:28)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // store\
    \ the binary digits in a string builder\n        StringBuilder binaryDigits =\
    \ new StringBuilder();\n        // while the number is greater than 0\n      \
    \  while (N > 0) {\n            // get the remainder of the number modulo 2\n\
    \            // and append it to the string\n            binaryDigits.append(N\
    \ % 2);\n            // divide the number by 2\n            N /= 2;\n        }\n\
    \        // return the reversed binary digits\n        return binaryDigits.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9le_967w.java:34)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code here\n        // Hint: you can use the DecimalToBinary.decimalToBinary\
    \ method\n        // to convert the number N to binary.\n        return \"\";\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphlagfve3.java:26)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Convert\
    \ N to binary and then sum all digits\n        String result = \"\";\n       \
    \ int sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n         \
    \   N /= 2;\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphiulci73.java:30)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        do {\n            sb.append(N % 2);\n   \
    \         N /= 2;\n        } while (N > 0);\n        String str = sb.reverse().toString();\n\
    \        int sum = 0;\n        for (int i = 0; i < str.length(); i++) {\n    \
    \        sum += Character.getNumericValue(str.charAt(i));\n        }\n       \
    \ return Integer.toString(sum);\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuf2sm9od.java:33)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // 1. Convert\
    \ int N to binary\n        String binary = Integer.toBinaryString(N);\n      \
    \  // 2. Convert binary to list of char\n        char[] arr = binary.toCharArray();\n\
    \        // 3. Sum up the digits in the binary number\n        int sum = 0;\n\
    \        for (char c : arr) {\n            sum += Integer.parseInt(String.valueOf(c));\n\
    \        }\n        // 4. Return the binary of the sum\n        return Integer.toBinaryString(sum);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_7jfy3b6.java:33)\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N%2);\n\
    \            N /= 2;\n        }\n        int sum = 0;\n        for (int i = 0;\
    \ i < sb.length(); i++) {\n            sum += Character.getNumericValue(sb.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmvhsd4ic.java:32)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return solve(N,\
    \ \"\");\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzpzkg483.java:20: error: method solve in class Problem cannot be\
    \ applied to given types;\n        return solve(N, \"\");\n               ^\n\
    \  required: int\n  found:    int,String\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            char curr = binary.charAt(i);\n   \
    \         sum += Integer.parseInt(Character.toString(curr));\n        }\n    \
    \    return Integer.toString(sum);\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp147vfzic.java:29)\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binaryString\
    \ = \"\";\n        do {\n            // binaryString.concat(Integer.toString(N\
    \ % 2));\n            binaryString = Integer.toString(N % 2) + binaryString;\n\
    \            N = N / 2;\n        } while (N > 0);\n        return binaryString;\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp385hwjbb.java:29)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binaryString\
    \ = Integer.toBinaryString(N);\n        int result = Arrays.stream(binaryString.split(\"\
    \")).mapToInt(Integer::parseInt).sum();\n        return String.valueOf(result);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm4ntz6ri.java:25)\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N ==\
    \ 0) {\n            return \"0\";\n        }\n        String s = \"\";\n     \
    \   int n = N;\n        int rem = 0;\n        while (n != 0) {\n            rem\
    \ = n % 2;\n            n = n / 2;\n            s = rem + s;\n        }\n    \
    \    return s;\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptzvibopa.java:34)\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String result\
    \ = Integer.toBinaryString(N);\n        String s = result.replaceAll(\"0\", \"\
    \");\n        return s;\n}\n    public static void main(String[] args) {\n   \
    \ assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"110\"\
    )));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3n_n_yyj.java:25)\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        List<Integer>\
    \ digits = new ArrayList<>();\n        while (N > 0) {\n            digits.add(N\
    \ % 2);\n            N /= 2;\n        }\n        Collections.reverse(digits);\n\
    \        return digits.stream().map(Object::toString).collect(Collectors.joining());\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4c6nbskt.java:29)\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String s\
    \ = Integer.toBinaryString(N);\n        System.out.println(s);\n        int total\
    \ = 0;\n        for (int i = 0; i < s.length(); i++) {\n            total += Integer.parseInt(String.valueOf(s.charAt(i)));\n\
    \        }\n        return String.valueOf(total);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsb4znl6t.java:29)\n"
  stdout: '1111101000

    '
  timestamp: 1660011833
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmm3pi8xp.java:23)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Initialize\
    \ a sum variable\n        int sum = 0;\n        // Set a string variable to hold\
    \ binary digits\n        String binary = \"\";\n        // Convert to binary\n\
    \        while (N > 0) {\n            binary = N % 2 + binary;\n            N\
    \ = N / 2;\n        }\n        // Loop through the digits and add them to sum\
    \ variable\n        for (int i = 0; i < binary.length(); i++) {\n            sum\
    \ += Integer.parseInt(binary.substring(i, i + 1));\n        }\n        // Return\
    \ the sum of the binary digits as a string\n        return Integer.toString(sum);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx7vwg1ko.java:37)\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // N = 8\n\
    \        // 1000\n        // 3\n        // 10\n        // 1\n        // // 1000\n\
    \        // // 101\n        // // 010\n        // // 001\n        // sum = 1 +\
    \ 0 + 0 + 0 = 1\n        // return sum;\n        // TODO: Implement your solution\
    \ here\n        int sum = 0;\n        int x = N;\n        int temp = 0;\n    \
    \    while (x != 0) {\n            int y = x;\n            x = x / 2;\n      \
    \      temp = y % 2;\n            sum += temp;\n        }\n        return Integer.toString(sum);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp2u2uq2n.java:44)\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnfipycux.java:28)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(c\
    \ -> c - '0').sum() + \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0irima47.java:23)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // TODO:\
    \ Implement the solution\n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.solve(int)\"\
    \ is null\n\tat Problem.main(tmpyia1xpoq.java:24)\n"
  stdout: ''
  timestamp: 1660011834
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String result\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < result.length(); i++) {\n            sum += Integer.parseInt(result.substring(i,\
    \ i + 1));\n        }\n        return String.valueOf(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprl5tpaep.java:28)\n"
  stdout: ''
  timestamp: 1660011834
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += binary.charAt(i) - '0';\n  \
    \      }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc6h6e6fj.java:28)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Your code\
    \ here\n        String s = Integer.toBinaryString(N);\n        int sum = 0;\n\
    \        for (int i = 0; i < s.length(); i++) {\n            sum += Integer.parseInt(s.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp1zvirat.java:29)\n"
  stdout: ''
  timestamp: 1660011834
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(c\
    \ -> c - '0').sum() + \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0irima47.java:23)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String result\
    \ = new String();\n        result = Integer.toBinaryString(N);\n        int sum\
    \ = 0;\n        for (int i = 0; i < result.length(); i++) {\n            sum +=\
    \ Integer.parseInt(result.substring(i, i + 1));\n        }\n        return Integer.toString(sum);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4t0079ir.java:29)\n"
  stdout: ''
  timestamp: 1660011834
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int[] a =\
    \ new int[(int) (Math.log(N) / Math.log(2)) + 1];\n        int j = 0;\n      \
    \  while (N > 0) {\n            a[j++] = N % 2;\n            N /= 2;\n       \
    \ }\n        StringBuilder sb = new StringBuilder();\n        for (int i = j -\
    \ 1; i >= 0; i--)\n            sb.append(a[i]);\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn4ee_qck.java:32)\n"
  stdout: ''
  timestamp: 1660011834
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String s=\"\
    \";\n        int sum=0;\n        while(N>0){\n            s=N%2+s;\n         \
    \   sum+=N%2;\n            N/=2;\n        }\n        System.out.println(s);\n\
    \        System.out.println(sum);\n        return s;\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzu7wsqy0.java:32)\n"
  stdout: '1111101000

    6

    '
  timestamp: 1660011834
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        //Step 1\
    \ - Split the number into two individual numbers.\n        Integer[] nums = N.toString().chars().map(c\
    \ -> c-'0').toArray(Integer[]::new);\n        Integer[] nums_bin = new Integer[nums.length];\n\
    \        int counter = 0;\n        //Step 2 - Convert each individual number into\
    \ a binary number.\n        for (int num : nums) {\n            nums_bin[counter]\
    \ = Integer.parseInt(Integer.toBinaryString(num));\n            counter++;\n \
    \       }\n        //Step 3 - Add all the binary numbers together.\n        int\
    \ sum = 0;\n        for (int num : nums_bin) {\n            sum += num;\n    \
    \    }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmefnat6a.java:21: error: int cannot be dereferenced\n        Integer[]\
    \ nums = N.toString().chars().map(c -> c-'0').toArray(Integer[]::new);\n     \
    \                     ^\n1 error\n"
  stdout: ''
  timestamp: 1660011834
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String bin\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < bin.length(); i++) {\n            sum += Character.getNumericValue(bin.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsmdd1mbn.java:28)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).sum()\
    \ + \"\";\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf66dmf_t.java:23)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(c\
    \ -> c - '0').sum() + \"\";\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0irima47.java:23)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Convert\
    \ the integer to binary\n        String binary = Integer.toBinaryString(N);\n\
    \        int sum = 0;\n        // Then sum the binary digits\n        for (int\
    \ i = 0; i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmmr8ik_i.java:30)\n"
  stdout: ''
  timestamp: 1660011834
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().reduce(0,\
    \ (x, y) -> x + (y - '0'));\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4iqc6r3s.java:20: error: incompatible types: int cannot be converted\
    \ to String\n        return Integer.toBinaryString(N).chars().reduce(0, (x, y)\
    \ -> x + (y - '0'));\n                                                       ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011834
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).sum()\
    \ + \"\";\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf66dmf_t.java:23)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N ==\
    \ 0) return \"0\";\n        String binary = \"\";\n        while (N > 0) {\n \
    \           int rem = N % 2;\n            binary = rem + binary;\n           \
    \ N = N / 2;\n        }\n        return binary;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7pexw798.java:30)\n"
  stdout: ''
  timestamp: 1660011834
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        if (N ==\
    \ 0) return \"0\";\n        StringBuilder sb = new StringBuilder();\n        while\
    \ (N > 0) {\n            sb.append(N % 2);\n            N /= 2;\n        }\n \
    \       return sb.reverse().toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0togf121.java:29)\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String res\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < res.length(); i++) {\n            sum += Character.getNumericValue(res.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqbt8akzx.java:28)\n"
  stdout: ''
  timestamp: 1660011834
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Your code\
    \ here.\n        String res = Integer.toBinaryString(N);\n        int sum = res.chars().map(Character::getNumericValue).sum();\n\
    \        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9bpx3yyr.java:26)\n"
  stdout: ''
  timestamp: 1660011834
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String result\
    \ = \"\";\n        while (N > 0) {\n            result = Integer.toString(N %\
    \ 2) + result;\n            N /= 2;\n        }\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0_cakx9u.java:28)\n"
  stdout: ''
  timestamp: 1660011834
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int d = 0;\n\
    \        int n = N;\n        while (n > 0) {\n            d++;\n            n\
    \ /= 2;\n        }\n        String s = \"\";\n        for (int i = d - 1; i >=\
    \ 0; i--) {\n            s += (N >> i) & 1;\n        }\n        return s;\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpns2izv3q.java:33)\n"
  stdout: ''
  timestamp: 1660011834
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N%2);\n\
    \            N /= 2;\n        }\n        return new String(sb.reverse());\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgqwzfwo7.java:28)\n"
  stdout: ''
  timestamp: 1660011834
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // solution\
    \ 1\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).sum()\
    \ + \"\";\n        // solution 2\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).reduce(0,\
    \ (acc, cur) -> acc + cur) + \"\";\n        // solution 3\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).mapToInt(Integer::intValue).sum()\
    \ + \"\";\n        // solution 4\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).mapToInt(Integer::intValue).reduce(0,\
    \ (acc, cur) -> acc + cur) + \"\";\n        // solution 5\n        return IntStream.of(Integer.toBinaryString(N).chars().map(Character::getNumericValue).mapToInt(Integer::intValue).toArray()).sum()\
    \ + \"\";\n        // solution 6\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).reduce(0,\
    \ Integer::sum) + \"\";\n        // solution 7\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).mapToInt(Integer::intValue).sum()\
    \ + \"\";\n        // solution 8\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).reduce(0,\
    \ Integer::sum) + \"\";\n        // solution 9\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).mapToInt(Integer::intValue).sum()\
    \ + \"\";\n        // solution 10\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).reduce(0,\
    \ Integer::sum) + \"\";\n        // solution 11\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).reduce(0,\
    \ Integer::sum) + \"\";\n        // solution 12\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).red\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx33q_eis.java:43: error: ';' expected\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).red\n\
    \                                                                            \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Solution\
    \ 1:\n        // return Integer.toBinaryString(N).chars().sum() + \"\";\n    \
    \    // Solution 2:\n        StringBuilder binary = new StringBuilder();\n   \
    \     if (N == 0) {\n            return \"0\";\n        }\n        while (N >\
    \ 0) {\n            binary.append(N % 2);\n            N /= 2;\n        }\n  \
    \      return binary.reverse().toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ozx0q2b.java:34)\n"
  stdout: ''
  timestamp: 1660011834
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String result\
    \ = \"\";\n        while (N > 0) {\n            int bit = N % 2;\n           \
    \ result = Integer.toString(bit) + result;\n            N = N / 2;\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"110\"\
    )));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8lpijizg.java:29)\n"
  stdout: ''
  timestamp: 1660011834
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code here.\n        String binaryString = Integer.toBinaryString(N);\n\
    \        int sum = 0;\n        for (char c : binaryString.toCharArray()) {\n \
    \           sum += Integer.parseInt(String.valueOf(c));\n        }\n        return\
    \ Integer.toString(sum);\n}\n    public static void main(String[] args) {\n  \
    \  assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo4t7o3l_.java:29)\n"
  stdout: ''
  timestamp: 1660011834
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // return\
    \ Integer.toBinaryString(N).chars().map(Character::getNumericValue).sum();\n \
    \       String binary = Integer.toBinaryString(N);\n        Integer sum = 0;\n\
    \        for (int i = 0; i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return sum.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6nl015fx.java:29)\n"
  stdout: ''
  timestamp: 1660011834
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // int n\
    \ = N;\n        StringBuilder builder = new StringBuilder();\n        while (N\
    \ > 0) {\n            int rem = N % 2;\n            builder.append(rem);\n   \
    \         N = N / 2;\n        }\n        String s = builder.reverse().toString();\n\
    \        // return s;\n        return s.chars().map(Character::getNumericValue).sum()\
    \ + \"\";\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr__lzep_.java:32)\n"
  stdout: ''
  timestamp: 1660011834
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int sum =\
    \ 0;\n        String res = \"\";\n        while (N > 0) {\n            int digit\
    \ = N % 2;\n            N /= 2;\n            sum += digit;\n            res =\
    \ digit + res;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3zjk0_ws.java:31)\n"
  stdout: ''
  timestamp: 1660011834
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return new\
    \ BigInteger(Integer.toString(N, 2)).toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplfe8_6fb.java:23)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int ans = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            if (binary.charAt(i) == '1') {\n  \
    \              ans++;\n            }\n        }\n        return Integer.toString(ans);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqwaowrdn.java:30)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmm3pi8xp.java:23)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmm3pi8xp.java:23)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n\
    \        }\n        return String.valueOf(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpich5vvb3.java:28)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Your code\
    \ here\n        if (N == 0) {\n            return \"0\";\n        }\n        int\
    \ maxDigits = (int) (Math.log(N) / Math.log(2));\n        StringBuilder sb = new\
    \ StringBuilder();\n        //System.out.println(maxDigits);\n        int remainder\
    \ = N;\n        for (int i = maxDigits; i >= 0; i--) {\n            int bit =\
    \ (int) Math.pow(2, i);\n            if (remainder >= bit) {\n               \
    \ remainder -= bit;\n                sb.append(\"1\");\n            } else {\n\
    \                sb.append(\"0\");\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdmdgek9s.java:40)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Solve\
    \ here\n        // convert N to binary number\n        String binary = \"\";\n\
    \        while (N > 0) {\n            int rem = N % 2;\n            binary = rem\
    \ + binary;\n            N = N / 2;\n        }\n        // convert binary to int\n\
    \        int binaryInt = Integer.parseInt(binary);\n        // sum all its digits\n\
    \        int sum = 0;\n        while (binaryInt > 0) {\n            sum += binaryInt\
    \ % 10;\n            binaryInt = binaryInt / 10;\n        }\n        return String.valueOf(sum);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp11doyb96.java:39)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String s\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(s.charAt(i)));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf4343m32.java:28)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        return String.valueOf(Arrays.stream(binary.split(\"\
    \"))\n                       .mapToInt(Integer::parseInt)\n                  \
    \     .sum());\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa3gpz360.java:26)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String res\
    \ = \"\";\n        for (int i = 0; i < 32; i++) {\n            if ((N & (1 <<\
    \ i)) != 0) {\n                res += \"1\";\n            } else {\n         \
    \       res += \"0\";\n            }\n        }\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n\
    \    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf5c21k21.java:31)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            int number = Character.getNumericValue(binary.charAt(i));\n\
    \            sum += number;\n        }\n        return Integer.toString(sum);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdxn514ac.java:29)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code here\n        // Hint: use Integer.toBinaryString(int).\n        //\
    \ This will convert a number into a binary number.\n        String binaryN = Integer.toBinaryString(N);\n\
    \        int total = 0;\n        for (int i = 0; i < binaryN.length(); i++) {\n\
    \            String digit = String.valueOf(binaryN.charAt(i));\n            total\
    \ += Integer.parseInt(digit);\n        }\n        return String.valueOf(total);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp49nlbvbn.java:32)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String n\
    \ = Integer.toBinaryString(N);\n        String[] nums = n.split(\"\");\n     \
    \   int sum = 0;\n        for (String num : nums) {\n            sum += Integer.parseInt(num);\n\
    \        }\n        return Integer.toBinaryString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj49c2t9t.java:29)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String result\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < result.length(); i++) {\n            sum += Character.getNumericValue(result.charAt(i));\n\
    \        }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiktmhk66.java:28)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String tempString\
    \ = Integer.toBinaryString(N);\n        char[] tempArray = tempString.toCharArray();\n\
    \        int sum = 0;\n        for (int i = 0; i < tempArray.length; i++) {\n\
    \            sum += Character.getNumericValue(tempArray[i]);\n        }\n    \
    \    return Integer.toString(sum);\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3d_voaxi.java:29)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return new\
    \ BigInteger(Integer.toString(N, 2)).toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplfe8_6fb.java:23)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // write\
    \ your code here\n        return Integer.toBinaryString(N).chars().map(c -> c\
    \ - '0').sum() + \"\";\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz93wq3x5.java:24)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code here:\n        int sumOfDigits = 0;\n        int digitCount = 0;\n\
    \        while (N != 0) {\n            int digit = N % 2;\n            sumOfDigits\
    \ += digit;\n            N /= 2;\n            digitCount++;\n        }\n     \
    \   StringBuilder result = new StringBuilder(digitCount);\n        for (int i\
    \ = 0; i < digitCount; i++) {\n            result.append(\"1\");\n        }\n\
    \        return result.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3yy5i624.java:36)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i,\
    \ i + 1));\n        }\n        return Integer.toString(sum);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprauo4tek.java:28)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binaryString\
    \ = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0;\
    \ i < binaryString.length(); i++) {\n            char c = binaryString.charAt(i);\n\
    \            if (c == '1') {\n                sum += 1;\n            }\n     \
    \   }\n        return Integer.toString(sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8c_jqqz5.java:31)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ binary = new StringBuilder();\n        while (N > 0) {\n            binary.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return binary.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9bj0t9ht.java:28)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().sum()\
    \ + \"\";\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw8e7mo5d.java:23)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return Integer.toBinaryString(N).chars().map(Character::getNumericValue).sum()\
    \ + \"\";\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf66dmf_t.java:23)\n"
  stdout: ''
  timestamp: 1660011827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // Write\
    \ your code here\n        String x = Integer.toBinaryString(N);\n        int ret\
    \ = 0;\n        for (int i = 0; i < x.length(); i++) {\n            ret += x.charAt(i)\
    \ - '0';\n        }\n        return Integer.toString(ret);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdyp0s2_6.java:29)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String n\
    \ = Integer.toBinaryString(N);\n        int ans = 0;\n        for (int i = 0;\
    \ i < n.length(); i++) {\n            ans += n.charAt(i) - '0';\n        }\n \
    \       return Integer.toString(ans);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptjo5byn6.java:28)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        return \"\
    \";\n}\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1vg7g3lm.java:23)\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String binary\
    \ = Integer.toBinaryString(N);\n        String[] eachDigit = binary.split(\"\"\
    );\n        int total = 0;\n        for (String each : eachDigit) {\n        \
    \    total += Integer.parseInt(each);\n        }\n        return Integer.toString(total);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppva9jy2k.java:29)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        if (N == 0) return \"0\";\n        while\
    \ (N > 0) {\n            sb.append(N % 2);\n            N /= 2;\n        }\n \
    \       return sb.reverse().toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyyk5u9q1.java:29)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String s\
    \ = Integer.toBinaryString(N);\n        int count = 0;\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            if (s.charAt(i) == '1') {\n            \
    \    count++;\n            }\n        }\n        return Integer.toString(count);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpio30yj_c.java:30)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        int b = 2;\n\
    \        if (N < 2) {\n            return String.valueOf(N);\n        }\n    \
    \    StringBuilder sb = new StringBuilder();\n        while (N >= 2) {\n     \
    \       int remainder = N % b;\n            sb.append(remainder);\n          \
    \  N = N / b;\n        }\n        sb.append(N);\n        return sb.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkfrc1ztx.java:34)\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        // For N\
    \ = 147, the sum of digits will be 12 the output should be \"1100\".\n       \
    \ // 1+0+0+0 = 1+1 = 2\n        String binaryString = Integer.toBinaryString(N);\n\
    \        int sumOfBinaryDigits = binaryString.chars().map(c -> c - '0').sum();\n\
    \        StringBuilder sb = new StringBuilder();\n        while (sumOfBinaryDigits\
    \ > 0) {\n            sb.append(sumOfBinaryDigits % 2);\n            sumOfBinaryDigits\
    \ /= 2;\n        }\n        return sb.reverse().toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n   \
    \ assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf36mfs_p.java:32)\n"
  stdout: ''
  timestamp: 1660011836
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        //I think\
    \ I have to convert the int to binary and then count the 1s\n        String s\
    \ = Integer.toBinaryString(N);\n        int count = 0;\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            if (s.charAt(i) == '1') {\n            \
    \    count++;\n            }\n        }\n        return Integer.toString(count);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((1000)).equals((\"\
    1\")));\n    assert(solve((150)).equals((\"110\")));\n    assert(solve((147)).equals((\"\
    1100\")));\n    assert(solve((333)).equals((\"1001\")));\n    assert(solve((963)).equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr0wo0hm6.java:31)\n"
  stdout: ''
  timestamp: 1660011836
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n\
    \    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string\
    \ of binary number\n    public static String solve(int N) {\n        String result\
    \ = \"\";\n        while (N > 0) {\n            result = (N % 2) + result;\n \
    \           N /= 2;\n        }\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((1000)).equals((\"1\")));\n    assert(solve((150)).equals((\"\
    110\")));\n    assert(solve((147)).equals((\"1100\")));\n    assert(solve((333)).equals((\"\
    1001\")));\n    assert(solve((963)).equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqwsghtj8.java:28)\n"
  stdout: ''
  timestamp: 1660011836
