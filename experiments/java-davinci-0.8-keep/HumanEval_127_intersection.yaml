name: HumanEval_127_intersection
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given two intervals,\n    // where each interval\
  \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
  \ The given intervals are closed which means that the interval (start, end)\n  \
  \  // includes both start and end.\n    // For each given interval, it is assumed\
  \ that its start is less or equal its end.\n    // Your task is to determine whether\
  \ the length of intersection of these two \n    // intervals is a prime number.\n\
  \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  \
  \  // which its length is 1, which not a prime number.\n    // If the length of\
  \ the intersection is a prime number, return \"YES\",\n    // otherwise, return\
  \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    // [input/output]\
  \ samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n    // intersection((-1,\
  \ 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1), (-5, 5)) ==> \"YES\"\n \
  \   public static String intersection(Pair<Integer, Integer> interval1, Pair<Integer,\
  \ Integer> interval2) {\n"
tests: "return \"\";\n    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1,\
  \ 2)), (Pair.with(2, 3))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1,\
  \ 1)), (Pair.with(0, 4))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3,\
  \ -1)), (Pair.with(-5, 5))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2,\
  \ 2)), (Pair.with(-4, 0))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11,\
  \ 2)), (Pair.with(-1, -1))).equals((\"NO\")));\n    assert(intersection((Pair.with(1,\
  \ 2)), (Pair.with(3, 5))).equals((\"NO\")));\n    assert(intersection((Pair.with(1,\
  \ 2)), (Pair.with(1, 2))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2,\
  \ -2)), (Pair.with(-3, -2))).equals((\"NO\")));\n    }\n\n}\n"
completions: []
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
