completions:
- '        return 0;'
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        if (n == 1) return 1;\n        if (n == 2) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n\
  \        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i\
  \ - 2];\n        }\n        return fib[n];"
- "        int i = 1;\n        int fib = 1;\n        int prev = 1;\n        while\
  \ (i < n) {\n            int temp = fib;\n            fib += prev;\n           \
  \ prev = temp;\n            i++;\n        }\n        return fib;"
- "        if (n == 1) return 1;\n        if (n == 2) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        // You can do it.\n        return 0;"
- '        return n <= 1 ? n : fib(n - 1) + fib(n - 2);'
- "        if (n <= 1) return n;\n        int prev = 0;\n        int curr = 1;\n \
  \       for (int i = 2; i <= n; i++) {\n            int tmp = curr;\n          \
  \  curr += prev;\n            prev = tmp;\n        }\n        return curr;"
- "        if (n <= 1) return n;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        if (n == 1) return 1;\n        else if (n == 2) return 1;\n        else\
  \ return fib(n - 1) + fib(n - 2);"
- '        // TODO: ...'
- "        int result = 0;\n        int prev = 1;\n        for (int i = 0; i < n;\
  \ i++) {\n            int tmp = result;\n            result += prev;\n         \
  \   prev = tmp;\n        }\n        return result;"
- "        if (n <= 2) {\n            return 1;\n        }\n        int a = 1;\n \
  \       int b = 1;\n        for (int i = 2; i < n; i++) {\n            int c = a\
  \ + b;\n            a = b;\n            b = c;\n        }\n        return b;"
- '        return 0;'
- "        int[][] T = new int[][]{{1,1},{1,0}};\n        return pow(T, n)[0][0];"
- "        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n \
  \       int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int c =\
  \ a + b;\n            a = b;\n            b = c;\n        }\n        return b;"
- "        if (n == 1) return 1;\n        if (n == 2) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        // TODO: Your code here.\n        return -1;"
- "        if (n <= 1) {\n            return n;\n        }\n        return fib(n -\
  \ 1) + fib(n - 2);"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        int result = 0;\n        if (n == 1) {\n            result = 1;\n     \
  \   } else if (n > 1) {\n            result = fib(n - 1) + fib(n - 2);\n       \
  \ }\n        return result;"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        if (n == 1) return 1;\n        else if (n == 2) return 1;\n        else\
  \ return fib(n - 1) + fib(n - 2);"
- "        // TODO: add code here.\n        return n;"
- "        if (n < 2) {\n            return n;\n        } else {\n            return\
  \ fib(n - 1) + fib(n - 2);\n        }"
- "        if (n < 0) {\n            throw new RuntimeException(\"n must be non-negative\"\
  );\n        }\n        if (n == 0) {\n            return 0;\n        }\n       \
  \ if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n\
  \ - 2);"
- "        // TODO\n        return 0;"
- '        throw new RuntimeException("Implement me!");'
- "        if (n < 2) {\n            return n;\n        } else {\n            return\
  \ fib(n - 1) + fib(n - 2);\n        }"
- "        int fib = 1;\n        int fib1 = 1;\n        int fib2 = 1;\n        for\
  \ (int i = 2; i < n; i++) {\n            fib = fib1 + fib2;\n            fib2 =\
  \ fib1;\n            fib1 = fib;\n        }\n        return fib;"
- "\t\tint f0 = 0;\n\t\tint f1 = 1;\n\t\tif (n == 0) {\n\t\t\treturn f0;\n\t\t}\n\t\
  \tif (n == 1) {\n\t\t\treturn f1;\n\t\t}\n\t\tint fn = 0;\n\t\tfor (int i = 2; i\
  \ <= n; i++) {\n\t\t\tfn = f0 + f1;\n\t\t\tf0 = f1;\n\t\t\tf1 = fn;\n\t\t}\n\t\t\
  return fn;"
- '        return n <= 1 ? n : fib(n - 1) + fib(n - 2);'
- "        if (n == 1) return 1;\n        if (n == 2) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "\tif (n==1) return 1;\n\tif (n==2) return 1;\n\treturn fib(n-1)+fib(n-2);"
- "        // BEGIN (write your solution here)\n        if (n < 3) {\n           \
  \ return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n        // END"
- "        //\n        // YOUR CODE HERE\n        //"
- "        int a = 0;\n        int b = 1;\n        if (n <= 1) {\n            return\
  \ n;\n        }\n        for (int i = 2; i <= n; i++) {\n            int c = a +\
  \ b;\n            a = b;\n            b = c;\n        }\n        return b;"
- "        int f0 = 0;\n        int f1 = 1;\n        for (int i = 2; i <= n; i++)\
  \ {\n            int f2 = f0 + f1;\n            f0 = f1;\n            f1 = f2;\n\
  \        }\n        return f1;"
- '        throw new UnsupportedOperationException("Delete this line and implement
  this function.");'
- "        if (n <= 1) return n;\n        return fib(n - 1) + fib(n - 2);"
- "        // Compute the answer in here.\n        // Please do not use recursion.\n\
  \        if (n == 1) return 1;\n        if (n == 2) return 1;\n        int fib1\
  \ = 1;\n        int fib2 = 1;\n        int fib = 0;\n        for (int i = 3; i <=\
  \ n; i++) {\n            fib = fib1 + fib2;\n            fib1 = fib2;\n        \
  \    fib2 = fib;\n        }\n        return fib;"
- "        int[] solutions = new int[n + 1];\n        solutions[0] = 0;\n        solutions[1]\
  \ = 1;\n        for (int i = 2; i <= n; i++) {\n            solutions[i] = solutions[i\
  \ - 1] + solutions[i - 2];\n        }\n        return solutions[n];"
- "        if (n < 2) {\n            return n;\n        } else {\n            return\
  \ fib(n - 1) + fib(n - 2);\n        }"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        int first = 0;\n        int second = 1;\n        for (int i = 0; i < n;\
  \ i++) {\n            int next = first + second;\n            first = second;\n\
  \            second = next;\n        }\n        return first;"
- "        if (n <= 2) return 1;\n        return fib(n - 1) + fib(n - 2);"
- "        int prevprev = 0;\n        int prev = 1;\n        for (int i = 0; i < n;\
  \ i++) {\n            int current = prevprev + prev;\n            prevprev = prev;\n\
  \            prev = current;\n        }\n        return prevprev;"
- '        return 0;'
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        if (n <= 1) {\n            return n;\n        } else {\n            return\
  \ fib(n - 1) + fib(n - 2);\n        }"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        if (n <= 2) {\n            return 1;\n        }\n        int a = 1;\n \
  \       int b = 1;\n        for (int i = 3; i <= n; i++) {\n            int c =\
  \ a + b;\n            a = b;\n            b = c;\n        }\n        return b;"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        int[] f = new int[n + 1];\n        f[0] = 0;\n        f[1] = 1;\n     \
  \   for (int i = 2; i <= n; i++) {\n            f[i] = f[i - 1] + f[i - 2];\n  \
  \      }\n        return f[n];"
- "        if (n == 1) return 1;\n        if (n == 2) return 1;\n        int a = 1;\n\
  \        int b = 1;\n        for (int i = 3; i <= n; i++) {\n            int c =\
  \ a + b;\n            a = b;\n            b = c;\n        }\n        return b;"
- "        int N = n;\n        int a = 0;\n        int b = 1;\n        for (int i\
  \ = 1; i < N; i++) {\n            int c = a + b;\n            a = b;\n         \
  \   b = c;\n        }\n        return b;"
- "        int a = 0;\n        int b = 1;\n        for (int i = 0; i < n; i++) {\n\
  \            int c = a + b;\n            a = b;\n            b = c;\n        }\n\
  \        return a;"
- "      if (n <= 1) {\n        return n;\n      }\n      int prev = 0;\n      int\
  \ current = 1;\n      for (int i = 2; i <= n; i++) {\n        int newCurrent = prev\
  \ + current;\n        prev = current;\n        current = newCurrent;\n      }\n\
  \      return current;"
- '        return -1;'
- "        int f1 = 0;\n        int f2 = 1;\n        int sum = 0;\n        for (int\
  \ i = 0; i < n; i++) {\n            sum = f1 + f2;\n            f1 = f2;\n     \
  \       f2 = sum;\n        }\n        return sum;"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        int a = 0;\n        int b = 1;\n        for (int i = 0; i < n; i++) {\n\
  \            int c = a + b;\n            a = b;\n            b = c;\n        }\n\
  \        return a;"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        if (n <= 1) {\n            return n;\n        }\n        int minus1 = 0;\n\
  \        int minus2 = 1;\n        int result = 0;\n        for (int i = 2; i <=\
  \ n; i++) {\n            result = minus1 + minus2;\n            minus1 = minus2;\n\
  \            minus2 = result;\n        }\n        return result;"
- "        int a = 0;\n        int b = 1;\n        for (int i = 0; i < n; i++) {\n\
  \            int c = a + b;\n            a = b;\n            b = c;\n        }\n\
  \        return a;"
- "      if (n == 1) {\n        return 1;\n      } else if (n == 2) {\n        return\
  \ 1;\n      } else {\n        return fib(n - 1) + fib(n - 2);\n      }"
- "        //BEGIN_SOLUTION\n        if (n <= 2) return 1;\n        return fib(n-1)\
  \ + fib(n-2);\n        //END_SOLUTION"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        if (n == 1) return 1;\n        if (n == 2) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        if (n <= 2) return 1;\n        else return fib(n - 1) + fib(n - 2);"
- "        int f[] = new int[n + 1];\n        f[0] = 0;\n        f[1] = 1;\n     \
  \   for (int i = 2; i <= n; i++) {\n            f[i] = f[i - 1] + f[i - 2];\n  \
  \      }\n        return f[n];"
- "        int f0 = 0;\n        int f1 = 1;\n        int i = 2;\n        while (i\
  \ <= n) {\n            int f2 = f0 + f1;\n            f0 = f1;\n            f1 =\
  \ f2;\n            i++;\n        }\n        return f1;"
- '        return 0;'
- '        return (n < 3) ? 1 : fib(n - 1) + fib(n - 2);'
- "        // TODO: implement this function\n        return 0;"
- "        // TODO\n        return 0;"
- "        int count = n;\n        if (n < 2) return n;\n        int a = 0;\n    \
  \    int b = 1;\n        int c = 1;\n        while (count > 2) {\n            c\
  \ = a + b;\n            a = b;\n            b = c;\n            count--;\n     \
  \   }\n        return c;"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        //return (int)DoubleStream.iterate(1, x -> x + 1).limit(n).reduce(0, (x,\
  \ y) -> x + y);\n        //return (int)IntStream.range(0, n).reduce(0, (x, y) ->\
  \ x + y);\n        //return (int)IntStream.range(0, n).sum();\n        int a = 0,\
  \ b = 1;\n        for (int i = 0; i < n; i++) {\n            int c = a + b;\n  \
  \          a = b;\n            b = c;\n        }\n        return a;"
- "        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n  \
  \      for (int i = 2; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2];\n\
  \        }\n        return dp[n];"
- "        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n\
  \        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i\
  \ - 2];\n        }\n        return fib[n];"
- '        return -1;'
- "        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n\
  \        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i\
  \ - 2];\n        }\n        return fib[n];"
- '        return 0;'
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        if (n == 1) return 1;\n        if (n == 2) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        if (n <= 1) {\n            return n;\n        }\n        return fib(n -\
  \ 1) + fib(n - 2);"
- "        // TODO\n        return 0;"
- "\tif (n == 1) return 1;\n\telse if (n == 2) return 1;\n\telse return fib(n-1) +\
  \ fib(n-2);"
- "        int a = 0;\n        int b = 1;\n        int sum = 0;\n        for (int\
  \ i = 1; i < n; i++) {\n            sum = a + b;\n            a = b;\n         \
  \   b = sum;\n        }\n        return sum;"
- "        if (n < 2) {\n            return n;\n        }\n        return fib(n -\
  \ 1) + fib(n - 2);"
- "        if (n == 1) return 1;\n        if (n == 2) return 1;\n        int n1 =\
  \ 1;\n        int n2 = 1;\n        int n3 = 0;\n        for (int i = 2; i < n; i++)\
  \ {\n            n3 = n1 + n2;\n            n1 = n2;\n            n2 = n3;\n   \
  \     }\n        return n3;"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        if (n < 2) {\n            return n;\n        }\n        int a = 0;\n  \
  \      int b = 1;\n        int c = a + b;\n        for (int i = 2; i < n; i++) {\n\
  \            a = b;\n            b = c;\n            c = a + b;\n        }\n   \
  \     return c;"
- "        if (n <= 1) {\n            return n;\n        }\n        return fib(n -\
  \ 1) + fib(n - 2);"
- "        int a = 0;\n        int b = 1;\n        for (int i = 0; i < n; i++) {\n\
  \            int temp = a;\n            a = b;\n            b = temp + b;\n    \
  \    }\n        return a;"
- "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be\
  \ non-negative\");\n        if (n == 0)\n            return 0;\n        if (n ==\
  \ 1)\n            return 1;\n        int a = 0;\n        int b = 1;\n        for\
  \ (int i = 2; i <= n; i++) {\n            int c = a + b;\n            a = b;\n \
  \           b = c;\n        }\n        return b;"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        // return 42;\n        int a = 0, b = 1, c, i;\n        if (n == 0)\n \
  \           return a;\n        for (i = 2; i <= n; i++) {\n            c = a + b;\n\
  \            a = b;\n            b = c;\n        }\n        return b;"
- "        if (n == 1) return 1;\n        if (n == 2) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        int[] mem = new int[n + 1];\n        for (int i = 0; i < n + 1; i++) {\n\
  \            if (i == 0) {\n                mem[i] = 0;\n            } else if (i\
  \ == 1) {\n                mem[i] = 1;\n            } else {\n                mem[i]\
  \ = mem[i - 1] + mem[i - 2];\n            }\n        }\n        return mem[n];"
- "        if (n < 2) {\n            return n;\n        }\n        return fib(n -\
  \ 1) + fib(n - 2);"
- '        return 0;'
- '        return n <= 1 ? n : fib(n - 1) + fib(n - 2);'
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        int prev = 1;\n        int curr = 1;\n\
  \        for (int i = 3; i <= n; i++) {\n            int next = prev + curr;\n \
  \           prev = curr;\n            curr = next;\n        }\n        return curr;"
- "        if (n == 1) return 1;\n        if (n == 2) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        if (n <= 1) {\n            return n;\n        }\n        int f0 = 0;\n\
  \        int f1 = 1;\n        for (int i = 2; i <= n; i++) {\n            int f2\
  \ = f0 + f1;\n            f0 = f1;\n            f1 = f2;\n        }\n        return\
  \ f1;"
- "        // YOUR CODE HERE\n        return 0;"
- "        // TODO: Return n-th Fibonacci number.\n        int[][] A = {{1, 1}, {1,\
  \ 0}};\n        int[][] result = pow(A, n);\n        return result[0][0];"
- "        if (n <= 1) {\n            return n;\n        }\n        int[] f = new\
  \ int[n + 1];\n        f[0] = 0;\n        f[1] = 1;\n        for (int i = 2; i <=\
  \ n; i++) {\n            f[i] = f[i - 1] + f[i - 2];\n        }\n        return\
  \ f[n];"
- "        int a = 0;\n        int b = 1;\n        for (int i = 0; i < n; i++) {\n\
  \            int c = a + b;\n            a = b;\n            b = c;\n        }\n\
  \        return a;"
- "        int a = 0;\n        int b = 1;\n        for (int i = 0; i < n; i++) {\n\
  \            int c = a + b;\n            a = b;\n            b = c;\n        }\n\
  \        return a;"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        int[] fibs = new int[1000];\n        fibs[0] = 0;\n        fibs[1] = 1;\n\
  \        for (int i = 2; i < n; i++) {\n            fibs[i] = fibs[i - 1] + fibs[i\
  \ - 2];\n        }\n        return fibs[n - 1];"
- '        return 0;'
- "        if (n <= 2) {\n            return 1;\n        } else {\n            return\
  \ fib(n - 1) + fib(n - 2);\n        }"
- "        // TODO: your code here\n        int[] cache = new int[n+1];\n        return\
  \ fib(n, cache);"
- "        int a = 0;\n        int b = 1;\n        for (int i = 1; i < n; i++) {\n\
  \            int tmp = a;\n            a = b;\n            b = tmp + b;\n      \
  \  }\n        return b;"
- "        //return fib(n-1) + fib(n-2);\n        if (n == 1) {\n            return\
  \ 1;\n        }\n        if (n == 2) {\n            return 1;\n        }\n     \
  \   return fib(n-1) + fib(n-2);"
- "        // nth Fibonacci number.\n        int fib = 0;\n        // Write your solution\
  \ here.\n        if (n == 1) return 1;\n        if (n == 2) return 1;\n        int[]\
  \ fibArray = new int[n+1];\n        fibArray[1] = 1;\n        fibArray[2] = 1;\n\
  \        for (int i = 3; i <= n; i++) {\n            fibArray[i] = fibArray[i-1]\
  \ + fibArray[i-2];\n        }\n        fib = fibArray[n];\n        return fib;"
- "        if (n <= 1) return n;\n        return fib(n - 1) + fib(n - 2);"
- '        return 1;'
- "        int previous = 0;\n        int current = 1;\n        for (int i = 0; i\
  \ < n; i++) {\n            int tmp = previous;\n            previous = current;\n\
  \            current = tmp + current;\n        }\n        return previous;"
- '        return 0;'
- '        throw new NotImplementedException();'
- "        if (n == 1) {\n            return 1;\n        }\n        else if (n ==\
  \ 2) {\n            return 1;\n        }\n        else {\n            return fib(n\
  \ - 1) + fib(n - 2);\n        }"
- "        // Your code goes here.\n        return 0;"
- "        if (n == 1) return 1;\n        if (n == 2) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        if (n == 1) {\n            return 1;\n        }\n        else if (n ==\
  \ 2) {\n            return 1;\n        }\n        else {\n            return fib(n\
  \ - 1) + fib(n - 2);\n        }"
- "        int[] a = new int[n + 1];\n        a[0] = 0;\n        a[1] = 1;\n     \
  \   for (int i = 2; i <= n; i++) {\n            a[i] = a[i - 1] + a[i - 2];\n  \
  \      }\n        return a[n];"
- "        int ans = 0;\n        // Your code here.\n        return ans;"
- '        return 0;'
- "        int a = 0;\n        int b = 1;\n        int c = 1;\n        for (int i\
  \ = 1; i < n; i++) {\n            c = a + b;\n            a = b;\n            b\
  \ = c;\n        }\n        return c;"
- "        int prev1 = 0;\n        int prev2 = 1;\n        for (int i = 0; i < n;\
  \ i++) {\n            int savePrev1 = prev1;\n            prev1 = prev2;\n     \
  \       prev2 = savePrev1 + prev2;\n        }\n        return prev1;"
- "        if (n == 1) return 1;\n        if (n == 2) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        int last1 = 0;\n        int last2 = 1;\n        int current = 0;\n    \
  \    int index = 1;\n        while (index < n) {\n            current = last1 +\
  \ last2;\n            last1 = last2;\n            last2 = current;\n           \
  \ index += 1;\n        }\n        return current;"
- "        if (n < 1) {\n            return -1;\n        }\n        if (n == 1) {\n\
  \            return 1;\n        }\n        int a = 1;\n        int b = 1;\n    \
  \    for (int i = 2; i < n; i++) {\n            int c = a + b;\n            a =\
  \ b;\n            b = c;\n        }\n        return b;"
- "        if (n == 1) return 1;\n        if (n == 2) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        if (n < 2) {\n            return n;\n        }\n        int a = 0;\n  \
  \      int b = 1;\n        int c = 0;\n        for (int i = 2; i <= n; i++) {\n\
  \            c = a + b;\n            a = b;\n            b = c;\n        }\n   \
  \     return c;"
- "\t\tif (n == 0) return 0;\n\t\tif (n == 1) return 1;\n\t\treturn fib(n - 1) + fib(n\
  \ - 2);"
- "        int prevPrev = 0;\n        int prev = 1;\n        for (int i = 0; i < n;\
  \ i++) {\n            int curr = prevPrev + prev;\n            prevPrev = prev;\n\
  \            prev = curr;\n        }\n        return prevPrev;"
- "        // {write your code here}\n        int a = 0;\n        int b = 1;\n   \
  \     int f = 1;\n        if (n == 0) {\n            return 0;\n        } else if\
  \ (n == 1) {\n            return 1;\n        } else {\n            for (int i =\
  \ 2; i <= n; i++) {\n                f = a + b;\n                a = b;\n      \
  \          b = f;\n            }\n            return f;\n        }"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        if (n <= 2) {\n            return 1;\n        }\n        return fib(n -\
  \ 1) + fib(n - 2);"
- "        // TODO: Implement me.\n        return 0;"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        if (n == 1) return 1;\n        if (n == 2) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        if (n <= 1) return n;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n == 1) return 1;\n        if (n == 2) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        if (n == 1) return 1;\n        if (n == 2) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        int[] result = new int[n+1];\n        result[0] = 0;\n        result[1]\
  \ = 1;\n        for (int i = 2; i <= n; i++) {\n            result[i] = result[i-1]\
  \ + result[i-2];\n        }\n        return result[n];"
- "\tif (n == 1) {\n\t    return 1;\n\t} else if (n == 2) {\n\t    return 1;\n\t}\
  \ else {\n\t    return fib(n - 1) + fib(n - 2);\n\t}"
- '        throw new UnsupportedOperationException("Not implemented");'
- "        int f1 = 0;\n        int f2 = 1;\n        int f3 = 1;\n        for (int\
  \ i = 0; i < n; i++) {\n            f3 = f1 + f2;\n            f1 = f2;\n      \
  \      f2 = f3;\n        }\n        return f3;"
- "        int first = 0;\n        int second = 1;\n        int fibonacci = 0;\n \
  \       for (int i = 2; i <= n; i++) {\n            fibonacci = first + second;\n\
  \            first = second;\n            second = fibonacci;\n        }\n     \
  \   return fibonacci;"
- "        if (n <= 2) {\n            return 1;\n        }\n        return fib(n -\
  \ 1) + fib(n - 2);"
- "        if (n == 1) {\n            return 1;\n        }\n        else if (n ==\
  \ 2) {\n            return 1;\n        }\n        else {\n            return fib(n\
  \ - 1) + fib(n - 2);\n        }"
- "        if (n == 1) {\n            return 1;\n        }\n        else if (n ==\
  \ 2) {\n            return 1;\n        }\n        else {\n            return fib(n\
  \ - 1) + fib(n - 2);\n        }"
- "        int a = 0;\n        int b = 1;\n        for (int i = 0; i < n; i++) {\n\
  \            int c = a + b;\n            a = b;\n            b = c;\n        }\n\
  \        return a;"
- "        if (n < 2) return n;\n        return fib(n - 1) + fib(n - 2);"
- "        // YOUR CODE HERE\n        return 0;"
- "        int first = 0;\n        int second = 1;\n        for (int i = 1; i < n;\
  \ i++) {\n            int temp = first;\n            first = second;\n         \
  \   second = temp + second;\n        }\n        return second;"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        int first = 1;\n        int second =\
  \ 1;\n        int res = 0;\n        for (int i = 3; i <= n; i++) {\n           \
  \ res = first + second;\n            first = second;\n            second = res;\n\
  \        }\n        return res;"
- "        if (n <= 1) {\n            return n;\n        }\n        int [] F = new\
  \ int[n+1];\n        F[0] = 0;\n        F[1] = 1;\n        for (int i = 2; i <=\
  \ n; i++) {\n            F[i] = F[i-1] + F[i-2];\n        }\n        return F[n];"
- "        // --------------------------------------------\n        // Enter your\
  \ code here.\n        // --------------------------------------------\n        if\
  \ (n == 0 || n == 1) {\n            return n;\n        }\n        return fib(n -\
  \ 1) + fib(n - 2);"
- "        int previous = 0;\n        int current = 1;\n        for (int i = 1; i\
  \ < n; i++) {\n            int tmp = current;\n            current = previous +\
  \ current;\n            previous = tmp;\n        }\n        return current;"
- "\tif (n == 1) return 1;\n\tif (n == 2) return 1;\n\treturn fib(n-1) + fib(n-2);"
- '        return Stream.iterate(new Pair<Integer, Integer>(0, 1), a -> new Pair<Integer,
  Integer>(a.getValue1(), a.getValue0() + a.getValue1())).skip(n).findFirst().get().getValue1();'
- "        int a = 0;\n        int b = 1;\n        for (int i = 0; i < n; i++) {\n\
  \            int c = a + b;\n            a = b;\n            b = c;\n        }\n\
  \        return a;"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        if (n < 0)\n            throw new IllegalArgumentException();\n       \
  \ if (n == 0)\n            return 0;\n        int a = 0;\n        int b = 1;\n \
  \       for (int i = 1; i < n; i++) {\n            int t = a + b;\n            a\
  \ = b;\n            b = t;\n        }\n        return b;"
- "        if (n <= 1) {\n            return n;\n        }\n        return fib(n -\
  \ 1) + fib(n - 2);"
- "        if (n <= 1) {\n            return n;\n        } else {\n            return\
  \ fib(n - 1) + fib(n - 2);\n        }"
- "        int a = 0;\n        int b = 1;\n        if (n == 0) return a;\n       \
  \ for (int i = 2; i <= n; i++) {\n            int c = a + b;\n            a = b;\n\
  \            b = c;\n        }\n        return b;"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        if (n <= 2) {\n            return 1;\n        }\n        return fib(n -\
  \ 1) + fib(n - 2);"
- "        if (n == 1) return 1;\n        if (n == 2) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- '        return IntStream.rangeClosed(1, n).reduce(0, (x, y) -> x + y);'
- "        int x = 0;\n        int y = 1;\n        for (int i = 0; i < n; i++) {\n\
  \            int z = x + y;\n            x = y;\n            y = z;\n        }\n\
  \        return x;"
- "        int a = 0;\n        int b = 1;\n        int c = 0;\n        if (n == 0)\
  \ {\n            return a;\n        }\n        if (n == 1) {\n            return\
  \ b;\n        }\n        for (int i = 1; i < n; i++) {\n            c = a + b;\n\
  \            a = b;\n            b = c;\n        }\n        return c;"
- "        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n\
  \        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i\
  \ - 2];\n        }\n        return fib[n];"
- "        int fibonacci = 0;\n        int firstNumber = 0;\n        int secondNumber\
  \ = 1;\n        for (int i = 0; i < n; i++) {\n            fibonacci = firstNumber\
  \ + secondNumber;\n            firstNumber = secondNumber;\n            secondNumber\
  \ = fibonacci;\n        }\n        return fibonacci;"
- '        // YOUR CODE HERE'
- '        return 0;'
- "        int fib0 = 0;\n        int fib1 = 1;\n        int temp = 0;\n        for\
  \ (int i = 0; i < n; i++) {\n            temp = fib0;\n            fib0 = fib1;\n\
  \            fib1 = temp + fib1;\n        }\n        return fib0;"
- "        int[] fibs = new int[n + 1];\n        fibs[0] = 0;\n        fibs[1] = 1;\n\
  \        for (int i = 2; i <= n; i++) {\n            fibs[i] = fibs[i - 1] + fibs[i\
  \ - 2];\n        }\n        return fibs[n];"
- "      if (n == 1) {\n        return 1;\n      }\n      if (n == 2) {\n        return\
  \ 1;\n      }\n      return fib(n - 1) + fib(n - 2);"
- "        if (n <= 2) {\n            return 1;\n        }\n        int n_2 = 1;\n\
  \        int n_1 = 1;\n        int n_curr = 0;\n        for (int i = 2; i < n; i++)\
  \ {\n            n_curr = n_1 + n_2;\n            n_2 = n_1;\n            n_1 =\
  \ n_curr;\n        }\n        return n_curr;"
- "      if (n == 1) {\n        return 1;\n      } else if (n == 2) {\n        return\
  \ 1;\n      } else {\n        return fib(n - 1) + fib(n - 2);\n      }"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "\t// SOLUTION IS HERE\n\n\t// DP approach\n\tint [] memo = new int[n+1];\n\tArrays.fill(memo,\
  \ -1);\n\tmemo[0] = 0;\n\tmemo[1] = 1;\n\t\n\treturn fibAux(n, memo);"
- "        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i\
  \ = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b\
  \ = c;\n        }\n        return b;"
- "        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);"
language: java
name: HumanEval_55_fib
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return n-th Fibonacci number.\n    // >>> fib(10)\n    //\
  \ 55\n    // >>> fib(1)\n    // 1\n    // >>> fib(8)\n    // 21\n    public static\
  \ int fib(int n) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(fib((10)) == (55));\n\
  \    assert(fib((1)) == (1));\n    assert(fib((8)) == (21));\n    assert(fib((11))\
  \ == (89));\n    assert(fib((12)) == (144));\n    }\n\n}\n"
