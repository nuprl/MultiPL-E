name: HumanEval_123_get_odd_collatz
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a positive integer n, return a sorted list that has\
  \ the odd numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
  \ in mathematics that concerns a sequence defined\n    // as follows: start with\
  \ any positive integer n. Then each term is obtained from the \n    // previous\
  \ term as follows: if the previous term is even, the next term is one half of \n\
  \    // the previous term. If the previous term is odd, the next term is 3 times\
  \ the previous\n    // term plus 1. The conjecture is that no matter what value\
  \ of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1) is\
  \ [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
  \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
  \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    public static ArrayList<Integer>\
  \ getOddCollatz(int n) {\n"
tests: "return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
  \ void main(String[] args) {\n    assert(getOddCollatz((14)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)5, (int)7, (int)11, (int)13, (int)17)))));\n    assert(getOddCollatz((5)).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)5)))));\n    assert(getOddCollatz((12)).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)5)))));\n    assert(getOddCollatz((1)).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)1)))));\n    }\n\n}\n"
completions: []
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
