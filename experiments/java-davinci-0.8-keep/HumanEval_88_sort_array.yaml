completions:
- "        ArrayList<Integer> t = (ArrayList<Integer>) array.clone();\n        int\
  \ len = t.size();\n        int sum = t.get(0) + t.get(len - 1);\n        int i,\
  \ j;\n        Integer val, val1;\n        if (sum % 2 == 0) {\n            for (i\
  \ = 1; i < len; i++) {\n                val = t.get(i);\n                j = i -\
  \ 1;\n                while (j >= 0 && val > t.get(j)) {\n                    val1\
  \ = t.get(j);\n                    t.set(j, val);\n                    t.set(j +\
  \ 1, val1);\n                    j--;\n                }\n            }\n      \
  \  } else {\n            for (i = 1; i < len; i++) {\n                val = t.get(i);\n\
  \                j = i - 1;\n                while (j >= 0 && val < t.get(j)) {\n\
  \                    val1 = t.get(j);\n                    t.set(j, val);\n    \
  \                t.set(j + 1, val1);\n                    j--;\n               \
  \ }\n            }\n        }\n        return t;"
- '        return null;'
- "        ArrayList<Integer> arr = new ArrayList<Integer>();\n        for (int i\
  \ = 0; i < array.size(); i++) {\n            arr.add(array.get(i));\n        }\n\
  \        if (array.size() < 2) {\n            return arr;\n        }\n        if\
  \ ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n            Collections.sort(arr,\
  \ Collections.reverseOrder());\n        } else {\n            Collections.sort(arr);\n\
  \        }\n        return arr;"
- '        return array;'
- "        Integer sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
  \ sortedArray = new ArrayList<Integer>(array);\n        Collections.sort(sortedArray);\n\
  \        if (sum % 2 == 0) Collections.reverse(sortedArray);\n        return sortedArray;"
- "        ArrayList<Integer> temp = new ArrayList<>();\n        if (array.size()\
  \ == 0) return temp;\n        for (int x : array) temp.add(x);\n        temp.sort(Comparator.naturalOrder());\n\
  \        if (temp.get(0) + temp.get(temp.size() - 1) % 2 == 0)\n            Collections.reverse(temp);\n\
  \        return temp;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        int first = array.get(0);\n\
  \        int last = array.get(array.size() - 1);\n        if ((first + last) % 2\
  \ == 0) {\n            result = array.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toCollection(ArrayList::new));\n\
  \        } else {\n            result = array.stream().sorted().collect(Collectors.toCollection(ArrayList::new));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // find\
  \ value of the sum( first index value, last index value)\n        int first = array.get(0);\n\
  \        int last = array.get(array.size() - 1);\n        int sum = first + last;\n\
  \        if (sum % 2 == 0) {\n            // sort in descending order if the sum(\
  \ first index value, last index value) is even.\n            array.sort(Collections.reverseOrder());\n\
  \        } else {\n            // sort in ascending order if the sum( first index\
  \ value, last index value) is odd.\n            array.sort(Collections.reverseOrder());\n\
  \        }\n        return array;"
- "        int n = array.size();\n        if (n == 0) {\n            return array;\n\
  \        }\n        int sum = array.get(0) + array.get(n - 1);\n        Collections.sort(array);\n\
  \        if (sum % 2 == 0) {\n            Collections.reverse(array);\n        }\n\
  \        return array;"
- '        return null;'
- '        return new ArrayList<>();'
- "        if (array.size() > 0) {\n            int sum = array.get(0) + array.get(array.size()\
  \ - 1);\n            Comparator<Integer> comparator = sum % 2 == 0 ? (i1, i2) ->\
  \ i2 - i1 : (i1, i2) -> i1 - i2;\n            array.sort(comparator);\n        }\n\
  \        return array;"
- "        if (array.size() < 2) return array;\n        Integer first = array.get(0);\n\
  \        Integer last = array.get(array.size() - 1);\n        if ((first + last)\
  \ % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
  \        } else {\n            Collections.sort(array);\n        }\n        return\
  \ array;"
- "        // TODO: Implement your code here\n        return null;"
- "        if (array.size() == 0) {\n            return array;\n        }\n      \
  \  final ArrayList<Integer> answer = new ArrayList<>(array);\n        final ArrayList<Integer>\
  \ copy = new ArrayList<>(array);\n        final int index = array.size() - 1;\n\
  \        final int first = array.get(0);\n        final int last = array.get(index);\n\
  \        final boolean isEven = ((first + last) % 2 == 0);\n        Collections.sort(copy);\n\
  \        for (int i = 0; i < copy.size(); i++) {\n            final int value =\
  \ copy.get(i);\n            if (isEven) {\n                answer.set(index - i,\
  \ value);\n            } else {\n                answer.set(i, value);\n       \
  \     }\n        }\n        return answer;"
- "        if (array.size() == 0) {\n            return array;\n        }\n      \
  \  else if (array.size() == 1) {\n            return array;\n        }\n       \
  \ else {\n            ArrayList<Integer> result = new ArrayList<Integer>();\n  \
  \          int sum = array.get(0) + array.get(array.size() - 1);\n            if\
  \ (sum % 2 == 0) {\n                for (int i = array.size() - 1; i >= 0; i--)\
  \ {\n                    result.add(array.get(i));\n                }\n        \
  \    }\n            else {\n                for (int i = 0; i < array.size(); i++)\
  \ {\n                    result.add(array.get(i));\n                }\n        \
  \    }\n            return result;\n        }"
- "        int first = array.get(0);\n        int last = array.get(array.size() -\
  \ 1);\n        return (first + last) % 2 == 0 ? sortArray(array, false) : sortArray(array,\
  \ true);"
- '        return (array.get(0) + array.get(array.size() - 1)) % 2 == 0 ? (ArrayList<Integer>)
  array.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList()) :
  (ArrayList<Integer>) array.stream().sorted().collect(Collectors.toList());'
- "        if (array.size() == 0) {\n            return array;\n        }\n      \
  \  if (array.size() == 1) {\n            return array;\n        }\n        if (array.size()\
  \ == 2) {\n            if (array.get(0) > array.get(1)) {\n                Collections.swap(array,\
  \ 0, 1);\n            }\n            return array;\n        }\n        if ((array.get(0)\
  \ + array.get(array.size() - 1)) % 2 == 0) {\n            Collections.sort(array,\
  \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
  \        }\n        return array;"
- "        int firstIndex = array.get(0);\n        int lastIndex = array.get(array.size()\
  \ - 1);\n        int sum = firstIndex + lastIndex;\n        boolean flag = false;\n\
  \        if (sum % 2 == 0) {\n            flag = true;\n        }\n        if (flag)\
  \ {\n            array.sort(Comparator.reverseOrder());\n        } else {\n    \
  \        array.sort(Comparator.naturalOrder());\n        }\n        return array;"
- "        if (array.size() <= 1) return array;\n        int sum = array.get(0) +\
  \ array.get(array.size() - 1);\n        Collections.sort(array);\n        if (sum\
  \ % 2 == 0) Collections.reverse(array);\n        return array;"
- "        var sum = (array.size() > 0) ? array.get(0) + array.get(array.size() -\
  \ 1) : 0;\n        if(sum % 2 == 0) {\n            array.sort(Collections.reverseOrder());\n\
  \        } else {\n            array.sort(Collections.reverseOrder());\n       \
  \ }\n        return array;"
- "        int x = array.get(0) + array.get(array.size() - 1);\n        if (x % 2\
  \ == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n  \
  \      } else {\n            Collections.sort(array);\n        }\n        return\
  \ array;"
- "        // We will have to write a separate Comparator to achieve the desired output.\n\
  \        Collections.sort(array, new Comparator<Integer>() {\n            @Override\n\
  \            public int compare(Integer a, Integer b) {\n                return\
  \ (array.indexOf(a) + array.indexOf(b)) % 2 == 0 ? b - a : a - b;\n            }\n\
  \        });\n        return array;"
- "        if (array.size() == 0) {\n            return array;\n        }\n      \
  \  if (array.size() == 1) {\n            return array;\n        }\n        if (array.size()\
  \ == 2) {\n            if (array.get(0) + array.get(1) % 2 == 0) {\n           \
  \     return array;\n            } else {\n                Collections.reverse(array);\n\
  \                return array;\n            }\n        }\n        int sum = array.get(0)\
  \ + array.get(array.size() - 1);\n        Collections.sort(array);\n        if (sum\
  \ % 2 == 0) {\n            Collections.reverse(array);\n        }\n        return\
  \ array;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ odd = new ArrayList<Integer>();\n        ArrayList<Integer> even = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < array.size(); i++) {\n            if (i % 2 == 0) {\n\
  \                odd.add(array.get(i));\n            } else {\n                even.add(array.get(i));\n\
  \            }\n        }\n        odd.sort(Collections.reverseOrder());\n     \
  \   even.sort(Collections.reverseOrder());\n        for (int i = 0; i < array.size();\
  \ i++) {\n            if (i % 2 == 0) {\n                result.add(odd.get(0));\n\
  \                odd.remove(0);\n            } else {\n                result.add(even.get(0));\n\
  \                even.remove(0);\n            }\n        }\n        if (array.size()\
  \ % 2 == 0) {\n            Collections.reverse(result);\n        }\n        return\
  \ result;"
- "        // your solution goes here...\n        return array;"
- '        return null;'
- "        if (array.size() < 2) {\n            return array;\n        }\n       \
  \ int i, j, min;\n        for (i = 0; i < array.size() - 1; i++) {\n           \
  \ min = i;\n            for (j = i + 1; j < array.size(); j++) {\n             \
  \   if (array.get(j) < array.get(min)) {\n                    min = j;\n       \
  \         }\n            }\n            Collections.swap(array, i, min);\n     \
  \   }\n        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n  \
  \          Collections.reverse(array);\n        }\n        return array;"
- "        // Write your code here.\n        return null;"
- "        // Write your code here\n        if (array.size() == 0) {\n           \
  \ return array;\n        }\n        if (array.size() == 1) {\n            return\
  \ array;\n        }\n        int first = array.get(0);\n        int last = array.get(array.size()\
  \ - 1);\n        int sum = first + last;\n        ArrayList<Integer> result = new\
  \ ArrayList<Integer>();\n        if (sum % 2 == 0) {\n            int i = array.size()\
  \ - 1;\n            while (i >= 0) {\n                result.add(array.get(i));\n\
  \                i--;\n            }\n        } else {\n            for (int i =\
  \ 0; i < array.size(); i++) {\n                result.add(array.get(i));\n     \
  \       }\n        }\n        return result;"
- "        if (array.size() == 0) {\n            return array;\n        }\n      \
  \  if (array.size() == 1) {\n            return array;\n        }\n        if (array.size()\
  \ == 2) {\n            return sortTwoValues(array);\n        }\n        int sum\
  \ = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0) {\n \
  \           Collections.sort(array, Collections.reverseOrder());\n        } else\
  \ {\n            Collections.sort(array);\n        }\n        return array;"
- '        return null;'
- "        if (array.size() == 0) {\n            return array;\n        }\n      \
  \  else if (array.size() == 1) {\n            return array;\n        }\n       \
  \ else {\n            ArrayList<Integer> copy = new ArrayList<Integer>(array);\n\
  \            int first_num = copy.get(0);\n            int last_num = copy.get(copy.size()\
  \ - 1);\n            int sum = first_num + last_num;\n            if (sum % 2 ==\
  \ 0) {\n                Collections.sort(copy, Comparator.reverseOrder());\n   \
  \         }\n            else {\n                Collections.sort(copy);\n     \
  \       }\n            return copy;\n        }"
- "        if (array.size() == 0) {\n            return array;\n        }\n      \
  \  int first = array.get(0);\n        int last = array.get(array.size() - 1);\n\
  \        if ((first + last) % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
  \        } else {\n            Collections.sort(array);\n        }\n        return\
  \ array;"
- "        Pair<Integer, Integer> bounds = getBounds(array);\n        Comparator<Integer>\
  \ cmp = getComparator(bounds);\n        ArrayList<Integer> list = (ArrayList<Integer>)\
  \ array.clone();\n        list.sort(cmp);\n        return list;"
- "        ArrayList<Integer> temp = new ArrayList<Integer>();\n        temp.addAll(array);\n\
  \        if (array.size() > 0) {\n            if ((array.get(0) + array.get(array.size()\
  \ - 1)) % 2 == 0) {\n                Collections.sort(temp, Collections.reverseOrder());\n\
  \            } else {\n                Collections.sort(temp);\n            }\n\
  \        }\n        return temp;"
- "        Integer sum = array.get(0) + array.get(array.size() - 1);\n        boolean\
  \ isSumOdd = (sum % 2) == 1;\n        return isSumOdd ? mergeSort(array) : mergeSort(array,\
  \ false);"
- "        // type your solution here\n        return null;"
- "        ArrayList<Integer> copy = new ArrayList<Integer>(array);\n        Collections.sort(copy);\n\
  \        Integer first = copy.get(0);\n        Integer last = copy.get(copy.size()\
  \ - 1);\n        if((first + last) % 2 == 0) {\n            Collections.reverse(copy);\n\
  \        }\n        return copy;"
- "        int firstIndexValue = array.get(0);\n        int lastIndexValue = array.get(array.size()\
  \ - 1);\n        ArrayList<Integer> sortedArray = new ArrayList<Integer>();\n  \
  \      if ((firstIndexValue + lastIndexValue) % 2 == 0) {\n            int lastIndex\
  \ = array.size() - 1;\n            for (int i = 0; i < array.size(); i++) {\n  \
  \              sortedArray.add(array.get(lastIndex));\n                lastIndex\
  \ -= 1;\n            }\n        } else {\n            sortedArray = array;\n   \
  \         Collections.sort(sortedArray);\n        }\n        return sortedArray;"
- "        // 1. sorting\n        // 2. odd/even\n        // 3. return\n        Collections.sort(array);\n\
  \        ArrayList<Integer> sorted = new ArrayList<>();\n        if ( array.get(0)\
  \ + array.get(array.size() - 1) % 2 == 0 ) {\n            for ( int i = array.size()\
  \ - 1; i >= 0; i-- ) {\n                sorted.add(array.get(i));\n            }\n\
  \        } else {\n            sorted = array;\n        }\n        return sorted;"
- "        // write your code here\n        int left = array.get(0);\n        int\
  \ right = array.get(array.size() - 1);\n        ArrayList<Integer> sorted;\n   \
  \     if ((left + right) % 2 == 0) {\n            sorted = (ArrayList<Integer>)\
  \ array.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());\n\
  \        } else {\n            sorted = (ArrayList<Integer>) array.stream().sorted().collect(Collectors.toList());\n\
  \        }\n        return sorted;"
- "        int len = array.size();\n        if (len <= 1) {\n            return array;\n\
  \        }\n        int sum = array.get(0) + array.get(len - 1);\n        boolean\
  \ isEven = sum % 2 == 0;\n        ArrayList<Integer> res = new ArrayList<Integer>();\n\
  \        List<Tuple> pairs = new ArrayList<Tuple>();\n        for (int i = 0; i\
  \ < len; i++) {\n            pairs.add(new Tuple(i, array.get(i)));\n        }\n\
  \        if (isEven) {\n            Collections.sort(pairs, new Comparator<Tuple>()\
  \ {\n                @Override\n                public int compare(Tuple t1, Tuple\
  \ t2) {\n                    return t2.getValue(1).compareTo(t1.getValue(1));\n\
  \                }\n            });\n        } else {\n            Collections.sort(pairs,\
  \ new Comparator<Tuple>() {\n                @Override\n                public int\
  \ compare(Tuple t1, Tuple t2) {\n                    return t1.getValue(1).compareTo(t2.getValue(1));\n\
  \                }\n            });\n        }\n        for (Tuple tuple : pairs)\
  \ {\n            res.add(tuple.getValue(1));\n        }\n        return res;"
- "        // Write your code here.\n        return null;"
- "        int sum = array.get(0) + array.get(array.size() - 1);\n        if (sum\
  \ % 2 == 0) {\n            Collections.sort(array, new Comparator<Integer>() {\n\
  \                @Override\n                public int compare(Integer o1, Integer\
  \ o2) {\n                    return o2.compareTo(o1);\n                }\n     \
  \       });\n        } else {\n            Collections.sort(array);\n        }\n\
  \        return array;"
- "        ArrayList<Integer> arrayCopy = new ArrayList<Integer>(array);\n       \
  \ Collections.sort(arrayCopy);\n        if (array.size() == 0 || array.size() ==\
  \ 1) {\n            return arrayCopy;\n        }\n        int sumOfFirstAndLastIndex\
  \ = array.get(0) + array.get(array.size() - 1);\n        if (sumOfFirstAndLastIndex\
  \ % 2 == 0) {\n            Collections.reverse(arrayCopy);\n        }\n        return\
  \ arrayCopy;"
- "        if (array.size() == 0) return array;\n        Collections.sort(array);\n\
  \        int last = array.size() - 1;\n        if ((array.get(0) + array.get(last))\
  \ % 2 == 0) {\n            Collections.reverse(array);\n        }\n        return\
  \ array;"
- "        if (array.size() == 0) {\n            return array;\n        }\n      \
  \  else if (array.size() == 1) {\n            return array;\n        }\n       \
  \ else {\n            int head = array.get(0);\n            int tail = array.get(array.size()\
  \ - 1);\n            if ((head + tail) % 2 == 0) {\n                Collections.sort(array,\
  \ Collections.reverseOrder());\n            }\n            else {\n            \
  \    Collections.sort(array);\n            }\n            return array;\n      \
  \  }"
- '        return null;'
- "        int size = array.size();\n        if (size == 0) {\n            return\
  \ array;\n        }\n        else if (size == 1) {\n            return array;\n\
  \        }\n        else {\n            int first = array.get(0);\n            int\
  \ last = array.get(size - 1);\n            ArrayList<Integer> newArray = new ArrayList<Integer>();\n\
  \            for (int i = 0; i < size; i++) {\n                newArray.add(array.get(i));\n\
  \            }\n            if ((first + last) % 2 == 0) {\n                Collections.sort(newArray,\
  \ new Comparator<Integer>() {\n                    @Override\n                 \
  \   public int compare(Integer i1, Integer i2) {\n                        return\
  \ -i1.compareTo(i2);\n                    }\n                });\n            }\n\
  \            else {\n                Collections.sort(newArray);\n            }\n\
  \            return newArray;\n        }"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (array.size()\
  \ == 0) {\n            return result;\n        }\n        result.addAll(array);\n\
  \        if (isOdd(result.get(0) + result.get(result.size() - 1))) {\n         \
  \   Collections.sort(result);\n        } else {\n            Collections.sort(result,\
  \ Collections.reverseOrder());\n        }\n        return result;"
- '        return null;'
- "        int sum = array.get(0) + array.get(array.size() - 1);\n        boolean\
  \ even = sum % 2 == 0;\n        Collections.sort(array, (a, b) -> {\n          \
  \  if (even) {\n                return b - a;\n            } else {\n          \
  \      return a - b;\n            }\n        });\n        return array;"
- '        return (array.stream().mapToInt(x -> x).sum() % 2 == 0) ? sort(array, -1)
  : sort(array, 1);'
- "        // write your code here...\n        return array;"
- "        int sum = array.get(0) + array.get(array.size() - 1);\n        if(sum %\
  \ 2 == 0) {\n            array.sort(Collections.reverseOrder());\n        } else\
  \ {\n            array.sort(null);\n        }\n        return array;"
- "        int sum_first_last = array.get(0) + array.get(array.size() - 1);\n    \
  \    if (sum_first_last % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
  \        } else {\n            Collections.sort(array);\n        }\n        return\
  \ array;"
- "        int head = array.get(0);\n        int tail = array.get(array.size() - 1);\n\
  \        ArrayList<Integer> result = new ArrayList<Integer>();\n        if ( (head\
  \ + tail) % 2 == 0 ) {\n            result = (ArrayList<Integer>) array.stream().sorted(Collections.reverseOrder()).collect(Collectors.toList());\n\
  \        } else {\n            result = (ArrayList<Integer>) array.stream().sorted().collect(Collectors.toList());\n\
  \        }\n        return result;"
- "        // Integer.parseInt()\n        // Integer.toString()\n        // Integer.MIN_VALUE\n\
  \        // Integer.MAX_VALUE\n        // Integer.valueOf(str)\n        // Integer.toBinaryString(num)\n\
  \        // Integer.toHexString(num)\n        // Integer.toOctalString(num)\n  \
  \      // Integer.bitCount(num)\n        // Integer.compare(num1, num2)\n      \
  \  // Integer.compareUnsigned(num1, num2)\n        // Integer.decode(str)\n    \
  \    // Integer.divideUnsigned(num1, num2)\n        // Integer.remainderUnsigned(num1,\
  \ num2)\n        // Integer.sum(num1, num2)\n        // Integer.toUnsignedLong(num)\n\
  \        // Integer.highestOneBit(num)\n        // Integer.lowestOneBit(num)\n \
  \       // Integer.numberOfLeadingZeros(num)\n        // Integer.numberOfTrailingZeros(num)\n\
  \        // Integer.rotateLeft(num, bits)\n        // Integer.rotateRight(num, bits)\n\
  \        // Integer.signum(num)\n        // Integer.hashCode(num)\n        // Integer.toUnsignedString(num)\n\
  \        // Character.forDigit(num, radix)\n        // Character.digit(num, radix)\n\
  \        // Character.isUpperCase(c)\n        // Character.isLowerCase(c)\n    \
  \    // Character.isDigit(c)\n        // Character.isAlphabetic(c)\n        // Character.isLetter(c)\n\
  \        // Character.isWhitespace(c)\n        // Character.isSpaceChar(c)\n   \
  \     // Character.isISOControl(c)\n        // Character.toLowerCase(c)\n      \
  \  // Character.toUpperCase(c)\n        // Character.toString(c)\n        // Character.hashCode(c)\n\
  \        // Character.charCount(codePoint)\n        // Character.codePointAt(char1,\
  \ char2)\n        // Character.codePointBefore(char1, char2)\n        // Character.isSurrogatePair(char1,\
  \ char2"
- "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        if (array.size()\
  \ > 0) {\n            for (int i = 0; i < array.size(); i++) {\n               \
  \ sorted.add(array.get(i));\n            }\n            if ((array.get(0) + array.get(array.size()\
  \ - 1)) % 2 == 0) {\n                Collections.sort(sorted, Collections.reverseOrder());\n\
  \            } else {\n                Collections.sort(sorted);\n            }\n\
  \        }\n        return sorted;"
- '        return null;'
- "        if (array.size() == 0) return array;\n        int first_index = array.get(0);\n\
  \        int last_index = array.get(array.size() - 1);\n        if ((first_index\
  \ + last_index) % 2 == 0) {\n            return new ArrayList<Integer>(array.stream().sorted(Collections.reverseOrder()).collect(Collectors.toList()));\n\
  \        } else {\n            return new ArrayList<Integer>(array.stream().sorted().collect(Collectors.toList()));\n\
  \        }"
- "        boolean isOdd = (array.get(0) + array.get(array.size() - 1)) % 2 == 1;\n\
  \        Comparator<Integer> c = isOdd ? Comparator.naturalOrder() : Comparator.reverseOrder();\n\
  \        Collections.sort(array, c);\n        return array;"
- '        return null;'
- "        ArrayList<Integer> aux = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ res = new ArrayList<Integer>();\n        aux.addAll(array);\n        int sum =\
  \ aux.get(0) + aux.get(aux.size() - 1);\n        if (sum % 2 == 0) {\n         \
  \   Collections.sort(aux, Collections.reverseOrder());\n        } else {\n     \
  \       Collections.sort(aux);\n        }\n        for (int i = 0; i < aux.size();\
  \ i++) {\n            res.add(aux.get(i));\n        }\n        return res;"
- "        if (array.size() == 0) {\n            return array;\n        }\n      \
  \  if (array.size() == 1) {\n            return array;\n        }\n        if (array.size()\
  \ == 2) {\n            if (array.get(0) > array.get(1)) {\n                Collections.swap(array,\
  \ 0, 1);\n            }\n            return array;\n        }\n        int headSum\
  \ = array.get(0) + array.get(array.size() - 1);\n        boolean isOdd = (headSum\
  \ % 2 == 1);\n        ArrayList<Integer> small = new ArrayList<Integer>();\n   \
  \     ArrayList<Integer> large = new ArrayList<Integer>();\n        for (int i =\
  \ 1; i < array.size() - 1; i++) {\n            if (array.get(i) > array.get(0))\
  \ {\n                large.add(array.get(i));\n            } else {\n          \
  \      small.add(array.get(i));\n            }\n        }\n        Collections.sort(small);\n\
  \        Collections.sort(large);\n        if (isOdd) {\n            Collections.reverse(large);\n\
  \        } else {\n            Collections.reverse(small);\n        }\n        ArrayList<Integer>\
  \ result = new ArrayList<Integer>();\n        result.add(array.get(0));\n      \
  \  result.addAll(small);\n        result.addAll(large);\n        result.add(array.get(array.size()\
  \ - 1));\n        return result;"
- "      int first = array.get(0);\n      int last = array.get(array.size() - 1);\n\
  \      int sum = first + last;\n      if (sum % 2 == 0) {\n        Collections.sort(array,\
  \ Collections.reverseOrder());\n      } else {\n        Collections.sort(array);\n\
  \      }\n      return array;"
- "        ArrayList<Integer> ret = new ArrayList<>();\n        if (array.size() ==\
  \ 0) return ret;\n        if (array.size() == 1) {\n            ret.add(array.get(0));\n\
  \            return ret;\n        }\n        int odd = array.get(0) + array.get(array.size()\
  \ - 1);\n        Comparator<Integer> cmp = (odd % 2 == 0) ? Integer::compareTo :\
  \ Collections.reverseOrder();\n        array.sort(cmp);\n        return array;"
- "        // The answer:\n        // The solution is to use a number of Java 8 features\
  \ and to write the solution as Java 8 idiomatic code.\n        // Specifically,\
  \ I used a Stream with a lambda expression, converted to an ArrayList and then invoked\
  \ the\n        // Collections.sort() method.\n        // Note:\n        // * I also\
  \ used IntPredicate and IntBinaryOperator.\n        // * The code uses == Integer.sum()\
  \ which is a short-hand for Integer.sum().equals() which is the same\n        //\
  \   as the code Integer.sum().intValue() == 0.\n        // * The code also uses\
  \ Collections.sort() with a lambda expression which is a Java 8 feature.\n     \
  \   // * The code also uses IntPredicate which is a Java 8 feature.\n        //\
  \ * The code also uses IntBinaryOperator which is a Java 8 feature.\n        //\
  \ My comments:\n        // The solution uses Java 8 idiomatic code and a Stream\
  \ with a lambda expression.\n        // The code also uses IntPredicate and IntBinaryOperator.\n\
  \        // The code uses == Integer.sum() which is a short-hand for Integer.sum().equals()\
  \ which is the same\n        // as the code Integer.sum().intValue() == 0.\n   \
  \     // The code also uses Collections.sort() with a lambda expression which is\
  \ a Java 8 feature.\n        // The code also uses IntPredicate which is a Java\
  \ 8 feature.\n        // The code also uses IntBinaryOperator which is a Java 8\
  \ feature.\n        // * If you are not familiar with streams, you can go to https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html\n\
  \        //   which has a nice introduction to streams and the Stream API.\n   \
  \     // * If you are not familiar with java.util.function you can go to\n     \
  \   //   https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html\n\
  \        //   which has a nice introduction to java.util.function and the java.util.function\
  \ API.\n        // * If you are not familiar with java.util.function.IntPredicate\
  \ you can go to\n        //   https://docs.oracle."
- "        // TODO: Write code here\n        return array;"
- "        // Error Check\n        if (array == null) {\n            return null;\n\
  \        }\n        if (array.size() == 0) {\n            return array;\n      \
  \  }\n        // Get the first index value and last index value\n        int start\
  \ = array.get(0);\n        int end = array.get(array.size() - 1);\n        // By\
  \ default, we will sort in ascending order\n        boolean ascend = true;\n   \
  \     // Check the sum of start and end\n        if ((start + end) % 2 == 0) {\n\
  \            // If the sum is even, we will sort in descending order\n         \
  \   ascend = false;\n        }\n        // Copy the given array\n        ArrayList<Integer>\
  \ copy = new ArrayList<>(array);\n        // Sort the array in ascending or descending\
  \ order\n        Collections.sort(copy, (a, b) -> {\n            if (ascend) {\n\
  \                return a - b;\n            } else {\n                return b -\
  \ a;\n            }\n        });\n        // Return the sorted array\n        return\
  \ copy;"
- "        ArrayList<Integer> ans = new ArrayList<Integer>();\n        ans.addAll(array);\n\
  \        if (array.size() <= 1) {\n            return ans;\n        }\n        int\
  \ i = 0;\n        int j = array.size() - 1;\n        if ((array.get(i) + array.get(j))\
  \ % 2 == 0) {\n            ans.sort(Collections.reverseOrder());\n        } else\
  \ {\n            ans.sort(null);\n        }\n        return ans;"
- "        // iterate through the array, sort by sum(first, last) odd or even, keep\
  \ new array\n        ArrayList<Integer> sorted_array = new ArrayList<Integer>();\n\
  \        int odd_even = 0;\n        int index = 0;\n        int first = array.get(0);\n\
  \        int last = array.get(array.size() - 1);\n        odd_even = first + last;\n\
  \        if (odd_even % 2 == 0) {\n            // even, sort asc\n            Collections.sort(array);\n\
  \        } else {\n            // odd, sort desc\n            Collections.sort(array,\
  \ Collections.reverseOrder());\n        }\n        return array;"
- "        if (array.size() < 2) {\n            return array;\n        }\n       \
  \ int sum = array.get(0) + array.get(array.size() - 1);\n        Collections.sort(array);\n\
  \        if (sum % 2 == 0) {\n            Collections.reverse(array);\n        }\n\
  \        return array;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        if (array.size()\
  \ <= 1) {\n            return array;\n        } else {\n            // sort the\
  \ array\n            if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0)\
  \ {\n                Collections.sort(array, Collections.reverseOrder());\n    \
  \        } else {\n                Collections.sort(array);\n            }\n   \
  \         // return the array\n            return array;\n        }"
- "        int sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
  \ sortedArray = new ArrayList<>(array);\n        Collections.sort(sortedArray);\n\
  \        if (sum % 2 == 0) {\n            Collections.reverse(sortedArray);\n  \
  \      }\n        return sortedArray;"
- "        if (array.size() == 0) {\n            return array;\n        }\n      \
  \  if (array.size() == 1) {\n            return array;\n        }\n        if (array.size()\
  \ % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
  \        } else {\n            Collections.sort(array);\n        }\n        return\
  \ array;"
- "        // Write code here.\n        int first = array.get(0);\n        int last\
  \ = array.get(array.size() - 1);\n        boolean isEven = (first + last) % 2 ==\
  \ 0;\n        Comparator<Integer> comparator = isEven ? new EvenComparator() : new\
  \ OddComparator();\n        array.sort(comparator);\n        return array;"
- "        final long sumFirstAndLast = array.get(0) + array.get(array.size() - 1);\n\
  \        if (sumFirstAndLast % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
  \        } else {\n            Collections.sort(array);\n        }\n        return\
  \ array;"
- "        if (array.size() < 2) {\n            return array;\n        }\n\n     \
  \   // Your code here\n        return array;"
- "        if (array.size() <= 1) {\n            return array;\n        }\n      \
  \  // include\n        int m = array.get(0);\n        int n = array.get(array.size()\
  \ - 1);\n        int sum = m + n;\n        ArrayList<Integer> left = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> right = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ result = new ArrayList<Integer>();\n        int mid = (int)Math.floor(array.size()\
  \ / 2);\n        for (int i = 0; i < mid; i++) {\n            left.add(array.get(i));\n\
  \        }\n        for (int i = mid; i < array.size(); i++) {\n            right.add(array.get(i));\n\
  \        }\n        left = sortArray(left);\n        right = sortArray(right);\n\
  \        while (left.size() > 0 && right.size() > 0) {\n            if (sum % 2\
  \ == 0) {\n                if (left.get(0) < right.get(0)) {\n                 \
  \   result.add(right.get(0));\n                    right.remove(0);\n          \
  \      } else {\n                    result.add(left.get(0));\n                \
  \    left.remove(0);\n                }\n            } else {\n                if\
  \ (left.get(0) > right.get(0)) {\n                    result.add(right.get(0));\n\
  \                    right.remove(0);\n                } else {\n              \
  \      result.add(left.get(0));\n                    left.remove(0);\n         \
  \       }\n            }\n        }\n        while (left.size() > 0) {\n       \
  \     result.add(left.get(0));\n            left.remove(0);\n        }\n       \
  \ while (right.size() > 0) {\n            result.add(right.get(0));\n          \
  \  right.remove(0);\n        }\n        return result;"
- "        if (array.size() == 0) {\n            return array;\n        }\n      \
  \  if (array.size() == 1) {\n            return array;\n        }\n        if (array.size()\
  \ == 2) {\n            if (array.get(0) + array.get(1) % 2 == 0) {\n           \
  \     Collections.reverse(array);\n            }\n            return array;\n  \
  \      }\n        if (array.get(0) + array.get(array.size() - 1) % 2 == 0) {\n \
  \           Collections.sort(array, Collections.reverseOrder());\n        } else\
  \ {\n            Collections.sort(array);\n        }\n        return array;"
- "        ArrayList<Integer> answer = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < array.size(); i++) {\n            answer.add(array.get(i));\n     \
  \   }\n        if (array.size() % 2 == 0) {\n            Collections.sort(answer,\
  \ Collections.reverseOrder());\n        } else {\n            Collections.sort(answer);\n\
  \        }\n        return answer;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        if (array.size()\
  \ == 0) {\n            return result;\n        }\n        if (array.size() == 1)\
  \ {\n            result.add(array.get(0));\n            return result;\n       \
  \ }\n        boolean isEven = (array.get(0) + array.get(array.size() - 1)) % 2 ==\
  \ 0;\n        if (isEven) {\n            ArrayList<Integer> even = new ArrayList<>();\n\
  \            ArrayList<Integer> odd = new ArrayList<>();\n            for (int i\
  \ = 0; i < array.size(); i++) {\n                if (array.get(i) % 2 == 0) {\n\
  \                    even.add(array.get(i));\n                } else {\n       \
  \             odd.add(array.get(i));\n                }\n            }\n       \
  \     Collections.sort(even, Collections.reverseOrder());\n            Collections.sort(odd,\
  \ Collections.reverseOrder());\n            for (int i = 0; i < odd.size(); i++)\
  \ {\n                result.add(odd.get(i));\n            }\n            for (int\
  \ i = 0; i < even.size(); i++) {\n                result.add(even.get(i));\n   \
  \         }\n        } else {\n            ArrayList<Integer> even = new ArrayList<>();\n\
  \            ArrayList<Integer> odd = new ArrayList<>();\n            for (int i\
  \ = 0; i < array.size(); i++) {\n                if (array.get(i) % 2 == 0) {\n\
  \                    even.add(array.get(i));\n                } else {\n       \
  \             odd.add(array.get(i));\n                }\n            }\n       \
  \     Collections.sort(even);\n            Collections.sort(odd);\n            for\
  \ (int i = 0; i < odd.size(); i++) {\n                result.add(odd.get(i));\n\
  \            }\n            for (int i = 0; i < even.size(); i++) {\n          \
  \      result.add(even.get(i));\n            }\n        }\n        return result;"
- "        ArrayList<Integer> out = new ArrayList<Integer>();\n        out.addAll(array);\n\
  \        int start = array.get(0);\n        int end = array.get(array.size() - 1);\n\
  \        if ((start + end) % 2 == 0) {\n            Collections.sort(out, Collections.reverseOrder());\n\
  \        } else {\n            Collections.sort(out);\n        }\n        return\
  \ out;"
- "        if (array.size() == 0) {\n            return array;\n        }\n      \
  \  if (array.size() == 1) {\n            return array;\n        }\n        if (array.size()\
  \ > 1) {\n            int first = array.get(0);\n            int last = array.get(array.size()\
  \ - 1);\n            int sum = first + last;\n            if (sum % 2 == 0) {\n\
  \                // even\n                array.sort(Collections.reverseOrder());\n\
  \            } else {\n                // odd\n                array.sort(Collections.reverseOrder());\n\
  \            }\n        }\n        return array;"
- "        boolean isOdd = false;\n        if (array.size() == 0) return array;\n\
  \        if (array.size() == 1) return array;\n        if (isOdd) {\n          \
  \  Collections.sort(array);\n        } else {\n            array.sort(Collections.reverseOrder());\n\
  \        }\n        return array;"
- "        if (array.size() == 0) return array;\n        int sum = array.get(0) +\
  \ array.get(array.size() - 1);\n        Collections.sort(array);\n        if (sum\
  \ % 2 == 0) {\n            Collections.reverse(array);\n        }\n        return\
  \ array;"
- "        if (array.size() <= 1) {\n            return array;\n        }\n      \
  \  int first = array.get(0);\n        int last = array.get(array.size() - 1);\n\
  \        if ((first + last) % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
  \        } else {\n            Collections.sort(array);\n        }\n        return\
  \ array;"
- "        if (array.size() == 0) {\n            return array;\n        }\n      \
  \  if (array.size() == 1) {\n            return array;\n        }\n        if (array.size()\
  \ == 2) {\n            if (array.get(0) > array.get(1)) {\n                array.set(0,\
  \ array.get(0) + array.get(1));\n                array.set(1, array.get(0) - array.get(1));\n\
  \                array.set(0, array.get(0) - array.get(1));\n            }\n   \
  \         return array;\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
  \        int sum = array.get(0) + array.get(array.size() - 1);\n        if (sum\
  \ % 2 == 0) {\n            Arrays.sort(array.toArray(), Collections.reverseOrder());\n\
  \        } else {\n            Arrays.sort(array.toArray());\n        }\n      \
  \  for (int i = 0; i < array.size(); i++) {\n            result.add(array.get(i));\n\
  \        }\n        return result;"
- "        // 1. Sort the array using Arrays.sort\n        Collections.sort(array);\n\
  \        // 2. Check if the sum(first index value, last index value) is odd or even\n\
  \        int sum = array.get(0) + array.get(array.size() - 1);\n        // 3. Reverse\
  \ the sorted array, if the sum is even\n        if (sum % 2 == 0) {\n          \
  \  Collections.reverse(array);\n        }\n        return array;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // Your\
  \ code here.\n        return result;"
- "      int num = 0;\n      if (array.isEmpty()) {\n        return array;\n     \
  \ }\n      for (int i = 0; i < array.size(); i++) {\n        num += array.get(i);\n\
  \      }\n      if (num % 2 == 0) {\n        Collections.sort(array, Collections.reverseOrder());\n\
  \      } else {\n        Collections.sort(array);\n      }\n      return array;"
- "        ArrayList<Integer> ans = new ArrayList<Integer>();\n        ans.addAll(array);\n\
  \        if (array.size() == 0) {\n            return ans;\n        }\n        if\
  \ (array.size() == 1) {\n            return ans;\n        }\n        if ((array.get(0)\
  \ + array.get(array.size() - 1)) % 2 == 0) {\n            Collections.sort(ans,\
  \ Collections.reverseOrder());\n        } else {\n            Collections.sort(ans);\n\
  \        }\n        return ans;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        if (array.size()\
  \ == 0) {\n            return result;\n        }\n        result.addAll(array);\n\
  \        if (array.size() > 1) {\n            boolean even = (array.get(0) + array.get(array.size()\
  \ - 1)) % 2 == 0;\n            Comparator<Integer> comparator = even ? Collections.reverseOrder()\
  \ : Collections.naturalOrder();\n            Collections.sort(result, comparator);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> list = new ArrayList<Integer>();\n        list.addAll(array);\n\
  \        int low = 0;\n        int high = list.size() - 1;\n        if (low + high\
  \ % 2 == 0) {\n            Collections.sort(list, Collections.reverseOrder());\n\
  \        } else {\n            Collections.sort(list);\n        }\n        return\
  \ list;"
- "        int left = array.get(0);\n        int right = array.get(array.size() -\
  \ 1);\n        if ((left + right) % 2 == 0) {\n            Collections.sort(array,\
  \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
  \        }\n        return array;"
- "        if (array.size() == 0) {\n            return array;\n        } else if\
  \ (array.size() == 1) {\n            return array;\n        } else {\n         \
  \   ArrayList<Integer> temp = new ArrayList<Integer>();\n            temp.addAll(array);\n\
  \            Collections.sort(temp);\n            if ((array.get(0) + array.get(array.size()\
  \ - 1)) % 2 == 0) {\n                Collections.reverse(temp);\n            }\n\
  \            return temp;\n        }"
- "        ArrayList<Integer> result = new ArrayList<>();\n        if (array.size()\
  \ == 0) return result;\n        if (array.size() == 1) {\n            result.add(array.get(0));\n\
  \            return result;\n        }\n        if ((array.get(0) + array.get(array.size()\
  \ - 1)) % 2 == 0) {\n            for (int i = array.size() - 1; i >= 0; i--) {\n\
  \                result.add(array.get(i));\n            }\n        } else {\n  \
  \          for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n\
  \            }\n        }\n        return result;"
- "        ArrayList<Integer> copy = new ArrayList<>(array);\n        if (array.size()\
  \ == 0) return copy;\n        int sum = array.get(0) + array.get(array.size() -\
  \ 1);\n        boolean sortDescending = sum % 2 == 0;\n        Collections.sort(copy,\
  \ new Comparator<Integer>() {\n            @Override\n            public int compare(Integer\
  \ o1, Integer o2) {\n                if (sortDescending) return o2 - o1;\n     \
  \           else return o1 - o2;\n            }\n        });\n        return copy;"
- "        ArrayList<Integer> cp = new ArrayList<>(array);\n        Integer first\
  \ = cp.get(0);\n        Integer last = cp.get(cp.size() - 1);\n        if ((first\
  \ + last) % 2 == 0) {\n            cp.sort(Collections.reverseOrder());\n      \
  \  } else {\n            cp.sort(null);\n        }\n        return cp;"
- "        // Java 8 : Lambda expressions\n        ArrayList<Integer> newList = new\
  \ ArrayList<Integer>(array);\n        // https://stackoverflow.com/questions/11410256/sorting-a-java-arraylist-with-sortsort-sort\n\
  \        // Collections.sort(newList, (num1, num2) -> Integer.compare(num1, num2));\n\
  \        if (array.size() != 0) {\n            if ((array.get(0) + array.get(array.size()\
  \ - 1)) % 2 == 0) {\n                Collections.sort(newList, Collections.reverseOrder());\n\
  \            } else {\n                Collections.sort(newList);\n            }\n\
  \        }\n        return newList;"
- "        // returns a copy of the given array after sorting\n        // you will\
  \ sort the given array in ascending order if the sum( first index value, last index\
  \ value) is odd,\n        // or sort it in descending order if the sum( first index\
  \ value, last index value) is even.\n        ArrayList<Integer> copy = new ArrayList<Integer>(array);\n\
  \        if (array.size() <= 1) {\n            return copy;\n        } else {\n\
  \            if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n    \
  \            // sort in descending order\n                for (int i = 0; i < copy.size();\
  \ i++) {\n                    for (int j = 0; j < copy.size() - 1; j++) {\n    \
  \                    if (copy.get(j) < copy.get(j + 1)) {\n                    \
  \        // swap(copy[j], copy[j + 1]);\n                            int temp =\
  \ copy.get(j);\n                            copy.set(j, copy.get(j + 1));\n    \
  \                        copy.set(j + 1, temp);\n                        }\n   \
  \                 }\n                }\n            } else {\n                //\
  \ sort in ascending order\n                for (int i = 0; i < copy.size(); i++)\
  \ {\n                    for (int j = 0; j < copy.size() - 1; j++) {\n         \
  \               if (copy.get(j) > copy.get(j + 1)) {\n                         \
  \   // swap(copy[j], copy[j + 1]);\n                            int temp = copy.get(j);\n\
  \                            copy.set(j, copy.get(j + 1));\n                   \
  \         copy.set(j + 1, temp);\n                        }\n                  \
  \  }\n                }\n            }\n        }\n        return copy;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        Integer sumOfFirstAndLastIndex\
  \ = array.get(0) + array.get(array.size() - 1);\n        if (sumOfFirstAndLastIndex\
  \ % 2 == 0) {\n            // even\n            array.sort(Comparator.reverseOrder());\n\
  \        } else {\n            // odd\n            array.sort(Comparator.naturalOrder());\n\
  \        }\n        return array;"
- "        System.out.println(\"given: \" + array);\n        ArrayList<Integer> copyArray\
  \ = (ArrayList<Integer>) array.clone();\n        if (array.size() == 0) {\n    \
  \        return array;\n        }\n        if (array.size() == 1) {\n          \
  \  return array;\n        }\n        if (array.size() == 2) {\n            if (array.get(0)\
  \ > array.get(1)) {\n                Collections.swap(array, 0, 1);\n          \
  \  }\n            return array;\n        }\n        int i = 0;\n        int j =\
  \ array.size() - 1;\n        while (i < j) {\n            if (array.get(i) > array.get(j))\
  \ {\n                Collections.swap(array, i, j);\n            }\n           \
  \ i++;\n            j--;\n        }\n        System.out.println(\"return: \" + array);\n\
  \        return array;"
- "        ArrayList<Integer> copy = new ArrayList<Integer>(array);\n        copy.sort(new\
  \ Comparator<Integer>() {\n            @Override\n            public int compare(Integer\
  \ i1, Integer i2) {\n                int cmp = (array.get(0) + array.get(array.size()\
  \ - 1)) % 2;\n                return cmp == 0 ? -1 * Integer.compare(i1, i2) : Integer.compare(i1,\
  \ i2);\n            }\n        });\n        return copy;"
- "        // Your code here\n        int n = array.size();\n        if (n <= 1) return\
  \ array;\n        if ((array.get(0) + array.get(n - 1)) % 2 == 0) {\n          \
  \  Collections.sort(array, Collections.reverseOrder());\n        } else {\n    \
  \        Collections.sort(array);\n        }\n        return array;"
- "        int[] temp = new int[array.size()];\n        array.toArray(temp);\n   \
  \     Arrays.sort(temp);\n        if (temp.length > 1 && (temp[0] + temp[temp.length\
  \ - 1]) % 2 == 0) {\n            array.clear();\n            for (int i = temp.length\
  \ - 1; i >= 0; i--) {\n                array.add(temp[i]);\n            }\n    \
  \    } else {\n            array.clear();\n            for (int i = 0; i < temp.length;\
  \ i++) {\n                array.add(temp[i]);\n            }\n        }\n      \
  \  return array;"
- "        int first = array.get(0);\n        int last = array.get(array.size() -\
  \ 1);\n        if ((first + last) % 2 == 0) {\n            Collections.sort(array,\
  \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
  \        }\n        return array;"
- "        if (array.size() == 0) return array;\n        if (array.size() == 1) return\
  \ array;\n        int first = array.get(0);\n        int last = array.get(array.size()\
  \ - 1);\n        if ((first + last) % 2 == 0) {\n            Collections.sort(array,\
  \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
  \        }\n        return array;"
- "        int len = array.size();\n        // odd\n        // if (len == 0 || len\
  \ == 1) {\n        //     return array;\n        // }\n        // if ((array.get(0)\
  \ + array.get(len - 1)) % 2 == 1) {\n        //     Collections.sort(array);\n \
  \       // } else {\n        //     Collections.sort(array, Collections.reverseOrder());\n\
  \        // }\n        // return array;\n        // simpler and faster\n       \
  \ Collections.sort(array);\n        if ((array.get(0) + array.get(len - 1)) % 2\
  \ == 0) {\n            Collections.reverse(array);\n        }\n        return array;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int size\
  \ = array.size();\n        if (size == 0) {\n            return result;\n      \
  \  }\n        if (size == 1) {\n            result.add(array.get(0));\n        \
  \    return result;\n        }\n        // sort the array.\n        Collections.sort(array);\n\
  \        // get first value.\n        int first_value = array.get(0);\n        //\
  \ get last value.\n        int last_value = array.get(size - 1);\n        // get\
  \ the sum.\n        int sum = first_value + last_value;\n        if (sum % 2 ==\
  \ 0) {\n            // add it from last to first.\n            for (int i = size\
  \ - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n\
  \        } else {\n            // add it from first to last.\n            for (int\
  \ i = 0; i < size; i++) {\n                result.add(array.get(i));\n         \
  \   }\n        }\n        return result;"
- "        int first = array.get(0);\n        int last = array.get(array.size() -\
  \ 1);\n        int sum = first + last;\n        if (sum % 2 == 0) {\n          \
  \  Collections.sort(array, Collections.reverseOrder());\n        } else {\n    \
  \        Collections.sort(array);\n        }\n        return array;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        if (array.size()\
  \ == 0) {\n            return result;\n        }\n        if (array.size() == 1)\
  \ {\n            result.add(array.get(0));\n            return result;\n       \
  \ }\n        int firstIndex = array.get(0);\n        int lastIndex = array.get(array.size()\
  \ - 1);\n        int sum = firstIndex + lastIndex;\n        if (sum % 2 == 0) {\n\
  \            Arrays.sort(array.toArray());\n            Collections.reverse(array);\n\
  \        } else {\n            Arrays.sort(array.toArray());\n        }\n      \
  \  return array;"
- "        ArrayList<Integer> array_copy = new ArrayList<>(array);\n        int odd_index\
  \ = 0;\n        int even_index = array_copy.size() - 1;\n        int[] sorted_array\
  \ = new int[array_copy.size()];\n        int sum = array_copy.get(0) + array_copy.get(array_copy.size()\
  \ - 1);\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array_copy.size();\
  \ i++) {\n                sorted_array[even_index] = array_copy.get(i);\n      \
  \          even_index--;\n            }\n        } else {\n            for (int\
  \ i = 0; i < array_copy.size(); i++) {\n                sorted_array[odd_index]\
  \ = array_copy.get(i);\n                odd_index++;\n            }\n        }\n\
  \        ArrayList<Integer> result = new ArrayList<>();\n        for (int i = 0;\
  \ i < sorted_array.length; i++) {\n            result.add(sorted_array[i]);\n  \
  \      }\n        return result;"
- "        int len = array.size();\n        int i = 0;\n        int j = len - 1;\n\
  \        int first = array.get(i);\n        int last = array.get(j);\n        boolean\
  \ isOdd = (first + last) % 2 == 1;\n        // System.out.println(isOdd);\n    \
  \    ArrayList<Integer> ans = new ArrayList<Integer>();\n        while (i < j) {\n\
  \            if (isOdd) {\n                if (array.get(i) > array.get(j)) {\n\
  \                    ans.add(array.get(i));\n                    i++;\n        \
  \        } else {\n                    ans.add(array.get(j));\n                \
  \    j--;\n                }\n            } else {\n                if (array.get(i)\
  \ < array.get(j)) {\n                    ans.add(array.get(i));\n              \
  \      i++;\n                } else {\n                    ans.add(array.get(j));\n\
  \                    j--;\n                }\n            }\n        }\n       \
  \ if (i == j) {\n            ans.add(array.get(i));\n        }\n        Collections.reverse(ans);\n\
  \        return ans;"
- "        // Your code is here...\n        Integer sum = array.get(0) + array.get(array.size()\
  \ - 1);\n        ArrayList<Integer> arr = new ArrayList<Integer>();\n        arr.addAll(array);\n\
  \        if (sum % 2 == 0) {\n            Collections.sort(arr, Collections.reverseOrder());\n\
  \        } else {\n            Collections.sort(arr);\n        }\n        return\
  \ arr;"
- "        System.out.println(\"sortArray()\");\n        if (array.size() == 0) {\n\
  \            return array;\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
  \        int firstIndex = array.get(0);\n        int lastIndex = array.get(array.size()\
  \ - 1);\n        int sum = firstIndex + lastIndex;\n        boolean isAscending\
  \ = false;\n        if (sum % 2 == 0) {\n            isAscending = true;\n     \
  \   }\n        for (int i = 0; i < array.size(); i++) {\n            result.add(i,\
  \ array.get(i));\n        }\n        int temp = 0;\n        for (int i = 0; i <\
  \ result.size(); i++) {\n            for (int j = i + 1; j < result.size(); j++)\
  \ {\n                if (isAscending) {\n                    if (result.get(i) >\
  \ result.get(j)) {\n                        temp = result.get(i);\n            \
  \            result.set(i, result.get(j));\n                        result.set(j,\
  \ temp);\n                    }\n                } else {\n                    if\
  \ (result.get(i) < result.get(j)) {\n                        temp = result.get(i);\n\
  \                        result.set(i, result.get(j));\n                       \
  \ result.set(j, temp);\n                    }\n                }\n            }\n\
  \        }\n        return result;"
- "        int sum = array.get(0) + array.get(array.size() - 1);\n        boolean\
  \ isDescending = sum % 2 == 0;\n        // Quick sort\n        return quickSort(array,\
  \ 0, array.size() - 1, isDescending);"
- "        ArrayList<Integer> sortedArray = new ArrayList<Integer>();\n        int[]\
  \ arrayIndices = new int[array.size()];\n        for (int i = 0; i < array.size();\
  \ i++)\n            arrayIndices[i] = i;\n        if (array.size() > 0) {\n    \
  \        boolean isEven;\n            if ((array.get(0) + array.get(array.size()\
  \ - 1)) % 2 == 0)\n                isEven = true;\n            else\n          \
  \      isEven = false;\n            int temp, tempInd;\n            for (int i =\
  \ 0; i < array.size(); i++) {\n                for (int j = 0; j < array.size()\
  \ - 1; j++) {\n                    if (isEven) {\n                        if (array.get(arrayIndices[j])\
  \ < array.get(arrayIndices[j + 1])) {\n                            temp = array.get(arrayIndices[j]);\n\
  \                            array.set(arrayIndices[j], array.get(arrayIndices[j\
  \ + 1]));\n                            array.set(arrayIndices[j + 1], temp);\n \
  \                           tempInd = arrayIndices[j];\n                       \
  \     arrayIndices[j] = arrayIndices[j + 1];\n                            arrayIndices[j\
  \ + 1] = tempInd;\n                        }\n                    } else {\n   \
  \                     if (array.get(arrayIndices[j]) > array.get(arrayIndices[j\
  \ + 1])) {\n                            temp = array.get(arrayIndices[j]);\n   \
  \                         array.set(arrayIndices[j], array.get(arrayIndices[j +\
  \ 1]));\n                            array.set(arrayIndices[j + 1], temp);\n   \
  \                         tempInd = arrayIndices[j];\n                         \
  \   arrayIndices[j] = arrayIndices[j + 1];\n                            arrayIndices[j\
  \ + 1] = tempInd;\n                        }\n                    }\n          \
  \      }\n            }\n        }\n        return array;"
- "        // Type your solution here\n        int sum_index = array.get(0) + array.get(array.size()\
  \ - 1);\n        if (sum_index % 2 == 0) {\n            Collections.sort(array,\
  \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
  \        }\n        return array;"
- "        ArrayList<Integer> array1 = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ array2 = new ArrayList<Integer>();\n        ArrayList<Integer> array3 = new ArrayList<Integer>();\n\
  \        if (array.size() == 0) {\n            return array;\n        }\n      \
  \  if (array.size() == 1) {\n            return array;\n        }\n        if (array.size()\
  \ > 1) {\n            int sum = array.get(0) + array.get(array.size() - 1);\n  \
  \          if (sum % 2 == 0) {\n                Collections.sort(array, Collections.reverseOrder());\n\
  \                return array;\n            }\n            if (sum % 2 != 0) {\n\
  \                Collections.sort(array);\n                return array;\n     \
  \       }\n        }\n        return array;"
- '        return null;'
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        result.addAll(array);\n\
  \        Integer first = result.get(0);\n        Integer last = result.get(result.size()\
  \ - 1);\n        boolean direction = ((first + last) % 2) == 0;\n        if (direction)\
  \ {\n            Collections.sort(result, Collections.reverseOrder());\n       \
  \ } else {\n            Collections.sort(result);\n        }\n        return result;"
- "        if (array.size() == 0) return array;\n        if (array.size() == 1) return\
  \ array;\n        int sum = array.get(0) + array.get(array.size() - 1);\n      \
  \  if (sum % 2 == 0) {\n            array.sort(Collections.reverseOrder());\n  \
  \      } else {\n            array.sort(null);\n        }\n        return array;"
- "        ArrayList<Integer> newArray = new ArrayList<Integer>();\n        newArray.addAll(array);\n\
  \        if (newArray.size() == 0) {\n            return newArray;\n        }\n\
  \        if (newArray.size() == 1) {\n            return newArray;\n        }\n\
  \        if (newArray.get(0) + newArray.get(newArray.size() - 1) % 2 == 0) {\n \
  \           Collections.sort(newArray, Collections.reverseOrder());\n        } else\
  \ {\n            Collections.sort(newArray);\n        }\n        return newArray;"
- "        int firstIndex = array.get(0);\n        int lastIndex = array.get(array.size()\
  \ - 1);\n        int sum = firstIndex + lastIndex;\n        ArrayList<Integer> tempArray\
  \ = new ArrayList<Integer>();\n        for (int i = 0; i < array.size(); i++) {\n\
  \            tempArray.add(array.get(i));\n        }\n        if (sum % 2 == 0)\
  \ {\n            // descending order\n            Collections.sort(tempArray, Collections.reverseOrder());\n\
  \        } else {\n            // ascending order\n            Collections.sort(tempArray);\n\
  \        }\n        return tempArray;"
- "        ArrayList<Integer> ans = new ArrayList<Integer>();\n        if (array.size()\
  \ == 0) {\n            return ans;\n        }\n        if (array.size() == 1) {\n\
  \            ans.add(array.get(0));\n            return ans;\n        }\n      \
  \  int sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 ==\
  \ 0) {\n            Collections.sort(array, Collections.reverseOrder());\n     \
  \   } else {\n            Collections.sort(array);\n        }\n        return array;"
- "        ArrayList<Integer> sortedArray = new ArrayList<Integer>();\n        if(array.size()\
  \ > 0) {\n            int first = array.get(0);\n            int last = array.get(array.size()\
  \ - 1);\n            int compare = (first + last) % 2;\n            if(compare ==\
  \ 0) {\n                Collections.sort(array, Collections.reverseOrder());\n \
  \           } else {\n                Collections.sort(array);\n            }\n\
  \            sortedArray = array;\n        }\n        return sortedArray;"
- "        if (array.size() == 0) {\n            return array;\n        } else if\
  \ (array.size() == 1) {\n            return array;\n        } else {\n         \
  \   int[] copy = new int[array.size()];\n            copy[0] = array.get(0);\n \
  \           copy[array.size() - 1] = array.get(array.size() - 1);\n            int\
  \ sum = copy[0] + copy[array.size() - 1];\n            int[] sorted = new int[array.size()];\n\
  \            if (sum % 2 == 0) {\n                for (int i = 0; i < array.size();\
  \ i++) {\n                    sorted[i] = array.get(array.size() - i - 1);\n   \
  \             }\n            } else {\n                for (int i = 0; i < array.size();\
  \ i++) {\n                    sorted[i] = array.get(i);\n                }\n   \
  \         }\n            return new ArrayList<Integer>(Arrays.stream(sorted).boxed().collect(Collectors.toList()));\n\
  \        }"
- '        return null;'
- "        ArrayList<Integer> a = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ b = new ArrayList<Integer>();\n        ArrayList<Integer> s = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < array.size(); i++) {\n            if (i % 2 == 0)\n\
  \                a.add(array.get(i));\n            else\n                b.add(array.get(i));\n\
  \        }\n        Collections.sort(a);\n        Collections.sort(b);\n       \
  \ for (int i = 0; i < a.size(); i++) {\n            s.add(a.get(i));\n         \
  \   if (i < b.size())\n                s.add(b.get(i));\n        }\n        return\
  \ s;"
- "        int sum = array.get(0) + array.get(array.size() - 1);\n        if (sum\
  \ % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
  \        } else {\n            Collections.sort(array);\n        }\n        return\
  \ array;"
- "        int sum = array.get(0) + array.get(array.size() - 1);\n        return (sum\
  \ % 2 == 0) ? (ArrayList<Integer>) array.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList())\
  \ : (ArrayList<Integer>) array.stream().sorted().collect(Collectors.toList());"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        boolean isOdd\
  \ = array.get(0) + array.get(array.size() - 1) % 2 == 1;\n        int idx = 0;\n\
  \        while (idx < array.size()) {\n            if (isOdd) {\n              \
  \  int max = Integer.MIN_VALUE;\n                int pos = -1;\n               \
  \ for (int i = idx; i < array.size(); i++) {\n                    if (array.get(i)\
  \ > max) {\n                        max = array.get(i);\n                      \
  \  pos = i;\n                    }\n                }\n                res.add(max);\n\
  \                idx = pos + 1;\n            } else {\n                int min =\
  \ Integer.MAX_VALUE;\n                int pos = -1;\n                for (int i\
  \ = idx; i < array.size(); i++) {\n                    if (array.get(i) < min) {\n\
  \                        min = array.get(i);\n                        pos = i;\n\
  \                    }\n                }\n                res.add(min);\n     \
  \           idx = pos + 1;\n            }\n        }\n        return res;"
- "        if (array.size() <= 1) {\n            return array;\n        }\n      \
  \  ArrayList<Integer> left = new ArrayList<>();\n        ArrayList<Integer> right\
  \ = new ArrayList<>();\n        for (int i = 1; i < array.size(); i++) {\n     \
  \       if (array.get(i) < array.get(0)) {\n                left.add(array.get(i));\n\
  \            } else {\n                right.add(array.get(i));\n            }\n\
  \        }\n        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n\
  \            right = sortArray(right);\n            left = sortArray(left);\n  \
  \          left.add(array.get(0));\n            left.addAll(right);\n          \
  \  return left;\n        } else {\n            right = sortArray(right);\n     \
  \       left = sortArray(left);\n            right.add(array.get(0));\n        \
  \    right.addAll(left);\n            return right;\n        }"
- "        var a = array.toArray(new Integer[0]);\n        if (array.size() > 0) {\n\
  \            for (int i = 0; i < a.length - 1; i++) {\n                for (int\
  \ j = 0; j < a.length - i - 1; j++) {\n                    var c = a[j].compareTo(a[j\
  \ + 1]);\n                    if ((array.get(0) + array.get(array.size() - 1)) %\
  \ 2 == 0) {\n                        if (c < 0) {\n                            var\
  \ t = a[j];\n                            a[j] = a[j + 1];\n                    \
  \        a[j + 1] = t;\n                        }\n                    } else {\n\
  \                        if (c > 0) {\n                            var t = a[j];\n\
  \                            a[j] = a[j + 1];\n                            a[j +\
  \ 1] = t;\n                        }\n                    }\n                }\n\
  \            }\n        }\n        return new ArrayList<Integer>(Arrays.asList(a));"
- "        int n = array.size();\n        if (n == 0) return array;\n        int first\
  \ = array.get(0);\n        int last = array.get(n - 1);\n        ArrayList<Integer>\
  \ sorted = new ArrayList<>(array);\n        boolean odd = (first + last) % 2 ==\
  \ 1;\n        sorted.sort(Comparator.comparingInt(Integer::intValue));\n       \
  \ if (odd) Collections.reverse(sorted);\n        return sorted;"
- "        Pair<Integer, Integer> p = pair(array.get(0), array.get(array.size() -\
  \ 1));\n        int[] range = range(array.size());\n        int[] order = {1, -1};\n\
  \        int ord = p.sum() % 2 == 0 ? 1 : 0;\n        IntStream.range(0, range.length)\n\
  \                .mapToObj(i -> new Pair<>(range[i], array.get(i)))\n          \
  \      .sorted(Comparator.comparingInt(a -> a.value * order[ord]))\n           \
  \     .mapToInt(a -> a.value)\n                .forEach(System.out::println);\n\
  \        return array;"
- "        // use stream to sum\n        int sum = array.stream().mapToInt(Integer::intValue).sum();\n\
  \        // use stream to sort\n        return (sum % 2 == 0) ? array.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toCollection(ArrayList::new))\
  \ : array.stream().sorted().collect(Collectors.toCollection(ArrayList::new));"
- "        int index_sum = array.get(0) + array.get(array.size() - 1);\n        if\
  \ (index_sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
  \        } else {\n            Collections.sort(array);\n        }\n        return\
  \ array;"
- "        ArrayList<Integer> ans = new ArrayList<Integer>();\n        if (array.size()\
  \ == 0) return ans;\n        if (array.size() == 1) {\n            ans.add(array.get(0));\n\
  \            return ans;\n        }\n        if ((array.get(0) + array.get(array.size()\
  \ - 1)) % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
  \        } else {\n            Collections.sort(array);\n        }\n        return\
  \ array;"
- "        ArrayList<Integer> newArray = new ArrayList<Integer>();\n        newArray.addAll(array);\n\
  \        // For odd sum total of first and last index values, we sort in ascending\
  \ order\n        if ((newArray.get(0) + newArray.get(newArray.size() - 1)) % 2 ==\
  \ 1) {\n            Collections.sort(newArray);\n        }\n        // For even\
  \ sum total of first and last index values, we sort in descending order\n      \
  \  else {\n            Collections.sort(newArray, Collections.reverseOrder());\n\
  \        }\n        return newArray;"
- "        if (array.size() == 0) {\n            return array;\n        }\n      \
  \  else if (array.size() == 1) {\n            return array;\n        }\n       \
  \ else {\n            ArrayList<Integer> result = new ArrayList<Integer>();\n  \
  \          if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n      \
  \          for (int i = array.size() - 1; i >= 0; i--) {\n                    result.add(array.get(i));\n\
  \                }\n            }\n            else {\n                for (int\
  \ i = 0; i < array.size(); i++) {\n                    result.add(array.get(i));\n\
  \                }\n            }\n            return result;\n        }"
- '        return null;'
- "        Pair<ArrayList<Integer>, ArrayList<Integer>> pair = array.stream().collect(Collectors.partitioningBy(n\
  \ -> n % 2 == 0)).entrySet().stream().map(e -> new Pair<>(e.getKey(), e.getValue())).collect(Collectors.toList()).get(0);\n\
  \        Collections.sort(pair.getValue0());\n        Collections.sort(pair.getValue1(),\
  \ Collections.reverseOrder());\n        ArrayList<Integer> result = new ArrayList<>();\n\
  \        for (int i = 0; i < pair.getValue0().size(); i++) {\n            result.add(pair.getValue0().get(i));\n\
  \            result.add(pair.getValue1().get(i));\n        }\n        if (array.size()\
  \ % 2 == 1) {\n            result.add(pair.getValue1().get(pair.getValue1().size()\
  \ - 1));\n        }\n        return result;"
- "        // your code here\n        long sum = 0;\n        if(array.size() != 0){\n\
  \            sum = array.get(0) + array.get(array.size() - 1);\n        }\n    \
  \    ArrayList<Integer> result = new ArrayList<Integer>();\n        if(sum % 2 ==\
  \ 0){\n            Collections.sort(array, Collections.reverseOrder());\n      \
  \  }\n        else{\n            Collections.sort(array);\n        }\n        return\
  \ array;"
- "        ArrayList<Integer> newArray = new ArrayList<>();\n        newArray.addAll(array);\n\
  \        newArray.sort(Comparator.naturalOrder());\n        if (array.get(0) + array.get(array.size()\
  \ - 1) % 2 == 0) {\n            Collections.reverse(newArray);\n        }\n    \
  \    return newArray;"
- "        int sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
  \ result = new ArrayList<>(array);\n        if (sum % 2 == 0) {\n            Collections.sort(result,\
  \ Collections.reverseOrder());\n        } else {\n            Collections.sort(result);\n\
  \        }\n        return result;"
- "        if (array.size() == 0) {\n            return array;\n        } else if\
  \ (array.size() == 1) {\n            return array;\n        } else {\n         \
  \   int first = array.get(0);\n            int last = array.get(array.size() - 1);\n\
  \            Integer[] array_ = array.toArray(new Integer[array.size()]);\n    \
  \        if ((first + last) % 2 == 0) {\n                Arrays.sort(array_, Collections.reverseOrder());\n\
  \            } else {\n                Arrays.sort(array_);\n            }\n   \
  \         ArrayList<Integer> ret = new ArrayList<>(Arrays.asList(array_));\n   \
  \         return ret;\n        }"
- "        if (array.size() == 0) {\n            return array;\n        } else if\
  \ (array.size() == 1) {\n            return array;\n        } else {\n         \
  \   ArrayList<Integer> sortedArray = new ArrayList<>();\n            int sum = array.get(0)\
  \ + array.get(array.size() - 1);\n            if (sum % 2 == 0) {\n            \
  \    Collections.sort(array, Collections.reverseOrder());\n            } else {\n\
  \                Collections.sort(array);\n            }\n            return array;\n\
  \        }"
- "        if (array.size() == 0) {\n            return array;\n        }\n      \
  \  int sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 ==\
  \ 0) {\n            Collections.sort(array, Collections.reverseOrder());\n     \
  \   } else {\n            Collections.sort(array);\n        }\n        return array;"
- '        return null;'
- "        if (array.size() == 0) {\n            return array;\n        }\n      \
  \  int first = array.get(0);\n        int last = array.get(array.size() - 1);\n\
  \        boolean isOdd = (first + last) % 2 == 1;\n        if (isOdd) {\n      \
  \      Collections.sort(array);\n        } else {\n            Collections.sort(array,\
  \ Collections.reverseOrder());\n        }\n        return array;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        boolean\
  \ first = array.get(0) < array.get(array.size() - 1);\n        for (int i = 0; i\
  \ < array.size(); i++) {\n            for (int j = i + 1; j < array.size(); j++)\
  \ {\n                if (first && array.get(i) > array.get(j)) {\n             \
  \       int tmp = array.get(i);\n                    array.set(i, array.get(j));\n\
  \                    array.set(j, tmp);\n                } else if (!first && array.get(i)\
  \ < array.get(j)) {\n                    int tmp = array.get(i);\n             \
  \       array.set(i, array.get(j));\n                    array.set(j, tmp);\n  \
  \              }\n            }\n        }\n        return array;"
- "        // Warning: time limit exceeded!\n        // int n = array.size();\n  \
  \      // if (n <= 1) {\n        //     return array;\n        // }\n        //\
  \ boolean isAscend = (array.get(0) + array.get(n - 1)) % 2 == 1;\n        // ArrayList<Integer>\
  \ result = new ArrayList<>();\n        // result.add(array.get(0));\n        //\
  \ for (int i = 1; i < n; i++) {\n        //     int val = array.get(i);\n      \
  \  //     if (isAscend) {\n        //         int j = 0;\n        //         for\
  \ (; j < result.size(); j++) {\n        //             if (val < result.get(j))\
  \ {\n        //                 break;\n        //             }\n        //   \
  \      }\n        //         result.add(j, val);\n        //     } else {\n    \
  \    //         int j = 0;\n        //         for (; j < result.size(); j++) {\n\
  \        //             if (val > result.get(j)) {\n        //                 break;\n\
  \        //             }\n        //         }\n        //         result.add(j,\
  \ val);\n        //     }\n        // }\n        // return result;\n        int\
  \ n = array.size();\n        if (n <= 1) {\n            return array;\n        }\n\
  \        boolean isAscend = (array.get(0) + array.get(n - 1)) % 2 == 1;\n      \
  \  array.sort(isAscend ? Comparator.naturalOrder() : Comparator.reverseOrder());\n\
  \        return array;"
- "        if (array.size() <= 1) {\n            return array;\n        }\n      \
  \  int x = array.get(0);\n        int y = array.get(array.size() - 1);\n       \
  \ int sum = x + y;\n        if (sum % 2 == 0) {\n            Collections.sort(array,\
  \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
  \        }\n        return array;"
- "        // Add your code here\n        //\n        //\n        //\n        //\n\
  \        return array;"
- "        ArrayList<Integer> s = (ArrayList<Integer>) array.clone();\n        Collections.sort(s);\n\
  \        if ((s.get(0) + s.get(s.size() - 1)) % 2 == 0)\n            Collections.reverse(s);\n\
  \        return s;"
- "        ArrayList<Integer> tempArray = new ArrayList<>();\n        if (array.size()\
  \ > 0) {\n            if (array.get(0) + array.get(array.size() - 1) % 2 == 0) {\n\
  \                array.sort(Collections.reverseOrder());\n            } else {\n\
  \                array.sort(Collections.reverseOrder());\n            }\n      \
  \  }\n        return array;"
- "        // Solution\n        if (array.size() == 0) return array;\n        int\
  \ first = array.get(0);\n        int last = array.get(array.size() - 1);\n     \
  \   int sum = first + last;\n        if (sum % 2 == 0) {\n            Collections.sort(array,\
  \ Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n\
  \        }\n        return array;"
- "        Pair<ArrayList<Integer>, ArrayList<Integer>> initial = array.stream().reduce(new\
  \ Pair<>(new ArrayList<>(), new ArrayList<>()), (p, n) -> {\n            p.getValue0().add(n);\n\
  \            p.getValue1().add(n);\n            return p;\n        }, (p1, p2) ->\
  \ {\n            p1.getValue0().addAll(p2.getValue0());\n            p1.getValue1().addAll(p2.getValue1());\n\
  \            return p1;\n        });\n        ArrayList<Integer> copy = initial.getValue0();\n\
  \        ArrayList<Integer> sorted = initial.getValue1();\n        Collections.sort(sorted);\n\
  \        if (copy.get(0) + copy.get(copy.size() - 1) % 2 == 0) {\n            Collections.reverse(sorted);\n\
  \        }\n        return sorted;"
- '        return null;'
- "        if (array.size() == 0) {\n            return array;\n        }\n      \
  \  // return array;\n        ArrayList<Integer> newArray = new ArrayList<>();\n\
  \        for (int i = 0; i < array.size(); i++) {\n            newArray.add(array.get(i));\n\
  \        }\n        // System.out.println(newArray);\n        if ((array.get(0)\
  \ + array.get(array.size() - 1)) % 2 == 0) {\n            // System.out.println(\"\
  Even\");\n            Collections.sort(newArray, Collections.reverseOrder());\n\
  \        } else {\n            // System.out.println(\"Odd\");\n            Collections.sort(newArray);\n\
  \        }\n        return newArray;"
- "        ArrayList<Integer> output = new ArrayList<Integer>();\n        Integer\
  \ firstIndex = 0;\n        Integer lastIndex = array.size() - 1;\n        Integer\
  \ sum = firstIndex + lastIndex;\n        Integer totalElements = array.size();\n\
  \        for (int counter = 0; counter < totalElements; counter++) {\n         \
  \   if (sum % 2 == 0) {\n                output.add(array.get(lastIndex));\n   \
  \             lastIndex--;\n            } else {\n                output.add(array.get(firstIndex));\n\
  \                firstIndex++;\n            }\n        }\n        return output;"
- "        ArrayList<Integer> arrayCopy = new ArrayList<>(array);\n        if (arrayCopy.size()\
  \ <= 1) {\n            return arrayCopy;\n        }\n        if ((arrayCopy.get(0)\
  \ + arrayCopy.get(arrayCopy.size() - 1)) % 2 == 0) {\n            Collections.sort(arrayCopy,\
  \ Collections.reverseOrder());\n        } else {\n            Collections.sort(arrayCopy);\n\
  \        }\n        return arrayCopy;"
- "        if (array.size() <= 1) {\n            return array;\n        }\n      \
  \  int firstIndex = array.get(0);\n        int lastIndex = array.get(array.size()\
  \ - 1);\n        int sum = firstIndex + lastIndex;\n        if (sum % 2 == 0) {\n\
  \            Collections.sort(array, Collections.reverseOrder());\n        } else\
  \ {\n            Collections.sort(array);\n        }\n        return array;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        if (array.size()\
  \ == 0) {\n            return result;\n        }\n        else if (array.size()\
  \ == 1) {\n            result.add(array.get(0));\n            return result;\n \
  \       }\n        else {\n            int sum = array.get(0) + array.get(array.size()\
  \ - 1);\n            if (sum % 2 == 0) {\n                result = sort(array, true);\n\
  \            }\n            else {\n                result = sort(array, false);\n\
  \            }\n            return result;\n        }"
- "        boolean isOdd = (array.get(0) + array.get(array.size() - 1)) % 2 == 1;\n\
  \        ArrayList<Integer> sorted = (ArrayList<Integer>) array.clone();\n     \
  \   sorted.sort(isOdd ? (a, b) -> b - a : (a, b) -> a - b);\n        return sorted;"
- "        // using java.util.stream\n        // use comparator to compare two numbers.\n\
  \        // use IntStream.range() to iterate the array.\n        // in the comparator,\
  \ pass in two index, compare the value of array[index1] and array[index2].\n   \
  \     // if the sum of the two index is odd, return the bigger value first.\n  \
  \      // if the sum of the two index is even, return the smaller value first.\n\
  \        // convert the int array to Integer arraylist.\n        // return the arraylist.\n\
  \        return IntStream.range(0, array.size())\n                .boxed()\n   \
  \             .sorted(Comparator.comparingInt(i -> array.get(i)))\n            \
  \    .map(array::get)\n                .collect(Collectors.toCollection(ArrayList::new));"
- "        long sum = array.get(0) + array.get(array.size() - 1);\n        array.sort((x,\
  \ y) -> {\n            if (sum % 2 == 0) {\n                return Integer.compare(y,\
  \ x);\n            } else {\n                return Integer.compare(x, y);\n   \
  \         }\n        });\n        return array;"
- '        return null;'
- "        int sum = array.get(0) + array.get(array.size() - 1);\n        ArrayList<Integer>\
  \ arrayCopy = new ArrayList<>(array);\n        if(sum % 2 == 0) {\n            Collections.sort(arrayCopy,\
  \ Collections.reverseOrder());\n        } else {\n            Collections.sort(arrayCopy);\n\
  \        }\n        return arrayCopy;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        if (array.size()\
  \ > 0) {\n            if (array.get(0) + array.get(array.size() - 1) % 2 == 0) {\n\
  \                Collections.sort(array, Collections.reverseOrder());\n        \
  \    } else {\n                Collections.sort(array);\n            }\n       \
  \     result = array;\n        }\n        return result;"
- "        int sum = array.get(0) + array.get(array.size() - 1);\n        if (sum\
  \ % 2 == 0) {\n            array.sort(Collections.reverseOrder());\n        } else\
  \ {\n            array.sort(Collections.reverseOrder());\n        }\n        return\
  \ array;"
- "        // Copy\n        ArrayList<Integer> copy = new ArrayList<Integer>(array);\n\
  \        // The lambda expression to sort with\n        Comparator<Integer> comparator\
  \ = ((sum(array.get(0), array.get(array.size() - 1)) % 2) == 0) ? (i1, i2) -> i2\
  \ - i1 : (i1, i2) -> i1 - i2;\n        // Sort\n        copy.sort(comparator);\n\
  \        // Result\n        return copy;"
- "        int first = array.get(0);\n        int last = array.get(array.size() -\
  \ 1);\n        int sum = first + last;\n        if (sum % 2 == 0) {\n          \
  \  array.sort(Comparator.reverseOrder());\n        } else {\n            array.sort(Comparator.naturalOrder());\n\
  \        }\n        return array;"
- "        // your code here\n        return array;"
- '        return new ArrayList<>();'
- "        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n      \
  \      sum += array.get(i);\n        }\n        boolean isOdd = sum % 2 == 1;\n\
  \        if (isOdd) {\n            Collections.sort(array);\n        } else {\n\
  \            Collections.sort(array, Collections.reverseOrder());\n        }\n \
  \       return array;"
- "        ArrayList<Integer> ret = (ArrayList<Integer>) array.clone();\n        if\
  \ (array.size() > 0) {\n            if ((array.get(0) + array.get(array.size() -\
  \ 1)) % 2 == 0) {\n                Collections.sort(ret, Collections.reverseOrder());\n\
  \            } else {\n                Collections.sort(ret);\n            }\n \
  \       }\n        return ret;"
- "        if (array.size() <= 1) {\n            return array;\n        }\n      \
  \  ArrayList<Integer> array2 = new ArrayList<Integer>();\n        array2.addAll(array);\n\
  \        int head = array2.get(0);\n        int tail = array2.get(array2.size()\
  \ - 1);\n        boolean isOdd = (head + tail) % 2 == 1;\n        Collections.sort(array2);\n\
  \        if (isOdd) {\n            Collections.reverse(array2);\n        }\n   \
  \     return array2;"
- "        int len = array.size();\n        int first = array.get(0);\n        int\
  \ last = array.get(len - 1);\n        ArrayList<Integer> sortedArray = new ArrayList<Integer>();\n\
  \        // ArrayList<Integer> originalArray = new ArrayList<Integer>();\n     \
  \   // for (int i = 0; i < len; i++) {\n        //     originalArray.add(array.get(i));\n\
  \        // }\n        if ((first + last) % 2 == 0) {\n            // even\n   \
  \         for (int i = 0; i < len; i++) {\n                int max = 0;\n      \
  \          int maxIndex = 0;\n                for (int j = 0; j < array.size();\
  \ j++) {\n                    if (array.get(j) > max) {\n                      \
  \  max = array.get(j);\n                        maxIndex = j;\n                \
  \    }\n                }\n                array.remove(maxIndex);\n           \
  \     sortedArray.add(max);\n            }\n        } else {\n            // odd\n\
  \            for (int i = 0; i < len; i++) {\n                int min = 0;\n   \
  \             int minIndex = 0;\n                for (int j = 0; j < array.size();\
  \ j++) {\n                    if (array.get(j) < min) {\n                      \
  \  min = array.get(j);\n                        minIndex = j;\n                \
  \    }\n                }\n                array.remove(minIndex);\n           \
  \     sortedArray.add(min);\n            }\n        }\n        return sortedArray;"
- "        if (array.size() == 0) {\n            return array;\n        }\n      \
  \  if (array.size() == 1) {\n            return array;\n        }\n        if (\
  \ (array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n            return sortEven(array);\n\
  \        } else {\n            return sortOdd(array);\n        }"
- "        int sum = array.get(0) + array.get(array.size() - 1);\n        if(sum %\
  \ 2 == 0) {\n            ArrayList<Integer> result = new ArrayList<>();\n      \
  \      for(int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n\
  \            }\n            return result;\n        }\n        else {\n        \
  \    return array;\n        }"
- "        if (array.size() <= 1) return array;\n        ArrayList<Integer> result\
  \ = new ArrayList<>();\n        int sum = array.get(0) + array.get(array.size()\
  \ - 1);\n        boolean isOdd = sum % 2 == 1;\n        if (isOdd) Collections.sort(array);\n\
  \        else Collections.sort(array, Collections.reverseOrder());\n        for\
  \ (int i = 0; i < array.size(); i++) {\n            result.add(array.get(i));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> x = new ArrayList<Integer>();\n        if (array.size()\
  \ == 0 || array.size() == 1) {\n            return array;\n        }\n        else\
  \ {\n            int sum = array.get(0) + array.get(array.size() - 1);\n       \
  \     if (sum % 2 == 0) {\n                x = array;\n                Collections.sort(x,\
  \ Collections.reverseOrder());\n                return x;\n            }\n     \
  \       else {\n                x = array;\n                Collections.sort(x);\n\
  \                return x;\n            }\n        }"
- "        // Write your code here\n        return null;"
- "        ArrayList<Integer> list = (ArrayList<Integer>) array.clone();\n       \
  \ Collections.sort(list);\n        if ((list.get(0) + list.get(list.size() - 1))\
  \ % 2 == 0) {\n            Collections.reverse(list);\n        }\n        return\
  \ list;"
- "        // array.size() == 0 => return array\n        if (array.size() == 0) {\n\
  \            return array;\n        }\n        // array.size() == 1 => return array\n\
  \        if (array.size() == 1) {\n            return array;\n        }\n      \
  \  // array.size() == 2 => return []\n        if (array.size() == 2) {\n       \
  \     return new ArrayList<Integer>();\n        }\n        // sort array and return\n\
  \        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n        \
  \    Collections.sort(array, Collections.reverseOrder());\n        } else {\n  \
  \          Collections.sort(array);\n        }\n        return array;"
- "        if (array.size() < 2) return array;\n        // Arrays.sort(array.toArray());\n\
  \        // Collections.sort(array);\n        // int first = array.get(0);\n   \
  \     // int last = array.get(array.size() - 1);\n        // if ((first + last)\
  \ % 2 == 0) {\n        //     Collections.reverse(array);\n        // }\n      \
  \  // return array;\n        // List<Integer> list = new ArrayList<Integer>(array);\n\
  \        // list.sort(null);\n        // if ((array.get(0) + array.get(array.size()\
  \ - 1)) % 2 == 0) {\n        //     Collections.reverse(list);\n        // }\n \
  \       // return (ArrayList<Integer>) list;\n        // ArrayList<Integer> list\
  \ = new ArrayList<Integer>(array);\n        // list.sort(null);\n        // if ((array.get(0)\
  \ + array.get(array.size() - 1)) % 2 == 0) {\n        //     Collections.reverse(list);\n\
  \        // }\n        // return list;\n        ArrayList<Integer> list = new ArrayList<Integer>(array);\n\
  \        list.sort(null);\n        if ((array.get(0) + array.get(array.size() -\
  \ 1)) % 2 == 0) {\n            Collections.reverse(list);\n        }\n        return\
  \ list;"
- "        ArrayList<Integer> arr = new ArrayList<>();\n        Collections.sort(array);\n\
  \        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n        \
  \    Collections.reverse(array);\n        }\n        return array;"
- "        ArrayList<Integer> copy = new ArrayList<Integer>(array);\n        if (array.size()\
  \ == 0) return copy;\n        else if (array.size() == 1) return copy;\n       \
  \ else {\n            if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0)\
  \ {\n                copy.sort(Collections.reverseOrder());\n            } else\
  \ {\n                copy.sort(Collections.reverseOrder());\n            }\n   \
  \     }\n        return copy;"
- "        if (array.size() > 1) {\n            int sum = array.get(0) + array.get(array.size()\
  \ - 1);\n            if (sum % 2 == 0) {\n                Collections.sort(array,\
  \ Collections.reverseOrder());\n            } else {\n                Collections.sort(array);\n\
  \            }\n        }\n        return array;"
- "        if (array.size() < 2) {\n            return array;\n        }\n       \
  \ ArrayList<Integer> result = new ArrayList<Integer>();\n        // add first element\
  \ to the result\n        result.add(array.get(0));\n        for (int i = 1; i <\
  \ array.size(); i++) {\n            if (sum(array.get(0), array.get(array.size()\
  \ - 1)) % 2 == 0) {\n                // sum is even, add elements to descending\
  \ order\n                if (array.get(i) > result.get(0)) {\n                 \
  \   result.add(0, array.get(i));\n                } else {\n                   \
  \ result.add(array.get(i));\n                }\n            } else {\n         \
  \       // sum is odd, add elements to ascending order\n                if (array.get(i)\
  \ < result.get(0)) {\n                    result.add(0, array.get(i));\n       \
  \         } else {\n                    result.add(array.get(i));\n            \
  \    }\n            }\n        }\n        return result;"
- "        if (array.size() == 0) {\n            return array;\n        } else if\
  \ (array.size() == 1) {\n            return array;\n        } else {\n         \
  \   if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n             \
  \   Collections.sort(array, Collections.reverseOrder());\n            } else {\n\
  \                Collections.sort(array);\n            }\n            return array;\n\
  \        }"
- "        // write your code here\n        ArrayList<Integer> sorted_array = new\
  \ ArrayList<Integer>();\n        int first_index = array.get(0);\n        int last_index\
  \ = array.get(array.size() - 1);\n        ArrayList<Integer> sorted_indices = new\
  \ ArrayList<Integer>();\n        sorted_indices.add(first_index);\n        sorted_indices.add(last_index);\n\
  \        // if (last_index - first_index % 2 == 0) {\n        if (sorted_indices.stream().mapToInt(i\
  \ -> i).sum() % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n\
  \        } else {\n            Collections.sort(array);\n        }\n        sorted_array\
  \ = array;\n        return sorted_array;"
- "        // TODO: your solution here\n        // array = new ArrayList<Integer>(array);\n\
  \        //int first = array.get(0);\n        //int last = array.get(array.size()-1);\n\
  \        //int total = first + last;\n        //if(total % 2 == 0){\n        //\
  \    array.sort(Comparator.reverseOrder());\n        //}\n        //else{\n    \
  \    //    array.sort(Comparator.naturalOrder());\n        //}\n        //return\
  \ array;\n        // COPIED FROM https://stackoverflow.com/questions/13469989/how-to-sort-in-both-ascending-and-descending-order\n\
  \        // BECAUSE BRAIN MELT\n        Collections.sort(array, new Comparator<Integer>()\
  \ {\n            @Override\n            public int compare(Integer a, Integer b)\
  \ {\n                return (a + b) % 2 == 0 ? b - a : a - b;\n            }\n \
  \       });\n        return array;"
- "        ArrayList<Integer> new_array = new ArrayList<Integer>();\n        new_array.addAll(array);\n\
  \        boolean odd = ((new_array.get(0) + new_array.get(new_array.size() - 1))\
  \ % 2 == 1);\n        if (odd) {\n            Collections.sort(new_array);\n   \
  \     } else {\n            Collections.sort(new_array, Collections.reverseOrder());\n\
  \        }\n        return new_array;"
language: java
name: HumanEval_88_sort_array
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given an array of non-negative integers, return a copy of\
  \ the given array after sorting,\n    // you will sort the given array in ascending\
  \ order if the sum( first index value, last index value) is odd,\n    // or sort\
  \ it in descending order if the sum( first index value, last index value) is even.\n\
  \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
  \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
  \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
  \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer>\
  \ array) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(sortArray((new\
  \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
  \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)5)))).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)4, (int)3, (int)0, (int)1, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)1, (int)2, (int)3, (int)4, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)4, (int)3, (int)0, (int)1, (int)5, (int)6)))).equals((new ArrayList<Integer>(Arrays.asList((int)6,\
  \ (int)5, (int)4, (int)3, (int)2, (int)1, (int)0)))));\n    assert(sortArray((new\
  \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)15,\
  \ (int)42, (int)87, (int)32, (int)11, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)11, (int)15, (int)32, (int)42, (int)87)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)21,\
  \ (int)14, (int)23, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)23,\
  \ (int)21, (int)14, (int)11)))));\n    }\n\n}\n"
