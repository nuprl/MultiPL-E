language: java
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> paren_list\
    \ = new ArrayList<Integer>();\n        int curr_paren_max = 0;\n        int max_paren_count\
    \ = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n          \
    \  if (paren_string.charAt(i) == '(') {\n                curr_paren_max++;\n \
    \               max_paren_count = Math.max(max_paren_count, curr_paren_max);\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                curr_paren_max--;\n\
    \            } else if (paren_string.charAt(i) == ' ') {\n                paren_list.add(max_paren_count);\n\
    \                max_paren_count = 0;\n                curr_paren_max = 0;\n \
    \           }\n        }\n        paren_list.add(max_paren_count);\n        return\
    \ paren_list;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011314
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> ans = new\
    \ ArrayList<Integer>();\n        int maxLevel = 0;\n        int level = 0;\n \
    \       for (int i = 0; i < paren_string.length(); i++) {\n            char c\
    \ = paren_string.charAt(i);\n            if (c == '(') level++;\n            else\
    \ if (c == ')') level--;\n            maxLevel = Math.max(maxLevel, level);\n\
    \            if (c == ' ') {\n                ans.add(maxLevel);\n           \
    \     maxLevel = 0;\n                level = 0;\n            }\n        }\n  \
    \      ans.add(maxLevel);\n        return ans;\n}\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011314
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        int depth = 0;\n        int\
    \ max_depth = 0;\n        int start_idx = 0;\n        int len = paren_string.length();\n\
    \        ArrayList<Integer> answer = new ArrayList<Integer>();\n        for (int\
    \ i = 0; i < len; i++) {\n            char c = paren_string.charAt(i);\n     \
    \       if (c == '(') {\n                depth++;\n                if (depth >\
    \ max_depth) {\n                    max_depth = depth;\n                }\n  \
    \          } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                answer.add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        answer.add(max_depth);\n\
    \        return answer;\n}\n    public static void main(String[] args) {\n   \
    \ assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011314
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        String[] parens_groups = paren_string.split(\"\
    \ \");\n        ArrayList<Integer> result = new ArrayList<Integer>();\n      \
    \  int counter = 0;\n        int max = 0;\n        for (String parens_group :\
    \ parens_groups) {\n            counter = 0;\n            max = 0;\n         \
    \   for (int i = 0; i < parens_group.length(); i++) {\n                char curr\
    \ = parens_group.charAt(i);\n                if (curr == '(') {\n            \
    \        counter++;\n                    if (counter > max) {\n              \
    \          max = counter;\n                    }\n                } else if (curr\
    \ == ')') {\n                    counter--;\n                }\n            }\n\
    \            result.add(max);\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011314
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        String[] groups = paren_string.split(\"\
    \ \");\n        ArrayList<Integer> max_depth = new ArrayList<Integer>();\n   \
    \     for (String group : groups) {\n            max_depth.add(parseSingleParenGroup(group));\n\
    \        }\n        return max_depth;\n}\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpldg6y8wd.java:18: error: cannot find symbol\n            max_depth.add(parseSingleParenGroup(group));\n\
    \                          ^\n  symbol:   method parseSingleParenGroup(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011314
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        String[] groups = paren_string.split(\"\
    \ \");\n        ArrayList<Integer> result = new ArrayList<Integer>();\n      \
    \  for (String g : groups) {\n            int max_nesting = 0;\n            int\
    \ nesting = 0;\n            for (int i = 0; i < g.length(); i++) {\n         \
    \       if (g.charAt(i) == '(') {\n                    nesting++;\n          \
    \          max_nesting = Math.max(max_nesting, nesting);\n                } else\
    \ if (g.charAt(i) == ')') {\n                    nesting--;\n                }\n\
    \            }\n            result.add(max_nesting);\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011314
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> ans = new\
    \ ArrayList<Integer>();\n        int cur_val = 0;\n        int max_val = 0;\n\
    \        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                cur_val++;\n                max_val = Math.max(max_val,\
    \ cur_val);\n            } else if (paren_string.charAt(i) == ')') {\n       \
    \         cur_val--;\n            } else if (paren_string.charAt(i) == ' ') {\n\
    \                ans.add(max_val);\n                max_val = 0;\n           \
    \     cur_val = 0;\n            }\n        }\n        ans.add(max_val);\n    \
    \    return ans;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011314
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // TODO: Implement this method\n\
    \        return null;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmp11wqfrhw.java:19)\n"
  stdout: ''
  timestamp: 1660011314
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // get rid of spaces\n   \
    \     paren_string = paren_string.replaceAll(\"\\\\s\", \"\");\n        ArrayList<Integer>\
    \ depths = new ArrayList<Integer>();\n        int start = 0;\n        while (start\
    \ < paren_string.length()) {\n            if (paren_string.charAt(start) == '(')\
    \ {\n                int end = paren_string.indexOf(')', start);\n           \
    \     depths.add(parseNestedParens(paren_string.substring(start, end + 1)));\n\
    \                start = end + 1;\n            } else {\n                start\
    \ += 1;\n            }\n        }\n        return depths;\n}\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo4qs99au.java:22: error: incompatible types: ArrayList<Integer>\
    \ cannot be converted to Integer\n                depths.add(parseNestedParens(paren_string.substring(start,\
    \ end + 1)));\n                                            ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011314
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> depths\
    \ = new ArrayList<Integer>();\n        int idx = 0;\n        while (idx < paren_string.length())\
    \ {\n            int depth = 0;\n            while (paren_string.charAt(idx) ==\
    \ ' ') {\n                idx++;\n            }\n            while (paren_string.charAt(idx)\
    \ == '(') {\n                depth++;\n                idx++;\n            }\n\
    \            depths.add(depth);\n            while (paren_string.charAt(idx) ==\
    \ ')') {\n                idx++;\n            }\n        }\n        return depths;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 27\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.parseNestedParens(tmpz_dnslvi.java:27)\n\
    \tat Problem.main(tmpz_dnslvi.java:34)\n"
  stdout: ''
  timestamp: 1660011314
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> nest_levels\
    \ = new ArrayList<Integer>();\n        String[] paren_groups = paren_string.split(\"\
    \ \");\n        for (String paren_group : paren_groups) {\n            int nest_level\
    \ = 0;\n            for (int i = 0; i < paren_group.length(); i++) {\n       \
    \         if (paren_group.charAt(i) == '(') {\n                    nest_level++;\n\
    \                }\n            }\n            nest_levels.add(nest_level);\n\
    \        }\n        return nest_levels;\n}\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps3mv8peb.java:29)\n"
  stdout: ''
  timestamp: 1660011314
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // REPLACE WITH YOUR CODE\n\
    \        return new ArrayList<Integer>();\n}\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6f8cgc9u.java:19)\n"
  stdout: ''
  timestamp: 1660011314
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int max_nest = 0;\n        int curr_nest\
    \ = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n          \
    \  if (paren_string.charAt(i) == '(') {\n                curr_nest++;\n      \
    \          max_nest = Math.max(max_nest, curr_nest);\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                curr_nest--;\n            } else if (paren_string.charAt(i)\
    \ == ' ') {\n                result.add(max_nest);\n                max_nest =\
    \ 0;\n                curr_nest = 0;\n            }\n        }\n        result.add(max_nest);\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011314
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int open_parens = 0;\n        int close_parens\
    \ = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n          \
    \  if (paren_string.charAt(i) == '(') {\n                open_parens++;\n    \
    \        } else if (paren_string.charAt(i) == ')') {\n                close_parens++;\n\
    \            } else if (paren_string.charAt(i) == ' ') {\n                if (open_parens\
    \ != close_parens) {\n                    System.out.println(\"Error: mismatched\
    \ parentheses.\");\n                    return null;\n                }\n    \
    \            result.add(open_parens);\n                open_parens = 0;\n    \
    \            close_parens = 0;\n            }\n        }\n        if (open_parens\
    \ != close_parens) {\n            System.out.println(\"Error: mismatched parentheses.\"\
    );\n            return null;\n        }\n        result.add(open_parens);\n  \
    \      return result;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb74xukqf.java:41)\n"
  stdout: ''
  timestamp: 1660011314
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> output\
    \ = new ArrayList<Integer>();\n        int longest_level = 0;\n        int level\
    \ = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n          \
    \  if (paren_string.charAt(i) == '(') {\n                level++;\n          \
    \      if (level > longest_level) {\n                    longest_level = level;\n\
    \                }\n            } else if (paren_string.charAt(i) == ')') {\n\
    \                level--;\n            } else if (paren_string.charAt(i) == '\
    \ ') {\n                output.add(longest_level);\n                longest_level\
    \ = 0;\n                level = 0;\n            }\n        }\n        output.add(longest_level);\n\
    \        return output;\n}\n    public static void main(String[] args) {\n   \
    \ assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011314
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Split the string into separate\
    \ groups and parse each of the groups.\n        return Stream.of(paren_string.split(\"\
    \ \")).map(x -> parseGroup(x)).collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46zx19yg.java:16: error: cannot find symbol\n        return Stream.of(paren_string.split(\"\
    \ \")).map(x -> parseGroup(x)).collect(Collectors.toCollection(ArrayList::new));\n\
    \                                                           ^\n  symbol:   method\
    \ parseGroup(String)\n  location: class Problem\n/tmp/tmp46zx19yg.java:16: error:\
    \ incompatible types: inference variable E has incompatible bounds\n        return\
    \ Stream.of(paren_string.split(\" \")).map(x -> parseGroup(x)).collect(Collectors.toCollection(ArrayList::new));\n\
    \                                                                            \
    \     ^\n    equality constraints: Integer,T\n    lower bounds: Object\n  where\
    \ E,T,C are type-variables:\n    E extends Object declared in class ArrayList\n\
    \    T extends Object declared in method <T,C>toCollection(Supplier<C>)\n    C\
    \ extends Collection<T> declared in method <T,C>toCollection(Supplier<C>)\n2 errors\n"
  stdout: ''
  timestamp: 1660011314
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        var open_parens = 0;\n   \
    \     var max_open_parens = 0;\n        var max_for_each_paren_group = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < paren_string.length(); i++) {\n            char paren\
    \ = paren_string.charAt(i);\n            if (paren == '(') {\n               \
    \ open_parens++;\n                max_open_parens = Math.max(max_open_parens,\
    \ open_parens);\n            } else if (paren == ')') {\n                if (open_parens\
    \ == 0)\n                    throw new IllegalArgumentException(\"Extra closing\
    \ parens found\");\n                open_parens--;\n            } else if (paren\
    \ == ' ') {\n                max_for_each_paren_group.add(max_open_parens);\n\
    \                max_open_parens = 0;\n            } else {\n                throw\
    \ new IllegalArgumentException(\"Non paren characters found\");\n            }\n\
    \        }\n        max_for_each_paren_group.add(max_open_parens);\n        return\
    \ max_for_each_paren_group;\n}\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011314
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // your code here\n      \
    \  return null;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmpq5iez9dx.java:19)\n"
  stdout: ''
  timestamp: 1660011314
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmpueviiujl.java:18)\n"
  stdout: ''
  timestamp: 1660011314
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> nested_parens\
    \ = new ArrayList<Integer>();\n        String[] paren_groups = paren_string.split(\"\
    \ \");\n        for (String paren_group : paren_groups) {\n            int max_nesting\
    \ = 0;\n            int current_nesting = 0;\n            for (char paren : paren_group.toCharArray())\
    \ {\n                if (paren == '(') {\n                    current_nesting++;\n\
    \                    max_nesting = Math.max(max_nesting, current_nesting);\n \
    \               } else if (paren == ')') {\n                    current_nesting--;\n\
    \                }\n            }\n            nested_parens.add(max_nesting);\n\
    \        }\n        return nested_parens;\n}\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011314
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        // Todo: Implement this.\n        String[]\
    \ paren_group = paren_string.split(\" \");\n        int deep = 0;\n        int\
    \ deep_max = 0;\n        for (int i = 0; i < paren_group.length; i++) {\n    \
    \        int paren_group_length = paren_group[i].length();\n            for (int\
    \ j = 0; j < paren_group_length; j++) {\n                if (paren_group[i].charAt(j)\
    \ == '(') {\n                    deep++;\n                    if (deep > deep_max)\
    \ {\n                        deep_max = deep;\n                    }\n       \
    \         } else if (paren_group[i].charAt(j) == ')') {\n                    deep--;\n\
    \                }\n            }\n            result.add(deep_max);\n       \
    \     deep = 0;\n            deep_max = 0;\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011314
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        for (String paren_group : paren_string.split(\"\
    \ \")) {\n            int max_depth = 0;\n            int depth = 0;\n       \
    \     for (int i = 0; i < paren_group.length(); i++) {\n                if (paren_group.charAt(i)\
    \ == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (paren_group.charAt(i) == ')') {\n      \
    \              depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011314
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> depths\
    \ = new ArrayList<Integer>();\n        // Fill this in.\n        // Initialize\
    \ our stack\n        Stack<Character> stack = new Stack<Character>();\n      \
    \  // For each parentheses string\n        for (String paren_str : paren_string.split(\"\
    \ \")) {\n            // For each parentheses character\n            for (int\
    \ i = 0; i < paren_str.length(); i++) {\n                // Push opening parentheses\
    \ to the stack\n                if (paren_str.charAt(i) == '(') {\n          \
    \          stack.push(paren_str.charAt(i));\n                }\n             \
    \   // Pop closing parentheses from the stack\n                else if (paren_str.charAt(i)\
    \ == ')') {\n                    stack.pop();\n                }\n           \
    \ }\n            // Add maximum depth of nested parentheses to the result\n  \
    \          depths.add(stack.size());\n            // Clear the stack\n       \
    \     stack.clear();\n        }\n        return depths;\n}\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ywg_0uu.java:40)\n"
  stdout: ''
  timestamp: 1660011314
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Implement this function.\n\
    \        return null;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmpnnza4w65.java:19)\n"
  stdout: ''
  timestamp: 1660011316
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> output\
    \ = new ArrayList<Integer>();\n        char[] parens = paren_string.toCharArray();\n\
    \        int depth = 0;\n        int global_max = 0;\n        for (int i = 0;\
    \ i < parens.length; i++) {\n            if (parens[i] == '(') {\n           \
    \     depth++;\n                global_max = Math.max(global_max, depth);\n  \
    \          } else if (parens[i] == ')') {\n                depth--;\n        \
    \    } else if (parens[i] == ' ') {\n                output.add(global_max);\n\
    \                global_max = 0;\n                depth = 0;\n            }\n\
    \        }\n        output.add(global_max);\n        return output;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011316
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Your code here.\n     \
    \   return null;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmp9ynuayav.java:19)\n"
  stdout: ''
  timestamp: 1660011316
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> depths\
    \ = new ArrayList<Integer>();\n        ArrayList<Integer> pos_list = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> temp_depth = new ArrayList<Integer>();\n        int\
    \ total_depth = 0;\n        String temp_str = \"\";\n        for (int i = 0; i\
    \ < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n\
    \            if (c == '(') {\n                total_depth++;\n               \
    \ temp_depth.add(total_depth);\n            } else if (c == ')') {\n         \
    \       total_depth--;\n                temp_depth.add(total_depth);\n       \
    \     } else if (c == ' ') {\n                if (pos_list.size() == 0) {\n  \
    \                  pos_list.add(i);\n                } else {\n              \
    \      pos_list.add(i - pos_list.get(pos_list.size() - 1) - 1);\n            \
    \    }\n                int max_depth = Collections.max(temp_depth);\n       \
    \         depths.add(max_depth);\n                temp_depth.clear();\n      \
    \      }\n        }\n        pos_list.add(paren_string.length() - pos_list.get(pos_list.size()\
    \ - 1) - 1);\n        int max_depth = Collections.max(temp_depth);\n        depths.add(max_depth);\n\
    \        return depths;\n}\n    public static void main(String[] args) {\n   \
    \ assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.parseNestedParens(tmpkvgpslw0.java:39)\n\tat Problem.main(tmpkvgpslw0.java:47)\n"
  stdout: ''
  timestamp: 1660011316
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> res = new\
    \ ArrayList<Integer>();\n        Stack<Integer> stack = new Stack<Integer>();\n\
    \        stack.push(0);\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n\
    \                stack.push(stack.peek() + 1);\n            } else if (c == ')')\
    \ {\n                stack.pop();\n            } else if (c == ' ') {\n      \
    \          res.add(stack.peek());\n                stack.push(0);\n          \
    \  }\n        }\n        res.add(stack.peek());\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3548j2mw.java:33)\n"
  stdout: ''
  timestamp: 1660011316
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Write your code here\n\
    \        ArrayList<Integer> ans = new ArrayList<Integer>();\n        int index\
    \ = 0;\n        String[] parens = paren_string.split(\" \");\n        for (String\
    \ paren : parens) {\n            int pos = 0;\n            int max = 0;\n    \
    \        for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    pos++;\n                    max = Math.max(max,\
    \ pos);\n                } else {\n                    pos--;\n              \
    \  }\n            }\n            ans.add(max);\n        }\n        return ans;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011316
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> stack =\
    \ new ArrayList<Integer>();\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < paren_string.length(); i++) {\n            char curr_char\
    \ = paren_string.charAt(i);\n            if (curr_char == '(') {\n           \
    \     stack.add(1);\n            } else if (curr_char == ')') {\n            \
    \    stack.remove(stack.size() - 1);\n            } else if (curr_char == ' ')\
    \ {\n                result.add(stack.size());\n            }\n        }\n   \
    \     return result;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8w41m_ov.java:30)\n"
  stdout: ''
  timestamp: 1660011316
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Your code here.\n     \
    \   ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<String>\
    \ list = new ArrayList<String>(Arrays.asList(paren_string.split(\" \")));\n  \
    \      for(String i: list){\n            result.add(parseNestedParensHelper(i));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsj1uofa.java:19: error: cannot find symbol\n            result.add(parseNestedParensHelper(i));\n\
    \                       ^\n  symbol:   method parseNestedParensHelper(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011315
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> output\
    \ = new ArrayList<Integer>();\n        // Iterate over the string with a character\
    \ pointer\n        int idx = 0;\n        while (idx < paren_string.length()) {\n\
    \            // Grab the first character and skip over any leading whitespace.\n\
    \            char ch = paren_string.charAt(idx);\n            while (ch == ' ')\
    \ {\n                idx++;\n                ch = paren_string.charAt(idx);\n\
    \            }\n            // This character is the starting parentheses for\
    \ a group.\n            assert(ch == '(');\n            // Now, iterate over the\
    \ group.\n            int max_nest = 0;\n            int cur_nest = 0;\n     \
    \       do {\n                if (ch == '(') {\n                    cur_nest++;\n\
    \                    max_nest = Math.max(max_nest, cur_nest);\n              \
    \  } else if (ch == ')') {\n                    cur_nest--;\n                }\n\
    \                idx++;\n                if (idx < paren_string.length()) {\n\
    \                    ch = paren_string.charAt(idx);\n                }\n     \
    \       } while (idx < paren_string.length() && cur_nest > 0);\n            output.add(max_nest);\n\
    \        }\n        return output;\n}\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011316
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int max_depth = 0;\n        int curr_depth\
    \ = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n          \
    \  char ch = paren_string.charAt(i);\n            if (ch == '(') {\n         \
    \       curr_depth++;\n                max_depth = Math.max(max_depth, curr_depth);\n\
    \            } else if (ch == ')') {\n                curr_depth--;\n        \
    \    } else if (ch == ' ') {\n                result.add(max_depth);\n       \
    \         max_depth = 0;\n                curr_depth = 0;\n            }\n   \
    \     }\n        result.add(max_depth);\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011316
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> max_nested_parens\
    \ = new ArrayList<Integer>();\n        int maximum = 0;\n        int current =\
    \ 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if\
    \ (paren_string.charAt(i) == '(') {\n                current++;\n            \
    \    if (current > maximum) {\n                    maximum = current;\n      \
    \          }\n            } else if (paren_string.charAt(i) == ')') {\n      \
    \          if (current == 0) {\n                    max_nested_parens.add(maximum);\n\
    \                    maximum = 0;\n                } else {\n                \
    \    current--;\n                }\n            } else if (paren_string.charAt(i)\
    \ == ' ') {\n                max_nested_parens.add(maximum);\n               \
    \ maximum = 0;\n            }\n        }\n        return max_nested_parens;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5q8y3ext.java:39)\n"
  stdout: ''
  timestamp: 1660011316
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        String[] parens = paren_string.split(\"\
    \ \");\n        ArrayList<Integer> result = new ArrayList<Integer>();\n      \
    \  for (String s : parens) {\n            int depth = 0;\n            int max\
    \ = 0;\n            for (int i = 0; i < s.length(); i++) {\n                if\
    \ (s.charAt(i) == '(') {\n                    depth++;\n                    max\
    \ = Math.max(max, depth);\n                } else {\n                    depth--;\n\
    \                }\n            }\n            result.add(max);\n        }\n \
    \       return result;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011316
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        int maxParens = 0;\n     \
    \   int depth = 0;\n        ArrayList<Integer> parens = new ArrayList<Integer>();\n\
    \        int stringLength = paren_string.length();\n        for (int i = 0; i\
    \ < stringLength; i++) {\n            switch (paren_string.charAt(i)) {\n    \
    \            case '(':\n                    depth++;\n                    break;\n\
    \                case ')':\n                    if (depth > maxParens) {\n   \
    \                     maxParens = depth;\n                    }\n            \
    \        depth--;\n                    break;\n                case ' ':\n   \
    \                 parens.add(maxParens);\n                    maxParens = 0;\n\
    \                    break;\n            }\n        }\n        return parens;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd068jbbf.java:39)\n"
  stdout: ''
  timestamp: 1660011316
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        paren_string = paren_string.replaceAll(\"\
    \\\\s+\", \"\");\n        ArrayList<String> groups = new ArrayList<String>(Arrays.asList(paren_string.split(\"\
    \\\\)\\\\(\")));\n        for (String group : groups) {\n            group = group.replaceAll(\"\
    \\\\(\\\\)\", \"\");\n            Integer maximum = 0;\n            for (String\
    \ sub_group : group.split(\"\\\\(\\\\(\")) {\n                if (sub_group.length()\
    \ > maximum) {\n                    maximum = sub_group.length();\n          \
    \      }\n            }\n            result.add(maximum + 1);\n        }\n   \
    \     return result;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdvua006d.java:31)\n"
  stdout: ''
  timestamp: 1660011316
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Answer for each group of\
    \ parentheses.\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n \
    \       int index = 0;\n        int max_level = 0;\n        int level = 0;\n \
    \       char curr_char;\n        while (index < paren_string.length()) {\n   \
    \         curr_char = paren_string.charAt(index);\n            if (curr_char ==\
    \ '(') {\n                level += 1;\n                max_level = Math.max(max_level,\
    \ level);\n            } else if (curr_char == ')') {\n                level -=\
    \ 1;\n            } else if (curr_char == ' ') {\n                ans.add(max_level);\n\
    \                max_level = 0;\n                level = 0;\n            }\n \
    \           index += 1;\n        }\n        ans.add(max_level);\n        return\
    \ ans;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011316
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Your code here\n}\n   \
    \ public static void main(String[] args) {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpan9kdtd8.java:16: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011316
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> maxNestCount\
    \ = new ArrayList<Integer>();\n        int length = paren_string.length();\n \
    \       int i = 0;\n        while (i < length) {\n            char currChar =\
    \ paren_string.charAt(i);\n            if (currChar == '(') {\n              \
    \  int count = 0;\n                while (i < length && paren_string.charAt(i)\
    \ == '(') {\n                    count++;\n                    i++;\n        \
    \        }\n                int result = getNestCount(paren_string, i, count);\n\
    \                maxNestCount.add(result);\n            } else {\n           \
    \     i++;\n            }\n        }\n        return maxNestCount;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk0df526g.java:26: error: cannot find symbol\n                int\
    \ result = getNestCount(paren_string, i, count);\n                           \
    \  ^\n  symbol:   method getNestCount(String,int,int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011316
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Remove all spaces\n   \
    \     paren_string = paren_string.replaceAll(\" \", \"\");\n        ArrayList<Integer>\
    \ max_list = new ArrayList<Integer>();\n        int count = 0;\n        int max_count\
    \ = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n          \
    \  if (paren_string.charAt(i) == '(') {\n                count++;\n          \
    \      if (count > max_count) {\n                    max_count = count;\n    \
    \            }\n            } else if (paren_string.charAt(i) == ')') {\n    \
    \            if (count == 0) {\n                    System.out.println(\"No matching\
    \ opening parentheses for \" + paren_string.charAt(i));\n                    return\
    \ null;\n                }\n                count--;\n            } else {\n \
    \               System.out.println(\"Invalid character: \" + paren_string.charAt(i));\n\
    \                return null;\n            }\n            if (i == paren_string.length()\
    \ - 1 || paren_string.charAt(i + 1) == ' ') {\n                max_list.add(max_count);\n\
    \                max_count = 0;\n            }\n        }\n        if (count !=\
    \ 0) {\n            System.out.println(\"Unmatched parentheses\");\n         \
    \   return null;\n        }\n        return max_list;\n}\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuy6iyit7.java:48)\n"
  stdout: ''
  timestamp: 1660011316
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // ADD CODE HERE\n       \
    \ ArrayList<Integer> output = new ArrayList<Integer>();\n        int max = 0;\n\
    \        int count = 0;\n        for(int i = 0; i < paren_string.length(); i++){\n\
    \            if(paren_string.charAt(i) == '('){\n                count++;\n  \
    \              if(count > max){\n                    max = count;\n          \
    \      }\n            }\n            else if(paren_string.charAt(i) == ')'){\n\
    \                count--;\n            }\n            else if(paren_string.charAt(i)\
    \ == ' '){\n                output.add(max);\n                max = 0;\n     \
    \           count = 0;\n            }\n        }\n        output.add(max);\n \
    \       return output;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011316
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Fill in your code here\n\
    \        int count = 0;\n        ArrayList<Integer> list = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < paren_string.length(); i++){\n            if(paren_string.charAt(i)\
    \ == '('){\n                count++;\n            }\n            else if(paren_string.charAt(i)\
    \ == ')'){\n                list.add(count);\n                count = 0;\n   \
    \         }\n        }\n        return list;\n}\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpojnwfjky.java:30)\n"
  stdout: ''
  timestamp: 1660011316
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Write your code here.\n\
    \        // <<<\n        ArrayList<Integer> output = new ArrayList<Integer>();\n\
    \        String[] toParse = paren_string.split(\" \");\n        for (String str\
    \ : toParse) {\n            int count = 0;\n            int max = 0;\n       \
    \     for (int i = 0; i < str.length(); i++) {\n                if (str.charAt(i)\
    \ == '(') {\n                    count++;\n                    if (count > max)\
    \ {\n                        max = count;\n                    }\n           \
    \     } else if (str.charAt(i) == ')') {\n                    count--;\n     \
    \           }\n            }\n            output.add(max);\n        }\n      \
    \  return output;\n        // >>>\n}\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011316
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> paren_list\
    \ = new ArrayList<Integer>();\n        paren_string = paren_string.replaceAll(\"\
    \\\\s\", \"\"); // Remove all white spaces\n        if(paren_string.length() >\
    \ 0) {\n            int level = 0;\n            int max_level = 0;\n         \
    \   for(int i = 0; i < paren_string.length(); i++) {\n                if(paren_string.charAt(i)\
    \ == '(') {\n                    level += 1;\n                    if(level > max_level)\
    \ {\n                        max_level = level;\n                    }\n     \
    \           } else if(paren_string.charAt(i) == ')') {\n                    level\
    \ -= 1;\n                }\n            }\n            paren_list.add(max_level);\n\
    \            paren_string = paren_string.substring(paren_string.indexOf(')') +\
    \ 1);\n            paren_list.addAll(parseNestedParens(paren_string));\n     \
    \   }\n        return paren_list;\n}\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwkoxx_48.java:37)\n"
  stdout: ''
  timestamp: 1660011316
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // TODO: Write code here\n\
    \        \n        return null;\n}\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmpomb64dmq.java:20)\n"
  stdout: ''
  timestamp: 1660011316
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        // **** create array of characters from\
    \ string ****\n        char[] charArray = paren_string.toCharArray();\n\n    \
    \    // **** process each group ****\n        int index = 0;\n        while (index\
    \ < charArray.length) {\n\n            // **** skip leading blanks ****\n    \
    \        while (index < charArray.length && charArray[index] == ' ') {\n     \
    \           index++;\n            }\n\n            // **** did we reach the end\
    \ of the string? ****\n            if (index == charArray.length) {\n        \
    \        break;\n            }\n\n            // **** start a new group ****\n\
    \            int level = 0;\n            int maxLevel = 0;\n            char c\
    \ = charArray[index];\n            if (c == '(') {\n                level++;\n\
    \                index++;\n                c = charArray[index];\n           \
    \     while (c != ')') {\n                    if (c == '(') {\n              \
    \          level++;\n                        if (level > maxLevel) {\n       \
    \                     maxLevel = level;\n                        }\n         \
    \           } else if (c == ')') {\n                        level--;\n       \
    \             } else {\n                        // **** ignore character ****\n\
    \                    }\n                    index++;\n                    c =\
    \ charArray[index];\n                }\n                result.add(maxLevel);\n\
    \            } else {\n                System.out.println(\"\\tERROR: unexpected\
    \ character: \" + c);\n                break;\n            }\n\n            //\
    \ **** skip trailing blanks ****\n            while (index < charArray.length\
    \ && charArray[index] == ' ') {\n                index++;\n            }\n   \
    \     }\n\n        // **** return results ****\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxl1mvag_.java:71)\n"
  stdout: "\tERROR: unexpected character: )\n"
  timestamp: 1660011317
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> nested_parens\
    \ = new ArrayList<Integer>();\n        Integer left = 0;\n        Integer right\
    \ = 0;\n        Integer max_nesting = 0;\n        // Check if there are any nested\
    \ parens at all.\n        if (paren_string.isEmpty()) {\n            return nested_parens;\n\
    \        }\n        for (int i = 0; i < paren_string.length(); i++) {\n      \
    \      if (paren_string.charAt(i) == '(') {\n                left++;\n       \
    \         max_nesting = Math.max(max_nesting, left - right);\n            } else\
    \ if (paren_string.charAt(i) == ')') {\n                right++;\n           \
    \ } else if (paren_string.charAt(i) == ' ') {\n                // Reached the\
    \ end of the nested parens.\n                nested_parens.add(max_nesting);\n\
    \                left = 0;\n                right = 0;\n                max_nesting\
    \ = 0;\n            }\n        }\n        // To account for the last set of nested\
    \ parens.\n        nested_parens.add(max_nesting);\n        return nested_parens;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Write your code here.\n\
    \        return null;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmp75u7kqsl.java:19)\n"
  stdout: ''
  timestamp: 1660011317
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // WRITE YOUR CODE HERE\n\
    \    \tArrayList<Integer> depth = new ArrayList<Integer>();\n    \tint curMax\
    \ = 0;\n    \tint cur = 0;\n    \tfor(int i = 0; i < paren_string.length(); i++)\
    \ {\n    \t\tif(paren_string.charAt(i) == '(') {\n    \t\t\tcur++;\n    \t\t\t\
    curMax = Math.max(curMax, cur);\n    \t\t}\n    \t\telse if(paren_string.charAt(i)\
    \ == ')') {\n    \t\t\tcur--;\n    \t\t}\n    \t\telse {\n    \t\t\tdepth.add(curMax);\n\
    \    \t\t\tcurMax = 0;\n    \t\t\tcur = 0;\n    \t\t}\n    \t}\n    \tdepth.add(curMax);\n\
    \    \treturn depth;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> ans = new\
    \ ArrayList<Integer>();\n        // fill your code here\n        return ans;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc8mv670o.java:20)\n"
  stdout: ''
  timestamp: 1660011317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Inputs - paren_string is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \        // Outputs - an array of ints representing each group's maximum depth\
    \ of nested parentheses.\n        // Constraints - none\n        // Edge cases\
    \ - empty string, null string\n        ArrayList<Integer> maxDepths = new ArrayList<Integer>();\n\
    \        String[] parenGroups = paren_string.split(\" \");\n        if (parenGroups\
    \ == null || parenGroups.length == 0) return maxDepths;\n        for (String parenGroup\
    \ : parenGroups) {\n            maxDepths.add(getMaxDepth(parenGroup));\n    \
    \    }\n        return maxDepths;\n}\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6abenkiv.java:23: error: cannot find symbol\n            maxDepths.add(getMaxDepth(parenGroup));\n\
    \                          ^\n  symbol:   method getMaxDepth(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        for (String g : paren_string.split(\" \"\
    )) {\n            result.add(parseNestedParensInGroup(g));\n        }\n      \
    \  return result;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0xy0wrzh.java:17: error: cannot find symbol\n            result.add(parseNestedParensInGroup(g));\n\
    \                       ^\n  symbol:   method parseNestedParensInGroup(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // TODO\n        int max =\
    \ 0;\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        String[]\
    \ items = paren_string.split(\" \");\n        for (String item : items) {\n  \
    \          int curr = 1;\n            int count = 0;\n            for (int i =\
    \ 0; i < item.length(); i++) {\n                if (item.charAt(i) == '(') {\n\
    \                    curr++;\n                    if (curr > count) {\n      \
    \                  count = curr;\n                    }\n                } else\
    \ if (item.charAt(i) == ')') {\n                    curr--;\n                }\n\
    \            }\n            result.add(count);\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp359e9xa9.java:37)\n"
  stdout: ''
  timestamp: 1660011317
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> depths\
    \ = new ArrayList<Integer>();\n        int localMax = 0;\n        int max = 0;\n\
    \        String[] parenthesisGroups = paren_string.split(\" \");\n        for\
    \ (String group : parenthesisGroups) {\n            for (int i = 0; i < group.length();\
    \ i++) {\n                if (group.charAt(i) == '(') {\n                    localMax++;\n\
    \                    if (localMax > max) {\n                        max = localMax;\n\
    \                    }\n                } else if (group.charAt(i) == ')') {\n\
    \                    localMax--;\n                }\n            }\n         \
    \   depths.add(max);\n            max = 0;\n            localMax = 0;\n      \
    \  }\n        return depths;\n}\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> ans = new\
    \ ArrayList<Integer>();\n        // Write your code here.\n        return ans;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv33mf_sm.java:20)\n"
  stdout: ''
  timestamp: 1660011317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> depths\
    \ = new ArrayList<Integer>();\n        ArrayList<Integer> paren_counts = new ArrayList<Integer>();\n\
    \        int start_index = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == ' ') {\n                paren_counts.add(findMaxDepth(paren_string.substring(start_index,\
    \ i)));\n                start_index = i + 1;\n            }\n        }\n    \
    \    if (start_index != paren_string.length()) {\n            paren_counts.add(findMaxDepth(paren_string.substring(start_index,\
    \ paren_string.length())));\n        }\n        return paren_counts;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphbf6rj6k.java:20: error: cannot find symbol\n                paren_counts.add(findMaxDepth(paren_string.substring(start_index,\
    \ i)));\n                                 ^\n  symbol:   method findMaxDepth(String)\n\
    \  location: class Problem\n/tmp/tmphbf6rj6k.java:25: error: cannot find symbol\n\
    \            paren_counts.add(findMaxDepth(paren_string.substring(start_index,\
    \ paren_string.length())));\n                             ^\n  symbol:   method\
    \ findMaxDepth(String)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011317
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        // >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n        // [2, 3, 1, 3]\n        String[] groups = paren_string.split(\"\
    \ \");\n        for (String group : groups) {\n            int max_level = 0;\n\
    \            int level = 0;\n            for (int i = 0; i < group.length(); i++)\
    \ {\n                if (group.charAt(i) == '(') {\n                    level++;\n\
    \                    max_level = Math.max(max_level, level);\n               \
    \ } else if (group.charAt(i) == ')') {\n                    level--;\n       \
    \         }\n            }\n            result.add(max_level);\n        }\n  \
    \      return result;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011317
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        String[] parens = paren_string.split(\"\
    \ \");\n        ArrayList<Integer> max = new ArrayList<Integer>();\n        for\
    \ (String paren : parens) {\n            ArrayList<Integer> depths = new ArrayList<Integer>();\n\
    \            int d = 0;\n            for (int i = 0; i < paren.length(); i++)\
    \ {\n                char c = paren.charAt(i);\n                if (c == '(')\
    \ {\n                    d++;\n                } else if (c == ')') {\n      \
    \              depths.add(d);\n                    d--;\n                }\n \
    \           }\n            max.add(Collections.max(depths));\n        }\n    \
    \    return max;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmpueviiujl.java:18)\n"
  stdout: ''
  timestamp: 1660011314
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        //Write your code here\n \
    \       ArrayList<Integer> levels = new ArrayList<Integer>();\n        ArrayList<Character>\
    \ stack = new ArrayList<Character>();\n        int curr_max = 0;\n        for\
    \ (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                curr_max += 1;\n                stack.add('(');\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                if (stack.get(stack.size()\
    \ - 1) == '(') {\n                    stack.remove(stack.size() - 1);\n      \
    \              if (stack.size() == 0) {\n                        levels.add(curr_max);\n\
    \                        curr_max = 0;\n                    }\n              \
    \  }\n            }\n        }\n        return levels;\n}\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsykl3f60.java:36)\n"
  stdout: ''
  timestamp: 1660011317
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n      ArrayList<String> parens = new\
    \ ArrayList<String>(Arrays.asList(paren_string.split(\" \")));\n      ArrayList<Integer>\
    \ ans = new ArrayList<Integer>();\n      for (String p : parens) {\n        int\
    \ count = 0;\n        int max = 0;\n        for (int i = 0; i < p.length(); i++)\
    \ {\n          if (p.charAt(i) == '(') count++;\n          else count--;\n   \
    \       max = Math.max(max, count);\n        }\n        ans.add(max);\n      }\n\
    \      return ans;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011317
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        for (String s : paren_string.split(\" \"\
    )) {\n            int max_depth = 0;\n            int current_depth = 0;\n   \
    \         for (int i = 0; i < s.length(); i++) {\n                if (s.charAt(i)\
    \ == '(') {\n                    current_depth++;\n                    max_depth\
    \ = Math.max(max_depth, current_depth);\n                } else if (s.charAt(i)\
    \ == ')') {\n                    current_depth--;\n                }\n       \
    \     }\n            result.add(max_depth);\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        // <<< Your code goes here.\n        int\
    \ max = 0;\n        char[] charArray = paren_string.toCharArray();\n        for\
    \ (int i = 0; i < charArray.length; i++) {\n            if (charArray[i] == '(')\
    \ {\n                max++;\n            } else if (charArray[i] == ')') {\n \
    \               max--;\n            } else if (charArray[i] == ' ') {\n      \
    \          result.add(max);\n                max = 0;\n            }\n       \
    \ }\n        result.add(max);\n        // >>>\n        return result;\n}\n   \
    \ public static void main(String[] args) {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkd0whhli.java:34)\n"
  stdout: ''
  timestamp: 1660011317
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> res = new\
    \ ArrayList<Integer>();\n        int max_depth = 0;\n        int depth = 0;\n\
    \        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                depth++;\n                max_depth = Math.max(max_depth,\
    \ depth);\n            } else if (paren_string.charAt(i) == ')') {\n         \
    \       depth--;\n            } else if (paren_string.charAt(i) == ' ') {\n  \
    \              res.add(max_depth);\n                max_depth = 0;\n         \
    \       depth = 0;\n            }\n        }\n        res.add(max_depth);\n  \
    \      return res;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011317
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> res = new\
    \ ArrayList<Integer>();\n        String[] strs = paren_string.split(\" \");\n\
    \        for (String str : strs) {\n            char[] arr = str.toCharArray();\n\
    \            int count = 0;\n            int max = 0;\n            for (char ch\
    \ : arr) {\n                if (ch == '(') {\n                    count++;\n \
    \                   max = Math.max(max, count);\n                } else if (ch\
    \ == ')') {\n                    count--;\n                }\n            }\n\
    \            res.add(max);\n        }\n        return res;\n}\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011317
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        if (paren_string == null ||\
    \ paren_string.length() == 0) return new ArrayList<Integer>();\n        paren_string\
    \ = paren_string.replaceAll(\" \", \"\");\n        int res = 0;\n        int max\
    \ = 0;\n        ArrayList<Integer> all_max = new ArrayList<Integer>();\n     \
    \   for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                res++;\n                max = Math.max(max, res);\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                res--;\n\
    \                if (res == 0) {\n                    all_max.add(max);\n    \
    \                max = 0;\n                }\n            }\n        }\n     \
    \   return all_max;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011317
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> paren_count\
    \ = new ArrayList<Integer>();\n        int max = 0;\n        for (int i = 0; i\
    \ < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(')\
    \ {\n                max += 1;\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                max -= 1;\n            } else if (paren_string.charAt(i)\
    \ == ' ') {\n                paren_count.add(max);\n                max = 0;\n\
    \            }\n        }\n        paren_count.add(max);\n        return paren_count;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc_divs5f.java:31)\n"
  stdout: ''
  timestamp: 1660011317
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        ArrayList<String> parsed = new ArrayList<String>(Arrays.asList(paren_string.split(\"\
    \ \")));\n        for (String p : parsed) {\n            if (p.length() % 2 !=\
    \ 0) {\n                result.add(0);\n                continue;\n          \
    \  }\n            int count = 0;\n            int max = 0;\n            for (int\
    \ i = 0; i < p.length(); i++) {\n                char c = p.charAt(i);\n     \
    \           if (c == '(') {\n                    count++;\n                  \
    \  if (count > max) {\n                        max = count;\n                \
    \    }\n                } else if (c == ')') {\n                    count--;\n\
    \                }\n            }\n            result.add(max);\n        }\n \
    \       return result;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011317
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> levels\
    \ = new ArrayList<Integer>();\n        // Start writing code here.\n        String[]\
    \ groups = paren_string.split(\" \");\n        for (String group : groups) {\n\
    \            int level = 0;\n            int max_level = 0;\n            for (int\
    \ i = 0; i < group.length(); i++) {\n                char c = group.charAt(i);\n\
    \                if (c == '(') {\n                    level++;\n             \
    \       max_level = Math.max(max_level, level);\n                } else if (c\
    \ == ')') {\n                    level--;\n                }\n            }\n\
    \            levels.add(max_level);\n        }\n        return levels;\n}\n  \
    \  public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011317
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        String[] paren_groups = paren_string.split(\"\
    \ \");\n        for (String paren_group : paren_groups) {\n            Stack<Character>\
    \ stack = new Stack<Character>();\n            int current_depth = 0;\n      \
    \      int max_depth = 0;\n            for (char c : paren_group.toCharArray())\
    \ {\n                if (c == '(') {\n                    stack.push(c);\n   \
    \                 current_depth += 1;\n                    max_depth = Math.max(max_depth,\
    \ current_depth);\n                } else if (c == ')') {\n                  \
    \  stack.pop();\n                    current_depth -= 1;\n                }\n\
    \            }\n            result.add(max_depth);\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        String[] groups = paren_string.split(\"\
    \ \");\n        ArrayList<Integer> result = new ArrayList<Integer>();\n      \
    \  for (String g : groups) {\n            int depth = 0;\n            int max_depth\
    \ = 0;\n            for (int i = 0; i < g.length(); i++) {\n                if\
    \ (g.charAt(i) == '(') {\n                    depth++;\n                    max_depth\
    \ = Math.max(max_depth, depth);\n                } else if (g.charAt(i) == ')')\
    \ {\n                    depth--;\n                }\n            }\n        \
    \    result.add(max_depth);\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // use a stack to hold the\
    \ opens\n        Stack<Integer> d = new Stack<Integer>();\n        d.push(0);\n\
    \        ArrayList<Integer> o = new ArrayList<Integer>();\n        int maxdepth\
    \ = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n          \
    \  char c = paren_string.charAt(i);\n            if (c == '(') {\n           \
    \     d.push(d.peek() + 1);\n                maxdepth = Math.max(maxdepth, d.peek());\n\
    \            } else if (c == ')') {\n                d.pop();\n            } else\
    \ if (c == ' ') {\n                o.add(maxdepth);\n                maxdepth\
    \ = 0;\n            }\n        }\n        o.add(maxdepth);\n        return o;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Mask out everything except\
    \ the parentheses.\n        paren_string = paren_string.replaceAll(\"[^()]\",\
    \ \"\");\n        // Store the nesting level for each index in the string.\n \
    \       ArrayList<Integer> nesting = new ArrayList<>();\n        // Keep track\
    \ of the current nesting level.\n        int curr_nesting = 0;\n        // Initialize\
    \ the nesting level to be 0 everywhere.\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            nesting.add(0);\n        }\n        // Pass through the\
    \ string, maintaining an accurate count of the nesting level.\n        for (int\
    \ i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n\
    \            if (c == '(') {\n                curr_nesting++;\n            } else\
    \ {\n                curr_nesting--;\n            }\n            nesting.set(i,\
    \ curr_nesting);\n        }\n        // Get the indices where each group starts.\n\
    \        ArrayList<Integer> group_starts = new ArrayList<>();\n        for (int\
    \ i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                group_starts.add(i);\n            }\n        }\n\
    \        // Get the depths of each group.\n        ArrayList<Integer> depths =\
    \ new ArrayList<>();\n        for (int i = 0; i < group_starts.size(); i++) {\n\
    \            // Group depth is the nesting at the start of the group, which is\
    \ the maximum nesting for the group.\n            depths.add(nesting.get(group_starts.get(i)));\n\
    \        }\n        return depths;\n}\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx91s0kfr.java:51)\n"
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        String[] groups = paren_string.split(\"\
    \ \");\n        for (String group : groups) {\n            ArrayList<Integer>\
    \ depth = new ArrayList<Integer>();\n            int max_depth = 0;\n        \
    \    for (int i = 0; i < group.length(); i++) {\n                Character ch\
    \ = group.charAt(i);\n                if (ch == '(') {\n                    depth.add(i,\
    \ 1);\n                    max_depth = Math.max(max_depth, 1);\n             \
    \   } else if (ch == ')') {\n                    int open_paren_index = findOpenParenIndex(group,\
    \ i);\n                    if (open_paren_index >= 0) {\n                    \
    \    int curr_depth = depth.get(open_paren_index) + 1;\n                     \
    \   depth.add(i, curr_depth);\n                        max_depth = Math.max(max_depth,\
    \ curr_depth);\n                    }\n                }\n            }\n    \
    \        result.add(max_depth);\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcm2hr98q.java:26: error: cannot find symbol\n                 \
    \   int open_paren_index = findOpenParenIndex(group, i);\n                   \
    \                        ^\n  symbol:   method findOpenParenIndex(String,int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmpueviiujl.java:18)\n"
  stdout: ''
  timestamp: 1660011314
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> output\
    \ = new ArrayList<Integer>();\n        StringTokenizer st = new StringTokenizer(paren_string,\
    \ \" \");\n        while (st.hasMoreTokens()) {\n            String paren = st.nextToken();\n\
    \            ArrayList<Character> token = new ArrayList<Character>();\n      \
    \      for (int i = 0; i < paren.length(); i++) {\n                token.add(paren.charAt(i));\n\
    \            }\n            int counter = 0;\n            int max = Integer.MIN_VALUE;\n\
    \            for (Character c : token) {\n                if (c == '(') {\n  \
    \                  counter++;\n                } else if (c == ')') {\n      \
    \              counter--;\n                }\n                max = Math.max(max,\
    \ counter);\n            }\n            output.add(max);\n        }\n        return\
    \ output;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Declare and initialize\
    \ the list that is to be returned\n        ArrayList<Integer> output = new ArrayList<Integer>();\n\
    \        // Declare a list to maintain temporary string in the nested parenthesis\n\
    \        ArrayList<String> temp = new ArrayList<String>();\n        // Declare\
    \ and initialize the maximum count of parenthesis\n        int max_count = 0;\n\
    \        // Declare and initialize the count of parenthesis\n        int count\
    \ = 0;\n        // Declare the StringBuilder to build the string\n        StringBuilder\
    \ string = new StringBuilder();\n        // For each character in the String\n\
    \        for (char c : paren_string.toCharArray()) {\n            // If the character\
    \ is opening paranthesis, increment the count\n            if (c == '(') {\n \
    \               // Increment the count\n                count++;\n           \
    \     // Add the character to the StringBuilder\n                string.append(c);\n\
    \            }\n            // If the character is closing paranthesis, decrement\
    \ the count\n            else if (c == ')') {\n                // Decrement the\
    \ count\n                count--;\n                // Add the character to the\
    \ StringBuilder\n                string.append(c);\n            }\n          \
    \  // If the character is a space\n            else if (c == ' ') {\n        \
    \        // If the count of parenthesis is greater than the maximum count\n  \
    \              if (count > max_count) {\n                    // Set the maximum\
    \ count to the current count\n                    max_count = count;\n       \
    \         }\n                // Set the count to zero\n                count =\
    \ 0;\n                // Add the string to the temporary list\n              \
    \  temp.add(string.toString());\n                // Clear the string\n       \
    \         string.setLength(0);\n            }\n        }\n        // If the count\
    \ of parenthesis is greater than the maximum count\n        if (count > max_count)\
    \ {\n            // Set the maximum count to the current count\n            max_count\
    \ = count;\n        }\n        // Set the count to zero\n        count = 0;\n\
    \        // Add the string to the temporary list\n        temp.add(string.toString());\n\
    \        // Clear the string\n        string.setLength(0);\n        // For each\
    \ String in the temporary list\n        for (String s : temp) {\n           \n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzynpules.java:71: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        String[] parens = paren_string.split(\"\
    \ \");\n        int max = 0;\n        for (String paren : parens) {\n        \
    \    int count = 0;\n            for (int i = 0; i < paren.length(); i++) {\n\
    \                if (paren.charAt(i) == '(') {\n                    count++;\n\
    \                } else {\n                    count--;\n                }\n \
    \               max = Math.max(max, count);\n            }\n            result.add(max);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3noenyqx.java:33)\n"
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> ans = new\
    \ ArrayList<Integer>();\n        // Write your code here.\n        return ans;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv33mf_sm.java:20)\n"
  stdout: ''
  timestamp: 1660011317
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Write your code here\n\
    \        ArrayList<Integer> res = new ArrayList<>();\n        paren_string = paren_string.replaceAll(\"\
    \\\\(\\\\)\", \"\");\n        while (paren_string.length() > 0) {\n          \
    \  int max = 0;\n            for (int i = 0; i < paren_string.length(); i++) {\n\
    \                int curr = 0;\n                int j = i;\n                while\
    \ (j < paren_string.length() && paren_string.charAt(j) == '(') {\n           \
    \         curr++;\n                    j++;\n                }\n             \
    \   max = Math.max(max, curr);\n            }\n            res.add(max);\n   \
    \         paren_string = paren_string.replaceAll(\"\\\\(\\\\)\", \"\");\n    \
    \    }\n        return res;\n}\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011323
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> res = new\
    \ ArrayList<Integer>();\n        for (String group : paren_string.split(\" \"\
    )) {\n            int curr_max = 0;\n            int curr_paren = 0;\n       \
    \     for (int i = 0; i < group.length(); i++) {\n                char paren =\
    \ group.charAt(i);\n                if (paren == '(') {\n                    curr_paren++;\n\
    \                    curr_max = Math.max(curr_max, curr_paren);\n            \
    \    } else {\n                    curr_paren--;\n                }\n        \
    \    }\n            res.add(curr_max);\n        }\n        return res;\n}\n  \
    \  public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> res = new\
    \ ArrayList<Integer>();\n        for (String paren : paren_string.split(\" \"\
    )) {\n            Stack<Character> stack = new Stack<Character>();\n         \
    \   int count = 0;\n            for (char ch : paren.toCharArray()) {\n      \
    \          if (ch == '(') {\n                    stack.push(ch);\n           \
    \         count = Math.max(count, stack.size());\n                } else {\n \
    \                   stack.pop();\n                }\n            }\n         \
    \   res.add(count);\n        }\n        return res;\n}\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        String[] parens_groups = paren_string.split(\"\
    \ \");\n        for (String parens : parens_groups) {\n            int count =\
    \ 0;\n            int max = 0;\n            for (int i = 0; i < parens.length();\
    \ i++) {\n                if (parens.charAt(i) == '(') {\n                   \
    \ count++;\n                    max = Math.max(max, count);\n                }\
    \ else {\n                    count--;\n                }\n            }\n   \
    \         result.add(max);\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> res = new\
    \ ArrayList<Integer>();\n        // >>> parse_nested_parens('(()()) ((())) ()\
    \ ((())()())')\n        // [2, 3, 1, 3]\n        for (String paren : paren_string.split(\"\
    \ \")) {\n            int maxLevel = 0;\n            int counter = 0;\n      \
    \      for (int i = 0; i < paren.length(); i++) {\n                char c = paren.charAt(i);\n\
    \                if (c == '(') {\n                    counter++;\n           \
    \         maxLevel = Math.max(maxLevel, counter);\n                } else if (c\
    \ == ')') {\n                    counter--;\n                }\n            }\n\
    \            res.add(maxLevel);\n        }\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        //your code goes here\n  \
    \      ArrayList<Integer> res = new ArrayList<Integer>();\n        for (String\
    \ s : paren_string.split(\" \")) {\n            int maxCount = 0;\n          \
    \  int curCount = 0;\n            for (int i = 0; i < s.length(); i++) {\n   \
    \             if (s.charAt(i) == '(') curCount++;\n                else if (s.charAt(i)\
    \ == ')') curCount--;\n                if (curCount > maxCount) maxCount = curCount;\n\
    \            }\n            res.add(maxCount);\n        }\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        Pattern p = Pattern.compile(\"[^()]+\"\
    );\n        Matcher m = p.matcher(paren_string);\n        while (m.find()) {\n\
    \            result.add(parseNestedParens(m.group(0)));\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjmh_nizp.java:16: error: cannot find symbol\n        Pattern p\
    \ = Pattern.compile(\"[^()]+\");\n        ^\n  symbol:   class Pattern\n  location:\
    \ class Problem\n/tmp/tmpjmh_nizp.java:16: error: cannot find symbol\n       \
    \ Pattern p = Pattern.compile(\"[^()]+\");\n                    ^\n  symbol: \
    \  variable Pattern\n  location: class Problem\n/tmp/tmpjmh_nizp.java:17: error:\
    \ cannot find symbol\n        Matcher m = p.matcher(paren_string);\n        ^\n\
    \  symbol:   class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011318
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> max = new\
    \ ArrayList<Integer>();\n        ArrayList<Character> stack = new ArrayList<Character>();\n\
    \        int top = -1;\n        int depth = 0;\n        int max_depth = 0;\n \
    \       for (int i = 0; i < paren_string.length(); i++) {\n            char c\
    \ = paren_string.charAt(i);\n            if (c == '(') {\n                top++;\n\
    \                stack.add(c);\n                depth++;\n                if (depth\
    \ > max_depth) {\n                    max_depth = depth;\n                }\n\
    \            } else if (c == ')') {\n                top--;\n                stack.remove(top\
    \ + 1);\n                depth--;\n            } else if (c == ' ') {\n      \
    \          if (top == -1) {\n                    max.add(max_depth);\n       \
    \             max_depth = 0;\n                }\n            }\n        }\n  \
    \      max.add(max_depth);\n        return max;\n}\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        return new ArrayList<Integer>();\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5k0uixgd.java:18)\n"
  stdout: ''
  timestamp: 1660011319
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> depth_list\
    \ = new ArrayList<Integer>();\n        int max_depth = 0;\n        int current_depth\
    \ = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n          \
    \  if (paren_string.charAt(i) == '(') {\n                current_depth += 1;\n\
    \                max_depth = Math.max(max_depth, current_depth);\n           \
    \ } else if (paren_string.charAt(i) == ')') {\n                current_depth -=\
    \ 1;\n            } else if (paren_string.charAt(i) == ' ') {\n              \
    \  depth_list.add(max_depth);\n                max_depth = 0;\n              \
    \  current_depth = 0;\n            }\n        }\n        depth_list.add(max_depth);\n\
    \        return depth_list;\n}\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> retval\
    \ = new ArrayList<Integer>();\n        ArrayList<Integer> results = new ArrayList<Integer>();\n\
    \        int max = 0;\n        int current = 0;\n        int start = 0;\n    \
    \    int end = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n\
    \            if (paren_string.charAt(i) == '(') {\n                if (current\
    \ == 0) {\n                    start = i;\n                }\n               \
    \ current++;\n            } else if (paren_string.charAt(i) == ')') {\n      \
    \          current--;\n                if (current == 0) {\n                 \
    \   end = i;\n                    results.add(max);\n                    max =\
    \ 0;\n                }\n            }\n            if (current > max) {\n   \
    \             max = current;\n            }\n        }\n        return results;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int len = paren_string.length();\n    \
    \    int sub = 0;\n        int max = 0;\n        for (int i = 0; i < len; i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                sub++;\n\
    \                if (sub > max) {\n                    max = sub;\n          \
    \      }\n            } else if (paren_string.charAt(i) == ')') {\n          \
    \      sub--;\n            } else if (paren_string.charAt(i) == ' ') {\n     \
    \           result.add(max);\n                max = 0;\n                sub =\
    \ 0;\n            }\n        }\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpok_bh87r.java:36)\n"
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        // your code here\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdtkxy48p.java:20)\n"
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int level = 0;\n        int index = 0;\n\
    \        int index_start = 0;\n        while (index < paren_string.length()) {\n\
    \            if (paren_string.charAt(index) == '(') {\n                level++;\n\
    \            } else if (paren_string.charAt(index) == ')') {\n               \
    \ level--;\n            } else if (paren_string.charAt(index) == ' ') {\n    \
    \            result.add(level);\n                level = 0;\n                index_start\
    \ = index;\n            }\n            index++;\n        }\n        result.add(level);\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfe2_dqiz.java:35)\n"
  stdout: ''
  timestamp: 1660011319
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        if (paren_string == null ||\
    \ paren_string.length() == 0) {\n            return new ArrayList<Integer>();\n\
    \        }\n        ArrayList<Integer> paren_d = new ArrayList<Integer>();\n \
    \       Stack<Character> stk = new Stack<Character>();\n        int max_depth\
    \ = 0;\n        for (char c : paren_string.toCharArray()) {\n            if (c\
    \ == '(') {\n                stk.push(c);\n                max_depth = Math.max(max_depth,\
    \ stk.size());\n            } else if (c == ')') {\n                stk.pop();\n\
    \            } else if (c == ' ') {\n                if (stk.size() == 0) {\n\
    \                    paren_d.add(max_depth);\n                    max_depth =\
    \ 0;\n                }\n            }\n        }\n        paren_d.add(max_depth);\n\
    \        return paren_d;\n}\n    public static void main(String[] args) {\n  \
    \  assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> ret = new\
    \ ArrayList<Integer>();\n        int level = 0;\n        int maxLevel = 0;\n \
    \       for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                level++;\n                maxLevel = Math.max(maxLevel,\
    \ level);\n            } else if (paren_string.charAt(i) == ')') {\n         \
    \       level--;\n            } else if (paren_string.charAt(i) == ' ') {\n  \
    \              ret.add(maxLevel);\n                maxLevel = 0;\n           \
    \     level = 0;\n            }\n        }\n        ret.add(maxLevel);\n     \
    \   return ret;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> nested_parens\
    \ = new ArrayList<Integer>();\n        ArrayList<Integer> paren_indices = new\
    \ ArrayList<Integer>();\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                paren_indices.add(i);\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                if (paren_indices.size()\
    \ == 0)\n                    nested_parens.add(0);\n                else\n   \
    \                 nested_parens.add(paren_indices.size());\n                paren_indices.remove(paren_indices.size()\
    \ - 1);\n            }\n        }\n        return nested_parens;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrdub3o5.java:31)\n"
  stdout: ''
  timestamp: 1660011320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        ArrayList<Pair<Integer, Integer>> open_parens\
    \ = new ArrayList<Pair<Integer, Integer>>();\n        ArrayList<Pair<Integer,\
    \ Integer>> close_parens = new ArrayList<Pair<Integer, Integer>>();\n        int\
    \ paren_index = 0;\n        int first_paren_index = 0;\n        int open_paren_index\
    \ = 0;\n        int close_paren_index = 0;\n        int num_open_parens = 0;\n\
    \        int num_close_parens = 0;\n        int nested_level = 0;\n        int\
    \ max_nested_level = 0;\n        while (paren_index < paren_string.length()) {\n\
    \            if (paren_string.charAt(paren_index) == '(') {\n                num_open_parens++;\n\
    \                Pair<Integer, Integer> open_paren = new Pair<Integer, Integer>(paren_index,\
    \ num_open_parens);\n                open_parens.add(open_paren);\n          \
    \  } else if (paren_string.charAt(paren_index) == ')') {\n                num_close_parens++;\n\
    \                Pair<Integer, Integer> close_paren = new Pair<Integer, Integer>(paren_index,\
    \ num_close_parens);\n                close_parens.add(close_paren);\n       \
    \     } else if (paren_string.charAt(paren_index) == ' ') {\n                first_paren_index\
    \ = paren_index + 1;\n                while (open_paren_index < open_parens.size()\
    \ && close_paren_index < close_parens.size()) {\n                    if (open_parens.get(open_paren_index).getValue0()\
    \ < close_parens.get(close_paren_index).getValue0()) {\n                     \
    \   nested_level++;\n                        open_paren_index++;\n           \
    \         } else {\n                        if (nested_level > max_nested_level)\
    \ {\n                            max_nested_level = nested_level;\n          \
    \              }\n                        nested_level--;\n                  \
    \      close_paren_index++;\n                    }\n                }\n      \
    \          result.add\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeznvek8p.java:49: error: not a statement\n                result.add\n\
    \                      ^\n/tmp/tmpeznvek8p.java:49: error: ';' expected\n    \
    \            result.add\n                          ^\n/tmp/tmpeznvek8p.java:51:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011319
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> ret = new\
    \ ArrayList<Integer>();\n        for (String group : paren_string.split(\" \"\
    )) {\n            ArrayList<Integer> curr_stack = new ArrayList<Integer>();\n\
    \            int max_nesting = 0;\n            for (char ch : group.toCharArray())\
    \ {\n                if (ch == '(') {\n                    curr_stack.add(1);\n\
    \                    max_nesting = Math.max(max_nesting, curr_stack.size());\n\
    \                } else if (ch == ')') {\n                    curr_stack.remove(curr_stack.size()\
    \ - 1);\n                }\n            }\n            ret.add(max_nesting);\n\
    \        }\n        return ret;\n}\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> levels\
    \ = new ArrayList<Integer>();\n        int level = 0;\n        for (int i = 0;\
    \ i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) ==\
    \ '(') {\n                level++;\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                level--;\n            } else if (paren_string.charAt(i)\
    \ == ' ') {\n                levels.add(level);\n                level = 0;\n\
    \            }\n        }\n        levels.add(level);\n        return levels;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr3737vc8.java:31)\n"
  stdout: ''
  timestamp: 1660011320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> parse_result\
    \ = new ArrayList<Integer>();\n        int n = paren_string.length();\n      \
    \  for (int i = 0; i < n; ++i) {\n            if (paren_string.charAt(i) == '(')\
    \ {\n                int st = i;\n                for (int j = i + 1; j < n; ++j)\
    \ {\n                    if (paren_string.charAt(j) == ')') {\n              \
    \          String inner = paren_string.substring(st + 1, j);\n               \
    \         parse_result.add(parseNestedParens(inner).size());\n               \
    \         i = j;\n                        break;\n                    }\n    \
    \            }\n            }\n        }\n        return parse_result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg3bekdzt.java:33)\n"
  stdout: ''
  timestamp: 1660011320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        // Write your code here\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsv03ty55.java:20)\n"
  stdout: ''
  timestamp: 1660011320
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        ArrayList<String> groups = new ArrayList<String>(Arrays.asList(paren_string.split(\"\
    \ \")));\n        for (String group : groups) {\n            int depth = 0;\n\
    \            int max_depth = 0;\n            for (int i = 0; i < group.length();\
    \ i++) {\n                char c = group.charAt(i);\n                if (c ==\
    \ '(') {\n                    depth++;\n                    if (depth > max_depth)\
    \ {\n                        max_depth = depth;\n                    }\n     \
    \           } else if (c == ')') {\n                    depth--;\n           \
    \     }\n            }\n            result.add(max_depth);\n        }\n      \
    \  return result;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> ret = new\
    \ ArrayList<Integer>();\n        return ret;\n}\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8auvfpi.java:19)\n"
  stdout: ''
  timestamp: 1660011320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> max_nesting\
    \ = new ArrayList<Integer>();\n        // Use this variable to keep track of the\
    \ maximum nesting of parens so far.\n        // Initialize it to 0.\n        int\
    \ m = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n        \
    \    // TODO\n        }\n        return max_nesting;\n}\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv7w0k3gv.java:25)\n"
  stdout: ''
  timestamp: 1660011320
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Write your code here.\n\
    \        // Above function call should return [2, 3, 1, 3]\n        ArrayList<Integer>\
    \ ans = new ArrayList<>();\n        int curr = 0;\n        int max = 0;\n    \
    \    for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                curr++;\n                max = Math.max(max, curr);\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                curr--;\n\
    \            } else {\n                ans.add(max);\n                max = 0;\n\
    \                curr = 0;\n            }\n        }\n        ans.add(max);\n\
    \        return ans;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011320
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        String[] parens = paren_string.split(\"\
    \ \");\n        // Print out parens\n        // System.out.println(Arrays.toString(parens));\n\
    \        for (String paren : parens) {\n            Stack<Character> stack = new\
    \ Stack<Character>();\n            int i = 0;\n            int max_depth = 0;\n\
    \            int current_depth = 0;\n            for (char c : paren.toCharArray())\
    \ {\n                if (c == '(') {\n                    current_depth++;\n \
    \                   if (current_depth > max_depth) {\n                       \
    \ max_depth = current_depth;\n                    }\n                } else if\
    \ (c == ')') {\n                    current_depth--;\n                }\n    \
    \        }\n            result.add(max_depth);\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011320
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> res = new\
    \ ArrayList<>();\n        int depth = 0;\n        int current_max = 0;\n     \
    \   for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                depth++;\n                current_max = Math.max(current_max,\
    \ depth);\n            } else if (paren_string.charAt(i) == ')') {\n         \
    \       depth--;\n            } else if (paren_string.charAt(i) == ' ') {\n  \
    \              res.add(current_max);\n                current_max = 0;\n     \
    \           depth = 0;\n            }\n        }\n        res.add(current_max);\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // your code here\n      \
    \  return null;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmpq5iez9dx.java:19)\n"
  stdout: ''
  timestamp: 1660011314
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
    \        int cur_max = 0;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                temp.add(1);\n\
    \                cur_max += 1;\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                temp.add(-1);\n                cur_max -= 1;\n  \
    \          } else {\n                result.add(cur_max);\n                temp\
    \ = new ArrayList<Integer>();\n                cur_max = 0;\n            }\n \
    \       }\n        result.add(cur_max);\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg82foqzm.java:35)\n"
  stdout: ''
  timestamp: 1660011320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        for (String paren: paren_string.split(\"\
    \ \")) {\n            result.add(parseNestedParensForOneGroup(paren));\n     \
    \   }\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl21wvciv.java:17: error: cannot find symbol\n            result.add(parseNestedParensForOneGroup(paren));\n\
    \                       ^\n  symbol:   method parseNestedParensForOneGroup(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Construct an empty list\
    \ of integers to store the maximum depths of each group.\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        // Loop over each character in the\
    \ input string.\n        for (int i = 0; i < paren_string.length(); i++) {\n \
    \           int curr_depth = 0;\n            // Find the current maximum depth\
    \ of the current group.\n            while (paren_string.charAt(i) == '(') {\n\
    \                curr_depth++;\n                i++;\n            }\n        \
    \    // If we have encountered a '(' the current depth would be non-zero.\n  \
    \          if (curr_depth != 0) {\n                // Add the current depth to\
    \ the resulting list.\n                result.add(curr_depth);\n            }\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwobnjo49.java:34)\n"
  stdout: ''
  timestamp: 1660011320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> depth =\
    \ new ArrayList<Integer>();\n        ArrayList<Character> opening_parens = new\
    \ ArrayList<Character>();\n        ArrayList<Character> closing_parens = new ArrayList<Character>();\n\
    \        int count = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                opening_parens.add(paren_string.charAt(i));\n\
    \                count++;\n            } else if (paren_string.charAt(i) == ')')\
    \ {\n                closing_parens.add(paren_string.charAt(i));\n           \
    \     count--;\n            } else if (paren_string.charAt(i) == ' ') {\n    \
    \            // If at the end of a group, add the depth of parens to the depth\
    \ arraylist\n                depth.add(count);\n                count = 0;\n \
    \           }\n        }\n        depth.add(count);\n        if (opening_parens.size()\
    \ != closing_parens.size()) {\n            throw new IllegalArgumentException(\"\
    The number of opening and closing parentheses is not the same.\");\n        }\n\
    \        return depth;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp45asko91.java:39)\n"
  stdout: ''
  timestamp: 1660011320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // >>>\n        // ENTER CODE\
    \ HERE\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        int\
    \ maxLevel = 0;\n        int level = 0;\n        int parenLen = paren_string.length();\n\
    \        boolean flag = false;\n        for (int i = 0; i < parenLen; i++) {\n\
    \            if (paren_string.charAt(i) == '(') {\n                level++;\n\
    \                flag = true;\n            } else if (paren_string.charAt(i) ==\
    \ ')') {\n                level--;\n            } else if (paren_string.charAt(i)\
    \ == ' ') {\n                if (flag == true) {\n                    maxLevel\
    \ = Math.max(maxLevel, level);\n                    list.add(maxLevel);\n    \
    \                level = 0;\n                    maxLevel = 0;\n             \
    \       flag = false;\n                }\n            }\n        }\n        if\
    \ (flag == true) {\n            maxLevel = Math.max(maxLevel, level);\n      \
    \      list.add(maxLevel);\n        }\n        return list;\n        // <<<\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp74yvhmjj.java:46)\n"
  stdout: ''
  timestamp: 1660011320
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> maxes =\
    \ new ArrayList<Integer>();\n        ArrayList<Integer> totals = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> nest_levels = new ArrayList<Integer>();\n        int\
    \ max_levels = 0;\n        int total_levels = 0;\n        int nest_level = 0;\n\
    \        int len = paren_string.length();\n        for (int i = 0; i < len; i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                nest_level++;\n\
    \                if (nest_level > max_levels) {\n                    max_levels\
    \ = nest_level;\n                }\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                nest_level--;\n            } else if (paren_string.charAt(i)\
    \ == ' ') {\n                totals.add(total_levels);\n                total_levels\
    \ = 0;\n                nest_levels.add(max_levels);\n                max_levels\
    \ = 0;\n            }\n        }\n        return nest_levels;\n}\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1t9afgtt.java:40)\n"
  stdout: ''
  timestamp: 1660011320
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> nest_levels\
    \ = new ArrayList<Integer>();\n        ArrayList<String> paren_groups = new ArrayList<String>(Arrays.asList(paren_string.split(\"\
    \ \")));\n        for (String curr_group : paren_groups) {\n            int curr_nest_level\
    \ = 0;\n            int max_nest_level = 0;\n            for (int i = 0; i < curr_group.length();\
    \ i++) {\n                if (curr_group.charAt(i) == '(') {\n               \
    \     curr_nest_level++;\n                } else if (curr_group.charAt(i) == ')')\
    \ {\n                    curr_nest_level--;\n                }\n             \
    \   if (curr_nest_level > max_nest_level) {\n                    max_nest_level\
    \ = curr_nest_level;\n                }\n            }\n            nest_levels.add(max_nest_level);\n\
    \        }\n        return nest_levels;\n}\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011320
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n        // [2, 3, 1, 3]\n        ArrayList<Integer>\
    \ ans = new ArrayList<Integer>();\n        for (String paren : paren_string.split(\"\
    \ \")) {\n            int mx = 0;\n            int cur = 0;\n            for (int\
    \ i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i) == '(')\
    \ {\n                    cur++;\n                    mx = Math.max(mx, cur);\n\
    \                } else {\n                    cur--;\n                }\n   \
    \         }\n            ans.add(mx);\n        }\n        return ans;\n}\n   \
    \ public static void main(String[] args) {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011320
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> depth =\
    \ new ArrayList<Integer>();\n        ArrayList<Integer> stack = new ArrayList<Integer>();\n\
    \        int maxDepth = 0;\n        int newDepth = 0;\n        for (int i = 0;\
    \ i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) ==\
    \ '(') {\n                stack.add(0);\n                newDepth += 1;\n    \
    \        } else if (paren_string.charAt(i) == ')') {\n                stack.remove(stack.size()\
    \ - 1);\n                if (newDepth > maxDepth) {\n                    maxDepth\
    \ = newDepth;\n                }\n                newDepth -= 1;\n           \
    \ } else if (paren_string.charAt(i) == ' ') {\n                depth.add(maxDepth);\n\
    \                maxDepth = 0;\n                newDepth = 0;\n            }\n\
    \        }\n        depth.add(maxDepth);\n        return depth;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Your code here\n      \
    \  return null;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmptix4ctj5.java:19)\n"
  stdout: ''
  timestamp: 1660011320
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        String[] parens = paren_string.split(\"\
    \ \");\n        for (String paren : parens) {\n            int level = 0;\n  \
    \          int max = 0;\n            for (int i = 0; i < paren.length(); i++)\
    \ {\n                char c = paren.charAt(i);\n                if (c == '(')\
    \ {\n                    level++;\n                    max = Math.max(max, level);\n\
    \                } else if (c == ')') {\n                    level--;\n      \
    \          }\n            }\n            result.add(max);\n        }\n       \
    \ return result;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011321
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        // Given a string, return a list of integers\
    \ representing the depth of the nested parentheses.\n        int count = 0;\n\
    \        int max = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n\
    \                if (count > max) {\n                    max = count;\n      \
    \          }\n            } else if (paren_string.charAt(i) == ')') {\n      \
    \          count--;\n            } else if (paren_string.charAt(i) == ' ') {\n\
    \                result.add(max);\n                max = 0;\n                count\
    \ = 0;\n            }\n        }\n        result.add(max);\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> out = new\
    \ ArrayList<Integer>();\n        paren_string = paren_string.replaceAll(\"\\\\\
    s+\", \"\");\n        char[] chars = paren_string.toCharArray();\n        int\
    \ nested = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if\
    \ (chars[i] == '(') {\n                ++nested;\n            } else if (chars[i]\
    \ == ')') {\n                out.add(nested);\n                --nested;\n   \
    \         }\n        }\n        return out;\n}\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcnxqc6ft.java:30)\n"
  stdout: ''
  timestamp: 1660011321
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        Scanner sc = new Scanner(paren_string);\n\
    \        while (sc.hasNext()) {\n            String parens = sc.next();\n    \
    \        int max_depth = 0;\n            int current_depth = 0;\n            for\
    \ (int i = 0; i < parens.length(); i++) {\n                if (parens.charAt(i)\
    \ == '(') {\n                    current_depth++;\n                    max_depth\
    \ = Math.max(max_depth, current_depth);\n                } else {\n          \
    \          current_depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n      // TODO: Your code here.\n \
    \     return null;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmpuhx16a2r.java:19)\n"
  stdout: ''
  timestamp: 1660011321
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> ans = new\
    \ ArrayList<Integer>();\n        char[] parenthesis = paren_string.toCharArray();\n\
    \        int max_depth = 0;\n        int current_depth = 0;\n        for (int\
    \ i = 0; i < parenthesis.length; i++) {\n            if (parenthesis[i] == '(')\
    \ {\n                current_depth++;\n                max_depth = Math.max(max_depth,\
    \ current_depth);\n            } else if (parenthesis[i] == ')') {\n         \
    \       current_depth--;\n            } else if (parenthesis[i] == ' ') {\n  \
    \              ans.add(max_depth);\n                max_depth = 0;\n         \
    \       current_depth = 0;\n            }\n        }\n        ans.add(max_depth);\n\
    \        return ans;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011321
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> depths\
    \ = new ArrayList<Integer>();\n        // TODO: fill in this function and change\
    \ the return statement\n        for (String paren : paren_string.split(\" \"))\
    \ {\n            int depth = 0;\n            int maxDepth = 0;\n            for\
    \ (char c : paren.toCharArray()) {\n                if (c == '(') {\n        \
    \            depth++;\n                    if (depth > maxDepth) {\n         \
    \               maxDepth = depth;\n                    }\n                } else\
    \ if (c == ')') {\n                    depth--;\n                }\n         \
    \   }\n            depths.add(maxDepth);\n        }\n        return depths;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> level =\
    \ new ArrayList<Integer>();\n        int total = 0;\n        for (char c : paren_string.toCharArray())\
    \ {\n            if (c == '(') {\n                total += 1;\n            } else\
    \ if (c == ')') {\n                total -= 1;\n            } else if (c == '\
    \ ') {\n                level.add(total);\n                total = 0;\n      \
    \      }\n        }\n        level.add(total);\n        return level;\n}\n   \
    \ public static void main(String[] args) {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm46m0dwr.java:31)\n"
  stdout: ''
  timestamp: 1660011321
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        String[] parenthesis_groups\
    \ = paren_string.split(\" \");\n        ArrayList<Integer> paren_depth = new ArrayList<Integer>();\n\
    \        for (String group : parenthesis_groups) {\n            int max_depth\
    \ = 0;\n            int depth = 0;\n            for (int i = 0; i < group.length();\
    \ i++) {\n                char c = group.charAt(i);\n                if (c ==\
    \ '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            paren_depth.add(max_depth);\n \
    \       }\n        return paren_depth;\n}\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        ArrayList<Character> paren = new ArrayList<Character>();\n\
    \        for (int i = 0; i < paren_string.length(); i++) {\n            char c\
    \ = paren_string.charAt(i);\n            if (c == ' ') {\n                result.add(paren.size());\n\
    \                paren.clear();\n            } else {\n                paren.add(c);\n\
    \            }\n        }\n        result.add(paren.size());\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkq3z_mgr.java:30)\n"
  stdout: ''
  timestamp: 1660011321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmpueviiujl.java:18)\n"
  stdout: ''
  timestamp: 1660011314
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmpueviiujl.java:18)\n"
  stdout: ''
  timestamp: 1660011314
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Write your code here\n\
    \        ArrayList<Integer> depths = new ArrayList<Integer>();\n        int group\
    \ = 0;\n        int maxDepth = 0;\n        int count = 0;\n        for (int i\
    \ = 0; i < paren_string.length(); i++) {\n            char x = paren_string.charAt(i);\n\
    \            if (x == '(') {\n                group++;\n                count++;\n\
    \                if (count > maxDepth) {\n                    maxDepth = count;\n\
    \                }\n            } else if (x == ')') {\n                count--;\n\
    \            } else if (x == ' ') {\n                depths.add(maxDepth);\n \
    \               maxDepth = 0;\n                count = 0;\n                group\
    \ = 0;\n            }\n        }\n        depths.add(maxDepth);\n        return\
    \ depths;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011321
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Write your code here\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>();\n        int last\
    \ = 0;\n        while (last != -1) {\n            last = paren_string.indexOf('(',\
    \ last);\n            if (last != -1) {\n                int counter = 0;\n  \
    \              int start = last;\n                while (start != -1) {\n    \
    \                start = paren_string.indexOf('(', start + 1);\n             \
    \       if (start != -1) {\n                        counter++;\n             \
    \       }\n                }\n                result.add(counter);\n         \
    \       last++;\n            }\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd862ng7e.java:36)\n"
  stdout: ''
  timestamp: 1660011322
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> ans = new\
    \ ArrayList<Integer>();\n        // For each of the group, find the maximum depth.\n\
    \        for (String sub_group : paren_string.split(\" \")) {\n            int\
    \ curr_max = 0;\n            int curr_depth = 0;\n            for (int i = 0;\
    \ i < sub_group.length(); i++) {\n                if (sub_group.charAt(i) == '(')\
    \ {\n                    curr_depth++;\n                    curr_max = Math.max(curr_max,\
    \ curr_depth);\n                } else {\n                    curr_depth--;\n\
    \                }\n            }\n            ans.add(curr_max);\n        }\n\
    \        return ans;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011321
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> output\
    \ = new ArrayList<Integer>();\n        // ----------------------------\n     \
    \   // Implement the body of this method.\n        // ----------------------------\n\
    \        ArrayList<String> tokens = new ArrayList<String>(Arrays.asList(paren_string.split(\"\
    \\\\s+\")));\n        for (String t : tokens) {\n            //System.out.println(t);\n\
    \            Stack<Character> parens = new Stack<Character>();\n            int\
    \ maxDepth = 0;\n            int depth = 0;\n            for (char c : t.toCharArray())\
    \ {\n                if (c == '(') {\n                    parens.push(c);\n  \
    \                  depth++;\n                    if (depth > maxDepth) maxDepth\
    \ = depth;\n                } else if (c == ')') {\n                    if (parens.isEmpty())\
    \ break;\n                    if (parens.peek() == '(') {\n                  \
    \      parens.pop();\n                        depth--;\n                    }\n\
    \                }\n            }\n            if (parens.isEmpty()) output.add(maxDepth);\n\
    \            else output.add(0);\n        }\n        return output;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011322
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> max_nested_list\
    \ = new ArrayList<Integer>();\n        String[] group_strings = paren_string.split(\"\
    \ \");\n        for (String group_string : group_strings) {\n            int depth\
    \ = 0;\n            int max_depth = 0;\n            for (int i = 0; i < group_string.length();\
    \ i++) {\n                char c = group_string.charAt(i);\n                if\
    \ (c == '(') {\n                    depth += 1;\n                    max_depth\
    \ = Math.max(max_depth, depth);\n                } else if (c == ')') {\n    \
    \                depth -= 1;\n                }\n            }\n            max_nested_list.add(max_depth);\n\
    \        }\n        return max_nested_list;\n}\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011322
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> parenLevels\
    \ = new ArrayList<Integer>();\n        int parens = 0;\n        int maxLevel =\
    \ 0;\n        for (char c : paren_string.toCharArray()) {\n            if (c ==\
    \ '(') {\n                parens++;\n                maxLevel = Math.max(maxLevel,\
    \ parens);\n            } else if (c == ')') {\n                parens--;\n  \
    \          } else if (c == ' ') {\n                parenLevels.add(maxLevel);\n\
    \                maxLevel = 0;\n                parens = 0;\n            }\n \
    \       }\n        parenLevels.add(maxLevel);\n        return parenLevels;\n}\n\
    \    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> list =\
    \ new ArrayList<Integer>();\n        // Create a stack and push the first item\
    \ i.e. beginning index.\n        Stack<Integer> stack = new Stack<Integer>();\n\
    \        stack.push(0);\n        int n = paren_string.length();\n        for (int\
    \ i = 0; i < n; i++) {\n            char ch = paren_string.charAt(i);\n      \
    \      if (ch == '(') {\n                // If there is an opening parenthesis,\
    \ we add it to the stack.\n                stack.push(0);\n            } else\
    \ if (ch == ')') {\n                // If there is a closing parenthesis, we increment\
    \ the top of the stack.\n                stack.push(stack.pop() + 1);\n      \
    \      } else if (ch == ' ') {\n                // For spaces, we pop the stack\
    \ and add it to the list.\n                list.add(stack.pop());\n          \
    \      // Add a zero to the stack to restart the counting.\n                stack.push(0);\n\
    \            }\n        }\n        // Add the last one.\n        list.add(stack.pop());\n\
    \        return list;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnm0xdmme.java:40)\n"
  stdout: ''
  timestamp: 1660011322
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> parse_list\
    \ = new ArrayList<Integer>();\n        String[] list = paren_string.split(\" \"\
    );\n        for (String str : list) {\n            int count = 0;\n          \
    \  int max = 0;\n            char[] ch = str.toCharArray();\n            for (char\
    \ c : ch) {\n                if (c == '(') {\n                    count++;\n \
    \                   if (count > max) {\n                        max = count;\n\
    \                    }\n                } else if (c == ')') {\n             \
    \       count--;\n                }\n            }\n            parse_list.add(max);\n\
    \        }\n        return parse_list;\n}\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011322
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        String[] paren_strings = paren_string.split(\"\
    \ \");\n        for (String paren_string_ : paren_strings) {\n            int\
    \ max_depth = 0;\n            int depth = 0;\n            for (char c : paren_string_.toCharArray())\
    \ {\n                if (c == '(') {\n                    depth++;\n         \
    \           max_depth = Math.max(max_depth, depth);\n                } else if\
    \ (c == ')') {\n                    depth--;\n                }\n            }\n\
    \            result.add(max_depth);\n        }\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Your code here\n      \
    \  int n = paren_string.length();\n        ArrayList<Integer> res = new ArrayList<>();\n\
    \        int level=0;\n        char c;\n        for(int i=0;i<n;i++){\n      \
    \      c = paren_string.charAt(i);\n            if(c=='('){\n                level++;\n\
    \            }\n            else if(c==')'){\n                level--;\n     \
    \       }\n            else if(c==' '){\n                res.add(level);\n   \
    \             level=0;\n            }\n        }\n        res.add(level);\n  \
    \      return res;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgb363udo.java:37)\n"
  stdout: ''
  timestamp: 1660011322
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        Scanner sc = new Scanner(paren_string);\n\
    \        while (sc.hasNext()) {\n            String s = sc.next();\n         \
    \   int count = 0;\n            int curr_max = 0;\n            for (int i = 0;\
    \ i < s.length(); i++) {\n                if (s.charAt(i) == '(') count++;\n \
    \               else if (s.charAt(i) == ')') count--;\n                curr_max\
    \ = Math.max(curr_max, count);\n            }\n            result.add(curr_max);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmpueviiujl.java:18)\n"
  stdout: ''
  timestamp: 1660011314
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> results\
    \ = new ArrayList<Integer>();\n        ArrayList<String> parenGroups = new ArrayList<String>(Arrays.asList(paren_string.split(\"\
    \ \")));\n        for (String group : parenGroups) {\n            int open = 0;\n\
    \            int maxDepth = 0;\n            for (int i = 0; i < group.length();\
    \ i++) {\n                if (group.charAt(i) == '(') {\n                    open++;\n\
    \                    maxDepth = Math.max(maxDepth, open);\n                } else\
    \ if (group.charAt(i) == ')') {\n                    open--;\n               \
    \ }\n            }\n            results.add(maxDepth);\n        }\n        return\
    \ results;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011322
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Write your code here\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>();\n        char[]\
    \ charArray = paren_string.toCharArray();\n        int numOfParen = 0;\n     \
    \   int maxParen = 0;\n        for (int i = 0; i < charArray.length; i++) {\n\
    \            if (charArray[i] == '(') {\n                numOfParen++;\n     \
    \           if (numOfParen > maxParen) {\n                    maxParen = numOfParen;\n\
    \                }\n            } else if (charArray[i] == ')') {\n          \
    \      numOfParen--;\n            } else if (charArray[i] == ' ') {\n        \
    \        result.add(maxParen);\n                maxParen = 0;\n              \
    \  numOfParen = 0;\n            }\n        }\n        result.add(maxParen);\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        String[] splits = paren_string.split(\"\
    \ \");\n        ArrayList<Integer> result = new ArrayList<Integer>();\n      \
    \  for (String s : splits) {\n            result.add(getMaxDepth(s, 0, 0));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2jb7kgxi.java:18: error: cannot find symbol\n            result.add(getMaxDepth(s,\
    \ 0, 0));\n                       ^\n  symbol:   method getMaxDepth(String,int,int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // YOUR CODE GOES HERE\n \
    \       return null;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmpvgwty8w3.java:19)\n"
  stdout: ''
  timestamp: 1660011322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Your code goes here.\n\
    \        ArrayList<Integer> level_arr = new ArrayList<Integer>();\n        String[]\
    \ paren_string_arr = paren_string.split(\" \");\n        for (String paren_str\
    \ : paren_string_arr) {\n            level_arr.add(getDeepestLevel(paren_str));\n\
    \        }\n        return level_arr;\n}\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc2c1a88a.java:19: error: cannot find symbol\n            level_arr.add(getDeepestLevel(paren_str));\n\
    \                          ^\n  symbol:   method getDeepestLevel(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011322
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> depth_list\
    \ = new ArrayList<Integer>();\n        StringTokenizer paren_group_tokenizer =\
    \ new StringTokenizer(paren_string);\n        while (paren_group_tokenizer.hasMoreTokens())\
    \ {\n            String paren_group = paren_group_tokenizer.nextToken();\n   \
    \         int depth = 0;\n            int max_depth = 0;\n            for (int\
    \ i = 0; i < paren_group.length(); i++) {\n                char c = paren_group.charAt(i);\n\
    \                if (c == '(') {\n                    depth++;\n             \
    \       if (depth > max_depth)\n                        max_depth = depth;\n \
    \               } else if (c == ')') {\n                    depth--;\n       \
    \         }\n            }\n            depth_list.add(max_depth);\n        }\n\
    \        return depth_list;\n}\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011323
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> results\
    \ = new ArrayList<Integer>();\n        String[] groups = paren_string.split(\"\
    \ \");\n        for (String group : groups) {\n            int level = 0;\n  \
    \          int max = 0;\n            for (int i = 0; i < group.length(); i++)\
    \ {\n                if (group.charAt(i) == '(') {\n                    level++;\n\
    \                    max = Math.max(max, level);\n                } else if (group.charAt(i)\
    \ == ')') {\n                    level--;\n                }\n            }\n\
    \            results.add(max);\n        }\n        return results;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011323
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> output\
    \ = new ArrayList<Integer>();\n        // TODO: your code here!\n        String\
    \ [] arr = paren_string.split(\" \");\n        for(String s : arr){\n        \
    \    int cur_max = 0;\n            int cur_count = 0;\n            for(int i =\
    \ 0; i < s.length(); i++){\n                if(s.charAt(i) == '('){\n        \
    \            cur_count += 1;\n                    cur_max = Math.max(cur_max,\
    \ cur_count);\n                }\n                else{\n                    cur_count\
    \ -= 1;\n                }\n            }\n            output.add(cur_max);\n\
    \        }\n        return output;\n}\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011323
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> ans = new\
    \ ArrayList<Integer>();\n        String[] split_paren_string = paren_string.split(\"\
    \ \");\n        for (String parens : split_paren_string) {\n            int max_level\
    \ = 0;\n            int curr_level = 0;\n            for (char paren : parens.toCharArray())\
    \ {\n                if (paren == '(') {\n                    curr_level++;\n\
    \                    max_level = Math.max(max_level, curr_level);\n          \
    \      } else {\n                    curr_level--;\n                }\n      \
    \      }\n            ans.add(max_level);\n        }\n        return ans;\n}\n\
    \    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> depths\
    \ = new ArrayList<Integer>();\n        // Write your code here\n        return\
    \ depths;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqkvrq5a3.java:20)\n"
  stdout: ''
  timestamp: 1660011323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Implement this\n      \
    \  return null;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmpnw_ol3fg.java:19)\n"
  stdout: ''
  timestamp: 1660011323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Step 1: compute the string\
    \ representing the nesting\n        // Consider (())()\n        // output should\
    \ be 123123\n        int depth = 0;\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < paren_string.length(); i++) {\n            switch\
    \ (paren_string.charAt(i)) {\n                case '(':\n                    depth++;\n\
    \                    break;\n                case ')':\n                    depth--;\n\
    \                    break;\n                default:\n                    break;\n\
    \            }\n            sb.append(depth);\n        }\n        String nesting_string\
    \ = sb.toString();\n        // Step 2: find the highest nesting level\n      \
    \  // This can be done in linear time\n        int max_depth = 0;\n        for\
    \ (int i = 0; i < nesting_string.length(); i++) {\n            max_depth = Math.max(max_depth,\
    \ Character.getNumericValue(nesting_string.charAt(i)));\n        }\n        //\
    \ Step 3: generate the output\n        // All the positions in the nesting string\
    \ that are\n        // equal to the depth are positions of the start of a\n  \
    \      // parentheses group.\n        ArrayList<Integer> output = new ArrayList<Integer>();\n\
    \        for (int depth_index = 1; depth_index <= max_depth; depth_index++) {\n\
    \            // We use char matching because it is faster\n            // than\
    \ using regex\n            char depth_char = Character.forDigit(depth_index, 10);\n\
    \            for (int i = 0; i < nesting_string.length(); i++) {\n           \
    \     if (nesting_string.charAt(i) == depth_char) {\n                    int nested_paren_start\
    \ = i;\n                    // We need to find the first occurence of the\n  \
    \                  // character of the same depth\n                    int j =\
    \ nesting_string.indexOf(depth_char, i + 1);\n                    // If the index\
    \ is not found, it will be -1\n                    // and then the length of the\
    \ string is selected\n                    int nested_paren_end = (j == -1) ? nesting_string.length()\
    \ : j;\n                    output.add(nested_paren_end - nested_paren_start);\n\
    \                   \n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj1gv9v2q.java:61: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011322
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // new ArrayList to store\
    \ number of levels of nested parentheses\n        ArrayList<Integer> level_array\
    \ = new ArrayList<Integer>();\n        // new ArrayList to store the beginning\
    \ and end index of each group of parentheses\n        ArrayList<Pair<Integer,\
    \ Integer>> pair_array = new ArrayList<Pair<Integer, Integer>>();\n        //\
    \ variables for building pair_array\n        Integer paren_count = 0;\n      \
    \  Integer start_idx = null;\n        Integer end_idx = null;\n        // loop\
    \ through the string to build pair_array\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                paren_count++;\n\
    \                if (start_idx == null) {\n                    start_idx = i;\n\
    \                }\n            } else if (paren_string.charAt(i) == ')') {\n\
    \                paren_count--;\n                if (paren_count == 0) {\n   \
    \                 end_idx = i;\n                    pair_array.add(new Pair<Integer,\
    \ Integer>(start_idx, end_idx));\n                    start_idx = null;\n    \
    \                end_idx = null;\n                }\n            }\n        }\n\
    \        // loop through pair_array to compute maximum level of nested parentheses\
    \ for each group\n        for (Pair<Integer, Integer> pair : pair_array) {\n \
    \           String paren_group = paren_string.substring(pair.getValue0(), pair.getValue1()\
    \ + 1);\n            level_array.add(parseNestedParensHelper(paren_group));\n\
    \        }\n        return level_array;\n}\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmputc1qpp4.java:43: error: cannot find symbol\n            level_array.add(parseNestedParensHelper(paren_group));\n\
    \                            ^\n  symbol:   method parseNestedParensHelper(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> max_nestings\
    \ = new ArrayList<Integer>();\n        int[] max_nesting = new int[1];\n     \
    \   paren_string.split(\" \").forEach(paren_group -> {\n            max_nesting[0]\
    \ = 0;\n            parseNestedParensHelper(paren_group, 0, max_nesting);\n  \
    \          max_nestings.add(max_nesting[0]);\n        });\n        return max_nestings;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphvqlz9g5.java:17: error: cannot find symbol\n        paren_string.split(\"\
    \ \").forEach(paren_group -> {\n                               ^\n  symbol:  \
    \ method forEach((paren_gro[...]]); })\n  location: class String[]\n1 error\n"
  stdout: ''
  timestamp: 1660011323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Returns a list of integers\
    \ representing the max depths for each input group\n        ArrayList<Integer>\
    \ depths = new ArrayList<Integer>();\n        // Split the input paren_string\
    \ on whitespace character\n        String[] split_paren_string = paren_string.split(\"\
    \ \");\n        // Loop through the list of groups and add their max depths to\
    \ the depths list\n        for (String group : split_paren_string) {\n       \
    \     depths.add(getMaxDepth(group));\n        }\n        return depths;\n}\n\
    \    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpefeux8py.java:21: error: cannot find symbol\n            depths.add(getMaxDepth(group));\n\
    \                       ^\n  symbol:   method getMaxDepth(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011323
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> max_nesting\
    \ = new ArrayList<Integer>();\n        for (String each: paren_string.split(\"\
    \ \")) {\n            int max = 0;\n            int curr = 0;\n            for\
    \ (int i = 0; i < each.length(); i++) {\n                if (each.charAt(i) ==\
    \ '(') {\n                    curr++;\n                    max = Math.max(max,\
    \ curr);\n                } else {\n                    curr--;\n            \
    \    }\n            }\n            max_nesting.add(max);\n        }\n        return\
    \ max_nesting;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011323
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> max_nesting\
    \ = new ArrayList<Integer>();\n        String[] paren_groups = paren_string.split(\"\
    \ \");\n        for (String paren_group : paren_groups) {\n            int count\
    \ = 0;\n            int max_count = 0;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                if (paren_group.charAt(i) == '(') {\n              \
    \      count++;\n                    if (count > max_count) {\n              \
    \          max_count = count;\n                    }\n                } else if\
    \ (paren_group.charAt(i) == ')') {\n                    count--;\n           \
    \     }\n            }\n            max_nesting.add(max_count);\n        }\n \
    \       return max_nesting;\n}\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011323
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Write your code here\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>();\n        // TODO:\
    \ parse each paren string and store its result in result\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3oi_hubd.java:21)\n"
  stdout: ''
  timestamp: 1660011324
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Write your code here.\n\
    \        int count = 0;\n        int max = 0;\n        ArrayList<Integer> output\
    \ = new ArrayList<Integer>();\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            char curr = paren_string.charAt(i);\n            if (curr\
    \ == '(') {\n                count++;\n                max = Math.max(max, count);\n\
    \            } else if (curr == ')') {\n                count--;\n           \
    \ } else if (curr == ' ') {\n                output.add(max);\n              \
    \  max = 0;\n                count = 0;\n            }\n        }\n        output.add(max);\n\
    \        return output;\n}\n    public static void main(String[] args) {\n   \
    \ assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n      ArrayList<Integer> res = new\
    \ ArrayList<Integer>();\n      // Implement here\n      return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw7ei329l.java:20)\n"
  stdout: ''
  timestamp: 1660011323
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n\t\tArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n\t\tif (paren_string.length() == 0) {\n\t\t\treturn result;\n\
    \t\t}\n\t\tfor (String paren_group : paren_string.split(\" \")) {\n\t\t\tint len\
    \ = paren_group.length();\n\t\t\tint depth = 0;\n\t\t\tint max_depth = 0;\n\t\t\
    \tfor (int i = 0; i < len; i++) {\n\t\t\t\tif (paren_group.charAt(i) == '(') {\n\
    \t\t\t\t\tdepth++;\n\t\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t\t\
    } else if (paren_group.charAt(i) == ')') {\n\t\t\t\t\tdepth--;\n\t\t\t\t}\n\t\t\
    \t}\n\t\t\tresult.add(max_depth);\n\t\t}\n\t\treturn result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011324
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        String[] parens = paren_string.split(\"\
    \ \");\n        ArrayList<Integer> result = new ArrayList<Integer>();\n      \
    \  int min_length = Integer.MAX_VALUE;\n        int max_length = Integer.MIN_VALUE;\n\
    \        for (String paren : parens) {\n            if (paren.length() < min_length)\
    \ min_length = paren.length();\n            if (paren.length() > max_length) max_length\
    \ = paren.length();\n        }\n        for (String paren : parens) {\n      \
    \      StringBuilder curr_str = new StringBuilder();\n            StringBuilder\
    \ next_str = new StringBuilder();\n            int max_depth = 0;\n          \
    \  int depth = 0;\n            for (int i = 0; i < paren.length(); i++) {\n  \
    \              char curr_char = paren.charAt(i);\n                if (curr_char\
    \ == '(') {\n                    depth++;\n                    if (depth > max_depth)\
    \ max_depth = depth;\n                } else if (curr_char == ')') {\n       \
    \             depth--;\n                }\n            }\n            result.add(max_depth);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011324
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> list =\
    \ new ArrayList<Integer>();\n        for (String s : paren_string.split(\" \"\
    )) {\n            int count = 0;\n            int max = 0;\n            for (int\
    \ i = 0; i < s.length(); i++) {\n                if (s.charAt(i) == '(') {\n \
    \                   count++;\n                    max = Math.max(max, count);\n\
    \                } else if (s.charAt(i) == ')') {\n                    count--;\n\
    \                }\n            }\n            list.add(max);\n        }\n   \
    \     return list;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> results\
    \ = new ArrayList<Integer>();\n        String[] paren_strings = paren_string.split(\"\
    \ \");\n        for (String ps : paren_strings) {\n            results.add(parseNestedParensAux(ps));\n\
    \        }\n        return results;\n}\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkk5xizyu.java:18: error: cannot find symbol\n            results.add(parseNestedParensAux(ps));\n\
    \                        ^\n  symbol:   method parseNestedParensAux(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011324
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> output\
    \ = new ArrayList<Integer>();\n        // Get groups from the string using spaces\
    \ as delimiter\n        String[] groups = paren_string.split(\" \");\n       \
    \ for (String g : groups) {\n            int count = 0;\n            int max_count\
    \ = 0;\n            for (int i = 0; i < g.length(); i++) {\n                if\
    \ (g.charAt(i) == '(') {\n                    count++;\n                    max_count\
    \ = Math.max(max_count, count);\n                } else if (g.charAt(i) == ')')\
    \ {\n                    count--;\n                }\n            }\n        \
    \    output.add(max_count);\n        }\n        return output;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        // Your code here\n        String[] parenGroups\
    \ = paren_string.split(\" \");\n        //System.out.println(parenGroups.length);\n\
    \        for(int i = 0; i < parenGroups.length; i++){\n            int count =\
    \ 0;\n            int index = 0;\n            for(int j = 0; j < parenGroups[i].length();\
    \ j++){\n                if(parenGroups[i].charAt(j) == '('){\n              \
    \      count++;\n                }\n                else if(parenGroups[i].charAt(j)\
    \ == ')'){\n                    count--;\n                }\n                if(count\
    \ == 0){\n                    index = j;\n                    break;\n       \
    \         }\n            }\n            // System.out.println(parenGroups[i].substring(0,\
    \ index + 1));\n            result.add(count_parens(parenGroups[i].substring(0,\
    \ index + 1)));\n        }\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3_2yqtfj.java:35: error: cannot find symbol\n            result.add(count_parens(parenGroups[i].substring(0,\
    \ index + 1)));\n                       ^\n  symbol:   method count_parens(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n\t\tArrayList<Integer> paren_level\
    \ = new ArrayList<Integer>();\n\t\tfor (String paren : paren_string.split(\" \"\
    )) {\n\t\t\tStack<Character> st = new Stack<Character>();\n\t\t\tint level = 0;\n\
    \t\t\tfor (char bracket : paren.toCharArray()) {\n\t\t\t\tif (bracket == '(')\
    \ {\n\t\t\t\t\tst.push(bracket);\n\t\t\t\t\tlevel++;\n\t\t\t\t} else if (bracket\
    \ == ')') {\n\t\t\t\t\tst.pop();\n\t\t\t\t\tlevel--;\n\t\t\t\t}\n\t\t\t}\n\t\t\
    \tparen_level.add(level);\n\t\t}\n\t\treturn paren_level;\n}\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwua0ulej.java:33)\n"
  stdout: ''
  timestamp: 1660011324
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> maxLevel\
    \ = new ArrayList<Integer>();\n        int level = 0;\n        int max = 0;\n\
    \        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                level++;\n                if (level > max) {\n  \
    \                  max = level;\n                }\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                level--;\n            } else if (paren_string.charAt(i)\
    \ == ' ') {\n                maxLevel.add(max);\n                max = 0;\n  \
    \              level = 0;\n            }\n        }\n        maxLevel.add(max);\n\
    \        return maxLevel;\n}\n    public static void main(String[] args) {\n \
    \   assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011324
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        String[] input = paren_string.split(\"\
    \ \");\n        for (String s : input) {\n            int num = 0;\n         \
    \   int max_num = 0;\n            for (int i = 0; i < s.length(); i++) {\n   \
    \             if (s.charAt(i) == '(') {\n                    num++;\n        \
    \            max_num = Math.max(max_num, num);\n                } else if (s.charAt(i)\
    \ == ')') {\n                    num--;\n                }\n            }\n  \
    \          result.add(max_num);\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011324
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> list =\
    \ new ArrayList<Integer>();\n        char[] chars = paren_string.toCharArray();\n\
    \        int i = 0;\n        while (i < chars.length) {\n            int max =\
    \ 0;\n            int temp = 0;\n            while (i < chars.length && chars[i]\
    \ != ' ') {\n                if (chars[i] == '(') {\n                    temp++;\n\
    \                    if (temp > max) {\n                        max = temp;\n\
    \                    }\n                } else if (chars[i] == ')') {\n      \
    \              temp--;\n                }\n                i++;\n            }\n\
    \            list.add(max);\n            i++;\n        }\n        return list;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011324
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> out = new\
    \ ArrayList<Integer>();\n        int l = 0;\n        int c = 0;\n        for (int\
    \ i = 0; i < paren_string.length(); i++) {\n            char curr = paren_string.charAt(i);\n\
    \            if (curr == '(') {\n                c++;\n                l = Math.max(l,\
    \ c);\n            } else if (curr == ')') {\n                c--;\n         \
    \   } else if (curr == ' ') {\n                out.add(l);\n                l\
    \ = 0;\n                c = 0;\n            }\n        }\n        out.add(l);\n\
    \        return out;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011324
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        String[] paren_groups = paren_string.split(\"\
    \ \");\n        for (String paren_group : paren_groups) {\n            int nest_level\
    \ = 0;\n            int max_nest_level = 0;\n            for (char paren : paren_group.toCharArray())\
    \ {\n                if (paren == '(') {\n                    nest_level += 1;\n\
    \                    max_nest_level = Math.max(max_nest_level, nest_level);\n\
    \                } else if (paren == ')') {\n                    nest_level -=\
    \ 1;\n                }\n            }\n            result.add(max_nest_level);\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011324
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> res = new\
    \ ArrayList<Integer>();\n        String[] parens = paren_string.split(\" \");\n\
    \        for (String paren : parens) {\n            ArrayList<Character> stack\
    \ = new ArrayList<Character>();\n            int max_size = 0;\n            for\
    \ (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    stack.add('(');\n                } else {\n \
    \                   stack.remove(stack.size() - 1);\n                }\n     \
    \           max_size = Math.max(max_size, stack.size());\n            }\n    \
    \        res.add(max_size);\n        }\n        return res;\n}\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011324
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Input string with multiple\
    \ nested groups\n        String input = paren_string;\n        // Split string\
    \ on spaces\n        String[] splitted = input.split(\" \");\n        //\n   \
    \     String paren = \"\";\n        // List to store levels\n        ArrayList<Integer>\
    \ levels = new ArrayList<Integer>();\n        // Iterate over each splitted string\n\
    \        for (int i = 0; i < splitted.length; i++) {\n            paren = splitted[i];\n\
    \            // Track nesting levels\n            int level = 0;\n           \
    \ // Track the max level\n            int maxLevel = 0;\n            // Iterate\
    \ over the string\n            for (int j = 0; j < paren.length(); j++) {\n  \
    \              // If '(' push the level\n                if (paren.charAt(j) ==\
    \ '(') {\n                    level += 1;\n                }\n               \
    \ // If ')' pop the level\n                else if (paren.charAt(j) == ')') {\n\
    \                    level -= 1;\n                }\n                // Keep track\
    \ of the max level\n                if (level > maxLevel) {\n                \
    \    maxLevel = level;\n                }\n            }\n            // Add max\
    \ level to the list\n            levels.add(maxLevel);\n        }\n        return\
    \ levels;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // YOUR CODE HERE\n      \
    \  return null;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmpty7skdzm.java:19)\n"
  stdout: ''
  timestamp: 1660011324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        String[] groups = paren_string.split(\"\
    \ \");\n        ArrayList<Integer> result = new ArrayList<Integer>();\n      \
    \  for (String group : groups) {\n            result.add(parseNestedParensHelper(group));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ae7g5i0.java:18: error: cannot find symbol\n            result.add(parseNestedParensHelper(group));\n\
    \                       ^\n  symbol:   method parseNestedParensHelper(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011324
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> results\
    \ = new ArrayList<Integer>();\n        int count = 0;\n        int max_count =\
    \ 0;\n        boolean new_group = true;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            char ch = paren_string.charAt(i);\n            if (ch ==\
    \ '(') {\n                count++;\n                if (count > max_count) {\n\
    \                    max_count = count;\n                }\n            } else\
    \ if (ch == ')') {\n                count--;\n            } else if (ch == ' ')\
    \ {\n                if (new_group) {\n                    results.add(max_count);\n\
    \                    max_count = 0;\n                    new_group = false;\n\
    \                }\n            } else {\n                new_group = true;\n\
    \            }\n        }\n        results.add(max_count);\n        return results;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcphfn2ao.java:42)\n"
  stdout: ''
  timestamp: 1660011325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmpueviiujl.java:18)\n"
  stdout: ''
  timestamp: 1660011314
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> results\
    \ = new ArrayList<Integer>();\n        for (String group : paren_string.split(\"\
    \ \")) {\n            Stack<Character> paren_stack = new Stack<Character>();\n\
    \            int level = 0;\n            for (char c : group.toCharArray()) {\n\
    \                if (c == '(') {\n                    paren_stack.push(c);\n \
    \                   level = Math.max(level, paren_stack.size());\n           \
    \     } else if (c == ')') {\n                    paren_stack.pop();\n       \
    \         }\n            }\n            results.add(level);\n        }\n     \
    \   return results;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011325
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        for (String paren : paren_string.split(\"\
    \ \")) {\n            int currentMax = 0;\n            int count = 0;\n      \
    \      for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i)\
    \ == '(') {\n                    count++;\n                    currentMax = Math.max(currentMax,\
    \ count);\n                } else {\n                    count--;\n          \
    \      }\n            }\n            result.add(currentMax);\n        }\n    \
    \    return result;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011325
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        String[] tokens = paren_string.split(\"\
    \ \");\n        ArrayList<Integer> maxNesting = new ArrayList<Integer>();\n  \
    \      for (String token : tokens) {\n            int bracketCount = 0;\n    \
    \        int maxBracketCount = 0;\n            for (int i = 0; i < token.length();\
    \ i++) {\n                if (token.charAt(i) == '(') {\n                    bracketCount++;\n\
    \                    if (bracketCount > maxBracketCount) {\n                 \
    \       maxBracketCount = bracketCount;\n                    }\n             \
    \   } else if (token.charAt(i) == ')') {\n                    bracketCount--;\n\
    \                }\n            }\n            maxNesting.add(maxBracketCount);\n\
    \        }\n        return maxNesting;\n}\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // TODO\n        return null;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmpij5t_5sg.java:19)\n"
  stdout: ''
  timestamp: 1660011325
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        StringTokenizer st = new StringTokenizer(paren_string);\n\
    \        while (st.hasMoreTokens()) {\n            String group = st.nextToken();\n\
    \            int max = 0;\n            int count = 0;\n            for (int i\
    \ = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(')\
    \ {\n                    count++;\n                    max = Math.max(max, count);\n\
    \                } else if (group.charAt(i) == ')') {\n                    count--;\n\
    \                }\n            }\n            result.add(max);\n        }\n \
    \       return result;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011325
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        if (paren_string == null ||\
    \ paren_string.isEmpty()) {\n            return new ArrayList<Integer>();\n  \
    \      }\n        ArrayList<Integer> res = new ArrayList<Integer>();\n       \
    \ Stack<Character> st = new Stack<Character>();\n        int depth = 0;\n    \
    \    int max_depth = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n\
    \                st.push(c);\n                depth++;\n                max_depth\
    \ = Math.max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        st.pop();\n                depth--;\n            } else if (c == ' ')\
    \ {\n                res.add(max_depth);\n                max_depth = 0;\n   \
    \             depth = 0;\n            }\n        }\n        res.add(max_depth);\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> results\
    \ = new ArrayList<Integer>();\n        String[] paren_groups = paren_string.split(\"\
    \ \");\n        for (String paren_group : paren_groups) {\n            int max_level\
    \ = 1;\n            int current_level = 1;\n            for (int i = 0; i < paren_group.length();\
    \ i++) {\n                String curr_char = paren_group.substring(i, i + 1);\n\
    \                if (curr_char.equals(\"(\")) {\n                    current_level++;\n\
    \                    if (current_level > max_level) {\n                      \
    \  max_level = current_level;\n                    }\n                } else if\
    \ (curr_char.equals(\")\")) {\n                    current_level--;\n        \
    \        }\n            }\n            results.add(max_level);\n        }\n  \
    \      return results;\n}\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppk5tf9_v.java:36)\n"
  stdout: ''
  timestamp: 1660011325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> paren_depth\
    \ = new ArrayList<Integer>();\n        for (String paren_substring : paren_string.split(\"\
    \ \")) {\n            Stack<Character> paren_stack = new Stack<Character>();\n\
    \            for (char paren : paren_substring.toCharArray()) {\n            \
    \    if (paren == '(') {\n                    paren_stack.push(paren);\n     \
    \           } else if (paren == ')') {\n                    paren_stack.pop();\n\
    \                }\n            }\n            paren_depth.add(paren_stack.size());\n\
    \        }\n        return paren_depth;\n}\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"\
    () (()) ((())) (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp247nji6_.java:30)\n"
  stdout: ''
  timestamp: 1660011325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmpueviiujl.java:18)\n"
  stdout: ''
  timestamp: 1660011314
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        return null;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.parseNestedParens(String)\"\
    \ is null\n\tat Problem.main(tmpueviiujl.java:18)\n"
  stdout: ''
  timestamp: 1660011314
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n        // [2, 3, 1, 3]\n        ArrayList<Integer>\
    \ maxDepthList = new ArrayList<Integer>();\n        int parenCount = 0;\n    \
    \    int maxDepth = 0;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            if (paren_string.charAt(i) == '(') {\n                parenCount++;\n\
    \                if (parenCount > maxDepth) {\n                    maxDepth =\
    \ parenCount;\n                }\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                parenCount--;\n            } else if (paren_string.charAt(i)\
    \ == ' ') {\n                maxDepthList.add(maxDepth);\n                maxDepth\
    \ = 0;\n                parenCount = 0;\n            }\n        }\n        maxDepthList.add(maxDepth);\n\
    \        return maxDepthList;\n}\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // YOUR CODE HERE\n      \
    \  int count = 0;\n        ArrayList<Integer> list = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> temp = new ArrayList<Integer>();\n        for(int\
    \ i = 0; i < paren_string.length(); i++){\n            if(paren_string.charAt(i)\
    \ == '('){\n                count++;\n            }\n            else if(paren_string.charAt(i)\
    \ == ')'){\n                count--;\n            }\n            else if(paren_string.charAt(i)\
    \ == ' '){\n                temp.add(count);\n                count = 0;\n   \
    \         }\n        }\n        temp.add(count);\n        int max = 0;\n     \
    \   for(int i = 0; i < temp.size(); i++){\n            max = Math.max(max, Math.abs(temp.get(i)));\n\
    \        }\n        for(int i = 0; i < temp.size(); i++){\n            list.add(max\
    \ - Math.abs(temp.get(i)));\n        }\n        return list;\n}\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1lwrgbgd.java:42)\n"
  stdout: ''
  timestamp: 1660011325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> nested_parens\
    \ = new ArrayList<Integer>();\n        int numOpenParens = 0;\n        for (int\
    \ i = 0; i < paren_string.length(); i++) {\n            char ch = paren_string.charAt(i);\n\
    \            if (ch == '(') {\n                numOpenParens++;\n            }\
    \ else if (ch == ')') {\n                numOpenParens--;\n            } else\
    \ if (ch == ' ') {\n                if (numOpenParens > 0) {\n               \
    \     nested_parens.add(numOpenParens);\n                }\n                numOpenParens\
    \ = 0;\n            }\n        }\n        if (numOpenParens > 0) {\n         \
    \   nested_parens.add(numOpenParens);\n        }\n        return nested_parens;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp229ipiry.java:36)\n"
  stdout: ''
  timestamp: 1660011325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Fill in the body of this\
    \ function to parse the paren_string and return the correct output.\n        return\
    \ new ArrayList<Integer>();\n}\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp35bztt7k.java:19)\n"
  stdout: ''
  timestamp: 1660011325
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int max = 0;\n        int balance = 0;\n\
    \        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i)\
    \ == '(') {\n                balance++;\n                max = Math.max(max, balance);\n\
    \            } else if (paren_string.charAt(i) == ')') {\n                balance--;\n\
    \            } else if (paren_string.charAt(i) == ' ') {\n                result.add(max);\n\
    \                max = 0;\n                balance = 0;\n            }\n     \
    \   }\n        result.add(max);\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> output\
    \ = new ArrayList<Integer>();\n        int max = 0;\n        int counter = 0;\n\
    \        String temp = \"\";\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            if (paren_string.charAt(i) == '(') {\n                counter++;\n\
    \                temp += \"(\";\n            } else if (paren_string.charAt(i)\
    \ == ')') {\n                counter--;\n                temp += \")\";\n    \
    \        } else if (paren_string.charAt(i) == ' ') {\n                output.add(counter);\n\
    \                counter = 0;\n                temp = \"\";\n            }\n \
    \       }\n        output.add(counter);\n        return output;\n}\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptct03ki3.java:36)\n"
  stdout: ''
  timestamp: 1660011325
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        return (ArrayList<Integer>)\
    \ Arrays.stream(paren_string.split(\" \"))\n            .map(parens -> parens.chars().reduce(0,\
    \ (max, ch) -> {\n                if (ch == '(') {\n                    return\
    \ max + 1;\n                } else if (ch == ')') {\n                    return\
    \ max - 1;\n                } else {\n                    return max;\n      \
    \          }\n            }, (a, b) -> a > b ? a : b))\n            .collect(Collectors.toList());\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkhs2sk4a.java:16: error: no suitable method found for reduce(int,(max,ch)->[...];\
    \ } },(a,b)->a >[...]a : b)\n            .map(parens -> parens.chars().reduce(0,\
    \ (max, ch) -> {\n                                         ^\n    method IntStream.reduce(int,IntBinaryOperator)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    \    method IntStream.reduce(IntBinaryOperator) is not applicable\n      (actual\
    \ and formal argument lists differ in length)\n/tmp/tmpkhs2sk4a.java:25: error:\
    \ incompatible types: List<Object> cannot be converted to ArrayList<Integer>\n\
    \            .collect(Collectors.toList());\n                    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011325
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        // Delete the following line\
    \ and implement this function.\n        char[] chars = paren_string.toCharArray();\n\
    \        int max_len = 0;\n        int count = 0;\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            if (chars[i] == '(') {\n                count++;\n     \
    \           if (max_len < count) {\n                    max_len = count;\n   \
    \             }\n            } else if (chars[i] == ')') {\n                count--;\n\
    \            } else if (chars[i] == ' ') {\n                result.add(max_len);\n\
    \                max_len = 0;\n                count = 0;\n            }\n   \
    \     }\n        result.add(max_len);\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)3,\
    \ (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)4)))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011325
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer>\
    \ parseNestedParens(String paren_string) {\n        ArrayList<Integer> maxDepth\
    \ = new ArrayList<Integer>();\n        String[] groups = paren_string.split(\"\
    \ \");\n        for (String group : groups) {\n            int depth = 0;\n  \
    \          int max = 0;\n            for (int i = 0; i < group.length(); i++)\
    \ {\n                char c = group.charAt(i);\n                if (c == '(')\
    \ {\n                    depth++;\n                    if (depth > max) {\n  \
    \                      max = depth;\n                    }\n                }\
    \ else if (c == ')') {\n                    depth--;\n                }\n    \
    \        }\n            maxDepth.add(max);\n        }\n        return maxDepth;\n\
    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)1, (int)3)))));\n    assert(parseNestedParens((\"() (()) ((()))\
    \ (((())))\")).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)4)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4)))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011325
