name: HumanEval_160_do_algebra
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 1;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpak28q16v.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4g1uxgh6.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // write your code here\n       \
    \ // Hint: use ArrayList.remove(int index)\n        // Hint: use switch to determine\
    \ which operator to use\n        int result = operand.get(0);\n        operand.remove(0);\n\
    \        while(operand.size() > 0){\n            switch(op.get(0)){\n        \
    \        case \"+\":\n                    result += operand.get(0);\n        \
    \            break;\n                case \"-\":\n                    result -=\
    \ operand.get(0);\n                    break;\n                case \"*\":\n \
    \                   result *= operand.get(0);\n                    break;\n  \
    \              case \"//\":\n                    result /= operand.get(0);\n \
    \                   break;\n                case \"**\":\n                   \
    \ result = (int)Math.pow(result, operand.get(0));\n                    break;\n\
    \            }\n            operand.remove(0);\n            op.remove(0);\n  \
    \      }\n        return result;\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr6eb6l1v.java:55: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int op_1 = operand.get(0);\n    \
    \    int op_2 = operand.get(1);\n        for (int i = 0; i < op.size(); i++) {\n\
    \            switch (op.get(i)) {\n                case \"+\":\n             \
    \       op_1 = op_1 + op_2;\n                    break;\n                case\
    \ \"-\":\n                    op_1 = op_1 - op_2;\n                    break;\n\
    \                case \"*\":\n                    op_1 = op_1 * op_2;\n      \
    \              break;\n                case \"//\":\n                    op_1\
    \ = op_1 / op_2;\n                    break;\n                case \"**\":\n \
    \                   op_1 = (int) Math.pow(op_1, op_2);\n                    break;\n\
    \            }\n            op_2 = operand.get(i + 2);\n        }\n        return\
    \ op_1;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdcyy4n1z.java:51: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Write your code here.\n      \
    \  ArrayList<String> expr = new ArrayList<>();\n        for (int i = 0; i < operand.size();\
    \ i++) {\n            if (i == 0) expr.add(String.valueOf(operand.get(i)));\n\
    \            else {\n                expr.add(op.get(i - 1));\n              \
    \  expr.add(String.valueOf(operand.get(i)));\n            }\n        }\n     \
    \   int i = 0;\n        while (i < expr.size()) {\n            if (expr.get(i).equals(\"\
    **\")) {\n                int left = Integer.parseInt(expr.get(i - 1));\n    \
    \            int right = Integer.parseInt(expr.get(i + 1));\n                expr.set(i\
    \ - 1, String.valueOf(left ** right));\n                expr.remove(i);\n    \
    \            expr.remove(i);\n                i -= 1;\n            }\n       \
    \     i += 1;\n        }\n        i = 0;\n        while (i < expr.size()) {\n\
    \            if (expr.get(i).equals(\"*\")) {\n                int left = Integer.parseInt(expr.get(i\
    \ - 1));\n                int right = Integer.parseInt(expr.get(i + 1));\n   \
    \             expr.set(i - 1, String.valueOf(left * right));\n               \
    \ expr.remove(i);\n                expr.remove(i);\n                i -= 1;\n\
    \            }\n            i += 1;\n        }\n        i = 0;\n        while\
    \ (i < expr.size()) {\n            if (expr.get(i).equals(\"//\")) {\n       \
    \         int left = Integer.parseInt(expr.get(i - 1));\n                int right\
    \ = Integer.parseInt(expr.get(i + 1));\n                expr.set(i - 1, String.valueOf(left\
    \ // right));\n                expr.remove(i);\n                expr.remove(i);\n\
    \                i -= 1;\n            }\n            i += 1;\n        }\n    \
    \    i = 0;\n        while (i < expr.size()) {\n            if (expr.get(i).equals(\"\
    +\")) {\n               \nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8kct3nt_.java:42: error: illegal start of expression\n        \
    \        expr.set(i - 1, String.valueOf(left ** right));\n                   \
    \                                  ^\n/tmp/tmp8kct3nt_.java:66: error: ')' expected\n\
    \                expr.set(i - 1, String.valueOf(left // right));\n           \
    \                                        ^\n/tmp/tmp8kct3nt_.java:79: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmp8kct3nt_.java:79:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp8kct3nt_.java:79: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp8kct3nt_.java:79: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp8kct3nt_.java:79: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp8kct3nt_.java:85: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            String x = op.get(i);\n\
    \            int y = operand.get(i + 1);\n            if (x.equals(\"+\")) {\n\
    \                result += y;\n            } else if (x.equals(\"-\")) {\n   \
    \             result -= y;\n            } else if (x.equals(\"*\")) {\n      \
    \          result *= y;\n            } else if (x.equals(\"/\")) {\n         \
    \       result /= y;\n            } else if (x.equals(\"^\")) {\n            \
    \    result = (int) Math.pow(result, y);\n            }\n        }\n        return\
    \ result;\nreturn 0;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4,\
    \ (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb0ddkykw.java:45: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int res = operand.get(0);\n     \
    \   for (int i = 0; i < op.size(); i++) {\n            String curOp = op.get(i);\n\
    \            if (curOp.equals(\"+\")) {\n                res += operand.get(i\
    \ + 1);\n            } else if (curOp.equals(\"-\")) {\n                res -=\
    \ operand.get(i + 1);\n            } else if (curOp.equals(\"*\")) {\n       \
    \         res *= operand.get(i + 1);\n            } else if (curOp.equals(\"//\"\
    )) {\n                res /= operand.get(i + 1);\n            } else if (curOp.equals(\"\
    **\")) {\n                res = (int) Math.pow(res, operand.get(i + 1));\n   \
    \         }\n        }\n        return res;\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg7_8dgde.java:44: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        if (op.size() == 0 || operand.size()\
    \ == 0) return 0;\n        ArrayList<Integer> tmpOperand = new ArrayList<Integer>();\n\
    \        ArrayList<String> tmpOp = new ArrayList<String>();\n        int ans =\
    \ 0;\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\") || op.get(i).equals(\"-\")) {\n                tmpOperand.add(operand.get(i));\n\
    \                tmpOp.add(op.get(i));\n            } else if (op.get(i).equals(\"\
    *\")) {\n                int t = operand.get(i)*operand.get(i+1);\n          \
    \      tmpOperand.add(t);\n                tmpOp.add(op.get(i));\n           \
    \ } else if (op.get(i).equals(\"//\")) {\n                int t = operand.get(i)/operand.get(i+1);\n\
    \                tmpOperand.add(t);\n                tmpOp.add(op.get(i));\n \
    \           } else if (op.get(i).equals(\"**\")) {\n                int t = (int)Math.pow(operand.get(i),\
    \ operand.get(i+1));\n                tmpOperand.add(t);\n                tmpOp.add(op.get(i));\n\
    \            }\n        }\n        if (tmpOperand.size() == 1) return tmpOperand.get(0);\n\
    \        ans = tmpOperand.get(0);\n        for (int i = 0; i < tmpOp.size(); i++)\
    \ {\n            if (tmpOp.get(i).equals(\"+\")) {\n                ans += tmpOperand.get(i+1);\n\
    \            } else if (tmpOp.get(i).equals(\"-\")) {\n                ans -=\
    \ tmpOperand.get(i+1);\n            }\n        }\n        return ans;\nreturn\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz4i5bgot.java:60: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        Integer result = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                result *=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"/\")) {\n   \
    \             result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    ^\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
    \            }\n        }\n        return result;\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzy905amr.java:43: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int res = operand.get(0);\n     \
    \   for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                res += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                res -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                res *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                res /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                res = (int) Math.pow(res, operand.get(i + 1));\n   \
    \         }\n        }\n        return res;\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplatez235.java:43: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Write your code here\n       \
    \ int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n\
    \            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    /\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\nreturn\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp__tnn4fs.java:44: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Write your code here\n       \
    \ // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        int l = op.size();\n\
    \        int total = operand.get(0);\n        for (int i = 0; i < l; i++) {\n\
    \            switch (op.get(i)) {\n                case \"+\":\n             \
    \       total += operand.get(i + 1);\n                    break;\n           \
    \     case \"-\":\n                    total -= operand.get(i + 1);\n        \
    \            break;\n                case \"*\":\n                    total *=\
    \ operand.get(i + 1);\n                    break;\n                case \"//\"\
    :\n                    total /= operand.get(i + 1);\n                    break;\n\
    \                case \"**\":\n                    total = (int) Math.pow(total,\
    \ operand.get(i + 1));\n                    break;\n            }\n        }\n\
    \        return total;\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp991xkbxc.java:53: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm0_t6p5_.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        if (op.size() != operand.size() -\
    \ 1) return 0;\n        if (op.size() == 0 || operand.size() < 2) return 0;\n\
    \        // create queue of operands and operators\n        ArrayDeque<Integer>\
    \ operands = new ArrayDeque<>();\n        ArrayDeque<String> operators = new ArrayDeque<>();\n\
    \        // fill up queue with operands and operators\n        for (Integer i\
    \ : operand) operands.add(i);\n        for (String s : op) operators.add(s);\n\
    \        // get initial operators\n        int operand1 = operands.poll();\n \
    \       int operand2 = operands.poll();\n        String operator = operators.poll();\n\
    \        // create operand result\n        int result = 0;\n        switch (operator)\
    \ {\n            case \"+\":\n                result = operand1 + operand2;\n\
    \                break;\n            case \"-\":\n                result = operand1\
    \ - operand2;\n                break;\n            case \"*\":\n             \
    \   result = operand1 * operand2;\n                break;\n            case \"\
    //\":\n                result = operand1 / operand2;\n                break;\n\
    \            case \"**\":\n                result = (int) Math.pow(operand1, operand2);\n\
    \                break;\n        }\n        // add result back to queue\n    \
    \    operands.add(result);\n        // build on expression\n        while (!operators.isEmpty())\
    \ {\n            operand1 = operands.poll();\n            operand2 = operands.poll();\n\
    \            operator = operators.poll();\n            result = 0;\n         \
    \   switch (operator) {\n                case \"+\":\n                    result\
    \ = operand1 + operand2;\n                    break;\n                case \"\
    -\":\n                    result = operand1 - operand2;\n                    break;\n\
    \                case \"*\":\n                    result = operand1 * operand2;\n\
    \                    break;\n                case \"//\":\n                  \
    \  result = operand1 / operand2;\n                    break;\n               \
    \ case \"**\":\n                    result = (int) Math.pow(operand1, operand2);\n\
    \                    break;\n            }\n            operands.add(\nreturn\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvtellftb.java:85: error: illegal start of expression\nreturn 0;\n\
    ^\n/tmp/tmpvtellftb.java:85: error: ';' expected\nreturn 0;\n      ^\n/tmp/tmpvtellftb.java:87:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpvtellftb.java:87: error: illegal start of expression\n   \
    \ public static void main(String[] args) {\n           ^\n/tmp/tmpvtellftb.java:87:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpvtellftb.java:87: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpvtellftb.java:87:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpvtellftb.java:93: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            String opr = op.get(i);\n\
    \            if (opr.equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (opr.equals(\"-\")) {\n                result -=\
    \ operand.get(i + 1);\n            } else if (opr.equals(\"*\")) {\n         \
    \       result *= operand.get(i + 1);\n            } else if (opr.equals(\"//\"\
    )) {\n                result /= operand.get(i + 1);\n            } else if (opr.equals(\"\
    **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
    \            }\n        }\n        return result;\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp03loek9p.java:44: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) result += operand.get(i + 1);\n            else if (op.get(i).equals(\"\
    -\")) result -= operand.get(i + 1);\n            else if (op.get(i).equals(\"\
    *\")) result *= operand.get(i + 1);\n            else if (op.get(i).equals(\"\
    /\")) result /= operand.get(i + 1);\n            else if (op.get(i).equals(\"\
    **\")) result = (int) Math.pow(result, operand.get(i + 1));\n        }\n     \
    \   return result;\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1e2autsc.java:37: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzpyjy41_.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        if (op.size() == 0 || operand.size()\
    \ == 0) {\n            return 0;\n        }\n        Stack<Integer> operandStack\
    \ = new Stack<>();\n        operandStack.push(operand.get(0));\n        for (int\
    \ i = 0; i < op.size(); i++) {\n            operandStack.push(operand.get(i +\
    \ 1));\n            int secondOperand = operandStack.pop();\n            int firstOperand\
    \ = operandStack.pop();\n            switch (op.get(i)) {\n                case\
    \ \"+\":\n                    operandStack.push(firstOperand + secondOperand);\n\
    \                    break;\n                case \"-\":\n                   \
    \ operandStack.push(firstOperand - secondOperand);\n                    break;\n\
    \                case \"*\":\n                    operandStack.push(firstOperand\
    \ * secondOperand);\n                    break;\n                case \"//\":\n\
    \                    operandStack.push(firstOperand / secondOperand);\n      \
    \              break;\n                case \"**\":\n                    operandStack.push((int)\
    \ Math.pow(firstOperand, secondOperand));\n                    break;\n      \
    \      }\n        }\n        return operandStack.pop();\nreturn 0;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0_s_4yr4.java:56: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        if (op.size() != operand.size() -\
    \ 1) return 0;\n        List<String> ops = Arrays.asList(\"+\", \"-\", \"*\",\
    \ \"//\", \"**\");\n        if (op.stream().filter(x -> !ops.contains(x)).count()\
    \ > 0) return 0;\n        String expression = String.join(\" \", op);\n      \
    \  for (int n : operand) {\n            expression = expression.replaceFirst(\"\
    \ \", n + \"\");\n        }\n        expression = expression.substring(1);\n \
    \       Expression e = new Expression(expression);\n        return (int)e.eval();\n\
    return 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpylqd28jl.java:36: error: cannot find symbol\n        Expression\
    \ e = new Expression(expression);\n        ^\n  symbol:   class Expression\n \
    \ location: class Problem\n/tmp/tmpylqd28jl.java:36: error: cannot find symbol\n\
    \        Expression e = new Expression(expression);\n                        \
    \   ^\n  symbol:   class Expression\n  location: class Problem\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph2put_st.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      int i = 0;\n        while (i < op.size()) {\n            switch (op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (int) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n            i++;\n        }\n    \
    \    return result;\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaogwl6kw.java:51: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // code here\n        return 0;\n\
    return 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfu9x9yem.java:30: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        if (op.size() == 0 || operand.size()\
    \ == 0)\n            return 0;\n        if (op.size() != operand.size() - 1)\n\
    \            return 0;\n        int res = operand.get(0);\n        for (int i\
    \ = 0; i < op.size(); i++) {\n            String s = op.get(i);\n            if\
    \ (s.equals(\"+\"))\n                res += operand.get(i + 1);\n            else\
    \ if (s.equals(\"-\"))\n                res -= operand.get(i + 1);\n         \
    \   else if (s.equals(\"*\"))\n                res *= operand.get(i + 1);\n  \
    \          else if (s.equals(\"/\"))\n                res /= operand.get(i + 1);\n\
    \            else if (s.equals(\"**\"))\n                res = (int)Math.pow(res,\
    \ operand.get(i + 1));\n        }\n        return res;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqbm1ewb3.java:47: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int res = operand.get(0);\n     \
    \   for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n\
    \                case \"+\":\n                    res += operand.get(i + 1);\n\
    \                    break;\n                case \"-\":\n                   \
    \ res -= operand.get(i + 1);\n                    break;\n                case\
    \ \"*\":\n                    res *= operand.get(i + 1);\n                   \
    \ break;\n                case \"//\":\n                    res /= operand.get(i\
    \ + 1);\n                    break;\n                case \"**\":\n          \
    \          res = (int) Math.pow(res, operand.get(i + 1));\n                  \
    \  break;\n            }\n        }\n        return res;\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2dlkru0e.java:49: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps078w3af.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int ans = operand.get(0);\n     \
    \   for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                ans += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                ans -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                ans *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                ans /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                ans = (int) Math.pow(ans, operand.get(i + 1));\n   \
    \         }\n        }\n        return ans;\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkqptw5h9.java:43: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // please write your code here\n\
    \        int result = operand.get(0);\n        int j = 0;\n        for(int i =\
    \ 1; i < operand.size(); i++) {\n            switch(op.get(j)) {\n           \
    \     case \"+\":\n                    result += operand.get(i);\n           \
    \         break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result = (int)Math.pow(result,\
    \ operand.get(i));\n                    break;\n            }\n            j++;\n\
    \        }\n        return result;\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3kz6i5cc.java:52: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        if (op.size() + 1 != operand.size())\
    \ {\n            throw new IllegalArgumentException(\"operator size + 1 != operand\
    \ size\");\n        }\n        for (int i = 1; i < operand.size(); i++) {\n  \
    \          if (op.get(i - 1).equals(\"+\")) {\n                operand.set(i,\
    \ operand.get(i - 1) + operand.get(i));\n            } else if (op.get(i - 1).equals(\"\
    -\")) {\n                operand.set(i, operand.get(i - 1) - operand.get(i));\n\
    \            } else if (op.get(i - 1).equals(\"*\")) {\n                operand.set(i,\
    \ operand.get(i - 1) * operand.get(i));\n            } else if (op.get(i - 1).equals(\"\
    //\")) {\n                operand.set(i, operand.get(i - 1) / operand.get(i));\n\
    \            } else if (op.get(i - 1).equals(\"**\")) {\n                operand.set(i,\
    \ (int) Math.pow(operand.get(i - 1), operand.get(i)));\n            } else {\n\
    \                throw new IllegalArgumentException(\"unknown operator\");\n \
    \           }\n        }\n        return operand.get(operand.size() - 1);\nreturn\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4sgscmwf.java:47: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            String o = op.get(i);\n\
    \            int o1 = operand.get(i);\n            int o2 = operand.get(i + 1);\n\
    \            if (o.equals(\"+\")) {\n                result = o1 + o2;\n     \
    \       } else if (o.equals(\"-\")) {\n                result = o1 - o2;\n   \
    \         } else if (o.equals(\"*\")) {\n                result = o1 * o2;\n \
    \           } else if (o.equals(\"//\")) {\n                result = o1 / o2;\n\
    \            } else if (o.equals(\"**\")) {\n                result = (int) Math.pow(o1,\
    \ o2);\n            }\n        }\n        return result;\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9ug9x867.java:46: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                result *=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"/\")) {\n   \
    \             result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    ^\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
    \            }\n        }\n        return result;\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9ilz4h33.java:43: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            String operator = op.get(i);\n\
    \            Integer operand1 = operand.get(i);\n            Integer operand2\
    \ = operand.get(i + 1);\n            if (operator.equals(\"+\")) {\n         \
    \       result = operand1 + operand2;\n            } else if (operator.equals(\"\
    -\")) {\n                result = operand1 - operand2;\n            } else if\
    \ (operator.equals(\"*\")) {\n                result = operand1 * operand2;\n\
    \            } else if (operator.equals(\"/\")) {\n                result = operand1\
    \ / operand2;\n            } else if (operator.equals(\"**\")) {\n           \
    \     result = (int) Math.pow(operand1, operand2);\n            }\n        }\n\
    \        return result;\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc1cgfdzu.java:46: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int ans = operand.get(0);\n     \
    \   for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                ans += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                ans -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                ans *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                ans /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                ans = (int) Math.pow(ans, operand.get(i + 1));\n   \
    \         }\n        }\n        return ans;\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbc2_n7gl.java:43: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbuxp549m.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // code here\n        // Operator\
    \ symbol and corresponding char\n        final HashMap<String, Character> osc\
    \ = new HashMap<String, Character>();\n        osc.put(\"+\", '+');\n        osc.put(\"\
    -\", '-');\n        osc.put(\"*\", '*');\n        osc.put(\"/\", '/');\n     \
    \   osc.put(\"^\", '^');\n        // declare and initialize the equation string\n\
    \        String eq = operand.get(0).toString();\n        // iterate through the\
    \ operator list\n        for (int i = 0; i < op.size(); i++) {\n            //\
    \ append the operator and the next operand to the string\n            eq += osc.get(op.get(i))\
    \ + operand.get(i + 1).toString();\n        }\n        // evaluate the equation,\
    \ return the result\n        return new ScriptEngineManager().getEngineByName(\"\
    js\").eval(eq).toString().equals(\"Infinity\") ? 1 : Integer.parseInt(new ScriptEngineManager().getEngineByName(\"\
    js\").eval(eq).toString());\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9_1bo9ma.java:44: error: cannot find symbol\n        return new\
    \ ScriptEngineManager().getEngineByName(\"js\").eval(eq).toString().equals(\"\
    Infinity\") ? 1 : Integer.parseInt(new ScriptEngineManager().getEngineByName(\"\
    js\").eval(eq).toString());\n                   ^\n  symbol:   class ScriptEngineManager\n\
    \  location: class Problem\n/tmp/tmp9_1bo9ma.java:44: error: cannot find symbol\n\
    \        return new ScriptEngineManager().getEngineByName(\"js\").eval(eq).toString().equals(\"\
    Infinity\") ? 1 : Integer.parseInt(new ScriptEngineManager().getEngineByName(\"\
    js\").eval(eq).toString());\n                                                \
    \                                                                            \
    \     ^\n  symbol:   class ScriptEngineManager\n  location: class Problem\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n      int val = operand.get(0);\n      for\
    \ (int i = 0; i < op.size(); i++) {\n        switch (op.get(i)) {\n          case\
    \ \"+\":\n            val += operand.get(i + 1);\n            break;\n       \
    \   case \"-\":\n            val -= operand.get(i + 1);\n            break;\n\
    \          case \"*\":\n            val *= operand.get(i + 1);\n            break;\n\
    \          case \"//\":\n            val /= operand.get(i + 1);\n            break;\n\
    \          case \"**\":\n            val = (int) Math.pow(val, operand.get(i +\
    \ 1));\n            break;\n        }\n      }\n      return val;\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsb9syw7x.java:49: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(operand.get(0));\n        for (int i = 0; i < op.size(); i++)\
    \ {\n            sb.append(op.get(i));\n            sb.append(operand.get(i +\
    \ 1));\n        }\n        return ExpressionEvaluator.eval(sb.toString());\nreturn\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd8ug5euu.java:34: error: cannot find symbol\n        return ExpressionEvaluator.eval(sb.toString());\n\
    \               ^\n  symbol:   variable ExpressionEvaluator\n  location: class\
    \ Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        String temp = String.valueOf(operand.get(0));\n\
    \        for (int i = 0; i < op.size(); i++) {\n            temp += op.get(i)\
    \ + operand.get(i + 1);\n        }\n        return eval(temp);\nreturn 0;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3wdf5xby.java:32: error: cannot find symbol\n        return eval(temp);\n\
    \               ^\n  symbol:   method eval(String)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int i = 1;\n        int result =\
    \ operand.get(0);\n        for (String s : op) {\n            int temp = operand.get(i);\n\
    \            switch (s) {\n                case \"+\":\n                    result\
    \ += temp;\n                    break;\n                case \"-\":\n        \
    \            result -= temp;\n                    break;\n                case\
    \ \"*\":\n                    result *= temp;\n                    break;\n  \
    \              case \"//\":\n                    result /= temp;\n           \
    \         break;\n                case \"**\":\n                    result = (int)\
    \ Math.pow(result, temp);\n                    break;\n            }\n       \
    \     i++;\n        }\n        return result;\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpayty5jed.java:52: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        throw new UnsupportedOperationException(\"\
    You must implement this function!\");\nreturn 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn8p1tav_.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // code starts here.\n        int\
    \ sum = operand.get(0);\n        for(int i = 0; i < op.size(); i++) {\n      \
    \      String operator = op.get(i);\n            if(operator.equals(\"+\")) {\n\
    \                sum += operand.get(i+1);\n            }\n            else if(operator.equals(\"\
    -\")) {\n                sum -= operand.get(i+1);\n            }\n           \
    \ else if(operator.equals(\"*\")) {\n                sum *= operand.get(i+1);\n\
    \            }\n            else if(operator.equals(\"//\")) {\n             \
    \   sum /= operand.get(i+1);\n            }\n            else if(operator.equals(\"\
    **\")) {\n                sum = (int)Math.pow(sum, operand.get(i+1));\n      \
    \      }\n        }\n        return sum;\n        // code ends here.\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmx3qkp36.java:50: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                result *=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n  \
    \              result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
    \            }\n        }\n        return result;\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo5dagqhz.java:43: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int l = op.size();\n        int r\
    \ = operand.get(0);\n        for (int i = 0; i < l; i++) {\n            int o\
    \ = operand.get(i + 1);\n            if (op.get(i).equals(\"+\")) r += o;\n  \
    \          else if (op.get(i).equals(\"-\")) r -= o;\n            else if (op.get(i).equals(\"\
    *\")) r *= o;\n            else if (op.get(i).equals(\"//\")) r /= o;\n      \
    \      else if (op.get(i).equals(\"**\")) r = (int)Math.pow(r, o);\n        }\n\
    \        return r;\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd24kmhgj.java:39: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return evalExpression(buildExpression(op,\
    \ operand), op.size() + 1);\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqv687gjb.java:28: error: cannot find symbol\n        return evalExpression(buildExpression(op,\
    \ operand), op.size() + 1);\n                              ^\n  symbol:   method\
    \ buildExpression(ArrayList<String>,ArrayList<Integer>)\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            String expr = op.get(i);\n\
    \            int n1 = operand.get(i);\n            int n2 = operand.get(i + 1);\n\
    \            switch (expr) {\n                case \"+\":\n                  \
    \  result = n1 + n2;\n                    break;\n                case \"-\":\n\
    \                    result = n1 - n2;\n                    break;\n         \
    \       case \"*\":\n                    result = n1 * n2;\n                 \
    \   break;\n                case \"//\":\n                    result = n1 / n2;\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (int) Math.pow(n1, n2);\n                    break;\n            }\n\
    \        }\n        return result;\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdnb5mpwp.java:52: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Write your code here\n       \
    \ // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        Integer result\
    \ = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n         \
    \   switch (op.get(i)) {\n                case \"+\":\n                    result\
    \ += operand.get(i + 1);\n                    break;\n                case \"\
    -\":\n                    result -= operand.get(i + 1);\n                    break;\n\
    \                case \"*\":\n                    result *= operand.get(i + 1);\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand.get(i + 1);\n                    break;\n               \
    \ case \"**\":\n                    result = (int) Math.pow(result, operand.get(i\
    \ + 1));\n                    break;\n            }\n        }\n        return\
    \ result;\nreturn 0;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4,\
    \ (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyhbvechx.java:52: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        if (op.size() == 0) {\n         \
    \   return 0;\n        } else if (op.size() == 1) {\n            return operand.get(0);\n\
    \        } else {\n            Integer result = operand.get(0);\n            for\
    \ (int i = 0; i < op.size(); i++) {\n                if (op.get(i).equals(\"+\"\
    )) {\n                    result += operand.get(i + 1);\n                } else\
    \ if (op.get(i).equals(\"-\")) {\n                    result -= operand.get(i\
    \ + 1);\n                } else if (op.get(i).equals(\"*\")) {\n             \
    \       result *= operand.get(i + 1);\n                } else if (op.get(i).equals(\"\
    //\")) {\n                    result /= operand.get(i + 1);\n                }\
    \ else if (op.get(i).equals(\"**\")) {\n                    result = (int) Math.pow(result,\
    \ operand.get(i + 1));\n                }\n            }\n            return result;\n\
    \        }\nreturn 0;\n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4,\
    \ (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpclwpar35.java:49: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcwoiylx1.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        //return 0;\n        // Your code\
    \ here\n        int n = op.size();\n        int ans = operand.get(0);\n      \
    \  for(int i = 0; i < n; i++) {\n            if(op.get(i).equals(\"+\")) {\n \
    \               ans += operand.get(i+1);\n            } else if(op.get(i).equals(\"\
    -\")) {\n                ans -= operand.get(i+1);\n            } else if(op.get(i).equals(\"\
    *\")) {\n                ans *= operand.get(i+1);\n            } else if(op.get(i).equals(\"\
    /\")) {\n                ans /= operand.get(i+1);\n            } else if(op.get(i).equals(\"\
    **\")) {\n                ans = (int)Math.pow(ans, operand.get(i+1));\n      \
    \      }\n        }\n        return ans;\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzp6jk30o.java:46: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n      int result = operand.get(0);\n    \
    \  int i = 1;\n      for (String operator : op) {\n        switch (operator) {\n\
    \          case \"+\": result += operand.get(i);\n                    break;\n\
    \          case \"-\": result -= operand.get(i);\n                    break;\n\
    \          case \"*\": result *= operand.get(i);\n                    break;\n\
    \          case \"//\": result /= operand.get(i);\n                    break;\n\
    \          case \"**\": result = (int)Math.pow(result, operand.get(i));\n    \
    \                break;\n        }\n        i++;\n      }\n      return result;\n\
    return 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1b1j9m_4.java:46: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int curr = operand.get(0);\n    \
    \    for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n\
    \                case \"+\":\n                    curr += operand.get(i + 1);\n\
    \                    break;\n                case \"-\":\n                   \
    \ curr -= operand.get(i + 1);\n                    break;\n                case\
    \ \"*\":\n                    curr *= operand.get(i + 1);\n                  \
    \  break;\n                case \"//\":\n                    curr /= operand.get(i\
    \ + 1);\n                    break;\n                case \"**\":\n          \
    \          curr = (int) Math.pow(curr, operand.get(i + 1));\n                \
    \    break;\n            }\n        }\n        return curr;\nreturn 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpehjhkle1.java:49: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaioeblyh.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                result *=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n  \
    \              result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
    \            }\n        }\n        return result;\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxqcpfou3.java:43: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Given `op`, an array of operators,\
    \ and `operand`, an array of operands\n        // (2, 3, 4, 5), evaluate the operation\
    \ 2 + 3 * 4 - 5.\n        // Hint: this question is a little tricky. \n      \
    \  // Note: The length of operator list is equal to the length of operand list\
    \ minus one.\n        // Operand is a list of of non-negative integers.\n    \
    \    // Operator list has at least one operator, and operand list has at least\
    \ two operands.\n        return 0;\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7idyymof.java:35: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // write your code here and return\
    \ the result.\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4,\
    \ (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv4i8o1mw.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        if (op.size() == 0 || operand.size()\
    \ == 0) return 0;\n        int result = operand.get(0);\n        for (int i =\
    \ 0; i < op.size(); i++) {\n            String o = op.get(i);\n            int\
    \ operand2 = operand.get(i + 1);\n            if (o.equals(\"+\")) {\n       \
    \         result += operand2;\n            } else if (o.equals(\"-\")) {\n   \
    \             result -= operand2;\n            } else if (o.equals(\"*\")) {\n\
    \                result *= operand2;\n            } else if (o.equals(\"/\"))\
    \ {\n                result /= operand2;\n            } else if (o.equals(\"**\"\
    )) {\n                result = result ^ operand2;\n            }\n        }\n\
    \        return result;\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo08cwg7g.java:46: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        throw new RuntimeException(\"Not\
    \ Implemented\");\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprpk60ois.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        if (op.size() == 0 || operand.size()\
    \ == 0) return 0;\n        if (op.size() + 1 != operand.size()) return 0;\n  \
    \      int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++)\
    \ {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\nreturn\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnksd3sls.java:45: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoka7t7pi.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            String str = op.get(i);\n\
    \            switch (str) {\n                case \"+\":\n                   \
    \ result += operand.get(i + 1);\n                    break;\n                case\
    \ \"-\":\n                    result -= operand.get(i + 1);\n                \
    \    break;\n                case \"*\":\n                    result *= operand.get(i\
    \ + 1);\n                    break;\n                case \"//\":\n          \
    \          result /= operand.get(i + 1);\n                    break;\n       \
    \         case \"**\":\n                    result = (int) Math.pow(result, operand.get(i\
    \ + 1));\n                    break;\n            }\n        }\n        return\
    \ result;\nreturn 0;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4,\
    \ (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp33w7aaze.java:50: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int ret = 0;\n        return ret;\n\
    return 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmrszzppx.java:30: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        ArrayList<Integer> opd = new ArrayList<Integer>();\n\
    \        ArrayList<String> ops = new ArrayList<String>();\n        String[] operators\
    \ = {\"**\", \"//\", \"*\", \"-\", \"+\"};\n        for (int i = 0; i < op.size();\
    \ i++) {\n            if (ops.size() == 0) {\n                ops.add(op.get(i));\n\
    \                continue;\n            }\n            for (int j = 0; j < operators.length;\
    \ j++) {\n                if (ops.get(ops.size() - 1).equals(operators[j])) {\n\
    \                    if (j < operators.length - 1 && operators[j + 1].equals(op.get(i)))\
    \ {\n                        continue;\n                    }\n              \
    \      else {\n                        ops.add(op.get(i));\n                 \
    \       break;\n                    }\n                }\n                else\
    \ if (j == operators.length - 1) {\n                    ops.add(op.get(i));\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     System.out.println(ops);\n        for (int i = 0; i < ops.size(); i++) {\n\
    \            if (ops.get(i).equals(\"**\")) {\n                int exp = operand.get(i\
    \ + 1);\n                int base = operand.get(i);\n                int result\
    \ = 0;\n                for (int j = 0; j < exp; j++) {\n                    result\
    \ += base;\n                }\n                opd.add(result);\n            }\n\
    \            else if (ops.get(i).equals(\"//\")) {\n                int val =\
    \ operand.get(i);\n                int div = operand.get(i + 1);\n           \
    \     int quotient = 0;\n                while (val >= div) {\n              \
    \      val -= div;\n                    quotient++;\n                }\n     \
    \           opd.add(quotient);\n            }\n            else {\n          \
    \      opd.add(operand.get(i));\n            }\n        }\n        System.out.println(opd);\n\
    \        int counter = 0;\n        while (counter < ops.size()) {\n          \
    \  if (ops.get(counter).equals\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqh_yfegq.java:80: error: ')' expected\n            if (ops.get(counter).equals\n\
    \                                       ^\n/tmp/tmpqh_yfegq.java:83: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpqh_yfegq.java:83:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpqh_yfegq.java:83: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpqh_yfegq.java:83: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpqh_yfegq.java:83: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpqh_yfegq.java:89: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // write your code here\n       \
    \ // please return the result of the evaluation\n        int temp = 0;\n     \
    \   ArrayList<Integer> op1 = new ArrayList<Integer>();\n        ArrayList<String>\
    \ op2 = new ArrayList<String>();\n        for(int i = 0; i < op.size(); i++){\n\
    \            if(op.get(i).equals(\"*\") || op.get(i).equals(\"/\")){\n       \
    \         op1.add(operand.get(i));\n                op2.add(op.get(i));\n    \
    \        }\n            else{\n                if(op1.size() > 0){\n         \
    \           if(op2.get(op2.size() - 1).equals(\"*\")){\n                     \
    \   operand.set(i, op1.get(op1.size() - 1) * operand.get(i));\n              \
    \          op1.remove(op1.size() - 1);\n                        op2.remove(op2.size()\
    \ - 1);\n                    }\n                    else{\n                  \
    \      operand.set(i, op1.get(op1.size() - 1) / operand.get(i));\n           \
    \             op1.remove(op1.size() - 1);\n                        op2.remove(op2.size()\
    \ - 1);\n                    }\n                }\n            }\n        }\n\
    \        for(int i = 0; i < op.size(); i++){\n            switch(op.get(i)){\n\
    \                case \"+\":\n                    temp += operand.get(i + 1);\n\
    \                    break;\n                case \"-\":\n                   \
    \ temp -= operand.get(i + 1);\n                    break;\n                case\
    \ \"*\":\n                    temp *= operand.get(i + 1);\n                  \
    \  break;\n                case \"/\":\n                    temp /= operand.get(i\
    \ + 1);\n                    break;\n                case \"^\":\n           \
    \         temp = (int)Math.pow(temp, operand.get(i + 1));\n                  \
    \  break;\n            }\n        }\n        return temp;\nreturn 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqna4vkev.java:73: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Write your code here!\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4,\
    \ (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc3bxqg2_.java:30: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Start with the first operand.\n\
    \        int res = operand.get(0);\n        // Start the operator index at zero,\
    \ and the operand index at one.\n        int opIndex = 0;\n        int opdIndex\
    \ = 1;\n        // Loop as long as there are operators.\n        while (opIndex\
    \ < op.size()) {\n            // Perform the operation.\n            String operation\
    \ = op.get(opIndex);\n            int operand2 = operand.get(opdIndex);\n    \
    \        switch (operation) {\n                case \"+\":\n                 \
    \   res += operand2;\n                    break;\n                case \"-\":\n\
    \                    res -= operand2;\n                    break;\n          \
    \      case \"*\":\n                    res *= operand2;\n                   \
    \ break;\n                case \"//\":\n                    res /= operand2;\n\
    \                    break;\n                case \"**\":\n                  \
    \  res = (int)Math.pow(res, operand2);\n                    break;\n         \
    \   }\n            // Advance the operator and operand index.\n            opIndex++;\n\
    \            opdIndex++;\n        }\n        return res;\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8gk01hmd.java:60: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Remove the -ve test cases\n  \
    \      if (operand.stream().filter(c -> c < 0).count() > 0) {\n            return\
    \ -1;\n        }\n        // int rep = operand.get(0);\n        // for (int i\
    \ = 0; i < op.size(); i++) {\n        //     int o = operand.get(i + 1);\n   \
    \     //     switch (op.get(i)) {\n        //         case \"+\":\n        //\
    \             rep += o;\n        //             break;\n        //         case\
    \ \"-\":\n        //             rep -= o;\n        //             break;\n  \
    \      //         case \"*\":\n        //             rep *= o;\n        //  \
    \           break;\n        //         case \"//\":\n        //             rep\
    \ /= o;\n        //             break;\n        //         case \"**\":\n    \
    \    //             rep = (int) Math.pow(rep, o);\n        //             break;\n\
    \        //     }\n        // }\n        // return rep;\n        return operand.stream().reduce(0,\
    \ (acc, ele) -> acc + ele);\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzksv5sgj.java:55: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfg_ygdk8.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // write code here\n        // the\
    \ first operator\n        int i = 0;\n        int j = 0;\n        int result =\
    \ 0;\n        int first = operand.get(i);\n        int second = operand.get(i\
    \ + 1);\n        if(op.get(j).equals(\"+\")) {\n            result = first + second;\n\
    \        } else if(op.get(j).equals(\"-\")) {\n            result = first - second;\n\
    \        } else if(op.get(j).equals(\"*\")) {\n            result = first * second;\n\
    \        } else if(op.get(j).equals(\"//\")) {\n            result = first / second;\n\
    \        } else if(op.get(j).equals(\"**\")) {\n            result = (int)Math.pow(first,\
    \ second);\n        }\n        j++;\n        // the rest operators\n        while(j\
    \ < op.size()) {\n            int tmp = operand.get(i + 2);\n            if(op.get(j).equals(\"\
    +\")) {\n                result += tmp;\n            } else if(op.get(j).equals(\"\
    -\")) {\n                result -= tmp;\n            } else if(op.get(j).equals(\"\
    *\")) {\n                result *= tmp;\n            } else if(op.get(j).equals(\"\
    //\")) {\n                result /= tmp;\n            } else if(op.get(j).equals(\"\
    **\")) {\n                result = (int)Math.pow(result, tmp);\n            }\n\
    \            j++;\n        }\n        return result;\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph9izfkpb.java:64: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Enter your code here.\n      \
    \  // Build your algebraic expression using the operator and operand lists, then\
    \ evaluate \n        // the expression and return its value.\n        // This\
    \ is very easy in JavaScript. However in Java you should use reflection.\n   \
    \     // Hint: https://docs.oracle.com/javase/tutorial/reflect/member/methodInvocation.html\n\
    \        // Hint: https://docs.oracle.com/javase/tutorial/reflect/class/classMembers.html\n\
    \        // Note: You may assume that all operators are of one char length and\
    \ are only: +, -, *, /, **.\n        // Note: All operators have standard priorities\
    \ (like the school).\n        // Note: a ** b is equal to Math.pow(a, b) in Java.\n\
    \        // Note: All inputs are valid.\n        // Note: ** has the highest priority.\n\
    \        // Note: *, / and // has equal priorities which is higher than +, -.\n\
    \        // Note: / is not floor division (It's normal division).\n        //\
    \ Note: // is floor division.\n        BigInteger x = BigInteger.valueOf(operand.get(0));\n\
    \        BigInteger y = BigInteger.valueOf(operand.get(1));\n        ArrayList<String>\
    \ newOp = new ArrayList<>();\n        ArrayList<Integer> newOpd = new ArrayList<>();\n\
    \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    **\")) {\n                x = BigInteger.valueOf(Math.pow(x.doubleValue(), y.doubleValue()));\n\
    \                if (i == op.size() - 1) {\n                    return x.intValue();\n\
    \                }\n                else {\n                    y = BigInteger.valueOf(operand.get(i\
    \ + 2));\n                }\n            }\n            else {\n             \
    \   newOp.add(op.get(i));\n                newOpd.add(x.intValue());\n       \
    \         x = y;\n                y = BigInteger.valueOf(operand.get(i + 2));\n\
    \            }\n        }\n        for (int i = 0; i < newOp.\nreturn 0;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2jhnzk_8.java:63: error: <identifier> expected\n        for (int\
    \ i = 0; i < newOp.\n                                  ^\n/tmp/tmp2jhnzk_8.java:64:\
    \ error: not a statement\nreturn 0;\n       ^\n/tmp/tmp2jhnzk_8.java:64: error:\
    \ ')' expected\nreturn 0;\n        ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // FILL IN CODE\n        int result\
    \ = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n         \
    \   if (op.get(i).equals(\"+\")) {\n                result += operand.get(i +\
    \ 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\nreturn\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpidzdn6wu.java:44: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        if (op.size() == 1) {\n         \
    \   int left = operand.get(0);\n            int right = operand.get(1);\n    \
    \        switch (op.get(0)) {\n                case \"+\":\n                 \
    \   return left + right;\n                case \"-\":\n                    return\
    \ left - right;\n                case \"*\":\n                    return left\
    \ * right;\n                case \"//\":\n                    return left / right;\n\
    \                case \"**\":\n                    return (int) Math.pow(left,\
    \ right);\n            }\n        }\n        return -1;\nreturn 0;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6h4sriu0.java:45: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbox0pnkc.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // This is a classic problem of converting\
    \ infix expression to postfix expression and \n        // then evaluating the\
    \ postfix expression.\n        // 1. Infix to postfix conversion: https://www.geeksforgeeks.org/stack-set-2-infix-to-postfix/\n\
    \        // 2. Postfix evaluation: https://www.geeksforgeeks.org/stack-set-4-evaluation-postfix-expression/\n\
    \        // Note:\n        // See cpp solution for detailed implementation.\n\
    \        // Time complexity: O(N)\n        // Space complexity: O(N)\n       \
    \ int size = op.size();\n        int len = size + 1;\n        ArrayList<String>\
    \ postfix = new ArrayList<String>();\n        Stack<String> s = new Stack<String>();\n\
    \        for (int i = 0; i < len; i++) {\n            if (i < size) {\n      \
    \          if (s.isEmpty()) {\n                    s.push(op.get(i));\n      \
    \          } else {\n                    String op1 = op.get(i);\n           \
    \         String op2 = s.peek();\n                    int prec1 = getPrecedence(op1);\n\
    \                    int prec2 = getPrecedence(op2);\n                    if (prec1\
    \ > prec2) {\n                        s.push(op1);\n                    } else\
    \ {\n                        while (!s.isEmpty() && prec1 <= prec2) {\n      \
    \                      postfix.add(s.pop());\n                            if (!s.isEmpty())\
    \ {\n                                op2 = s.peek();\n                       \
    \         prec2 = getPrecedence(op2);\n                            }\n       \
    \                 }\n                        s.push(op1);\n                  \
    \  }\n                }\n            } else {\n                postfix.add(String.valueOf(operand.get(i)));\n\
    \            }\n        }\n        while (!s.isEmpty()) {\n            postfix.add(s.pop());\n\
    \        }\n        Stack<Integer> nums = new Stack<Integer>();\n        for (String\
    \ p : postfix) {\n            if (isOperator(p)) {\n                int num2 =\
    \ nums.pop();\n                int num1 = nums\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5ayqqkqz.java:73: error: ';' expected\n                int num1\
    \ = nums\n                               ^\n/tmp/tmp5ayqqkqz.java:76: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmp5ayqqkqz.java:76:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp5ayqqkqz.java:76: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp5ayqqkqz.java:76: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp5ayqqkqz.java:76: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp5ayqqkqz.java:82: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        Stack<Integer> st = new Stack<>();\n\
    \        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i))\
    \ {\n                case \"+\":\n                    st.push(operand.get(i) +\
    \ operand.get(i + 1));\n                    break;\n                case \"-\"\
    :\n                    st.push(operand.get(i) - operand.get(i + 1));\n       \
    \             break;\n                case \"*\":\n                    st.push(operand.get(i)\
    \ * operand.get(i + 1));\n                    break;\n                case \"\
    //\":\n                    st.push(operand.get(i) / operand.get(i + 1));\n   \
    \                 break;\n                case \"**\":\n                    st.push((int)\
    \ Math.pow(operand.get(i), operand.get(i + 1)));\n                    break;\n\
    \            }\n        }\n        return st.pop();\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpchbmxvuq.java:49: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int res = operand.get(0);\n     \
    \   for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n\
    \                case \"+\": res += operand.get(i + 1); break;\n             \
    \   case \"-\": res -= operand.get(i + 1); break;\n                case \"*\"\
    : res *= operand.get(i + 1); break;\n                case \"//\": res /= operand.get(i\
    \ + 1); break;\n                case \"**\": res = (int)Math.pow(res, operand.get(i\
    \ + 1)); break;\n            }\n        }\n        return res;\nreturn 0;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa511d6jr.java:39: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int s = operand.get(0);\n       \
    \ for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\"\
    )) {\n                s += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                s -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                s *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                s /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                s = (int) Math.pow(s, operand.get(i + 1));\n       \
    \     }\n        }\n        return s;\nreturn 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzs4q7ub7.java:43: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            String o = op.get(i);\n\
    \            if (o.equals(\"+\")) result += operand.get(i + 1);\n            else\
    \ if (o.equals(\"-\")) result -= operand.get(i + 1);\n            else if (o.equals(\"\
    *\")) result *= operand.get(i + 1);\n            else if (o.equals(\"//\")) result\
    \ /= operand.get(i + 1);\n            else if (o.equals(\"**\")) result = (int)\
    \ Math.pow(result, operand.get(i + 1));\n        }\n        return result;\nreturn\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1brax0ar.java:38: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                result *=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n  \
    \              result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
    \            }\n        }\n        return result;\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp59rq2zmf.java:43: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return -1;\nreturn 0;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp72uqikew.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 1;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvyjt3bs_.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return _doAlgebra(op, operand, 0,\
    \ operand.size() - 1);\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoyj_tbj9.java:28: error: cannot find symbol\n        return _doAlgebra(op,\
    \ operand, 0, operand.size() - 1);\n               ^\n  symbol:   method _doAlgebra(ArrayList<String>,ArrayList<Integer>,int,int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // This is a method that uses List\
    \ Iterator.\n        Iterator<String> opIter = op.iterator();\n        Iterator<Integer>\
    \ operandIter = operand.iterator();\n        int prevOperand = operandIter.next();\n\
    \        int result = prevOperand;\n        while (opIter.hasNext()) {\n     \
    \       String operator = opIter.next();\n            int operand1 = operandIter.next();\n\
    \            switch (operator) {\n                case \"+\":\n              \
    \      result = prevOperand + operand1;\n                    break;\n        \
    \        case \"-\":\n                    result = prevOperand - operand1;\n \
    \                   break;\n                case \"*\":\n                    result\
    \ = prevOperand * operand1;\n                    break;\n                case\
    \ \"//\":\n                    result = prevOperand / operand1;\n            \
    \        break;\n                case \"**\":\n                    result = (int)\
    \ Math.pow(prevOperand, operand1);\n                    break;\n            }\n\
    \            prevOperand = result;\n        }\n        return result;\nreturn\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9m2qry1g.java:56: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Write your code here\n       \
    \ // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        int r = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i))\
    \ {\n                case \"+\":\n                    r += operand.get(i + 1);\n\
    \                    break;\n                case \"-\":\n                   \
    \ r -= operand.get(i + 1);\n                    break;\n                case \"\
    *\":\n                    r *= operand.get(i + 1);\n                    break;\n\
    \                case \"//\":\n                    r /= operand.get(i + 1);\n\
    \                    break;\n                case \"**\":\n                  \
    \  r = (int) Math.pow(r, operand.get(i + 1));\n                    break;\n  \
    \          }\n        }\n        return r;\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkaziuckt.java:52: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        Stack<Integer> s = new Stack<>();\n\
    \        for (int i = 0; i < op.size(); i++) {\n            int r = operand.get(i+1);\n\
    \            String t = op.get(i);\n            if (t.equals(\"+\"))\n       \
    \         r = s.pop() + r;\n            else if (t.equals(\"-\"))\n          \
    \      r = s.pop() - r;\n            else if (t.equals(\"*\"))\n             \
    \   r = s.pop() * r;\n            else if (t.equals(\"/\"))\n                r\
    \ = s.pop() / r;\n            else if (t.equals(\"^\"))\n                r = (int)Math.pow(s.pop(),\
    \ r);\n            s.push(r);\n        }\n        return s.pop();\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp960xo52.java:45: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n\
    \                case \"+\": result += operand.get(i + 1); break;\n          \
    \      case \"-\": result -= operand.get(i + 1); break;\n                case\
    \ \"*\": result *= operand.get(i + 1); break;\n                case \"//\": result\
    \ /= operand.get(i + 1); break;\n                case \"**\": result = (int)Math.pow(result,\
    \ operand.get(i + 1)); break;\n            }\n        }\n        return result;\n\
    return 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa86f0e4b.java:39: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int a = operand.get(0);\n       \
    \ int b = operand.get(1);\n        int c = 0;\n        for (int i = 0; i < op.size();\
    \ i++) {\n            if (op.get(i).equals(\"+\")) {\n                c = a +\
    \ b;\n            } else if (op.get(i).equals(\"-\")) {\n                c = a\
    \ - b;\n            } else if (op.get(i).equals(\"*\")) {\n                c =\
    \ a * b;\n            } else if (op.get(i).equals(\"//\")) {\n               \
    \ c = a / b;\n            } else if (op.get(i).equals(\"**\")) {\n           \
    \     c = (int) Math.pow(a, b);\n            }\n            a = c;\n         \
    \   b = operand.get(i + 2);\n        }\n        return c;\nreturn 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphboksgpd.java:47: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return -1;\nreturn 0;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7jqyk9vr.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n\
    \                case \"+\":\n                    result += operand.get(i + 1);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i + 1);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i + 1);\n                \
    \    break;\n                case \"//\":\n                    result /= operand.get(i\
    \ + 1);\n                    break;\n                case \"**\":\n          \
    \          result = (int) Math.pow(result, operand.get(i + 1));\n            \
    \        break;\n            }\n        }\n        return result;\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppt1d22v5.java:49: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Your code here\nreturn 0;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp83_d5doo.java:32)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        for (int i = 1; i < op.size(); i++)\
    \ {\n            String operation = op.get(i);\n            Integer op2 = operand.get(i\
    \ + 1);\n            Integer op1 = operand.get(i);\n            if (operation.equals(\"\
    //\")) {\n                operand.set(i, op1 / op2);\n            } else if (operation.equals(\"\
    *\")) {\n                operand.set(i, op1 * op2);\n            } else if (operation.equals(\"\
    +\")) {\n                operand.set(i, op1 + op2);\n            } else if (operation.equals(\"\
    -\")) {\n                operand.set(i, op1 - op2);\n            } else if (operation.equals(\"\
    **\")) {\n                operand.set(i, (int) Math.pow(op1, op2));\n        \
    \    }\n            operand.remove(i + 1);\n            op.remove(i);\n      \
    \      i--;\n        }\n        return operand.get(0);\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpubflmpx1.java:48: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg8wv3ohb.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n\
    \                case \"+\":\n                    result += operand.get(i + 1);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i + 1);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i + 1);\n                \
    \    break;\n                case \"//\":\n                    result /= operand.get(i\
    \ + 1);\n                    break;\n                case \"**\":\n          \
    \          result = (int) Math.pow(result, operand.get(i + 1));\n            \
    \        break;\n            }\n        }\n        return result;\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpre_9ln0b.java:49: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            result = doAlgebra(result,\
    \ op.get(i), operand.get(i + 1));\n        }\n        return result;\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw6ackpa8.java:30: error: method doAlgebra in class Problem cannot\
    \ be applied to given types;\n            result = doAlgebra(result, op.get(i),\
    \ operand.get(i + 1));\n                     ^\n  required: ArrayList<String>,ArrayList<Integer>\n\
    \  found: int,String,Integer\n  reason: actual and formal argument lists differ\
    \ in length\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Write your code here\n       \
    \ // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        int result\
    \ = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n         \
    \   if (op.get(i).equals(\"+\")) {\n                result += operand.get(i +\
    \ 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\nreturn\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ns4j9h2.java:46: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Implement your code here.\n  \
    \      return 0;\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp32gc_guh.java:30: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n\
    \                case \"+\":\n                    result += operand.get(i + 1);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i + 1);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i + 1);\n                \
    \    break;\n                case \"//\":\n                    result /= operand.get(i\
    \ + 1);\n                    break;\n                case \"**\":\n          \
    \          result = (int) Math.pow(result, operand.get(i + 1));\n            \
    \        break;\n            }\n        }\n        return result;\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe1so1xxo.java:49: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // write code here\n        String\
    \ ops = op.toString();\n        String[] opers = ops.split(\",\");\n        String\
    \ operands = operand.toString();\n        String[] operandsArr = operands.split(\"\
    ,\");\n        int[] oper = new int[operandsArr.length];\n        for(int i =\
    \ 0; i < operandsArr.length; i++) {\n            oper[i] = Integer.parseInt(operandsArr[i]);\n\
    \        }\n        String out = \"\";\n        for(int i = 0; i < opers.length;\
    \ i++) {\n            out += String.valueOf(oper[i]) + opers[i];\n        }\n\
    \        out += String.valueOf(oper[oper.length - 1]);\n        int result = 0;\n\
    \        try {\n            result = (int) Integer.parseInt(out);\n        } catch(Exception\
    \ e) {\n            result = (int) Math.floor(eval(out));\n        }\n       \
    \ return result;\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqge08nff.java:46: error: cannot find symbol\n            result\
    \ = (int) Math.floor(eval(out));\n                                      ^\n  symbol:\
    \   method eval(String)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int res = operand.get(0);\n     \
    \   for (int i = 0; i < op.size(); i++) {\n            int cur = operand.get(i\
    \ + 1);\n            if (op.get(i).equals(\"+\")) {\n                res += cur;\n\
    \            } else if (op.get(i).equals(\"-\")) {\n                res -= cur;\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                res *= cur;\n\
    \            } else if (op.get(i).equals(\"//\")) {\n                res /= cur;\n\
    \            } else if (op.get(i).equals(\"**\")) {\n                res = (int)\
    \ Math.pow(res, cur);\n            }\n        }\n        return res;\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2qd6abt6.java:44: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int n = op.size();\n        int j\
    \ = 0;\n        int i = 1;\n        while (n-- > 0) {\n            if (op.get(j).equals(\"\
    *\")) {\n                operand.set(j, operand.get(j) * operand.get(i));\n  \
    \              operand.remove(i);\n                op.remove(j);\n           \
    \ } else if (op.get(j).equals(\"/\")) {\n                operand.set(j, operand.get(j)\
    \ / operand.get(i));\n                operand.remove(i);\n                op.remove(j);\n\
    \            } else if (op.get(j).equals(\"+\")) {\n                operand.set(j,\
    \ operand.get(j) + operand.get(i));\n                operand.remove(i);\n    \
    \            op.remove(j);\n            } else if (op.get(j).equals(\"-\")) {\n\
    \                operand.set(j, operand.get(j) - operand.get(i));\n          \
    \      operand.remove(i);\n                op.remove(j);\n            } else if\
    \ (op.get(j).equals(\"^\")) {\n                operand.set(j, (int) Math.pow(operand.get(j),\
    \ operand.get(i)));\n                operand.remove(i);\n                op.remove(j);\n\
    \            }\n        }\n        return operand.get(0);\nreturn 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph6ma24o0.java:55: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n      int res = operand.get(0);\n      for\
    \ (int i = 0; i < op.size(); i++) {\n        int a = operand.get(i);\n       \
    \ int b = operand.get(i + 1);\n        if (op.get(i).equals(\"+\")) {\n      \
    \    res = a + b;\n        } else if (op.get(i).equals(\"-\")) {\n          res\
    \ = a - b;\n        } else if (op.get(i).equals(\"*\")) {\n          res = a *\
    \ b;\n        } else if (op.get(i).equals(\"//\")) {\n          res = a / b;\n\
    \        } else if (op.get(i).equals(\"**\")) {\n          res = (int) Math.pow(a,\
    \ b);\n        }\n      }\n      return res;\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprvqg0h_d.java:45: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int ans = operand.get(0);\n     \
    \   for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) ans += operand.get(i + 1);\n            else if (op.get(i).equals(\"-\"\
    )) ans -= operand.get(i + 1);\n            else if (op.get(i).equals(\"*\")) ans\
    \ *= operand.get(i + 1);\n            else if (op.get(i).equals(\"//\")) ans /=\
    \ operand.get(i + 1);\n            else if (op.get(i).equals(\"**\")) ans = (int)\
    \ Math.pow(ans, operand.get(i + 1));\n        }\n        return ans;\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5k8_jd0f.java:37: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            int op2 = operand.get(i\
    \ + 1);\n            if (op.get(i).equals(\"+\")) {\n                result +=\
    \ op2;\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= op2;\n            } else if (op.get(i).equals(\"*\")) {\n               \
    \ result *= op2;\n            } else if (op.get(i).equals(\"//\")) {\n       \
    \         result /= op2;\n            } else if (op.get(i).equals(\"**\")) {\n\
    \                result = (int) Math.pow(result, op2);\n            }\n      \
    \  }\n        return result;\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjas2gfm9.java:44: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n\t\tint ans = operand.get(0);\n\t\tfor(int\
    \ i = 0; i < op.size(); i++) {\n\t\t\tswitch(op.get(i)) {\n\t\t\t\tcase \"+\"\
    : ans += operand.get(i+1); break;\n\t\t\t\tcase \"-\": ans -= operand.get(i+1);\
    \ break;\n\t\t\t\tcase \"*\": ans *= operand.get(i+1); break;\n\t\t\t\tcase \"\
    //\": ans /= operand.get(i+1); break;\n\t\t\t\tcase \"**\": ans = (int)Math.pow(ans,\
    \ operand.get(i+1)); break;\n\t\t\t}\n\t\t}\n\t\treturn ans;\nreturn 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfe3hunls.java:39: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9r7iu15g.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // write your code here\n       \
    \ return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4,\
    \ (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv_ykmjw4.java:30: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int ans = operand.get(0);\n     \
    \   for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                ans += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                ans -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                ans *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                ans /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                ans = (int) Math.pow(ans, operand.get(i + 1));\n   \
    \         }\n        }\n        return ans;\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaxddjcc7.java:43: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                result *=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n  \
    \              result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
    \            }\n        }\n        return result;\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpntq0kadu.java:43: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Write your code here\n       \
    \ // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        int exp =\
    \ 0;\n        while(op.size() > 0) {\n            if(exp == 0) {\n           \
    \     exp = operate(operand.get(0), operand.get(1), op.get(0));\n            \
    \    operand.remove(0);\n                operand.remove(0);\n                op.remove(0);\n\
    \            } else {\n                exp = operate(exp, operand.get(0), op.get(0));\n\
    \                operand.remove(0);\n                op.remove(0);\n         \
    \   }\n        }\n        return exp;\nreturn 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1xucuzt6.java:34: error: cannot find symbol\n                exp\
    \ = operate(operand.get(0), operand.get(1), op.get(0));\n                    \
    \  ^\n  symbol:   method operate(Integer,Integer,String)\n  location: class Problem\n\
    /tmp/tmp1xucuzt6.java:39: error: cannot find symbol\n                exp = operate(exp,\
    \ operand.get(0), op.get(0));\n                      ^\n  symbol:   method operate(int,Integer,String)\n\
    \  location: class Problem\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                result *=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n  \
    \              result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
    \            }\n        }\n        return result;\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv714hmj0.java:43: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // fill in your code\n        int\
    \ result = operand.get(0);\n        operand.remove(0);\n        for (int i = 0;\
    \ i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n        \
    \        result += operand.get(i);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                result -= operand.get(i);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                result *= operand.get(i);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                result = (int) Math.pow(result, operand.get(i));\n \
    \           }\n        }\n        return result;\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp202kdj25.java:45: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Write your code here\n       \
    \ return 2;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4,\
    \ (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkysmoapp.java:30: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // write your code here\n       \
    \ Stack<Integer> stack = new Stack<>();\n        stack.push(operand.get(0));\n\
    \        for (int i = 0; i < op.size(); i++) {\n            int first = stack.pop();\n\
    \            int second = operand.get(i + 1);\n            String operator = op.get(i);\n\
    \            switch (operator) {\n                case \"+\":\n              \
    \      stack.push(first + second);\n                    break;\n             \
    \   case \"-\":\n                    stack.push(first - second);\n           \
    \         break;\n                case \"*\":\n                    stack.push(first\
    \ * second);\n                    break;\n                case \"//\":\n     \
    \               stack.push(first / second);\n                    break;\n    \
    \            case \"**\":\n                    stack.push((int) Math.pow(first,\
    \ second));\n                    break;\n            }\n        }\n        return\
    \ stack.pop();\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4,\
    \ (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphtfpart9.java:54: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        if (op.size() == 0)\n           \
    \ return operand.get(0);\n        int j = 0;\n        int res = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                res += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                res -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                res *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                res /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                res = (int) Math.pow(res, operand.get(i + 1));\n   \
    \         }\n        }\n        return res;\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvavbylqh.java:46: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                result *=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"/\")) {\n   \
    \             result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
    \            }\n        }\n        return result;\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2zq6raxc.java:43: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaft4fjwf.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            int nextOperand = operand.get(i\
    \ + 1);\n            switch (op.get(i)) {\n                case \"+\":\n     \
    \               result += nextOperand;\n                    break;\n         \
    \       case \"-\":\n                    result -= nextOperand;\n            \
    \        break;\n                case \"*\":\n                    result *= nextOperand;\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= nextOperand;\n                    break;\n                case \"\
    **\":\n                    result = (int) Math.pow(result, nextOperand);\n   \
    \                 break;\n            }\n        }\n        return result;\nreturn\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_236n7nj.java:50: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptjhwla04.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        String operation = String.join(\"\
    \", op);\n        String[] strArr = Stream.concat(Stream.of(String.valueOf(operand.get(0))),\
    \ Stream.of(operation.split(\"\"))).toArray(String[]::new);\n        operand.remove(0);\n\
    \        int result = Integer.parseInt(String.join(\"\", strArr));\n        for\
    \ (int i = 0; i < operand.size(); i++) {\n            int temp = operand.get(i);\n\
    \            char c = op.get(i).charAt(0);\n            switch (c) {\n       \
    \         case '+':\n                    result += temp;\n                   \
    \ break;\n                case '-':\n                    result -= temp;\n   \
    \                 break;\n                case '*':\n                    result\
    \ *= temp;\n                    break;\n                case '/':\n          \
    \          result /= temp;\n                    break;\n                case '^':\n\
    \                    result = (int) Math.pow(result, temp);\n                \
    \    break;\n            }\n        }\n        return result;\nreturn 0;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfd4e4mfb.java:54: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Implement here\n        return\
    \ 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeak5mkcn.java:30: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n\t\tint res = operand.get(0);\n\t\tint iter\
    \ = 1;\n\t\twhile (iter < operand.size()) {\n\t\t\tswitch (op.get(iter - 1)) {\n\
    \t\t\t\tcase \"+\":\n\t\t\t\t\tres += operand.get(iter);\n\t\t\t\t\tbreak;\n\t\
    \t\t\tcase \"-\":\n\t\t\t\t\tres -= operand.get(iter);\n\t\t\t\t\tbreak;\n\t\t\
    \t\tcase \"*\":\n\t\t\t\t\tres *= operand.get(iter);\n\t\t\t\t\tbreak;\n\t\t\t\
    \tcase \"//\":\n\t\t\t\t\tres /= operand.get(iter);\n\t\t\t\t\tbreak;\n\t\t\t\t\
    case \"**\":\n\t\t\t\t\tres = (int) Math.pow(res, operand.get(iter));\n\t\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t\titer++;\n\t\t}\n\t\treturn res;\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppl_eifm2.java:51: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpit8e5ipw.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        if (op.size() == 0)\n           \
    \ return operand.get(0);\n        int ret = operand.get(0);\n        for (int\
    \ i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\"))\n   \
    \             ret += operand.get(i + 1);\n            else if (op.get(i).equals(\"\
    -\"))\n                ret -= operand.get(i + 1);\n            else if (op.get(i).equals(\"\
    *\"))\n                ret *= operand.get(i + 1);\n            else if (op.get(i).equals(\"\
    //\"))\n                ret /= operand.get(i + 1);\n            else if (op.get(i).equals(\"\
    **\"))\n                ret = (int) Math.pow(ret, operand.get(i + 1));\n     \
    \   }\n        return ret;\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpze89fb08.java:44: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        //i need to write a recursive method\
    \ for this\n        int len = op.size();\n        if(op.size() == 1) {\n     \
    \       switch(op.get(0)) {\n                case \"+\": return operand.get(0)\
    \ + operand.get(1);\n                case \"-\": return operand.get(0) - operand.get(1);\n\
    \                case \"*\": return operand.get(0) * operand.get(1);\n       \
    \         case \"//\": return operand.get(0) / operand.get(1);\n             \
    \   case \"**\": return (int)Math.pow(operand.get(0), operand.get(1));\n     \
    \       }\n        }\n        else {\n            for(int i = 0; i < len; i++)\
    \ {\n                String s = op.get(i);\n                int oper = operand.get(i\
    \ + 1);\n                switch(s) {\n                    case \"+\": operand.set(i,\
    \ operand.get(i) + oper); break;\n                    case \"-\": operand.set(i,\
    \ operand.get(i) - oper); break;\n                    case \"*\": operand.set(i,\
    \ operand.get(i) * oper); break;\n                    case \"//\": operand.set(i,\
    \ operand.get(i) / oper); break;\n                    case \"**\": operand.set(i,\
    \ (int)Math.pow(operand.get(i), oper)); break;\n                }\n          \
    \      operand.remove(i + 1);\n                op.remove(i);\n               \
    \ return doAlgebra(op, operand);\n            }\n        }\n        return 0;\n\
    return 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcg85xnbx.java:56: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            int num = operand.get(i\
    \ + 1);\n            if (op.get(i).equals(\"+\")) {\n                result +=\
    \ num;\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= num;\n            } else if (op.get(i).equals(\"*\")) {\n               \
    \ result *= num;\n            } else if (op.get(i).equals(\"//\")) {\n       \
    \         result /= num;\n            } else if (op.get(i).equals(\"**\")) {\n\
    \                result = (int) Math.pow(result, num);\n            }\n      \
    \  }\n        return result;\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvyntpase.java:44: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Iterate through the operator list\
    \ and do the operator on operand list.\n        // If the op is '+', '-', '*',\
    \ '/', '%', then just do the operation.\n        // If the op is '**', then do\
    \ the ** operation.\n        int result = operand.get(0);\n        for (int i\
    \ = 0; i < op.size(); i++) {\n            String op_ = op.get(i);\n          \
    \  int operand_ = operand.get(i + 1);\n            if (op_.equals(\"+\")) {\n\
    \                result += operand_;\n            } else if (op_.equals(\"-\"\
    )) {\n                result -= operand_;\n            } else if (op_.equals(\"\
    *\")) {\n                result *= operand_;\n            } else if (op_.equals(\"\
    /\")) {\n                result /= operand_;\n            } else if (op_.equals(\"\
    %\")) {\n                result %= operand_;\n            } else if (op_.equals(\"\
    **\")) {\n                result = (int) Math.pow(result, operand_);\n       \
    \     }\n        }\n        return result;\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpflwao240.java:50: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Your code goes here\n        int\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          if (op.get(i).equals(\"+\")) {\n                result += operand.get(i\
    \ + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result\
    \ -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n\
    \                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                result /= operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result,\
    \ operand.get(i + 1));\n            }\n        }\n        return result;\nreturn\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz52w0sza.java:44: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Write your code here\n       \
    \ // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        if (op.size()\
    \ != operand.size() - 1) return 0;\n        int l = op.size();\n        int[]\
    \ stack = new int[l + 1];\n        int i = 0;\n        int p = 0;\n        while\
    \ (i < l) {\n            String v = op.get(i);\n            switch (v) {\n   \
    \             case \"+\":\n                    stack[p - 1] = stack[p - 1] + stack[p];\n\
    \                    --p;\n                    break;\n                case \"\
    -\":\n                    stack[p - 1] = stack[p - 1] - stack[p];\n          \
    \          --p;\n                    break;\n                case \"*\":\n   \
    \                 stack[p - 1] = stack[p - 1] * stack[p];\n                  \
    \  --p;\n                    break;\n                case \"//\":\n          \
    \          stack[p - 1] = stack[p - 1] / stack[p];\n                    --p;\n\
    \                    break;\n                case \"**\":\n                  \
    \  stack[p - 1] = (int)Math.pow(stack[p - 1], stack[p]);\n                   \
    \ --p;\n                    break;\n                default:\n               \
    \     stack[p] = operand.get(i);\n                    ++p;\n                 \
    \   break;\n            }\n            ++i;\n        }\n        return stack[0];\n\
    return 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3i83lceh.java:67: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int a = operand.get(0);\n       \
    \ int b = operand.get(1);\n        for (int i = 0; i < op.size(); i++) {\n   \
    \         if (op.get(i).equals(\"+\")) {\n                a += b;\n          \
    \  } else if (op.get(i).equals(\"-\")) {\n                a -= b;\n          \
    \  } else if (op.get(i).equals(\"*\")) {\n                a *= b;\n          \
    \  } else if (op.get(i).equals(\"/\")) {\n                a /= b;\n          \
    \  } else if (op.get(i).equals(\"%\")) {\n                a %= b;\n          \
    \  } else if (op.get(i).equals(\"**\")) {\n                a = (int) Math.pow(a,\
    \ b);\n            }\n            b = operand.get(i + 2);\n        }\n       \
    \ return a;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4,\
    \ (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_f03hy7w.java:47: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                result *=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n  \
    \              result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
    \            }\n        }\n        return result;\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp830h2xic.java:43: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int res = operand.get(0);\n     \
    \   for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n\
    \                case \"+\":\n                    res += operand.get(i + 1);\n\
    \                    break;\n                case \"-\":\n                   \
    \ res -= operand.get(i + 1);\n                    break;\n                case\
    \ \"*\":\n                    res *= operand.get(i + 1);\n                   \
    \ break;\n                case \"//\":\n                    res /= operand.get(i\
    \ + 1);\n                    break;\n                case \"**\":\n          \
    \          res = (int) Math.pow(res, operand.get(i + 1));\n                  \
    \  break;\n            }\n        }\n        return res;\nreturn 0;\n    }\n \
    \   public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp33d2ixe8.java:49: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n\
    \                case \"+\":\n                    result += operand.get(i + 1);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i + 1);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i + 1);\n                \
    \    break;\n                case \"//\":\n                    result /= operand.get(i\
    \ + 1);\n                    break;\n                case \"**\":\n          \
    \          result = (int) Math.pow(result, operand.get(i + 1));\n            \
    \        break;\n            }\n        }\n        return result;\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7v53p5gz.java:49: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4jzmhgrp.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // enter your code here\n       \
    \ return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4,\
    \ (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmvayg566.java:30: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Write your code here\n       \
    \ ArrayList<Integer> res = new ArrayList<Integer>();\n        for(int i = 0; i\
    \ < op.size(); i++) {\n            String operator = op.get(i);\n            int\
    \ x = operand.get(i);\n            int y = operand.get(i+1);\n            if(operator.equals(\"\
    +\")) {\n                res.add(x+y);\n            } else if(operator.equals(\"\
    -\")) {\n                res.add(x-y);\n            } else if(operator.equals(\"\
    *\")) {\n                res.add(x*y);\n            } else if(operator.equals(\"\
    /\")) {\n                res.add(x/y);\n            } else if(operator.equals(\"\
    **\")) {\n                res.add((int)Math.pow(x,y));\n            }\n      \
    \  }\n        return res.get(res.size()-1);\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpos3kr40j.java:47: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        if (op.size() != operand.size() -\
    \ 1) {\n            return -1;\n        }\n        int result = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            String s = op.get(i);\n\
    \            int op1 = operand.get(i);\n            int op2 = operand.get(i +\
    \ 1);\n            switch (s) {\n                case \"+\":\n               \
    \     result = result + op2;\n                    break;\n                case\
    \ \"-\":\n                    result = result - op2;\n                    break;\n\
    \                case \"*\":\n                    result = result * op2;\n   \
    \                 break;\n                case \"//\":\n                    result\
    \ = result / op2;\n                    break;\n                case \"**\":\n\
    \                    result = (int) Math.pow(result, op2);\n                 \
    \   break;\n                default:\n                    break;\n           \
    \ }\n        }\n        return result;\nreturn 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbwqrn285.java:57: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int res = operand.get(0);\n     \
    \   for (int i = 0; i < op.size(); i++) {\n            String o = op.get(i);\n\
    \            if (o.equals(\"+\")) res += operand.get(i + 1);\n            else\
    \ if (o.equals(\"-\")) res -= operand.get(i + 1);\n            else if (o.equals(\"\
    *\")) res *= operand.get(i + 1);\n            else if (o.equals(\"//\")) res /=\
    \ operand.get(i + 1);\n            else if (o.equals(\"**\")) res = (int) Math.pow(res,\
    \ operand.get(i + 1));\n        }\n        return res;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp7je4x2j.java:38: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        if (op.size() != operand.size() -\
    \ 1) return -1;\n        var it = operand.iterator();\n        int prev = it.next();\n\
    \        while (it.hasNext()) {\n            int next = it.next();\n         \
    \   var operator = op.remove(0);\n            switch (operator) {\n          \
    \      case \"+\":\n                    prev += next;\n                    break;\n\
    \                case \"-\":\n                    prev -= next;\n            \
    \        break;\n                case \"*\":\n                    prev *= next;\n\
    \                    break;\n                case \"//\":\n                  \
    \  prev /= next;\n                    break;\n                case \"**\":\n \
    \                   prev = (int)Math.pow(prev, next);\n                    break;\n\
    \                default:\n                    return -1;\n            }\n   \
    \     }\n        return prev;\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4l4uinuz.java:29: error: cannot find symbol\n        var it = operand.iterator();\n\
    \        ^\n  symbol:   class var\n  location: class Problem\n/tmp/tmp4l4uinuz.java:33:\
    \ error: cannot find symbol\n            var operator = op.remove(0);\n      \
    \      ^\n  symbol:   class var\n  location: class Problem\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int ans = operand.get(0);\n     \
    \   for (int i = 0; i < op.size(); i++) {\n            int operand2 = operand.get(i\
    \ + 1);\n            String operator = op.get(i);\n            if (operator.equals(\"\
    +\")) {\n                ans += operand2;\n            } else if (operator.equals(\"\
    -\")) {\n                ans -= operand2;\n            } else if (operator.equals(\"\
    *\")) {\n                ans *= operand2;\n            } else if (operator.equals(\"\
    //\")) {\n                ans /= operand2;\n            } else if (operator.equals(\"\
    **\")) {\n                ans = (int) Math.pow(ans, operand2);\n            }\n\
    \        }\n        return ans;\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd0rf_l5j.java:45: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        if (op.size() == 0) {\n         \
    \   return operand.get(0);\n        }\n        if (op.size() == 1) {\n       \
    \     return operand.get(0) + operand.get(1);\n        }\n        Stack<Integer>\
    \ stack = new Stack<>();\n        for (int i = op.size() - 1; i >= 0; i--) {\n\
    \            switch (op.get(i)) {\n                case \"//\":\n            \
    \        stack.push(operand.get(i) / operand.get(i + 1));\n                  \
    \  break;\n                case \"**\":\n                    stack.push((int)\
    \ Math.pow(operand.get(i), operand.get(i + 1)));\n                    break;\n\
    \                case \"*\":\n                    stack.push(operand.get(i) *\
    \ operand.get(i + 1));\n                    break;\n                case \"-\"\
    :\n                    stack.push(operand.get(i) - operand.get(i + 1));\n    \
    \                break;\n                case \"+\":\n                    stack.push(operand.get(i)\
    \ + operand.get(i + 1));\n                    break;\n            }\n        }\n\
    \        int result = 0;\n        while (!stack.isEmpty()) {\n            result\
    \ += stack.pop();\n        }\n        return result;\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph91ptrju.java:59: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0x9o1muh.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int acc = operand.get(0);\n     \
    \   for (int i = 0; i < op.size(); i++) {\n            int n1 = acc;\n       \
    \     int n2 = operand.get(i + 1);\n            switch (op.get(i)) {\n       \
    \         case \"+\":\n                    acc = n1 + n2;\n                  \
    \  break;\n                case \"-\":\n                    acc = n1 - n2;\n \
    \                   break;\n                case \"*\":\n                    acc\
    \ = n1 * n2;\n                    break;\n                case \"//\":\n     \
    \               acc = n1 / n2;\n                    break;\n                case\
    \ \"**\":\n                    acc = (int) Math.pow(n1, n2);\n               \
    \     break;\n            }\n        }\n        return acc;\nreturn 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7dypr956.java:51: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int index = 0;\n        while (index\
    \ < op.size()) {\n            if (op.get(index).equals(\"*\")) {\n           \
    \     operand.set(index, operand.get(index) * operand.get(index + 1));\n     \
    \           operand.remove(index + 1);\n                op.remove(index);\n  \
    \          } else if (op.get(index).equals(\"/\")) {\n                operand.set(index,\
    \ operand.get(index) / operand.get(index + 1));\n                operand.remove(index\
    \ + 1);\n                op.remove(index);\n            } else if (op.get(index).equals(\"\
    +\")) {\n                operand.set(index, operand.get(index) + operand.get(index\
    \ + 1));\n                operand.remove(index + 1);\n                op.remove(index);\n\
    \            } else if (op.get(index).equals(\"-\")) {\n                operand.set(index,\
    \ operand.get(index) - operand.get(index + 1));\n                operand.remove(index\
    \ + 1);\n                op.remove(index);\n            } else if (op.get(index).equals(\"\
    ^\")) {\n                operand.set(index, (int) Math.pow(operand.get(index),\
    \ operand.get(index + 1)));\n                operand.remove(index + 1);\n    \
    \            op.remove(index);\n            } else {\n                index++;\n\
    \            }\n        }\n        return operand.get(0);\nreturn 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqoqmouk6.java:55: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        for (int i = 0; i < op.size(); i++)\
    \ {\n            if (op.get(i).equals(\"+\")) {\n                int result =\
    \ operand.get(i) + operand.get(i + 1);\n                operand.set(i, result);\n\
    \                operand.remove(i + 1);\n                op.remove(i);\n     \
    \           i--;\n            } else if (op.get(i).equals(\"-\")) {\n        \
    \        int result = operand.get(i) - operand.get(i + 1);\n                operand.set(i,\
    \ result);\n                operand.remove(i + 1);\n                op.remove(i);\n\
    \                i--;\n            } else if (op.get(i).equals(\"*\")) {\n   \
    \             int result = operand.get(i) * operand.get(i + 1);\n            \
    \    operand.set(i, result);\n                operand.remove(i + 1);\n       \
    \         op.remove(i);\n                i--;\n            } else if (op.get(i).equals(\"\
    /\")) {\n                int result = operand.get(i) / operand.get(i + 1);\n \
    \               operand.set(i, result);\n                operand.remove(i + 1);\n\
    \                op.remove(i);\n                i--;\n            } else if (op.get(i).equals(\"\
    **\")) {\n                int result = (int) Math.pow(operand.get(i), operand.get(i\
    \ + 1));\n                operand.set(i, result);\n                operand.remove(i\
    \ + 1);\n                op.remove(i);\n                i--;\n            }\n\
    \        }\n        return operand.get(0);\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprlyxsehr.java:62: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Write your code here\n       \
    \ return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4,\
    \ (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmjt243fr.java:30: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n\
    \                case \"+\":\n                    result += operand.get(i + 1);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i + 1);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i + 1);\n                \
    \    break;\n                case \"//\":\n                    result /= operand.get(i\
    \ + 1);\n                    break;\n                case \"**\":\n          \
    \          result = (int) Math.pow(result, operand.get(i + 1));\n            \
    \        break;\n            }\n        }\n        return result;\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_m556x38.java:49: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
    \        int l = op.size();\n        int k = 0;\n        temp.add(operand.get(0));\n\
    \        for(int i = 0; i < l; i++) {\n            if(op.get(i).equals(\"**\"\
    )) {\n                temp.set(k,(int)Math.pow(temp.get(k),operand.get(i+1)));\n\
    \            }\n            else {\n                temp.add(operand.get(i+1));\n\
    \                k += 1;\n            }\n        }\n        int ans = temp.get(0);\n\
    \        k = 1;\n        for(int i = 0; i < l; i++) {\n            if(op.get(i).equals(\"\
    +\")) {\n                ans += temp.get(k);\n            }\n            else\
    \ if(op.get(i).equals(\"-\")) {\n                ans -= temp.get(k);\n       \
    \     }\n            else if(op.get(i).equals(\"*\")) {\n                ans *=\
    \ temp.get(k);\n            }\n            else if(op.get(i).equals(\"//\")) {\n\
    \                ans /= temp.get(k);\n            }\n            k += 1;\n   \
    \     }\n        return ans;\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp28z4y7l4.java:59: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // your code here\n        System.out.println(op);\n\
    \        System.out.println(operand);\n        int result = operand.get(0);\n\
    \        for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i\
    \ + 1);\n                    break;\n                case \"-\":\n           \
    \         result -= operand.get(i + 1);\n                    break;\n        \
    \        case \"*\":\n                    result *= operand.get(i + 1);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ /= operand.get(i + 1);\n                    break;\n                case \"\
    **\":\n                    result = (int) Math.pow(result, operand.get(i + 1));\n\
    \                    break;\n            }\n        }\n        return result;\n\
    return 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeek5z4i1.java:52: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        Integer ans = operand.get(0);\n \
    \       for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                ans += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                ans -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                ans *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    //\")) {\n                ans /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                ans = (int) Math.pow(ans, operand.get(i + 1));\n   \
    \         }\n        }\n        return ans;\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz2fz8rqn.java:43: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Write your code here\n       \
    \ Stack<Integer> stack = new Stack<>();\n        stack.push(operand.get(0));\n\
    \        for (int i = 0; i < op.size(); i++) {\n            int b = operand.get(i\
    \ + 1);\n            switch (op.get(i)) {\n                case \"+\":\n     \
    \               stack.push(stack.pop() + b);\n                    break;\n   \
    \             case \"-\":\n                    stack.push(stack.pop() - b);\n\
    \                    break;\n                case \"*\":\n                   \
    \ stack.push(stack.pop() * b);\n                    break;\n                case\
    \ \"//\":\n                    stack.push(stack.pop() / b);\n                \
    \    break;\n                case \"**\":\n                    stack.push((int)\
    \ Math.pow(stack.pop(), b));\n                    break;\n            }\n    \
    \    }\n        return stack.pop();\nreturn 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphlw2ragw.java:52: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        if (op.size() != operand.size() -\
    \ 1) return -1;\n        Stack<Integer> s = new Stack<>();\n        for (int i\
    \ = 0; i < op.size(); i++) {\n            int a = operand.get(i);\n          \
    \  int b = operand.get(i + 1);\n            String op_i = op.get(i);\n       \
    \     if (op_i.equals(\"+\")) s.push(a + b);\n            else if (op_i.equals(\"\
    -\")) s.push(a - b);\n            else if (op_i.equals(\"*\")) s.push(a * b);\n\
    \            else if (op_i.equals(\"/\")) s.push(a / b);\n            else if\
    \ (op_i.equals(\"**\")) s.push((int)Math.pow(a, b));\n        }\n        return\
    \ s.pop();\nreturn 0;\n    }\n    public static void main(String[] args) {\n \
    \   assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4,\
    \ (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2rgsk_vd.java:41: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        ArrayList<String> operator = new\
    \ ArrayList<String>();\n        operator.add(\"+\");\n        operator.add(\"\
    -\");\n        operator.add(\"*\");\n        operator.add(\"/\");\n        int\
    \ res = operand.get(0);\n        int index = 0;\n        while (operand.size()\
    \ > index + 1) {\n            String op_str = op.get(index);\n            if (operator.contains(op_str))\
    \ {\n                switch (op_str) {\n                    case \"+\":\n    \
    \                    res += operand.get(index + 1);\n                        break;\n\
    \                    case \"-\":\n                        res -= operand.get(index\
    \ + 1);\n                        break;\n                    case \"*\":\n   \
    \                     res *= operand.get(index + 1);\n                       \
    \ break;\n                    case \"/\":\n                        res /= operand.get(index\
    \ + 1);\n                        break;\n                }\n            }\n  \
    \          index++;\n        }\n        return res;\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm67rtdgb.java:56: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                result *=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n  \
    \              result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
    \            }\n        }\n        return result;\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeq05o2yc.java:43: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // push op\n        Stack<String>\
    \ stack = new Stack<>();\n        for (String o : op) stack.push(o);\n       \
    \ Stack<Integer> number = new Stack<>();\n        for (Integer i : operand) number.push(i);\n\
    \        while (stack.size() > 0) {\n            String op1 = stack.pop();\n \
    \           Integer op2 = number.pop();\n            Integer op3 = number.pop();\n\
    \            switch (op1) {\n                case \"+\":\n                   \
    \ number.push(op2 + op3);\n                    break;\n                case \"\
    -\":\n                    number.push(op2 - op3);\n                    break;\n\
    \                case \"*\":\n                    number.push(op2 * op3);\n  \
    \                  break;\n                case \"//\":\n                    number.push(op2\
    \ / op3);\n                    break;\n                case \"**\":\n        \
    \            number.push((int)Math.pow(op2, op3));\n                    break;\n\
    \            }\n        }\n        return number.pop();\nreturn 0;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphqbfzkmt.java:56: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // The array of operators.\n    \
    \    String operators[] = op.toArray(new String[op.size()]);\n        // The array\
    \ of operands.\n        Integer operands[] = operand.toArray(new Integer[operand.size()]);\n\
    \        // The result of the operation.\n        int result = 0;\n        //\
    \ Check if there is any operators.\n        if (operators.length != 0) {\n   \
    \         // Get the first operator.\n            String operator = operators[0];\n\
    \            // Perform the operation on the first number and second number.\n\
    \            switch (operator) {\n                case \"+\":\n              \
    \      result = operands[0] + operands[1];\n                    break;\n     \
    \           case \"-\":\n                    result = operands[0] - operands[1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result = operands[0] * operands[1];\n                    break;\n          \
    \      case \"//\":\n                    result = operands[0] / operands[1];\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = (int) Math.pow(operands[0], operands[1]);\n                    break;\n\
    \            }\n            // Remove the first operator and first number in the\
    \ list.\n            operators = Arrays.copyOfRange(operators, 1, operators.length);\n\
    \            operands = Arrays.copyOfRange(operands, 1, operands.length);\n  \
    \          // Create the new operator list.\n            ArrayList<String> tmpOperators\
    \ = new ArrayList<String>(Arrays.asList(operators));\n            // Create the\
    \ new operand list.\n            ArrayList<Integer> tmpOperands = new ArrayList<Integer>(Arrays.asList(operands));\n\
    \            // Prepend the first result to the operand list.\n            tmpOperands.add(0,\
    \ result);\n            // Return the result of the operation.\n            return\
    \ doAlgebra(tmpOperators, tmpOperands);\n        }\n        // Return the last\
    \ result of the operation.\n        return result;\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjnzxoyz0.java:70: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            int second = operand.get(i\
    \ + 1);\n            String curr_operator = op.get(i);\n            switch (curr_operator)\
    \ {\n                case \"+\":\n                    result += second;\n    \
    \                break;\n                case \"-\":\n                    result\
    \ -= second;\n                    break;\n                case \"*\":\n      \
    \              result *= second;\n                    break;\n               \
    \ case \"//\":\n                    result /= second;\n                    break;\n\
    \                case \"**\":\n                    result = (int) Math.pow(result,\
    \ second);\n                    break;\n            }\n        }\n        return\
    \ result;\nreturn 0;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4,\
    \ (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1pna_bd0.java:51: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy0d7zkxu.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n\
    \                case \"+\":\n                    result += operand.get(i + 1);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i + 1);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i + 1);\n                \
    \    break;\n                case \"//\":\n                    result /= operand.get(i\
    \ + 1);\n                    break;\n                case \"**\":\n          \
    \          result = (int) Math.pow(result, operand.get(i + 1));\n            \
    \        break;\n            }\n        }\n        return result;\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp62x3f5wd.java:49: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Fill this in.\n        int res\
    \ = operand.get(0);\n        int index = 0;\n        for(int i = 1; i < operand.size();\
    \ i++) {\n            switch(op.get(index)) {\n                case \"+\":\n \
    \                   res += operand.get(i);\n                    break;\n     \
    \           case \"-\":\n                    res -= operand.get(i);\n        \
    \            break;\n                case \"*\":\n                    res *= operand.get(i);\n\
    \                    break;\n                case \"//\":\n                  \
    \  res /= operand.get(i);\n                    break;\n                case \"\
    **\":\n                    res = (int)Math.pow(res, operand.get(i));\n       \
    \             break;\n            }\n            index++;\n        }\n       \
    \ return res;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4,\
    \ (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpujk8l6jr.java:52: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // create a new list that has the\
    \ same elements as op, but with first element prepended\n        ArrayList<String>\
    \ newOp = new ArrayList<String>();\n        newOp.add(\"+\");\n        newOp.addAll(op);\n\
    \        // create a new list that has the same elements as operand, but with\
    \ first element prepended\n        ArrayList<Integer> newOperand = new ArrayList<Integer>();\n\
    \        newOperand.add(0);\n        newOperand.addAll(operand);\n        // recursively\
    \ evaluate the result\n        return doAlgebra_(newOp, newOperand);\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpceplf042.java:37: error: cannot find symbol\n        return doAlgebra_(newOp,\
    \ newOperand);\n               ^\n  symbol:   method doAlgebra_(ArrayList<String>,ArrayList<Integer>)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) result += operand.get(i + 1);\n            else if (op.get(i).equals(\"\
    -\")) result -= operand.get(i + 1);\n            else if (op.get(i).equals(\"\
    *\")) result *= operand.get(i + 1);\n            else if (op.get(i).equals(\"\
    //\")) result /= operand.get(i + 1);\n            else if (op.get(i).equals(\"\
    **\")) result = (int) Math.pow(result, operand.get(i + 1));\n        }\n     \
    \   return result;\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6nbcnofn.java:37: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return -1;\nreturn 0;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvqce9t_j.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        ArrayList<String> op2 = new ArrayList<String>();\n\
    \        // Use the two given lists to build the algebric expression, and return\
    \ the evaluation of this expression.\n        // Write your code here...\n   \
    \     \n        // If you find it hard to write the whole program, try to write\
    \ a function that only take two parameters \n        // (for example, 'a' and\
    \ 'b') and returns the result of an operation: a 'operator' b, where operator\
    \ can be \n        // one of the following: '+', '-', '*', '//', '**'.\n     \
    \   // For example, the function call might look like this:\n        // int result\
    \ = calculate('+', 2, 3);\n        // if '+' is passed in as an argument, then\
    \ the function should return 2 + 3 = 5.\n        // Use this function and your\
    \ knowledge of arrays to write doAlgebra.\n\n        // One solution to this problem\
    \ is to use a stack. We can push operands onto the stack as we encounter them,\n\
    \        // and push operators onto a separate stack. When we encounter a closing\
    \ parenthesis, we pop two operands and \n        // one operator and evaluate\
    \ them. Finally, we evaluate the expression left in the stack. \n        int[]\
    \ arr = new int[operand.size()];\n        for (int i = 0; i < operand.size();\
    \ i++) {\n            arr[i] = operand.get(i);\n        }\n        for (int i\
    \ = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n             \
    \   case \"**\":\n                    arr[i + 1] = (int) Math.pow(arr[i], arr[i\
    \ + 1]);\n                    arr[i] = 0;\n                    break;\n      \
    \          case \"//\":\n                    arr[i + 1] = arr[i] / arr[i + 1];\n\
    \                    arr[i] = 0;\n                    break;\n               \
    \ case \"*\":\n                    arr[i + 1] = arr[i] * arr[i + 1];\n       \
    \             arr[i] = 0;\n                    break;\n                case \"\
    -\":\n                    arr[i + 1] = arr[i] - arr[i + 1];\n                \
    \    arr[i]\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4,\
    \ (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwa3fqwfw.java:63: error: not a statement\n                    arr[i]\n\
    \                       ^\n/tmp/tmpwa3fqwfw.java:63: error: ';' expected\n   \
    \                 arr[i]\n                          ^\n/tmp/tmpwa3fqwfw.java:66:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpwa3fqwfw.java:66: error: illegal start of expression\n   \
    \ public static void main(String[] args) {\n           ^\n/tmp/tmpwa3fqwfw.java:66:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpwa3fqwfw.java:66: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpwa3fqwfw.java:66:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpwa3fqwfw.java:72: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        System.out.println(op);\n       \
    \ System.out.println(operand);\n        int operandSize = operand.size();\n  \
    \      int operatorSize = op.size();\n        Stack<Integer> stack = new Stack<>();\n\
    \        stack.push(operand.get(0));\n        int i = 1;\n        int j = 0;\n\
    \        while (i < operandSize) {\n            int b = operand.get(i);\n    \
    \        int a = stack.pop();\n            int result = 0;\n            switch\
    \ (op.get(j)) {\n                case \"+\":\n                    result = a +\
    \ b;\n                    break;\n                case \"-\":\n              \
    \      result = a - b;\n                    break;\n                case \"*\"\
    :\n                    result = a * b;\n                    break;\n         \
    \       case \"//\":\n                    result = a / b;\n                  \
    \  break;\n                case \"**\":\n                    result = (int) Math.pow(a,\
    \ b);\n                    break;\n            }\n            i++;\n         \
    \   j++;\n            stack.push(result);\n        }\n        return stack.pop();\n\
    return 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqwoy4uta.java:62: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int answer = operand.get(0);\n  \
    \      int i = 0;\n        for (Integer o : operand) {\n            if (i++ ==\
    \ 0) continue;\n            if (op.get(i - 1).equals(\"+\")) answer += o;\n  \
    \          else if (op.get(i - 1).equals(\"-\")) answer -= o;\n            else\
    \ if (op.get(i - 1).equals(\"*\")) answer *= o;\n            else if (op.get(i\
    \ - 1).equals(\"/\")) answer /= o;\n            else if (op.get(i - 1).equals(\"\
    ^\")) answer = (int) Math.pow(answer, o);\n        }\n        return answer;\n\
    return 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptmjke9a9.java:39: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        StringBuilder sb = new StringBuilder();\n\
    \        int len = op.size();\n        for (int i = 0; i < len; i++) {\n     \
    \       sb.append(operand.get(i));\n            sb.append(op.get(i));\n      \
    \  }\n        sb.append(operand.get(len));\n        String expression = sb.toString();\n\
    \        // long result = 0;\n        // ScriptEngineManager mgr = new ScriptEngineManager();\n\
    \        // ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n     \
    \   // try {\n        //     result = (long) engine.eval(expression);\n      \
    \  // } catch (ScriptException e) {\n        //     System.out.println(\"exception:\
    \ \" + e);\n        // }\n        // return (int) result;\n        return (int)\
    \ ScriptEngineUtils.evalJs(expression);\nreturn 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdjmy6im7.java:45: error: cannot find symbol\n        return (int)\
    \ ScriptEngineUtils.evalJs(expression);\n                     ^\n  symbol:   variable\
    \ ScriptEngineUtils\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Insert your code here\n      \
    \  return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4,\
    \ (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppzpobwk4.java:30: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                result *=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n  \
    \              result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
    \            }\n        }\n        return result;\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp854k7fha.java:43: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6qn9zyc2.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int num = 0;\n        ArrayList<String>\
    \ tmpOp = new ArrayList<>();\n        for (int i = 0; i < op.size(); i++) {\n\
    \            if (op.get(i).equals(\"**\")) {\n                operand.set(i +\
    \ 1, (int) Math.pow(operand.get(i), operand.get(i + 1)));\n                operand.remove(i);\n\
    \                op.remove(i);\n                i--;\n            }\n        }\n\
    \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    *\")) {\n                operand.set(i + 1, operand.get(i) * operand.get(i + 1));\n\
    \                operand.remove(i);\n                op.remove(i);\n         \
    \       i--;\n            }\n        }\n        for (int i = 0; i < op.size();\
    \ i++) {\n            if (op.get(i).equals(\"/\")) {\n                operand.set(i\
    \ + 1, operand.get(i) / operand.get(i + 1));\n                operand.remove(i);\n\
    \                op.remove(i);\n                i--;\n            }\n        }\n\
    \        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                operand.set(i + 1, operand.get(i) + operand.get(i + 1));\n\
    \                operand.remove(i);\n                op.remove(i);\n         \
    \       i--;\n            }\n        }\n        for (int i = 0; i < op.size();\
    \ i++) {\n            if (op.get(i).equals(\"-\")) {\n                operand.set(i\
    \ + 1, operand.get(i) - operand.get(i + 1));\n                operand.remove(i);\n\
    \                op.remove(i);\n                i--;\n            }\n        }\n\
    \        return operand.get(0);\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu17r2oz7.java:71: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            result = solve(result,\
    \ operand.get(i + 1), op.get(i));\n        }\n        return result;\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps4ytbxyq.java:30: error: cannot find symbol\n            result\
    \ = solve(result, operand.get(i + 1), op.get(i));\n                     ^\n  symbol:\
    \   method solve(int,Integer,String)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        Stack<Integer> s = new Stack<>();\n\
    \        for (int i = 0; i < op.size(); i++) {\n            String op_ = op.get(i);\n\
    \            Integer operand2 = operand.get(i + 1);\n            Integer operand1\
    \ = s.pop();\n            if (op_.equals(\"+\")) {\n                s.push(operand1\
    \ + operand2);\n            } else if (op_.equals(\"-\")) {\n                s.push(operand1\
    \ - operand2);\n            } else if (op_.equals(\"*\")) {\n                s.push(operand1\
    \ * operand2);\n            } else if (op_.equals(\"/\")) {\n                s.push(operand1\
    \ / operand2);\n            } else if (op_.equals(\"^\")) {\n                s.push((int)\
    \ Math.pow(operand1, operand2));\n            }\n        }\n        return s.pop();\n\
    return 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjzr2kv9n.java:46: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            String opr = op.get(i);\n\
    \            int a = operand.get(i);\n            int b = operand.get(i + 1);\n\
    \            result = doOperation(opr, a, b);\n        }\n        return result;\n\
    return 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpebty63fb.java:33: error: cannot find symbol\n            result\
    \ = doOperation(opr, a, b);\n                     ^\n  symbol:   method doOperation(String,int,int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfz79rtvu.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      int length = op.size();\n        for (int i = 0; i < length; i++) {\n \
    \           switch (op.get(i)) {\n                case \"+\":\n              \
    \      result += operand.get(i + 1);\n                    break;\n           \
    \     case \"-\":\n                    result -= operand.get(i + 1);\n       \
    \             break;\n                case \"*\":\n                    result\
    \ *= operand.get(i + 1);\n                    break;\n                case \"\
    //\":\n                    result /= operand.get(i + 1);\n                   \
    \ break;\n                case \"**\":\n                    result = (int) Math.pow(result,\
    \ operand.get(i + 1));\n                    break;\n            }\n        }\n\
    \        return result;\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqsulxp_3.java:50: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int res = operand.get(0);\n     \
    \   for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                res += operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    -\")) {\n                res -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    *\")) {\n                res *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    /\")) {\n                res /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                res = (int) Math.pow(res, operand.get(i + 1));\n   \
    \         }\n        }\n        return res;\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpav2ly4mr.java:43: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Write your code here...\n    \
    \    int length = op.size();\n        int[] arr = new int[length + 1];\n     \
    \   int i = 0;\n        for (Integer x : operand) {\n            arr[i] = x;\n\
    \            i++;\n        }\n        int res = arr[0];\n        i = 0;\n    \
    \    for (String o : op) {\n            switch (o) {\n                case \"\
    +\":\n                    res += arr[i + 1];\n                    break;\n   \
    \             case \"-\":\n                    res -= arr[i + 1];\n          \
    \          break;\n                case \"*\":\n                    res *= arr[i\
    \ + 1];\n                    break;\n                case \"//\":\n          \
    \          res /= arr[i + 1];\n                    break;\n                case\
    \ \"**\":\n                    res = (int) Math.pow(res, arr[i + 1]);\n      \
    \              break;\n            }\n            i++;\n        }\n        return\
    \ res;\nreturn 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpql22kb5k.java:59: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpivtjm8fz.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // your code goes here\n        int\
    \ answer = operand.get(0);\n        for(int i = 0; i < op.size(); i++) {\n   \
    \         switch(op.get(i)) {\n                case \"+\": answer += operand.get(i+1);\n\
    \                break;\n                case \"-\": answer -= operand.get(i+1);\n\
    \                break;\n                case \"*\": answer *= operand.get(i+1);\n\
    \                break;\n                case \"//\": answer /= operand.get(i+1);\n\
    \                break;\n                case \"**\": answer = (int)Math.pow(answer,\
    \ operand.get(i+1));\n                break;\n            }\n        }\n     \
    \   return answer;\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeqz63sj6.java:45: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            String o = op.get(i);\n\
    \            int r = operand.get(i + 1);\n            switch (o) {\n         \
    \       case \"+\":\n                    result += r;\n                    break;\n\
    \                case \"-\":\n                    result -= r;\n             \
    \       break;\n                case \"*\":\n                    result *= r;\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= r;\n                    break;\n                case \"**\":\n  \
    \                  result = (int) Math.pow(result, r);\n                    break;\n\
    \            }\n        }\n        return result;\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzcuflh0n.java:51: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Write your code here\n       \
    \ int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n\
    \            String currentOp = op.get(i);\n            int nextOperand = operand.get(i\
    \ + 1);\n            switch (currentOp) {\n                case \"+\":\n     \
    \               result += nextOperand;\n                    break;\n         \
    \       case \"-\":\n                    result -= nextOperand;\n            \
    \        break;\n                case \"*\":\n                    result *= nextOperand;\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= nextOperand;\n                    break;\n                case \"\
    **\":\n                    result = (int) Math.pow(result, nextOperand);\n   \
    \                 break;\n            }\n        }\n        return result;\nreturn\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7dupg5sn.java:52: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        Deque<Object> q = new ArrayDeque<>();\n\
    \        for (int i = 0; i < op.size(); i++) {\n            q.offer(operand.get(i));\n\
    \            q.offer(op.get(i));\n        }\n        q.offer(operand.get(operand.size()\
    \ - 1));\n        ArrayList<String> op1 = new ArrayList<>(Arrays.asList(\"*\"\
    , \"/\", \"%\"));\n        ArrayList<String> op2 = new ArrayList<>(Arrays.asList(\"\
    +\", \"-\"));\n        while (q.size() > 1) {\n            if (op1.contains(q.peekLast()))\
    \ {\n                int c = (int) q.pollLast();\n                int b = (int)\
    \ q.pollLast();\n                String opr = (String) q.pollLast();\n       \
    \         int a = 0;\n                if (q.peekLast() instanceof Integer) {\n\
    \                    a = (int) q.pollLast();\n                }\n            \
    \    if (opr.equals(\"*\")) {\n                    q.offer(a * b);\n         \
    \       } else if (opr.equals(\"/\")) {\n                    q.offer(a / b);\n\
    \                } else {\n                    q.offer(a % b);\n             \
    \   }\n            } else if (op2.contains(q.peekLast())) {\n                int\
    \ c = (int) q.pollLast();\n                int b = (int) q.pollLast();\n     \
    \           String opr = (String) q.pollLast();\n                int a = 0;\n\
    \                if (q.peekLast() instanceof Integer) {\n                    a\
    \ = (int) q.pollLast();\n                }\n                if (opr.equals(\"\
    +\")) {\n                    q.offer(a + b);\n                } else {\n     \
    \               q.offer(a - b);\n                }\n            }\n        }\n\
    \        return (int) q.pollLast();\nreturn 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp75mikcn8.java:68: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            String o = op.get(i);\n\
    \            int a = operand.get(i);\n            int b = operand.get(i + 1);\n\
    \            result = doOperation(result, o, b);\n        }\n        return result;\n\
    return 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqk09t8i1.java:33: error: cannot find symbol\n            result\
    \ = doOperation(result, o, b);\n                     ^\n  symbol:   method doOperation(int,String,int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            switch (op.get(i)) {\n\
    \                case \"+\":\n                    result += operand.get(i + 1);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i + 1);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i + 1);\n                \
    \    break;\n                case \"//\":\n                    result /= operand.get(i\
    \ + 1);\n                    break;\n                case \"**\":\n          \
    \          result = (int) Math.pow(result, operand.get(i + 1));\n            \
    \        break;\n            }\n        }\n        return result;\nreturn 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf1w176qq.java:49: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Algebra logic here\n        int\
    \ result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n  \
    \          switch (op.get(i)) {\n                case \"+\": result += operand.get(i\
    \ + 1); break;\n                case \"-\": result -= operand.get(i + 1); break;\n\
    \                case \"*\": result *= operand.get(i + 1); break;\n          \
    \      case \"//\": result /= operand.get(i + 1); break;\n                case\
    \ \"**\": result = (int) Math.pow(result, operand.get(i + 1)); break;\n      \
    \      }\n        }\n        return result;\nreturn 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp29knpden.java:40: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            String curOp = op.get(i);\n\
    \            int op2 = operand.get(i + 1);\n            if (curOp.equals(\"+\"\
    )) result += op2;\n            else if (curOp.equals(\"-\")) result -= op2;\n\
    \            else if (curOp.equals(\"*\")) result *= op2;\n            else if\
    \ (curOp.equals(\"//\")) result /= op2;\n            else if (curOp.equals(\"\
    **\")) result = (int) Math.pow(result, op2);\n        }\n        return result;\n\
    return 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvb58zyjv.java:39: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            String o = op.get(i);\n\
    \            int v = operand.get(i + 1);\n            switch (o) {\n         \
    \       case \"+\":\n                    result += v;\n                    break;\n\
    \                case \"-\":\n                    result -= v;\n             \
    \       break;\n                case \"*\":\n                    result *= v;\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= v;\n                    break;\n                case \"**\":\n  \
    \                  result = (int) Math.pow(result, v);\n                    break;\n\
    \            }\n        }\n        return result;\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp6dy6o1r.java:51: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0z1cwvrs.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Write your code here!\n      \
    \  int total = operand.get(0);\n        for(int i = 0; i < op.size(); i++) {\n\
    \            switch(op.get(i)) {\n                case \"+\":\n              \
    \      total += operand.get(i+1);\n                    break;\n              \
    \  case \"-\":\n                    total -= operand.get(i+1);\n             \
    \       break;\n                case \"*\":\n                    total *= operand.get(i+1);\n\
    \                    break;\n                case \"//\":\n                  \
    \  total /= operand.get(i+1);\n                    break;\n                case\
    \ \"**\":\n                    total = (int)Math.pow(total, operand.get(i+1));\n\
    \                    break;\n            }\n        }\n        return total;\n\
    return 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcifxntfh.java:50: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int res = operand.get(0);\n     \
    \   for (int i = 0; i < op.size(); i++) {\n            String c = op.get(i);\n\
    \            if (c.equals(\"+\")) res += operand.get(i + 1);\n            else\
    \ if (c.equals(\"-\")) res -= operand.get(i + 1);\n            else if (c.equals(\"\
    *\")) res *= operand.get(i + 1);\n            else if (c.equals(\"/\")) res /=\
    \ operand.get(i + 1);\n            else if (c.equals(\"^\")) res = (int) Math.pow(res,\
    \ operand.get(i + 1));\n        }\n        return res;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxdomclt2.java:38: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Write your code here\n       \
    \ // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        // Return\
    \ the answer\n        return 0;\nreturn 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfq35nevt.java:33: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Write your code here!\n      \
    \  int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n\
    \            String o = op.get(i);\n            if (o.equals(\"+\")) {\n     \
    \           result += operand.get(i + 1);\n            } else if (o.equals(\"\
    -\")) {\n                result -= operand.get(i + 1);\n            } else if\
    \ (o.equals(\"*\")) {\n                result *= operand.get(i + 1);\n       \
    \     } else if (o.equals(\"//\")) {\n                result /= operand.get(i\
    \ + 1);\n            } else if (o.equals(\"**\")) {\n                result =\
    \ (int) Math.pow(result, operand.get(i + 1));\n            }\n        }\n    \
    \    return result;\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6y6zh8zw.java:45: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        if (op.size() != operand.size() -\
    \ 1) return -1;\n        for (int i = 0; i < op.size(); i++) {\n            int\
    \ operand1 = operand.get(i);\n            int operand2 = operand.get(i + 1);\n\
    \            String operator = op.get(i);\n            if (operator.equals(\"\
    +\")) operand.set(i + 1, operand1 + operand2);\n            else if (operator.equals(\"\
    -\")) operand.set(i + 1, operand1 - operand2);\n            else if (operator.equals(\"\
    *\")) operand.set(i + 1, operand1 * operand2);\n            else if (operator.equals(\"\
    //\")) operand.set(i + 1, operand1 / operand2);\n            else if (operator.equals(\"\
    **\")) operand.set(i + 1, (int) Math.pow(operand1, operand2));\n            else\
    \ return -1;\n        }\n        return operand.get(operand.size() - 1);\nreturn\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvy8ggydj.java:41: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // use two stacks to hold the operands\
    \ and operators respectively.\n        // always pop two operands and one operator\n\
    \        // check the operator and apply the corresponding math operation\n  \
    \      // push the result to the operand stack\n        Stack<Integer> num = new\
    \ Stack<>();\n        Stack<String> opp = new Stack<>();\n        for (int i =\
    \ operand.size() - 1; i >= 0; i--) {\n            num.push(operand.get(i));\n\
    \        }\n        for (int i = op.size() - 1; i >= 0; i--) {\n            opp.push(op.get(i));\n\
    \        }\n        while (!opp.isEmpty()) {\n            String curr = opp.pop();\n\
    \            int a = num.pop();\n            int b = num.pop();\n            if\
    \ (curr.equals(\"+\")) {\n                num.push(a + b);\n            } else\
    \ if (curr.equals(\"-\")) {\n                num.push(a - b);\n            } else\
    \ if (curr.equals(\"*\")) {\n                num.push(a * b);\n            } else\
    \ if (curr.equals(\"//\")) {\n                num.push(a / b);\n            }\
    \ else if (curr.equals(\"**\")) {\n                num.push((int) Math.pow(a,\
    \ b));\n            }\n        }\n        return num.pop();\nreturn 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp662fm0p_.java:57: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        String operator = String.join(\"\"\
    , op);\n        String operands = String.join(\"\", operand.stream().map(String::valueOf).collect(Collectors.toList()));\n\
    \        String expression = operands.substring(0,1);\n        for (int i = 0;\
    \ i < operator.length(); i++) {\n            expression += operator.substring(i,\
    \ i+1) + operands.substring(i+1, i+2);\n        }\n        int result = 0;\n \
    \       try {\n            ScriptEngineManager mgr = new ScriptEngineManager();\n\
    \            ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    \
    \        result = (int)engine.eval(expression);\n        } catch (ScriptException\
    \ e) {\n            e.printStackTrace();\n        }\n        return result;\n\
    return 0;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4, (int)5))))\
    \ == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb80hnegc.java:36: error: cannot find symbol\n            ScriptEngineManager\
    \ mgr = new ScriptEngineManager();\n            ^\n  symbol:   class ScriptEngineManager\n\
    \  location: class Problem\n/tmp/tmpb80hnegc.java:36: error: cannot find symbol\n\
    \            ScriptEngineManager mgr = new ScriptEngineManager();\n          \
    \                                ^\n  symbol:   class ScriptEngineManager\n  location:\
    \ class Problem\n/tmp/tmpb80hnegc.java:37: error: cannot find symbol\n       \
    \     ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n           \
    \ ^\n  symbol:   class ScriptEngine\n  location: class Problem\n/tmp/tmpb80hnegc.java:39:\
    \ error: cannot find symbol\n        } catch (ScriptException e) {\n         \
    \        ^\n  symbol:   class ScriptException\n  location: class Problem\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int result = operand.get(0);\n  \
    \      for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"\
    +\")) {\n                result += operand.get(i + 1);\n            } else if\
    \ (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n\
    \            } else if (op.get(i).equals(\"*\")) {\n                result *=\
    \ operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n  \
    \              result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"\
    **\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n\
    \            }\n        }\n        return result;\nreturn 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpll03bv96.java:43: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int ret = operand.get(0);\n     \
    \   for (int i = 0; i < op.size(); i++) {\n            int x = operand.get(i);\n\
    \            int y = operand.get(i + 1);\n            String s = op.get(i);\n\
    \            if (s.equals(\"+\")) {\n                ret += y;\n            }\
    \ else if (s.equals(\"-\")) {\n                ret -= y;\n            } else if\
    \ (s.equals(\"*\")) {\n                ret *= y;\n            } else if (s.equals(\"\
    //\")) {\n                ret /= y;\n            } else if (s.equals(\"**\"))\
    \ {\n                ret = (int) Math.pow(ret, y);\n            }\n        }\n\
    \        return ret;\nreturn 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2546591z.java:46: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return -1;\nreturn 0;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpccrmq2zq.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        return 0;\nreturn 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpezhbm_i1.java:29: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        int num1 = operand.get(0);\n    \
    \    int num2 = operand.get(1);\n        int total = 0;\n        if (op.get(0).equals(\"\
    +\")){\n            total = num1 + num2;\n        }\n        else if (op.get(0).equals(\"\
    -\")){\n            total = num1 - num2;\n        }\n        else if (op.get(0).equals(\"\
    *\")){\n            total = num1 * num2;\n        }\n        else if (op.get(0).equals(\"\
    //\")){\n            total = num1 / num2;\n        }\n        else if (op.get(0).equals(\"\
    **\")){\n            total = (int) Math.pow(num1, num2);\n        }\n        return\
    \ total;\nreturn 0;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4,\
    \ (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsivnm21g.java:47: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Insert your code here\n      \
    \  int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n\
    \            String opStr = op.get(i);\n            int operand1 = operand.get(i);\n\
    \            int operand2 = operand.get(i + 1);\n            result = doOperation(opStr,\
    \ operand1, operand2);\n        }\n        return result;\nreturn 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplon5x2vs.java:34: error: cannot find symbol\n            result\
    \ = doOperation(opStr, operand1, operand2);\n                     ^\n  symbol:\
    \   method doOperation(String,int,int)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String>\
    \ op, ArrayList<Integer> operand) {\n        // Write your code here\n       \
    \ return 0;\nreturn 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)4,\
    \ (int)5)))) == (37));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)3, (int)4, (int)5)))) == (9));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Integer>(Arrays.asList((int)7, (int)3,\
    \ (int)4)))) == (8));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl55bvtkr.java:30: error: unreachable statement\nreturn 0;\n^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
