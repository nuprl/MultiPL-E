language: java
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> result = new ArrayList<>();\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            result.add(i, 0);\n        }\n      \
    \  Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n\
    \            public int compare(Integer o1, Integer o2) {\n                String\
    \ str1 = Integer.toBinaryString(o1);\n                String str2 = Integer.toBinaryString(o2);\n\
    \                int n1 = 0;\n                int n2 = 0;\n                for\
    \ (int i = 0; i < str1.length(); i++) {\n                    if (str1.charAt(i)\
    \ == '1') {\n                        n1++;\n                    }\n          \
    \      }\n                for (int i = 0; i < str2.length(); i++) {\n        \
    \            if (str2.charAt(i) == '1') {\n                        n2++;\n   \
    \                 }\n                }\n                if (n1 == n2) {\n    \
    \                return o1.compareTo(o2);\n                } else {\n        \
    \            return n1 - n2;\n                }\n            }\n        });\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            result.set(i, arr.get(i));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi51x44f8.java:52)\n"
  stdout: ''
  timestamp: 1660011295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n\
    \            public int compare(Integer one, Integer two) {\n                int\
    \ num1 = one;\n                int num2 = two;\n                int ones1 = 0;\n\
    \                int ones2 = 0;\n                while (num1 > 0) {\n        \
    \            ones1 += num1 % 2;\n                    num1 = num1 / 2;\n      \
    \          }\n                while (num2 > 0) {\n                    ones2 +=\
    \ num2 % 2;\n                    num2 = num2 / 2;\n                }\n       \
    \         if (ones1 == ones2) {\n                    return one - two;\n     \
    \           }\n                return ones1 - ones2;\n            }\n        });\n\
    \        return arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbvy4acs8.java:42)\n"
  stdout: ''
  timestamp: 1660011295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // I'll be honest, it took me 4 different tries to get this working.\n\
    \        // On the first try, my comparator kept returning the same value, even\n\
    \        // though I thought I had done it correctly. This caused the arr to remain\n\
    \        // sorted. On the second try, I changed the comparator to being an ArrayList\n\
    \        // instead of an int, which worked, but then my method for converting\
    \ the\n        // int to an ArrayList was breaking. On the third try, I had the\
    \ int to\n        // ArrayList conversion working, but I had ignored the fact\
    \ that 0s in a\n        // ArrayList were \"null\"s. This caused the number of\
    \ 1s to be incorrect\n        // when it converted to a ArrayList. That's when\
    \ I changed the comparator\n        // to only compare the length of the binary\
    \ representation, which would\n        // get the list sorted by the number of\
    \ 1s.\n        arr.sort((a, b) -> Integer.bitCount(a) - Integer.bitCount(b));\n\
    \        return arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu_lieq49.java:32)\n"
  stdout: ''
  timestamp: 1660011295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // write your code here\n        ArrayList<Integer> sortedArr = new ArrayList<>();\n\
    \        // Integer[] sortedArr = new Integer[arr.size()];\n        Integer count\
    \ = 0;\n        while (arr.size() > 0) {\n            Integer min = arr.get(0);\n\
    \            Integer minIndex = 0;\n            for (Integer i = 0; i < arr.size();\
    \ i++) {\n                Integer a = arr.get(i);\n                if (bitCount(a)\
    \ < bitCount(min)) {\n                    min = a;\n                    minIndex\
    \ = i;\n                } else if (bitCount(a) == bitCount(min)) {\n         \
    \           if (a < min) {\n                        min = a;\n               \
    \         minIndex = i;\n                    }\n                }\n          \
    \  }\n            sortedArr.add(min);\n            arr.remove(minIndex);\n   \
    \     }\n        return sortedArr;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsaqhgkpm.java:26: error: cannot find symbol\n                if\
    \ (bitCount(a) < bitCount(min)) {\n                    ^\n  symbol:   method bitCount(Integer)\n\
    \  location: class Problem\n/tmp/tmpsaqhgkpm.java:26: error: cannot find symbol\n\
    \                if (bitCount(a) < bitCount(min)) {\n                        \
    \          ^\n  symbol:   method bitCount(Integer)\n  location: class Problem\n\
    /tmp/tmpsaqhgkpm.java:29: error: cannot find symbol\n                } else if\
    \ (bitCount(a) == bitCount(min)) {\n                           ^\n  symbol:  \
    \ method bitCount(Integer)\n  location: class Problem\n/tmp/tmpsaqhgkpm.java:29:\
    \ error: cannot find symbol\n                } else if (bitCount(a) == bitCount(min))\
    \ {\n                                          ^\n  symbol:   method bitCount(Integer)\n\
    \  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011294
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // First, get the binary representation of all the numbers in the array\n\
    \        Map<Integer, String> map = new HashMap<>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            int num = arr.get(i);\n            String\
    \ bits = Integer.toBinaryString(num);\n            map.put(num, bits);\n     \
    \   }\n        // Use ArrayList since the size will change\n        ArrayList<String>\
    \ bitLists = new ArrayList<>(map.values());\n        Collections.sort(bitLists,\
    \ (a, b) -> {\n            int cmp = Integer.compare(a.length(), b.length());\n\
    \            if (cmp == 0)\n                cmp = Integer.compare(Integer.parseInt(a,\
    \ 2), Integer.parseInt(b, 2));\n            return cmp;\n        });\n       \
    \ // Reorder the initial array using the sorted binary representation\n      \
    \  ArrayList<Integer> result = new ArrayList<>();\n        for (String bits :\
    \ bitLists) {\n            for (Map.Entry<Integer, String> entry : map.entrySet())\
    \ {\n                if (entry.getValue().equals(bits)) {\n                  \
    \  result.add(entry.getKey());\n                    break;\n                }\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2atsxzlk.java:45)\n"
  stdout: ''
  timestamp: 1660011295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        //\n        // Please add code here\n        //\n        Map<Integer,\
    \ Integer> counts = new HashMap<>();\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            int value = arr.get(i);\n            int count = 0;\n  \
    \          while (value > 0) {\n                count += value % 2;\n        \
    \        value /= 2;\n            }\n            counts.put(arr.get(i), count);\n\
    \        }\n        Collections.sort(arr, (x, y) -> {\n            if (counts.get(x)\
    \ < counts.get(y)) {\n                return -1;\n            } else if (counts.get(x)\
    \ > counts.get(y)) {\n                return 1;\n            } else {\n      \
    \          return x - y;\n            }\n        });\n        return arr;\n}\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4vhg1icz.java:43)\n"
  stdout: ''
  timestamp: 1660011295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        return arr.stream()\n            .map(i -> new Pair<Integer,Integer>(i,Integer.bitCount(i)))\n\
    \            .sorted((x,y) -> x.getValue1().equals(y.getValue1()) ? x.getValue0().compareTo(y.getValue0())\
    \ : x.getValue1().compareTo(y.getValue1()))\n            .map(x -> x.getValue0())\n\
    \            .collect(Collectors.toCollection(ArrayList::new));\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.sortArray(tmpz9ofn8k1.java:17)\n\tat Problem.main(tmpz9ofn8k1.java:24)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sorted = new ArrayList<>();\n        ArrayList<Integer>\
    \ negs = new ArrayList<>();\n        for (int i : arr) {\n            if (i <\
    \ 0) {\n                negs.add(i);\n            } else {\n                sorted.add(i);\n\
    \            }\n        }\n        Collections.sort(sorted, new Comparator<Integer>()\
    \ {\n            @Override\n            public int compare(Integer a, Integer\
    \ b) {\n                int oneCountA = Integer.bitCount(a);\n               \
    \ int oneCountB = Integer.bitCount(b);\n                return oneCountA != oneCountB\
    \ ? Integer.compare(oneCountA, oneCountB) : Integer.compare(a, b);\n         \
    \   }\n        });\n        Collections.sort(negs);\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        for (int i : negs) {\n            result.add(i);\n\
    \        }\n        for (int i : sorted) {\n            result.add(i);\n     \
    \   }\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2,\
    \ (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiw7w_hej.java:46)\n"
  stdout: ''
  timestamp: 1660011295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> res = new ArrayList<>();\n        ArrayList<Integer>\
    \ neg = new ArrayList<>();\n        ArrayList<Integer> nonNeg = new ArrayList<>();\n\
    \        arr.forEach(e -> {\n            if (e >= 0) {\n                nonNeg.add(e);\n\
    \            } else {\n                neg.add(e);\n            }\n        });\n\
    \        Collections.sort(nonNeg, (a, b) -> {\n            // System.out.println(Integer.bitCount(a)\
    \ + \" \" + Integer.bitCount(b));\n            int countA = Integer.bitCount(a);\n\
    \            int countB = Integer.bitCount(b);\n            if (countA == countB)\
    \ {\n                return a.compareTo(b);\n            } else {\n          \
    \      return countA - countB;\n            }\n        });\n        Collections.sort(neg,\
    \ (a, b) -> {\n            // System.out.println(Integer.bitCount(a) + \" \" +\
    \ Integer.bitCount(b));\n            int countA = Integer.bitCount(a);\n     \
    \       int countB = Integer.bitCount(b);\n            if (countA == countB) {\n\
    \                return a.compareTo(b);\n            } else {\n              \
    \  return countA - countB;\n            }\n        });\n        Collections.reverse(neg);\n\
    \        res.addAll(nonNeg);\n        res.addAll(neg);\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1pas2ga7.java:54)\n"
  stdout: ''
  timestamp: 1660011295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        arr.sort(Comparator.comparing(Integer::bitCount)\n                .thenComparing(Integer::intValue));\n\
    \        return arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_brymr4.java:23)\n"
  stdout: ''
  timestamp: 1660011295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n\
    \            public int compare(Integer a, Integer b) {\n                Integer\
    \ aCount = countOnes(a);\n                Integer bCount = countOnes(b);\n   \
    \             if (aCount.equals(bCount)) return a.compareTo(b);\n            \
    \    return aCount.compareTo(bCount);\n            }\n        });\n        return\
    \ arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwwd8y_8q.java:20: error: cannot find symbol\n                Integer\
    \ aCount = countOnes(a);\n                                 ^\n  symbol: method\
    \ countOnes(Integer)\n/tmp/tmpwwd8y_8q.java:21: error: cannot find symbol\n  \
    \              Integer bCount = countOnes(b);\n                              \
    \   ^\n  symbol: method countOnes(Integer)\n2 errors\n"
  stdout: ''
  timestamp: 1660011294
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> copy = new ArrayList<Integer>(arr);\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            int ones = Integer.bitCount(arr.get(i));\n\
    \            int j = i - 1;\n            while (j >= 0 && Integer.bitCount(arr.get(j))\
    \ > ones) {\n                j--;\n            }\n            arr.add(j + 1, arr.get(i));\n\
    \            arr.remove(i + 1);\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            int ones = Integer.bitCount(arr.get(i));\n            int\
    \ j = i + 1;\n            while (j < arr.size() && Integer.bitCount(arr.get(j))\
    \ == ones) {\n                j++;\n            }\n            ArrayList<Integer>\
    \ temp = new ArrayList<Integer>();\n            for (int x = i; x < j; x++) {\n\
    \                temp.add(arr.get(x));\n            }\n            Collections.sort(temp);\n\
    \            for (int x = i; x < j; x++) {\n                arr.set(x, temp.get(x\
    \ - i));\n            }\n            i = j - 1;\n        }\n        return arr;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjs41f40s.java:47)\n"
  stdout: ''
  timestamp: 1660011295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // this is a simplified version of the problem\n        // where I assume\
    \ that the input will be a list of +ve integers\n        // You can assume this\
    \ if the problem setter gives you this kind of input\n        // Otherwise you\
    \ have to handle the corner cases too\n        ArrayList<Pair<Integer, Integer>>\
    \ pairs = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            pairs.add(new Pair<>(arr.get(i), numOnes(arr.get(i))));\n       \
    \ }\n        Collections.sort(pairs, new Comparator<Pair<Integer, Integer>>()\
    \ {\n            @Override\n            public int compare(Pair<Integer, Integer>\
    \ p1, Pair<Integer, Integer> p2) {\n                if (p1.getValue1() == p2.getValue1())\
    \ {\n                    return p1.getValue0() - p2.getValue0();\n           \
    \     }\n                return p1.getValue1() - p2.getValue1();\n           \
    \ }\n        });\n        ArrayList<Integer> result = new ArrayList<>();\n   \
    \     for (int i = 0; i < pairs.size(); i++) {\n            result.add(pairs.get(i).getValue0());\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ti6iz26.java:23: error: cannot find symbol\n            pairs.add(new\
    \ Pair<>(arr.get(i), numOnes(arr.get(i))));\n                                \
    \             ^\n  symbol:   method numOnes(Integer)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011294
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n      \
    \  ArrayList<Integer> newArr = new ArrayList<>();\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            String binary = String.format(\"%32s\", Integer.toBinaryString(arr.get(i))).replace(\"\
    \ \", \"0\");\n            System.out.println(binary);\n            int ones =\
    \ 0;\n            for (int j = 0; j < binary.length(); j++) {\n              \
    \  if (binary.charAt(j) == '1') {\n                    ones++;\n             \
    \   }\n            }\n            pairs.add(new Pair<Integer, Integer>(ones, arr.get(i)));\n\
    \        }\n        pairs.sort(new Comparator<Pair<Integer, Integer>>() {\n  \
    \          @Override\n            public int compare(Pair<Integer, Integer> o1,\
    \ Pair<Integer, Integer> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n\
    \            }\n        });\n        for (int i = 0; i < pairs.size(); i++) {\n\
    \            newArr.add(pairs.get(i).getValue1());\n        }\n        return\
    \ newArr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.sortArray(tmputrje_b5.java:28)\n\tat Problem.main(tmputrje_b5.java:42)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: '00000000000000000000000000000001

    '
  timestamp: 1660011295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        return arr.stream()\n                  .sorted(Comparator.comparingInt(Problem::numberOfOnes)\n\
    \                                    .thenComparingInt(x -> x))\n            \
    \      .collect(Collectors.toCollection(ArrayList::new));\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc3skt9b_.java:18: error: invalid method reference\n           \
    \       .sorted(Comparator.comparingInt(Problem::numberOfOnes)\n             \
    \                                     ^\n  cannot find symbol\n    symbol:   method\
    \ numberOfOnes()\n    location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011294
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> result = new ArrayList<>();\n        ArrayList<Integer>\
    \ negative = new ArrayList<>();\n        ArrayList<Integer> positive = new ArrayList<>();\n\
    \        ArrayList<Integer> zeros = new ArrayList<>();\n        ArrayList<Integer>\
    \ negative_twos = new ArrayList<>();\n        ArrayList<Integer> negative_ones\
    \ = new ArrayList<>();\n        ArrayList<Integer> negative_zeros = new ArrayList<>();\n\
    \        for (int n : arr) {\n            if (n >= 0) {\n                if (n\
    \ == 0) {\n                    zeros.add(n);\n                } else {\n     \
    \               positive.add(n);\n                }\n            } else {\n  \
    \              if (n == -1) {\n                    negative_ones.add(n);\n   \
    \             } else if (n == -2) {\n                    negative_twos.add(n);\n\
    \                } else {\n                    negative_zeros.add(n);\n      \
    \          }\n            }\n        }\n        result.addAll(negative_zeros);\n\
    \        result.addAll(negative_twos);\n        result.addAll(negative_ones);\n\
    \        result.addAll(zeros);\n        result.addAll(positive);\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbu0fl_dd.java:49)\n"
  stdout: ''
  timestamp: 1660011295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n\
    \            public int compare(Integer o1, Integer o2) {\n                int\
    \ o1Ones = Integer.bitCount(o1);\n                int o2Ones = Integer.bitCount(o2);\n\
    \                if (o1Ones == o2Ones) {\n                    return o1.compareTo(o2);\n\
    \                }\n                return o1Ones - o2Ones;\n            }\n \
    \       });\n        return arr;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpss6k07yq.java:32)\n"
  stdout: ''
  timestamp: 1660011295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> ret = new ArrayList<>();\n        ArrayList<String>\
    \ arrBin = new ArrayList<>();\n        for (int i : arr) {\n            arrBin.add(Integer.toBinaryString(i));\n\
    \        }\n        ArrayList<Integer> onesCount = new ArrayList<>();\n      \
    \  ArrayList<Integer> zerosCount = new ArrayList<>();\n        for (String i :\
    \ arrBin) {\n            int zc = 0;\n            int oc = 0;\n            for\
    \ (int j = 0; j < i.length(); j++) {\n                if (i.charAt(j) == '0')\
    \ {\n                    zc++;\n                } else {\n                   \
    \ oc++;\n                }\n            }\n            onesCount.add(oc);\n  \
    \          zerosCount.add(zc);\n        }\n        ArrayList<Integer> sorted =\
    \ new ArrayList<>();\n        sorted.addAll(arr);\n        Collections.sort(sorted);\n\
    \        ArrayList<Integer> sortedonesCount = new ArrayList<>();\n        sortedonesCount.addAll(onesCount);\n\
    \        Collections.sort(sortedonesCount);\n        // System.out.println(onesCount);\n\
    \        // System.out.println(sortedonesCount);\n        HashMap<Integer, Integer>\
    \ map = new HashMap<>();\n        for (int i = 0; i < sortedonesCount.size();\
    \ i++) {\n            for (int j = 0; j < onesCount.size(); j++) {\n         \
    \       if (sortedonesCount.get(i) == onesCount.get(j)) {\n                  \
    \  map.put(sortedonesCount.get(i), zerosCount.get(j));\n                    onesCount.set(j,\
    \ -1);\n                    break;\n                }\n            }\n       \
    \ }\n        // System.out.println(map);\n        for (int i = 0; i < sortedonesCount.size();\
    \ i++) {\n            for (int j = 0; j < sorted.size(); j++) {\n            \
    \    if (map.get(sortedonesCount.get(i)) == zerosCount.get(j)) {\n           \
    \         ret.add(sorted.get\n}\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2,\
    \ (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr5hy3apd.java:59: error: ')' expected\n                    ret.add(sorted.get\n\
    \                                      ^\n/tmp/tmpr5hy3apd.java:61: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n2\
    \ errors\n"
  stdout: ''
  timestamp: 1660011293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        int[] cache = new int[arr.size()];\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            int num = arr.get(i);\n            int bin = Integer.toBinaryString(num).replaceAll(\"\
    0\", \"\").length();\n            cache[i] = bin;\n        }\n        ArrayList<Integer>\
    \ sorted = new ArrayList<>();\n        while (sorted.size() < arr.size()) {\n\
    \            int min = Integer.MAX_VALUE;\n            int j = 0;\n          \
    \  for (int i = 0; i < cache.length; i++) {\n                if (cache[i] < min)\
    \ {\n                    min = cache[i];\n                    j = i;\n       \
    \         }\n            }\n            cache[j] = Integer.MAX_VALUE;\n      \
    \      sorted.add(arr.get(j));\n        }\n        return sorted;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0pswjy5u.java:39)\n"
  stdout: ''
  timestamp: 1660011295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        int[] oneCounts = new int[arr.size()];\n        int[] nums = new int[arr.size()];\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            nums[i] = arr.get(i);\n\
    \            oneCounts[i] = Integer.bitCount(arr.get(i));\n        }\n       \
    \ // System.out.println(Arrays.toString(nums));\n        // System.out.println(Arrays.toString(oneCounts));\n\
    \        // System.out.println(Arrays.toString(arr.toArray()));\n        Arrays.sort(oneCounts);\n\
    \        // System.out.println(Arrays.toString(oneCounts));\n        Integer[]\
    \ sortedNums = new Integer[arr.size()];\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            for (int j = 0; j < arr.size(); j++) {\n               \
    \ if (oneCounts[i] == Integer.bitCount(nums[j])) {\n                    sortedNums[i]\
    \ = nums[j];\n                    nums[j] = Integer.MAX_VALUE;\n             \
    \       break;\n                }\n            }\n        }\n        return new\
    \ ArrayList<Integer>(Arrays.asList(sortedNums));\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4khbtqii.java:41)\n"
  stdout: ''
  timestamp: 1660011295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer>[] ones = new ArrayList[32];\n        for (int i =\
    \ 0; i < ones.length; i++)\n            ones[i] = new ArrayList<Integer>();\n\
    \        for (int n : arr) {\n            int count = 0;\n            for (int\
    \ i = 0; i < 32; i++) {\n                if ((n & (1 << i)) != 0) {\n        \
    \            count++;\n                }\n            }\n            ones[count].add(n);\n\
    \        }\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n  \
    \      for (int i = 0; i < ones.length; i++) {\n            Collections.sort(ones[i]);\n\
    \            sorted.addAll(ones[i]);\n        }\n        return sorted;\n}\n \
    \   public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqn916h3l.java:38)\n"
  stdout: ''
  timestamp: 1660011295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        TreeMap<Integer, ArrayList<Integer>> map = new TreeMap<>();\n       \
    \ ArrayList<Integer> result = new ArrayList<>();\n        for (int i : arr) {\n\
    \            if (map.containsKey(getOnes(i))) {\n                map.get(getOnes(i)).add(i);\n\
    \            } else {\n                ArrayList<Integer> list = new ArrayList<>();\n\
    \                list.add(i);\n                map.put(getOnes(i), list);\n  \
    \          }\n        }\n        for (Map.Entry<Integer, ArrayList<Integer>> entry\
    \ : map.entrySet()) {\n            for (int i : entry.getValue()) {\n        \
    \        result.add(i);\n            }\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjkhb223i.java:20: error: cannot find symbol\n            if (map.containsKey(getOnes(i)))\
    \ {\n                                ^\n  symbol:   method getOnes(int)\n  location:\
    \ class Problem\n/tmp/tmpjkhb223i.java:21: error: cannot find symbol\n       \
    \         map.get(getOnes(i)).add(i);\n                        ^\n  symbol:  \
    \ method getOnes(int)\n  location: class Problem\n/tmp/tmpjkhb223i.java:25: error:\
    \ cannot find symbol\n                map.put(getOnes(i), list);\n           \
    \             ^\n  symbol:   method getOnes(int)\n  location: class Problem\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660011294
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Triplet<Integer, Integer, Integer>> triplets = new ArrayList<>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            Triplet<Integer,\
    \ Integer, Integer> triplet = new Triplet<>(arr.get(i), arr.get(i), Problem.ones(arr.get(i)));\n\
    \            triplets.add(triplet);\n        }\n        Collections.sort(triplets,\
    \ (a, b) -> {\n            return (a.getValue2() > b.getValue2()) ? 1 : (a.getValue2()\
    \ < b.getValue2()) ? -1 : a.getValue0().compareTo(b.getValue0());\n        });\n\
    \        ArrayList<Integer> newArr = new ArrayList<>();\n        for (int i =\
    \ 0; i < triplets.size(); i++) {\n            newArr.add(triplets.get(i).getValue0());\n\
    \        }\n        return newArr;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplrv1_oh7.java:19: error: cannot find symbol\n            Triplet<Integer,\
    \ Integer, Integer> triplet = new Triplet<>(arr.get(i), arr.get(i), Problem.ones(arr.get(i)));\n\
    \                                                                            \
    \                          ^\n  symbol:   method ones(Integer)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ sortedIndices = new ArrayList<Integer>();\n        ArrayList<Integer> zeroBits\
    \ = new ArrayList<Integer>();\n        ArrayList<Integer> zeroBitsIndices = new\
    \ ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n    \
    \        int zeroCount = 0;\n            int num = arr.get(i);\n            while\
    \ (num > 0) {\n                if (num % 2 == 0) {\n                    zeroCount++;\n\
    \                }\n                num /= 2;\n            }\n            if (zeroCount\
    \ == 0) {\n                sorted.add(arr.get(i));\n                sortedIndices.add(i);\n\
    \            } else {\n                zeroBits.add(zeroCount);\n            \
    \    zeroBitsIndices.add(i);\n            }\n        }\n        for (int i = 0;\
    \ i < zeroBits.size(); i++) {\n            for (int j = i + 1; j < zeroBits.size();\
    \ j++) {\n                if (zeroBits.get(i) > zeroBits.get(j)) {\n         \
    \           int temp = zeroBits.get(i);\n                    zeroBits.set(i, zeroBits.get(j));\n\
    \                    zeroBits.set(j, temp);\n                    temp = zeroBitsIndices.get(i);\n\
    \                    zeroBitsIndices.set(i, zeroBitsIndices.get(j));\n       \
    \             zeroBitsIndices.set(j, temp);\n                }\n            }\n\
    \        }\n        for (int i = 0; i < zeroBits.size(); i++) {\n            sorted.add(arr.get(zeroBitsIndices.get(i)));\n\
    \            sortedIndices.add(zeroBitsIndices.get(i));\n        }\n        ArrayList<Integer>\
    \ out = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            out.add(arr.get(sortedIndices.get(i)));\n        }\n        return\
    \ out;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcg89zaoi.java:61)\n"
  stdout: ''
  timestamp: 1660011296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        arr.sort(Comparator.comparing(Problem::toBinaryList)\n              \
    \              .thenComparing(a -> a));\n        return arr;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6mvyw6_s.java:17: error: invalid method reference\n        arr.sort(Comparator.comparing(Problem::toBinaryList)\n\
    \                                      ^\n  cannot find symbol\n    symbol:  \
    \ method toBinaryList()\n    location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // your code here\n        // sort the list and print\n        System.out.println(arr);\n\
    \        ArrayList<Integer> array = new ArrayList<Integer>();\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            array.add(Integer.bitCount(arr.get(i)));\n\
    \        }\n        // System.out.println(array);\n        boolean sorted = false;\n\
    \        int tmp = 0;\n        while (!sorted) {\n            sorted = true;\n\
    \            for (int i = 0; i < array.size() - 1; i++) {\n                if\
    \ (array.get(i) > array.get(i + 1)) {\n                    tmp = array.get(i);\n\
    \                    array.set(i, array.get(i + 1));\n                    array.set(i\
    \ + 1, tmp);\n                    tmp = arr.get(i);\n                    arr.set(i,\
    \ arr.get(i + 1));\n                    arr.set(i + 1, tmp);\n               \
    \     sorted = false;\n                }\n            }\n        }\n        System.out.println(arr);\n\
    \        return arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqthb78jj.java:45)\n"
  stdout: '[1, 5, 2, 3, 4]

    [1, 2, 4, 5, 3]

    '
  timestamp: 1660011296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        arr.sort(new Comparator<Integer>() {\n            @Override\n       \
    \     public int compare(Integer n1, Integer n2) {\n                // count the\
    \ number of ones in each number\n                String b1 = Integer.toBinaryString(n1);\n\
    \                String b2 = Integer.toBinaryString(n2);\n                int\
    \ c1 = b1.replaceAll(\"0\", \"\").length();\n                int c2 = b2.replaceAll(\"\
    0\", \"\").length();\n                if (c1 != c2) {\n                    return\
    \ Integer.compare(c1, c2);\n                } else {\n                    return\
    \ Integer.compare(n1, n2);\n                }\n            }\n        });\n  \
    \      return arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6kergzzn.java:36)\n"
  stdout: ''
  timestamp: 1660011296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // Write your code here\n        ArrayList<Pair<Integer, Integer>> tuples\
    \ = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n     \
    \       int element = arr.get(i);\n            int total_ones = 0;\n         \
    \   while (element > 0) {\n                if (element % 2 == 1) {\n         \
    \           total_ones++;\n                }\n                element /= 2;\n\
    \            }\n            tuples.add(new Pair<Integer, Integer>(total_ones,\
    \ arr.get(i)));\n        }\n        tuples.sort(new Comparator<Pair<Integer, Integer>>()\
    \ {\n            @Override\n            public int compare(Pair<Integer, Integer>\
    \ o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0().equals(o2.getValue0()))\
    \ {\n                    return o1.getValue1().compareTo(o2.getValue1());\n  \
    \              }\n                return o1.getValue0().compareTo(o2.getValue0());\n\
    \            }\n        });\n        ArrayList<Integer> res = new ArrayList<>();\n\
    \        for (int i = 0; i < tuples.size(); i++) {\n            res.add(tuples.get(i).getValue1());\n\
    \        }\n        return res;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.sortArray(tmp4l8uuvjo.java:28)\n\tat Problem.main(tmp4l8uuvjo.java:46)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n      \
    \  for (int i = 0; i < arr.size(); i++) {\n            String s = Integer.toBinaryString(arr.get(i));\n\
    \            int cnt = 0;\n            for (int j = 0; j < s.length(); j++)\n\
    \                if (s.charAt(j) == '1')\n                    cnt++;\n       \
    \     pairs.add(new Pair<>(cnt, arr.get(i)));\n        }\n        pairs.sort((a,\
    \ b) -> {\n            if (a.getValue0() < b.getValue0())\n                return\
    \ -1;\n            else if (a.getValue0() > b.getValue0())\n                return\
    \ 1;\n            else {\n                if (a.getValue1() < b.getValue1())\n\
    \                    return -1;\n                else if (a.getValue1() > b.getValue1())\n\
    \                    return 1;\n                else\n                    return\
    \ 0;\n            }\n        });\n        for (int i = 0; i < arr.size(); i++)\n\
    \            arr.set(i, pairs.get(i).getValue1());\n        return arr;\n}\n \
    \   public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.sortArray(tmpex5l71g3.java:24)\n\tat Problem.main(tmpex5l71g3.java:45)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // put the int value, and the binary string in a tuple\n        ArrayList<Pair<Integer,\
    \ String>> sorted = new ArrayList<>();\n        // used to store the sorted ints,\
    \ eventually returned\n        ArrayList<Integer> values = new ArrayList<>();\n\
    \        // convert to binary and add to the tuple\n        for (int i : arr)\
    \ {\n            sorted.add(new Pair<>(i, Integer.toBinaryString(i)));\n     \
    \   }\n        // sort by number of ones, and then value\n        sorted.sort((Pair<Integer,\
    \ String> first, Pair<Integer, String> second) -> {\n            int onesCount\
    \ = Long.bitCount(Integer.parseInt(first.getValue1()))\n                     \
    \     - Long.bitCount(Integer.parseInt(second.getValue1()));\n            if (onesCount\
    \ == 0) {\n                return first.getValue0() - second.getValue0();\n  \
    \          }\n            return onesCount;\n        });\n        // grab only\
    \ the ints and return\n        for (Pair<Integer, String> tup : sorted) {\n  \
    \          values.add(tup.getValue0());\n        }\n        return values;\n}\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.sortArray(tmpf8ujwp1u.java:23)\n\tat Problem.main(tmpf8ujwp1u.java:41)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        int n = arr.size();\n        // keep track of the order\n        ArrayList<Integer>\
    \ order = new ArrayList<>();\n        ArrayList<Integer> ones = new ArrayList<>();\n\
    \        ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 0;\
    \ i < n; i++) {\n            int v = arr.get(i);\n            int c = 0;\n   \
    \         while (v > 0) {\n                c += v & 1;\n                v >>=\
    \ 1;\n            }\n            ones.add(c);\n            order.add(i);\n   \
    \     }\n        // stable sort\n        for (int i = 0; i < n; i++) {\n     \
    \       for (int j = 0; j < n - 1; j++) {\n                if (ones.get(j) > ones.get(j\
    \ + 1)) {\n                    Collections.swap(ones, j, j + 1);\n           \
    \         Collections.swap(order, j, j + 1);\n                } else if (ones.get(j)\
    \ == ones.get(j + 1)) {\n                    if (arr.get(order.get(j)) > arr.get(order.get(j\
    \ + 1))) {\n                        Collections.swap(ones, j, j + 1);\n      \
    \                  Collections.swap(order, j, j + 1);\n                    }\n\
    \                }\n            }\n        }\n        for (int i = 0; i < n; i++)\
    \ {\n            res.add(arr.get(order.get(i)));\n        }\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphiexadb0.java:53)\n"
  stdout: ''
  timestamp: 1660011296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int\
    \ n : arr) {\n            res.add(n);\n        }\n        res.sort(new Comparator<Integer>()\
    \ {\n            public int compare(Integer a, Integer b) {\n                int\
    \ c = Integer.bitCount(a);\n                int d = Integer.bitCount(b);\n   \
    \             if (c != d) {\n                    return c - d;\n             \
    \   }\n                return a - b;\n            }\n        });\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3u9u4_g2.java:35)\n"
  stdout: ''
  timestamp: 1660011296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> result = new ArrayList<>();\n        int max = 0;\n\
    \        for (int i : arr) {\n            max = Math.max(max, i);\n        }\n\
    \        int[] bitCount = new int[max + 1];\n        Arrays.fill(bitCount, -1);\n\
    \        for (int i : arr) {\n            if (bitCount[i] == -1) {\n         \
    \       bitCount[i] = countOnes(i);\n            }\n        }\n        ArrayList<Pair<Integer,\
    \ Integer>> rank = new ArrayList<>();\n        for (int i : arr) {\n         \
    \   rank.add(new Pair<>(bitCount[i], i));\n        }\n        rank.sort((p1, p2)\
    \ -> {\n            if (p1.getValue0() == p2.getValue0()) {\n                return\
    \ p1.getValue1() - p2.getValue1();\n            }\n            return p1.getValue0()\
    \ - p2.getValue0();\n        });\n        for (Pair<Integer, Integer> p : rank)\
    \ {\n            result.add(p.getValue1());\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpayp95ji4.java:26: error: cannot find symbol\n                bitCount[i]\
    \ = countOnes(i);\n                              ^\n  symbol:   method countOnes(int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        if (arr.size() == 0) {\n            return arr;\n        }\n        ArrayList<Integer>\
    \ ret = new ArrayList<Integer>();\n        ArrayList<Integer> negs = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ 0) {\n                negs.add(arr.get(i));\n            } else {\n        \
    \        ret.add(arr.get(i));\n            }\n        }\n        Collections.sort(ret,\
    \ (a, b) -> {\n            int f1 = ones(a);\n            int f2 = ones(b);\n\
    \            if (f1 == f2) {\n                return a - b;\n            }\n \
    \           return f1 - f2;\n        });\n        for (int i = 0; i < negs.size();\
    \ i++) {\n            ret.add(negs.get(i));\n        }\n        return ret;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo1qhwb5x.java:30: error: cannot find symbol\n            int f1\
    \ = ones(a);\n                     ^\n  symbol:   method ones(Integer)\n  location:\
    \ class Problem\n/tmp/tmpo1qhwb5x.java:31: error: cannot find symbol\n       \
    \     int f2 = ones(b);\n                     ^\n  symbol:   method ones(Integer)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        arr.sort(new Comparator<Integer>() {\n            @Override\n       \
    \     public int compare(Integer o1, Integer o2) {\n                int numOnes1\
    \ = countOnes(o1);\n                int numOnes2 = countOnes(o2);\n          \
    \      if (numOnes1 < numOnes2) return -1;\n                if (numOnes1 > numOnes2)\
    \ return 1;\n                if (o1 < o2) return -1;\n                if (o1 >\
    \ o2) return 1;\n                return 0;\n            }\n        });\n     \
    \   return arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppwbkezcr.java:20: error: cannot find symbol\n                int\
    \ numOnes1 = countOnes(o1);\n                               ^\n  symbol: method\
    \ countOnes(Integer)\n/tmp/tmppwbkezcr.java:21: error: cannot find symbol\n  \
    \              int numOnes2 = countOnes(o2);\n                               ^\n\
    \  symbol: method countOnes(Integer)\n2 errors\n"
  stdout: ''
  timestamp: 1660011296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        if (arr.size() <= 1) {\n            return arr;\n        }\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            int count = countOne(arr.get(i));\n            Pair<Integer,\
    \ Integer> pair = new Pair<Integer, Integer>(count, arr.get(i));\n           \
    \ result.add(pair);\n        }\n        result.sort(new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0()\
    \ > o2.getValue0()) {\n                    return 1;\n                } else if\
    \ (o1.getValue0() < o2.getValue0()) {\n                    return -1;\n      \
    \          } else {\n                    if (o1.getValue1() > o2.getValue1())\
    \ {\n                        return 1;\n                    } else if (o1.getValue1()\
    \ < o2.getValue1()) {\n                        return -1;\n                  \
    \  } else {\n                        return 0;\n                    }\n      \
    \          }\n            }\n        });\n        for (int i = 0; i < result.size();\
    \ i++) {\n            Pair<Integer, Integer> pair = result.get(i);\n         \
    \   result.set(i, pair.getValue1());\n        }\n        return result;\n}\n \
    \   public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzcf84xus.java:22: error: cannot find symbol\n            int count\
    \ = countOne(arr.get(i));\n                        ^\n  symbol:   method countOne(Integer)\n\
    \  location: class Problem\n/tmp/tmpzcf84xus.java:24: error: incompatible types:\
    \ Pair<Integer,Integer> cannot be converted to Integer\n            result.add(pair);\n\
    \                       ^\n/tmp/tmpzcf84xus.java:26: error: incompatible types:\
    \ <anonymous Comparator<Pair<Integer,Integer>>> cannot be converted to Comparator<?\
    \ super Integer>\n        result.sort(new Comparator<Pair<Integer, Integer>>()\
    \ {\n                    ^\n/tmp/tmpzcf84xus.java:45: error: incompatible types:\
    \ Integer cannot be converted to Pair<Integer,Integer>\n            Pair<Integer,\
    \ Integer> pair = result.get(i);\n                                           \
    \         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // Write your code here\n        System.out.println(arr);\n        ArrayList<Integer>\
    \ output = new ArrayList<Integer>();\n        ArrayList<Integer> posneg = new\
    \ ArrayList<Integer>();\n        ArrayList<Integer> bitones = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> array = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ array2 = new ArrayList<Integer>();\n        ArrayList<Integer> answer = new\
    \ ArrayList<Integer>();\n        String[] string = new String[arr.size()];\n \
    \       String[] string2 = new String[arr.size()];\n        String hold = \"\"\
    ;\n        String hold2 = \"\";\n        int count = 0;\n        int count2 =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ >= 0) {\n                posneg.add(1);\n            } else {\n            \
    \    posneg.add(0);\n            }\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (posneg.get(i) == 1) {\n                hold = Integer.toBinaryString(arr.get(i));\n\
    \                string[i] = hold;\n                count = 0;\n             \
    \   for (int j = 0; j < string[i].length(); j++) {\n                    if (string[i].charAt(j)\
    \ == '1') {\n                        count++;\n                    }\n       \
    \         }\n                bitones.add(count);\n            } else {\n     \
    \           hold2 = Integer.toBinaryString(Math.abs(arr.get(i)));\n          \
    \      string2[i] = hold2;\n                count2 = 0;\n                for (int\
    \ j = 0; j < string2[i].length(); j++) {\n                    if (string2[i].charAt(j)\
    \ == '1') {\n                        count2++;\n                    }\n      \
    \          }\n                bitones.add(count2);\n            }\n        }\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            array.add(bitones.get(i));\n\
    \            array2.add(arr.get\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk9uuxtbi.java:63: error: ')' expected\n            array2.add(arr.get\n\
    \                              ^\n/tmp/tmpk9uuxtbi.java:65: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        if (arr.size() == 0) {\n            return arr;\n        }\n        int\
    \ max = arr.stream().mapToInt(i -> i).max().getAsInt();\n        int cnt = 0;\n\
    \        int shift = 0;\n        while (max != 0) {\n            max >>= 1;\n\
    \            shift++;\n        }\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
    \        while (cnt <= shift) {\n            ArrayList<Integer> ones = new ArrayList<Integer>();\n\
    \            ArrayList<Integer> zeros = new ArrayList<Integer>();\n          \
    \  for (int i = 0; i < arr.size(); i++) {\n                if ((arr.get(i) & (1\
    \ << cnt)) != 0) {\n                    ones.add(arr.get(i));\n              \
    \  } else {\n                    zeros.add(arr.get(i));\n                }\n \
    \           }\n            sorted.addAll(zeros);\n            sorted.addAll(ones);\n\
    \            arr = sorted;\n            sorted = new ArrayList<Integer>();\n \
    \           cnt++;\n        }\n        return arr;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr9gr6u7w.java:47)\n"
  stdout: ''
  timestamp: 1660011297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // Map<Character, Integer> map = new HashMap<>();\n        // for (Character\
    \ c : arr) {\n        //     Integer count = map.get(c);\n        //     if (count\
    \ == null) {\n        //         count = 0;\n        //     }\n        //    \
    \ map.put(c, count + 1);\n        // }\n        // ArrayList<Integer> list = new\
    \ ArrayList<>();\n        // for (Map.Entry<Character, Integer> entry : map.entrySet())\
    \ {\n        //     int count = entry.getValue();\n        //     while (count\
    \ > 0) {\n        //         list.add(entry.getKey());\n        //         count--;\n\
    \        //     }\n        // }\n        // return list;\n        Collections.sort(arr,\
    \ new Comparator<Integer>() {\n            @Override\n            public int compare(Integer\
    \ a, Integer b) {\n                String aBinary = Integer.toBinaryString(a);\n\
    \                String bBinary = Integer.toBinaryString(b);\n               \
    \ int aCount = 0;\n                int bCount = 0;\n                for (int i\
    \ = 0; i < aBinary.length(); i++) {\n                    if (aBinary.charAt(i)\
    \ == '1') {\n                        aCount++;\n                    }\n      \
    \          }\n                for (int i = 0; i < bBinary.length(); i++) {\n \
    \                   if (bBinary.charAt(i) == '1') {\n                        bCount++;\n\
    \                    }\n                }\n                return aCount == bCount\
    \ ? a - b : aCount - bCount;\n            }\n        });\n        return arr;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm7nmy89y.java:58)\n"
  stdout: ''
  timestamp: 1660011296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> a = new ArrayList<>();\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            a.add(arr.get(i));\n        }\n        ArrayList<Integer>\
    \ answer = new ArrayList<>();\n        for (int i = 0; i < a.size(); i++) {\n\
    \            int first = a.get(i);\n            int firstindex = i;\n        \
    \    for (int j = i; j < a.size(); j++) {\n                if (countOnes(a.get(j))\
    \ < countOnes(first)) {\n                    first = a.get(j);\n             \
    \       firstindex = j;\n                }\n            }\n            a.set(firstindex,\
    \ a.get(i));\n            a.set(i, first);\n        }\n        for (int i = 0;\
    \ i < a.size(); i++) {\n            int first = a.get(i);\n            int firstindex\
    \ = i;\n            for (int j = i; j < a.size(); j++) {\n                if (countOnes(a.get(j))\
    \ == countOnes(first) && a.get(j) < first) {\n                    first = a.get(j);\n\
    \                    firstindex = j;\n                }\n            }\n     \
    \       a.set(firstindex, a.get(i));\n            a.set(i, first);\n        }\n\
    \        return a;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphwteo7ac.java:26: error: cannot find symbol\n                if\
    \ (countOnes(a.get(j)) < countOnes(first)) {\n                    ^\n  symbol:\
    \   method countOnes(Integer)\n  location: class Problem\n/tmp/tmphwteo7ac.java:26:\
    \ error: cannot find symbol\n                if (countOnes(a.get(j)) < countOnes(first))\
    \ {\n                                          ^\n  symbol:   method countOnes(int)\n\
    \  location: class Problem\n/tmp/tmphwteo7ac.java:38: error: cannot find symbol\n\
    \                if (countOnes(a.get(j)) == countOnes(first) && a.get(j) < first)\
    \ {\n                    ^\n  symbol:   method countOnes(Integer)\n  location:\
    \ class Problem\n/tmp/tmphwteo7ac.java:38: error: cannot find symbol\n       \
    \         if (countOnes(a.get(j)) == countOnes(first) && a.get(j) < first) {\n\
    \                                           ^\n  symbol:   method countOnes(int)\n\
    \  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // sort descending by the number of ones in their binary representation\n\
    \        Collections.sort(arr, (i1, i2) -> {\n            String b1 = Integer.toBinaryString(i1);\n\
    \            String b2 = Integer.toBinaryString(i2);\n            long i1Ones\
    \ = b1.chars().filter(c -> c == '1').count();\n            long i2Ones = b2.chars().filter(c\
    \ -> c == '1').count();\n            if (i1Ones == i2Ones) {\n               \
    \ return Integer.compare(i1, i2);\n            }\n            return Long.compare(i2Ones,\
    \ i1Ones);\n        });\n        return arr;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1nicg21u.java:31)\n"
  stdout: ''
  timestamp: 1660011297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n\
    \            public int compare(Integer o1, Integer o2) {\n                String\
    \ s1 = Integer.toBinaryString(o1);\n                String s2 = Integer.toBinaryString(o2);\n\
    \                int res = Integer.bitCount(o1) - Integer.bitCount(o2);\n    \
    \            if (res == 0) {\n                    res = o1 - o2;\n           \
    \     }\n                return res;\n            }\n        });\n        return\
    \ arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa6ljhomp.java:33)\n"
  stdout: ''
  timestamp: 1660011296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // sort by number of ones, then by value\n        Integer[] sorted =\
    \ arr.stream().sorted(\n            Comparator.comparingInt(a -> Integer.bitCount(a))\n\
    \                .thenComparing(Integer::compare)\n        ).toArray(Integer[]::new);\n\
    \        return new ArrayList<Integer>(Arrays.asList(sorted));\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptf8k7zi6.java:19: error: incompatible types: Object cannot be converted\
    \ to int\n            Comparator.comparingInt(a -> Integer.bitCount(a))\n    \
    \                                                      ^\n/tmp/tmptf8k7zi6.java:20:\
    \ error: no suitable method found for thenComparing(Integer::compare)\n      \
    \          .thenComparing(Integer::compare)\n                ^\n    method Comparator.thenComparing(Comparator<?\
    \ super Object>) is not applicable\n      (argument mismatch; invalid method reference\n\
    \          incompatible types: Object cannot be converted to int)\n    method\
    \ Comparator.<U#1>thenComparing(Function<? super Object,? extends U#1>,Comparator<?\
    \ super U#1>) is not applicable\n      (cannot infer type-variable(s) U#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Comparator.<U#2>thenComparing(Function<?\
    \ super Object,? extends U#2>) is not applicable\n      (cannot infer type-variable(s)\
    \ U#2\n        (argument mismatch; invalid method reference\n          method\
    \ compare in class Integer cannot be applied to given types\n            required:\
    \ int,int\n            found:    Object\n            reason: actual and formal\
    \ argument lists differ in length))\n  where U#1,T,U#2 are type-variables:\n \
    \   U#1 extends Object declared in method <U#1>thenComparing(Function<? super\
    \ T,? extends U#1>,Comparator<? super U#1>)\n    T extends Object declared in\
    \ interface Comparator\n    U#2 extends Comparable<? super U#2> declared in method\
    \ <U#2>thenComparing(Function<? super T,? extends U#2>)\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Integer[] arrr = arr.toArray(new Integer[arr.size()]);\n        Arrays.sort(arrr,\
    \ new Comparator<Integer>() {\n            @Override\n            public int compare(Integer\
    \ x, Integer y) {\n                int a = countOnes(x);\n                int\
    \ b = countOnes(y);\n                if (a == b) {\n                    return\
    \ x.compareTo(y);\n                }\n                return a - b;\n        \
    \    }\n        });\n        ArrayList<Integer> res = new ArrayList<>();\n   \
    \     for (int i = 0; i < arrr.length; i++) {\n            res.add(arrr[i]);\n\
    \        }\n        return res;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprq2y7f3d.java:21: error: cannot find symbol\n                int\
    \ a = countOnes(x);\n                        ^\n  symbol: method countOnes(Integer)\n\
    /tmp/tmprq2y7f3d.java:22: error: cannot find symbol\n                int b = countOnes(y);\n\
    \                        ^\n  symbol: method countOnes(Integer)\n2 errors\n"
  stdout: ''
  timestamp: 1660011296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        return arr.stream()\n            .sorted(Comparator.comparing(Problem::numberOfOnes)\n\
    \                .thenComparing(Comparator.naturalOrder()))\n            .collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmponv51w8m.java:18: error: invalid method reference\n           \
    \ .sorted(Comparator.comparing(Problem::numberOfOnes)\n                      \
    \                   ^\n  cannot find symbol\n    symbol:   method numberOfOnes()\n\
    \    location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> newArr = new ArrayList<>();\n        ArrayList<Integer>\
    \ negativeArr = new ArrayList<>();\n        ArrayList<Integer> positiveArr = new\
    \ ArrayList<>();\n        ArrayList<Integer> zeroArr = new ArrayList<>();\n  \
    \      ArrayList<Integer> oneArr = new ArrayList<>();\n        int zeroCount =\
    \ 0;\n        int onesCount = 0;\n        int totalCount = 0;\n        String\
    \ binaryString = \"\";\n        for (int i = 0; i < arr.size(); i++) {\n     \
    \       if (arr.get(i) < 0) {\n                negativeArr.add(arr.get(i));\n\
    \            } else if (arr.get(i) > 0) {\n                positiveArr.add(arr.get(i));\n\
    \            } else {\n                zeroArr.add(arr.get(i));\n            }\n\
    \        }\n        for (int i = 0; i < positiveArr.size(); i++) {\n         \
    \   for (int k = 0; k < positiveArr.size(); k++) {\n                if (i != k)\
    \ {\n                    if (positiveArr.get(i) == positiveArr.get(k)) {\n   \
    \                     zeroArr.add(positiveArr.get(i));\n                     \
    \   positiveArr.remove(i);\n                    }\n                }\n       \
    \     }\n        }\n        for (int i = 0; i < positiveArr.size(); i++) {\n \
    \           binaryString = Integer.toBinaryString(positiveArr.get(i));\n     \
    \       for (int k = 0; k < binaryString.length(); k++) {\n                if\
    \ (binaryString.charAt(k) == '0') {\n                    zeroCount++;\n      \
    \          } else {\n                    onesCount++;\n                }\n   \
    \         }\n            totalCount = zeroCount + onesCount;\n            if (totalCount\
    \ == 1) {\n                oneArr.add(positiveArr.get(i));\n            } else\
    \ {\n                newArr.add(positiveArr.get(i));\n            }\n        \
    \    zeroCount = 0;\n            onesCount = 0;\n            totalCount = 0;\n\
    \        }\n        for\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2,\
    \ (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy1wli266.java:64: error: '(' expected\n        for\n          \
    \ ^\n/tmp/tmpy1wli266.java:65: error: illegal start of expression\n}\n^\n2 errors\n"
  stdout: ''
  timestamp: 1660011296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        class Pair {\n            int x;\n            int ones;\n           \
    \ Pair(int x, int ones) {\n                this.x = x;\n                this.ones\
    \ = ones;\n            }\n        }\n        ArrayList<Pair> pairs = new ArrayList<>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            pairs.add(new Pair(arr.get(i),\
    \ Integer.bitCount(arr.get(i))));\n        }\n        Collections.sort(pairs,\
    \ (Pair p1, Pair p2) -> {\n            if (p1.ones != p2.ones) return p1.ones\
    \ - p2.ones;\n            return p1.x - p2.x;\n        });\n        ArrayList<Integer>\
    \ res = new ArrayList<>();\n        for (int i = 0; i < pairs.size(); i++) {\n\
    \            res.add(pairs.get(i).x);\n        }\n        return res;\n}\n   \
    \ public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxlgnoqdg.java:41)\n"
  stdout: ''
  timestamp: 1660011297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        return arr.stream()\n                .sorted(Comparator.comparingInt(x\
    \ -> Integer.bitCount(x))\n                        .thenComparing(x -> x))\n \
    \               .collect(Collectors.toCollection(ArrayList::new));\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpudi03twn.java:18: error: incompatible types: Object cannot be converted\
    \ to int\n                .sorted(Comparator.comparingInt(x -> Integer.bitCount(x))\n\
    \                                                                      ^\n/tmp/tmpudi03twn.java:19:\
    \ error: incompatible types: inference variable U has incompatible bounds\n  \
    \                      .thenComparing(x -> x))\n                             \
    \         ^\n    lower bounds: Comparable<? super U>\n    lower bounds: Object\n\
    \  where U,T are type-variables:\n    U extends Comparable<? super U> declared\
    \ in method <U>thenComparing(Function<? super T,? extends U>)\n    T extends Object\
    \ declared in interface Comparator\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // Your code here...\n        return arr;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvx58inh4.java:21)\n"
  stdout: ''
  timestamp: 1660011297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // count number of ones in each binary number in arr\n        // sort\
    \ arr in ascending order based on number of ones\n        // sort arr in ascending\
    \ order based on decimal values\n        // >>> sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n        // >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5,\
    \ -4, -3, -2]\n        // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  \
    \      // >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n        // >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n        // >>> sort_array([1, 0, 2,\
    \ 3, 4]) [0, 1, 2, 3, 4]\n        ArrayList<Integer> arr2 = new ArrayList<>();\n\
    \        ArrayList<Integer> neg = new ArrayList<>();\n        ArrayList<Integer>\
    \ pos = new ArrayList<>();\n        ArrayList<Integer> zeros = new ArrayList<>();\n\
    \        HashMap<Integer,Integer> map = new HashMap<>();\n        int i = 0;\n\
    \        for (int x : arr) {\n            if (x >= 0) {\n                pos.add(x);\n\
    \            } else {\n                neg.add(x);\n            }\n          \
    \  if (x == 0) {\n                zeros.add(x);\n            }\n            map.put(x,i);\n\
    \            ++i;\n        }\n        Collections.sort(pos);\n        Collections.sort(neg);\n\
    \        // >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n        // >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n        // >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2,\n}\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2,\
    \ (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp89w9v2wq.java:49: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> zero = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ one = new ArrayList<Integer>();\n        for (int i : arr) {\n            if\
    \ (isOne(i))\n                one.add(i);\n            else\n                zero.add(i);\n\
    \        }\n        return merge(zero, one);\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd3loz3w0.java:20: error: cannot find symbol\n            if (isOne(i))\n\
    \                ^\n  symbol:   method isOne(int)\n  location: class Problem\n\
    /tmp/tmpd3loz3w0.java:25: error: cannot find symbol\n        return merge(zero,\
    \ one);\n               ^\n  symbol:   method merge(ArrayList<Integer>,ArrayList<Integer>)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        arr.sort(Problem::compareTwoNumbers);\n        return arr;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk0pg5hkw.java:17: error: invalid method reference\n        arr.sort(Problem::compareTwoNumbers);\n\
    \                 ^\n  cannot find symbol\n    symbol:   method compareTwoNumbers(E,E)\n\
    \    location: class Problem\n  where E is a type-variable:\n    E extends Object\
    \ declared in class ArrayList\n1 error\n"
  stdout: ''
  timestamp: 1660011298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        return null;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpnaizejgq.java:20)\n"
  stdout: ''
  timestamp: 1660011298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sortedArr = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ binArr = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            int tmp = arr.get(i);\n            int counter = 0;\n  \
    \          while (tmp > 0) {\n                counter += tmp % 2;\n          \
    \      tmp /= 2;\n            }\n            binArr.add(counter);\n        }\n\
    \        while (sortedArr.size() < arr.size()) {\n            int max = 0;\n \
    \           int index = 0;\n            for (int i = 0; i < binArr.size(); i++)\
    \ {\n                if (binArr.get(i) > max) {\n                    max = binArr.get(i);\n\
    \                    index = i;\n                }\n            }\n          \
    \  sortedArr.add(arr.get(index));\n            binArr.set(index, -1);\n      \
    \  }\n        return sortedArr;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp77ygwig0.java:43)\n"
  stdout: ''
  timestamp: 1660011298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        arr.forEach(a\
    \ -> sorted.add(a));\n        Collections.sort(sorted, new Comparator<Integer>()\
    \ {\n            @Override\n            public int compare(Integer a, Integer\
    \ b) {\n                String aOnes = Integer.toBinaryString(a).replaceAll(\"\
    0\", \"\");\n                String bOnes = Integer.toBinaryString(b).replaceAll(\"\
    0\", \"\");\n                if (aOnes.length() > bOnes.length()) {\n        \
    \            return 1;\n                } else if (aOnes.length() < bOnes.length())\
    \ {\n                    return -1;\n                } else {\n              \
    \      if (a > b) {\n                        return 1;\n                    }\
    \ else if (a < b) {\n                        return -1;\n                    }\
    \ else {\n                        return 0;\n                    }\n         \
    \       }\n            }\n        });\n        return sorted;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpztpzt3be.java:43)\n"
  stdout: ''
  timestamp: 1660011298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n      \
    \  for (int n : arr) {\n            pairs.add(new Pair<>(countOnes(n), n));\n\
    \        }\n        Collections.sort(pairs, new Comparator<Pair<Integer, Integer>>()\
    \ {\n            @Override\n            public int compare(Pair<Integer, Integer>\
    \ p1, Pair<Integer, Integer> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n\
    \            }\n        });\n        ArrayList<Integer> ret = new ArrayList<>();\n\
    \        for (Pair<Integer, Integer> p : pairs) {\n            ret.add(p.getValue1());\n\
    \        }\n        return ret;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy20x08yf.java:19: error: cannot find symbol\n            pairs.add(new\
    \ Pair<>(countOnes(n), n));\n                                 ^\n  symbol:   method\
    \ countOnes(int)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        if (arr.size() <= 1) {\n            return arr;\n        }\n        ArrayList<Pair<Integer,\
    \ Integer>> num1s = new ArrayList<>();\n        for (int num : arr) {\n      \
    \      String binaryStr = Integer.toBinaryString(num);\n            int num1sInt\
    \ = 0;\n            for (int i = 0; i < binaryStr.length(); i++) {\n         \
    \       if (binaryStr.charAt(i) == '1') {\n                    num1sInt++;\n \
    \               }\n            }\n            num1s.add(new Pair<>(num1sInt, num));\n\
    \        }\n        num1s.sort((Pair<Integer, Integer> a, Pair<Integer, Integer>\
    \ b) -> {\n            if (a.getValue0().equals(b.getValue0())) {\n          \
    \      return a.getValue1().compareTo(b.getValue1());\n            }\n       \
    \     return a.getValue0().compareTo(b.getValue0());\n        });\n        ArrayList<Integer>\
    \ newArr = new ArrayList<>();\n        for (Pair<Integer, Integer> num : num1s)\
    \ {\n            newArr.add(num.getValue1());\n        }\n        return newArr;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.sortArray(tmp9pjkgn63.java:29)\n\tat Problem.main(tmp9pjkgn63.java:44)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        if (arr.size() == 0) {\n            return arr;\n        }\n        ArrayList<Pair<Integer,\
    \ Integer>> res = new ArrayList<>();\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            res.add(Pair.with(i, arr.get(i)));\n        }\n        Collections.sort(res,\
    \ (pair1, pair2) -> {\n            String str1 = Integer.toBinaryString(pair1.getValue1());\n\
    \            String str2 = Integer.toBinaryString(pair2.getValue1());\n      \
    \      int count1 = count1(str1);\n            int count2 = count1(str2);\n  \
    \          if (count1 == count2) {\n                return pair1.getValue1() -\
    \ pair2.getValue1();\n            }\n            return count1 - count2;\n   \
    \     });\n        for (int i = 0; i < res.size(); i++) {\n            arr.set(i,\
    \ res.get(i).getValue1());\n        }\n        return arr;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf7jt6n1h.java:27: error: cannot find symbol\n            int count1\
    \ = count1(str1);\n                         ^\n  symbol:   method count1(String)\n\
    \  location: class Problem\n/tmp/tmpf7jt6n1h.java:28: error: cannot find symbol\n\
    \            int count2 = count1(str2);\n                         ^\n  symbol:\
    \   method count1(String)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n\
    \            public int compare(Integer x, Integer y) {\n                return\
    \ Integer.bitCount(x) != Integer.bitCount(y) ? Integer.bitCount(x) - Integer.bitCount(y)\
    \ : x - y;\n            }\n        });\n        return arr;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1_3uffmv.java:27)\n"
  stdout: ''
  timestamp: 1660011298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Pair<Integer,\
    \ Integer>> binarr = new ArrayList<Pair<Integer, Integer>>();\n        for (int\
    \ i : arr) {\n            int ones = Integer.bitCount(i);\n            binarr.add(new\
    \ Pair<Integer, Integer>(ones, i));\n        }\n        Comparator<Pair<Integer,\
    \ Integer>> comp = (a, b) -> {\n            if (a.getValue0() == b.getValue0())\
    \ {\n                return a.getValue1() - b.getValue1();\n            }\n  \
    \          return a.getValue0() - b.getValue0();\n        };\n        Collections.sort(binarr,\
    \ comp);\n        for (Pair<Integer, Integer> p : binarr) {\n            sorted.add(p.getValue1());\n\
    \        }\n        return sorted;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.sortArray(tmpjadf0c_t.java:21)\n\tat Problem.main(tmpjadf0c_t.java:36)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Pair<Integer, Integer>> indicesAndOnes = new ArrayList<Pair<Integer,\
    \ Integer>>();\n        for (int i = 0; i < arr.size(); i++) {\n            indicesAndOnes.add(new\
    \ Pair<Integer, Integer>(i, numOnes(arr.get(i))));\n        }\n        Collections.sort(indicesAndOnes,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> p1, Pair<Integer, Integer> p2)\
    \ {\n                if (p1.getValue1() == p2.getValue1()) {\n               \
    \     return p1.getValue0() - p2.getValue0();\n                }\n           \
    \     return p1.getValue1() - p2.getValue1();\n            }\n        });\n  \
    \      for (int i = 0; i < indicesAndOnes.size(); i++) {\n            Pair<Integer,\
    \ Integer> p = indicesAndOnes.get(i);\n            arr.set(i, arr.get(p.getValue0()));\n\
    \        }\n        return arr;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptudy1utc.java:19: error: cannot find symbol\n            indicesAndOnes.add(new\
    \ Pair<Integer, Integer>(i, numOnes(arr.get(i))));\n                         \
    \                                    ^\n  symbol:   method numOnes(Integer)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        List<Triplet<Integer, String, Integer>> triplets = arr.stream()\n   \
    \             .map(i -> new Triplet<Integer, String, Integer>(Integer.bitCount(i),\
    \ Integer.toBinaryString(i), i))\n                .sorted(Comparator.comparing(Triplet::getValue0)\n\
    \                        .thenComparing(Triplet::getValue1))\n               \
    \ .collect(Collectors.toList());\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for (Triplet<Integer, String, Integer> triplet : triplets) {\n      \
    \      result.add(triplet.getValue2());\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphz36lh3e.java:19: error: incompatible types: cannot infer type-variable(s)\
    \ T,U\n                .sorted(Comparator.comparing(Triplet::getValue0)\n    \
    \                                        ^\n    (argument mismatch; invalid method\
    \ reference\n      method getValue0 in class Triplet<A,B,C> cannot be applied\
    \ to given types\n        required: no arguments\n        found:    Object\n \
    \       reason: actual and formal argument lists differ in length)\n  where T,U,A,B,C\
    \ are type-variables:\n    T extends Object declared in method <T,U>comparing(Function<?\
    \ super T,? extends U>)\n    U extends Comparable<? super U> declared in method\
    \ <T,U>comparing(Function<? super T,? extends U>)\n    A extends Object declared\
    \ in class Triplet\n    B extends Object declared in class Triplet\n    C extends\
    \ Object declared in class Triplet\n1 error\n"
  stdout: ''
  timestamp: 1660011298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ oneCount = new ArrayList<Integer>();\n        int total = 0;\n        int max\
    \ = arr.get(0);\n        for (int i = 0; i < arr.size(); i++) {\n            int\
    \ value = arr.get(i);\n            String bin = Integer.toBinaryString(value);\n\
    \            total = 0;\n            for (int j = 0; j < bin.length(); j++) {\n\
    \                char c = bin.charAt(j);\n                if (c == '1') {\n  \
    \                  total++;\n                }\n            }\n            oneCount.add(total);\n\
    \            if (max < value) {\n                max = value;\n            }\n\
    \        }\n        for (int i = max; i >= 0; i--) {\n            for (int j =\
    \ 0; j < arr.size(); j++) {\n                if (oneCount.get(j) == i) {\n   \
    \                 sorted.add(arr.get(j));\n                }\n            }\n\
    \        }\n        return sorted;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe7nw38da.java:46)\n"
  stdout: ''
  timestamp: 1660011298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Integer[] s = new Integer[arr.size()];\n        int i = 0;\n        for\
    \ (Integer n : arr) {\n            s[i++] = n;\n        }\n        Arrays.sort(s,\
    \ new BinaryComparator());\n        return new ArrayList<Integer>(Arrays.asList(s));\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc_0q_kjm.java:22: error: cannot find symbol\n        Arrays.sort(s,\
    \ new BinaryComparator());\n                           ^\n  symbol:   class BinaryComparator\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        return arr.stream()\n                .sorted(Comparator.comparing(i ->\
    \ Integer.bitCount(i))\n                        .thenComparing(i -> i))\n    \
    \            .collect(Collectors.toCollection(ArrayList::new));\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9__zr_rr.java:18: error: incompatible types: Object cannot be converted\
    \ to int\n                .sorted(Comparator.comparing(i -> Integer.bitCount(i))\n\
    \                                                                   ^\n/tmp/tmp9__zr_rr.java:19:\
    \ error: incompatible types: inference variable U has incompatible bounds\n  \
    \                      .thenComparing(i -> i))\n                             \
    \         ^\n    lower bounds: Comparable<? super U>\n    lower bounds: Object\n\
    \  where U,T are type-variables:\n    U extends Comparable<? super U> declared\
    \ in method <U>thenComparing(Function<? super T,? extends U>)\n    T extends Object\
    \ declared in interface Comparator\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n\
    \            public int compare(Integer first, Integer second) {\n           \
    \     String firstBin = Integer.toBinaryString(first);\n                String\
    \ secondBin = Integer.toBinaryString(second);\n                int fOneCnt = 0;\n\
    \                int sOneCnt = 0;\n                for (int i = 0; i < firstBin.length();\
    \ i++) {\n                    if (firstBin.charAt(i) == '1') {\n             \
    \           fOneCnt++;\n                    }\n                }\n           \
    \     for (int i = 0; i < secondBin.length(); i++) {\n                    if (secondBin.charAt(i)\
    \ == '1') {\n                        sOneCnt++;\n                    }\n     \
    \           }\n                if (fOneCnt == sOneCnt) {\n                   \
    \ return first - second;\n                } else {\n                    return\
    \ fOneCnt - sOneCnt;\n                }\n            }\n        });\n        return\
    \ arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpppxbltrm.java:45)\n"
  stdout: ''
  timestamp: 1660011298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        arr.sort(new Comparator<Integer>() {\n            @Override\n       \
    \     public int compare(Integer i1, Integer i2) {\n                int count_i1\
    \ = 0;\n                int count_i2 = 0;\n                while (i1 > 0) {\n\
    \                    if (i1 % 2 == 1) {\n                        count_i1++;\n\
    \                    }\n                    i1 /= 2;\n                }\n    \
    \            while (i2 > 0) {\n                    if (i2 % 2 == 1) {\n      \
    \                  count_i2++;\n                    }\n                    i2\
    \ /= 2;\n                }\n                if (count_i1 > count_i2) {\n     \
    \               return 1;\n                } else if (count_i1 < count_i2) {\n\
    \                    return -1;\n                } else {\n                  \
    \  return 0;\n                }\n            }\n        });\n        return arr;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp71hzz8ge.java:46)\n"
  stdout: ''
  timestamp: 1660011299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // Write your code here.\n        ArrayList<Integer> sortedArray = new\
    \ ArrayList<>();\n        ArrayList<Integer> negativeArray = new ArrayList<>();\n\
    \        ArrayList<Integer> positiveArray = new ArrayList<>();\n        for (int\
    \ i : arr) {\n            if (i < 0) {\n                negativeArray.add(i);\n\
    \            } else {\n                positiveArray.add(i);\n            }\n\
    \        }\n        positiveArray.sort(Comparator.comparingInt(\n            Problem::integerToBinaryString));\n\
    \        negativeArray.sort(Comparator.comparingInt(\n            Problem::integerToBinaryString).reversed());\n\
    \        sortedArray.addAll(negativeArray);\n        sortedArray.addAll(positiveArray);\n\
    \        return sortedArray;\n}\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2,\
    \ (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuu567zf4.java:29: error: invalid method reference\n           \
    \ Problem::integerToBinaryString));\n            ^\n  cannot find symbol\n   \
    \ symbol:   method integerToBinaryString()\n    location: class Problem\n/tmp/tmpuu567zf4.java:31:\
    \ error: invalid method reference\n            Problem::integerToBinaryString).reversed());\n\
    \            ^\n  cannot find symbol\n    symbol:   method integerToBinaryString()\n\
    \    location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> ret = new ArrayList<Integer>();\n        TreeMap<Integer,\
    \ ArrayList<Integer>> m = new TreeMap<Integer, ArrayList<Integer>>();\n      \
    \  for (int i : arr) {\n            int x = i;\n            int oneCount = 0;\n\
    \            while (x > 0) {\n                if (x % 2 == 1) {\n            \
    \        oneCount++;\n                }\n                x /= 2;\n           \
    \ }\n            if (!m.containsKey(oneCount)) {\n                m.put(oneCount,\
    \ new ArrayList<Integer>());\n            }\n            m.get(oneCount).add(i);\n\
    \        }\n        for (Map.Entry<Integer, ArrayList<Integer>> i : m.entrySet())\
    \ {\n            Collections.sort(i.getValue());\n            ret.addAll(i.getValue());\n\
    \        }\n        return ret;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmnl8_ngh.java:41)\n"
  stdout: ''
  timestamp: 1660011299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sorted = new ArrayList<>();\n        ArrayList<Integer>\
    \ neg = new ArrayList<>();\n        ArrayList<Integer> pos = new ArrayList<>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) <\
    \ 0) {\n                neg.add(arr.get(i));\n            } else {\n         \
    \       pos.add(arr.get(i));\n            }\n        }\n        if (neg.size()\
    \ > 0) {\n            Collections.sort(neg);\n            for (int i = 0; i <\
    \ neg.size(); i++) {\n                sorted.add(neg.get(i));\n            }\n\
    \        }\n        if (pos.size() > 0) {\n            Collections.sort(pos);\n\
    \            for (int i = 0; i < pos.size(); i++) {\n                sorted.add(pos.get(i));\n\
    \            }\n        }\n        return sorted;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzfv03b4x.java:42)\n"
  stdout: ''
  timestamp: 1660011299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n\
    \            public int compare(Integer i1, Integer i2) {\n                String\
    \ b1 = Integer.toBinaryString(i1);\n                String b2 = Integer.toBinaryString(i2);\n\
    \                int b1c = b1.length() - b1.replace(\"1\", \"\").length();\n \
    \               int b2c = b2.length() - b2.replace(\"1\", \"\").length();\n  \
    \              if (b1c == b2c) return i1 - i2;\n                return b1c - b2c;\n\
    \            }\n        });\n        return arr;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5a_n26jn.java:32)\n"
  stdout: ''
  timestamp: 1660011299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> res = new ArrayList<>();\n        ArrayList<Pair<Integer,\
    \ Integer>> ones = new ArrayList<>();\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            int tmp = arr.get(i);\n            int count = 0;\n    \
    \        for (int j = 0; j < 32; j++) {\n                if ((tmp & 1) == 1) {\n\
    \                    count++;\n                }\n                tmp = tmp >>\
    \ 1;\n            }\n            ones.add(new Pair<>(count, arr.get(i)));\n  \
    \      }\n        Collections.sort(ones, (a, b) -> {\n            int l = a.getValue0().compareTo(b.getValue0());\n\
    \            if (l == 0) {\n                return a.getValue1().compareTo(b.getValue1());\n\
    \            }\n            return l;\n        });\n        for (int i = 0; i\
    \ < ones.size(); i++) {\n            res.add(ones.get(i).getValue1());\n     \
    \   }\n        return res;\n}\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2,\
    \ (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.sortArray(tmp6nr194bm.java:28)\n\tat Problem.main(tmp6nr194bm.java:43)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // Write your code here.\n        ArrayList<Pair<Integer, Integer>> ones\
    \ = new ArrayList<>();\n        for (int i : arr) {\n            int num = i;\n\
    \            int count = 0;\n            while (num > 0) {\n                count\
    \ += num % 2;\n                num /= 2;\n            }\n            ones.add(new\
    \ Pair<>(count, i));\n        }\n        Collections.sort(ones, new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0()\
    \ == o2.getValue0()) {\n                    return o1.getValue1() - o2.getValue1();\n\
    \                }\n                return o1.getValue0() - o2.getValue0();\n\
    \            }\n        });\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            arr.set(i, ones.get(i).getValue1());\n        }\n        return arr;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.sortArray(tmpfagttuqj.java:26)\n\tat Problem.main(tmpfagttuqj.java:43)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // int[] a = new int[arr.size()];\n        // int i = 0;\n        //\
    \ while (i < arr.size()) {\n        //     a[i] = arr.get(i);\n        //    \
    \ i++;\n        // }\n        // mySort(a);\n        // ArrayList<Integer> res\
    \ = new ArrayList<Integer>();\n        // for (int x : a) {\n        //     res.add(x);\n\
    \        // }\n        return mySort(arr);\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprdv3jwpy.java:28: error: cannot find symbol\n        return mySort(arr);\n\
    \               ^\n  symbol:   method mySort(ArrayList<Integer>)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // Write your code here\n        TreeMap<Integer, ArrayList<Integer>>\
    \ map = new TreeMap<>();\n        for (int num : arr) {\n            Integer numOfOnes\
    \ = countOnes(num);\n            if (map.containsKey(numOfOnes)) {\n         \
    \       map.get(numOfOnes).add(num);\n            } else {\n                ArrayList<Integer>\
    \ list = new ArrayList<>();\n                list.add(num);\n                map.put(numOfOnes,\
    \ list);\n            }\n        }\n        arr.clear();\n        for (Integer\
    \ key : map.keySet()) {\n            ArrayList<Integer> list = map.get(key);\n\
    \            Collections.sort(list);\n            arr.addAll(list);\n        }\n\
    \        return arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpba3ohonv.java:20: error: cannot find symbol\n            Integer\
    \ numOfOnes = countOnes(num);\n                                ^\n  symbol:  \
    \ method countOnes(int)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> zeroArr = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ negativeArr = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (arr.get(i) < 0) {\n                negativeArr.add(arr.get(i));\n\
    \            } else if (arr.get(i) == 0) {\n                zeroArr.add(arr.get(i));\n\
    \            }\n        }\n        arr.removeAll(negativeArr);\n        arr.removeAll(zeroArr);\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Pair<Integer,\
    \ Integer>> arrOfPairs = new ArrayList<Pair<Integer, Integer>>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            int numberOfOnes = Problem.countOnes(arr.get(i));\n\
    \            Pair<Integer, Integer> pair = new Pair<Integer, Integer>(numberOfOnes,\
    \ arr.get(i));\n            arrOfPairs.add(pair);\n        }\n        Collections.sort(arrOfPairs,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> p1, Pair<Integer, Integer> p2)\
    \ {\n                if (p1.getValue0() == p2.getValue0()) {\n               \
    \     return p1.getValue1().compareTo(p2.getValue1());\n                } else\
    \ {\n                    return p1.getValue0().compareTo(p2.getValue0());\n  \
    \              }\n            }\n        });\n        for (int i = 0; i < arrOfPairs.size();\
    \ i++) {\n            result.add(arrOfPairs.get(i).getValue1());\n        }\n\
    \        result.addAll(zeroArr);\n        Collections.sort(negativeArr);\n   \
    \     Collections.reverse(negativeArr);\n        result.addAll(negativeArr);\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2,\
    \ (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpik62itcf.java:31: error: cannot find symbol\n            int numberOfOnes\
    \ = Problem.countOnes(arr.get(i));\n                                      ^\n\
    \  symbol:   method countOnes(Integer)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> res = new ArrayList<>();\n        if (arr.size() <\
    \ 2) {\n            return arr;\n        }\n        HashMap<Integer, ArrayList<Integer>>\
    \ map = new HashMap<>();\n        int maxCount = 0;\n        for (int num : arr)\
    \ {\n            int count = 0;\n            while (num > 0) {\n             \
    \   count += num & 1;\n                num >>= 1;\n            }\n           \
    \ maxCount = Math.max(maxCount, count);\n            ArrayList<Integer> list =\
    \ map.getOrDefault(count, new ArrayList<>());\n            list.add(num);\n  \
    \          map.put(count, list);\n        }\n        for (int i = 0; i <= maxCount;\
    \ i++) {\n            if (map.containsKey(i)) {\n                Collections.sort(map.get(i));\n\
    \                res.addAll(map.get(i));\n            }\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_uwgj5u.java:43)\n"
  stdout: ''
  timestamp: 1660011300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        if (arr.size() == 0) {\n            return arr;\n        }\n        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        int max = Integer.MIN_VALUE;\n    \
    \    for (int i = 0; i < arr.size(); i++) {\n            int binSize = Integer.toBinaryString(arr.get(i)).length();\n\
    \            if (binSize > max) {\n                max = binSize;\n          \
    \  }\n            int cur = map.getOrDefault(binSize, 0);\n            map.put(binSize,\
    \ cur + 1);\n        }\n        ArrayList<Integer> result = new ArrayList<>();\n\
    \        for (int i = 0; i < max; i++) {\n            if (map.containsKey(i))\
    \ {\n                for (int j = 0; j < map.get(i); j++) {\n                \
    \    result.add(0);\n                }\n            }\n        }\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            int binSize = Integer.toBinaryString(arr.get(i)).length();\n\
    \            int cur = map.get(binSize);\n            map.put(binSize, cur - 1);\n\
    \            result.set(result.size() - cur, arr.get(i));\n        }\n       \
    \ Collections.sort(result);\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xw1_3ob.java:48)\n"
  stdout: ''
  timestamp: 1660011300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> res = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ positive_arr = new ArrayList<Integer>();\n        ArrayList<Integer> negative_arr\
    \ = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) < 0) {\n                negative_arr.add(arr.get(i));\n\
    \            } else {\n                positive_arr.add(arr.get(i));\n       \
    \     }\n        }\n        Collections.sort(positive_arr, new Comparator<Integer>()\
    \ {\n            public int compare(Integer o1, Integer o2) {\n              \
    \  String binaryString1 = Integer.toBinaryString(o1);\n                String\
    \ binaryString2 = Integer.toBinaryString(o2);\n                int length1 = binaryString1.length();\n\
    \                int length2 = binaryString2.length();\n                int sum1\
    \ = 0;\n                int sum2 = 0;\n                for (int i = 0; i < length1;\
    \ i++) {\n                    sum1 += Integer.parseInt(binaryString1.substring(i,\
    \ i + 1));\n                }\n                for (int i = 0; i < length2; i++)\
    \ {\n                    sum2 += Integer.parseInt(binaryString2.substring(i, i\
    \ + 1));\n                }\n                if (sum1 > sum2) {\n            \
    \        return 1;\n                } else if (sum1 < sum2) {\n              \
    \      return -1;\n                } else {\n                    if (o1 > o2)\
    \ {\n                        return 1;\n                    } else if (o1 < o2)\
    \ {\n                        return -1;\n                    } else {\n      \
    \                  return 0;\n                    }\n                }\n     \
    \       }\n        });\n        Collections.sort(negative_arr, new Comparator<Integer>()\
    \ {\n            public int compare(Integer o1, Integer o2) {\n              \
    \  String binaryString1 = Integer.toBinaryString(o1);\n                String\
    \ binaryString2 = Integer.toBinaryString(o2);\n                int length1 = binaryString1.length();\n\
    \                int length2 = binaryString2.length();\n                int sum1\
    \ = 0;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbaqi2deu.java:75: error: reached end of file while parsing\n}\n\
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1660011299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        return arr.stream()\n        .map(x -> new Pair<>(x, Integer.bitCount(x)))\n\
    \        .sorted((x, y) -> {\n            int comp = x.getValue1().compareTo(y.getValue1());\n\
    \            if (comp == 0) return x.getValue0().compareTo(y.getValue0());\n \
    \           return comp;\n        })\n        .map(Pair::getValue0)\n        .collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.sortArray(tmpjik820me.java:17)\n\tat Problem.main(tmpjik820me.java:28)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // return arr.sort(((o1, o2) -> {\n        //     if (Integer.bitCount(o1)\
    \ == Integer.bitCount(o2))\n        //         return o1 - o2;\n        //   \
    \  return Integer.bitCount(o1) - Integer.bitCount(o2);\n        // }));\n    \
    \    arr.sort((o1, o2) -> {\n            if (Integer.bitCount(o1) == Integer.bitCount(o2))\n\
    \                return o1 - o2;\n            return Integer.bitCount(o1) - Integer.bitCount(o2);\n\
    \        });\n        return arr;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnuxd13rb.java:31)\n"
  stdout: ''
  timestamp: 1660011300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // this function takes an array of integers and returns a list in the\
    \ above order\n        ArrayList<Integer> new_arr = new ArrayList<Integer>();\n\
    \        TreeMap<Integer, ArrayList<Integer>> map = new TreeMap<Integer, ArrayList<Integer>>();\n\
    \        for (int i : arr) {\n            int ones = 0;\n            for (int\
    \ j = 0; j < Integer.toBinaryString(i).length(); j++) {\n                if (Integer.toBinaryString(i).charAt(j)\
    \ == '1') {\n                    ones++;\n                }\n            }\n \
    \           if (map.containsKey(ones)) {\n                map.get(ones).add(i);\n\
    \            } else {\n                ArrayList<Integer> temp = new ArrayList<Integer>();\n\
    \                temp.add(i);\n                map.put(ones, temp);\n        \
    \    }\n        }\n        for (Integer i : map.keySet()) {\n            for (Integer\
    \ j : map.get(i)) {\n                new_arr.add(j);\n            }\n        }\n\
    \        return new_arr;\n}\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2,\
    \ (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp67tjs13y.java:43)\n"
  stdout: ''
  timestamp: 1660011300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            sorted.add(i, -1);\n        }\n \
    \       ArrayList<Integer> oneCounts = new ArrayList<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            oneCounts.add(i, getOneCount(arr.get(i)));\n\
    \        }\n        // Sort by oneCounts\n        boolean sortedByOneCounts =\
    \ false;\n        while (!sortedByOneCounts) {\n            int pointer = 0;\n\
    \            sortedByOneCounts = true;\n            while (pointer < oneCounts.size()\
    \ - 1) {\n                if (oneCounts.get(pointer) > oneCounts.get(pointer +\
    \ 1)) {\n                    sortedByOneCounts = false;\n                    int\
    \ temp = oneCounts.get(pointer);\n                    oneCounts.set(pointer, oneCounts.get(pointer\
    \ + 1));\n                    oneCounts.set(pointer + 1, temp);\n            \
    \        temp = arr.get(pointer);\n                    arr.set(pointer, arr.get(pointer\
    \ + 1));\n                    arr.set(pointer + 1, temp);\n                }\n\
    \                pointer++;\n            }\n        }\n        // Sort by values\n\
    \        ArrayList<Integer> indexs = new ArrayList<Integer>();\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            indexs.add(i, i);\n        }\n  \
    \      boolean sortedByValues = false;\n        while (!sortedByValues) {\n  \
    \          int pointer = 0;\n            sortedByValues = true;\n            while\
    \ (pointer < indexs.size() - 1) {\n                if (oneCounts.get(pointer)\
    \ == oneCounts.get(pointer + 1)) {\n                    if (arr.get(pointer) >\
    \ arr.get(pointer + 1)) {\n                        sortedByValues = false;\n \
    \                       int temp = indexs.get(pointer);\n                    \
    \    indexs.set(pointer, indexs.get(pointer + 1));\n                        indexs.set(pointer\
    \ + 1, temp);\n                    }\n                }\n                pointer\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8yg84cqw.java:61: error: not a statement\n                pointer\n\
    \                ^\n/tmp/tmp8yg84cqw.java:61: error: ';' expected\n          \
    \      pointer\n                       ^\n/tmp/tmp8yg84cqw.java:63: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n3\
    \ errors\n"
  stdout: ''
  timestamp: 1660011299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> positive = new ArrayList<>();\n        ArrayList<Integer>\
    \ negative = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) < 0) {\n                negative.add(arr.get(i));\n\
    \            } else {\n                positive.add(arr.get(i));\n           \
    \ }\n        }\n        positive.sort(new MyComparator());\n        for (int i\
    \ = 0; i < negative.size(); i++) {\n            negative.set(i, negative.get(i)\
    \ * -1);\n        }\n        negative.sort(new MyComparator());\n        for (int\
    \ i = 0; i < negative.size(); i++) {\n            negative.set(i, negative.get(i)\
    \ * -1);\n        }\n        positive.addAll(negative);\n        return positive;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpufkyn9ae.java:26: error: cannot find symbol\n        positive.sort(new\
    \ MyComparator());\n                          ^\n  symbol:   class MyComparator\n\
    \  location: class Problem\n/tmp/tmpufkyn9ae.java:30: error: cannot find symbol\n\
    \        negative.sort(new MyComparator());\n                          ^\n  symbol:\
    \   class MyComparator\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n\
    \            public int compare(Integer a, Integer b) {\n                String\
    \ as = Integer.toBinaryString(a);\n                String bs = Integer.toBinaryString(b);\n\
    \                int as1 = (int) as.chars().filter(c -> c == '1').count();\n \
    \               int bs1 = (int) bs.chars().filter(c -> c == '1').count();\n  \
    \              if (as1 > bs1) return 1;\n                if (as1 < bs1) return\
    \ -1;\n                return a - b;\n            }\n        });\n        return\
    \ arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsoxi77wp.java:33)\n"
  stdout: ''
  timestamp: 1660011301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // return arr.stream().sorted(Comparator.comparing(Problem::getCountOfOnes)).collect(Collectors.toCollection(ArrayList::new));\n\
    \        return arr.stream().sorted(Comparator.comparing(Problem::getCountOfOnes).thenComparing(Integer::compareTo)).collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0fffmjzj.java:18: error: invalid method reference\n        return\
    \ arr.stream().sorted(Comparator.comparing(Problem::getCountOfOnes).thenComparing(Integer::compareTo)).collect(Collectors.toCollection(ArrayList::new));\n\
    \                                                        ^\n  cannot find symbol\n\
    \    symbol:   method getCountOfOnes()\n    location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Integer[] oa = new Integer[arr.size()];\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            String binary = Integer.toBinaryString(arr.get(i));\n\
    \            int binaryOnes = binary.length() - binary.replace(\"1\", \"\").length();\n\
    \            int decimal = arr.get(i);\n            oa[i] = Pair.with(binaryOnes,\
    \ decimal);\n        }\n        Arrays.sort(oa, new Comparator<Integer>() {\n\
    \            @Override\n            public int compare(Integer o1, Integer o2)\
    \ {\n                int result = Integer.compare(o1.getValue0(), o2.getValue0());\n\
    \                if (result == 0) {\n                    result = Integer.compare(o1.getValue1(),\
    \ o2.getValue1());\n                }\n                return result;\n      \
    \      }\n        });\n        ArrayList<Integer> r = new ArrayList<>();\n   \
    \     for (int i = 0; i < oa.length; i++) {\n            r.add(oa[i].getValue1());\n\
    \        }\n        return r;\n}\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2,\
    \ (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsijpipwl.java:22: error: incompatible types: no instance(s) of\
    \ type variable(s) A,B exist so that Pair<A,B> conforms to Integer\n         \
    \   oa[i] = Pair.with(binaryOnes, decimal);\n                             ^\n\
    \  where A,B are type-variables:\n    A extends Object declared in method <A,B>with(A,B)\n\
    \    B extends Object declared in method <A,B>with(A,B)\n/tmp/tmpsijpipwl.java:27:\
    \ error: cannot find symbol\n                int result = Integer.compare(o1.getValue0(),\
    \ o2.getValue0());\n                                               ^\n  symbol:\
    \   method getValue0()\n  location: variable o1 of type Integer\n/tmp/tmpsijpipwl.java:27:\
    \ error: cannot find symbol\n                int result = Integer.compare(o1.getValue0(),\
    \ o2.getValue0());\n                                                         \
    \      ^\n  symbol:   method getValue0()\n  location: variable o2 of type Integer\n\
    /tmp/tmpsijpipwl.java:29: error: cannot find symbol\n                    result\
    \ = Integer.compare(o1.getValue1(), o2.getValue1());\n                       \
    \                        ^\n  symbol:   method getValue1()\n  location: variable\
    \ o1 of type Integer\n/tmp/tmpsijpipwl.java:29: error: cannot find symbol\n  \
    \                  result = Integer.compare(o1.getValue1(), o2.getValue1());\n\
    \                                                               ^\n  symbol: \
    \  method getValue1()\n  location: variable o2 of type Integer\n/tmp/tmpsijpipwl.java:36:\
    \ error: cannot find symbol\n            r.add(oa[i].getValue1());\n         \
    \              ^\n  symbol:   method getValue1()\n  location: class Integer\n\
    6 errors\n"
  stdout: ''
  timestamp: 1660011300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> ret = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ unsorted = new ArrayList<Integer>();\n        Integer[] sorted = new Integer[arr.size()];\n\
    \        //System.out.println(arr);\n        for (int i=0; i<arr.size(); i++)\
    \ {\n            String binaryRep = Integer.toBinaryString(arr.get(i));\n    \
    \        int num1s = 0;\n            for (int j=0; j<binaryRep.length(); j++)\
    \ {\n                if (binaryRep.charAt(j) == '1') {\n                    num1s++;\n\
    \                }\n            }\n            //System.out.println(arr.get(i)\
    \ + \": \" + num1s);\n            if (sorted[num1s] == null) {\n             \
    \   sorted[num1s] = arr.get(i);\n            } else {\n                unsorted.add(arr.get(i));\n\
    \            }\n        }\n        //System.out.println(Arrays.toString(sorted));\n\
    \        for (int i=0; i<sorted.length; i++) {\n            if (sorted[i] != null)\
    \ {\n                ret.add(sorted[i]);\n            }\n        }\n        Collections.sort(unsorted);\n\
    \        for (int i=0; i<unsorted.size(); i++) {\n            ret.add(unsorted.get(i));\n\
    \        }\n        return ret;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp49uborb2.java:49)\n"
  stdout: ''
  timestamp: 1660011300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            result.add(arr.get(i));\n       \
    \ }\n        Collections.sort(result, new Comparator<Integer>() {\n          \
    \  @Override\n            public int compare(Integer o1, Integer o2) {\n     \
    \           return ((Integer) numberOfOnes(o1)).compareTo(numberOfOnes(o2));\n\
    \            }\n        });\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpngk2e4n5.java:24: error: cannot find symbol\n                return\
    \ ((Integer) numberOfOnes(o1)).compareTo(numberOfOnes(o2));\n                \
    \                  ^\n  symbol: method numberOfOnes(Integer)\n/tmp/tmpngk2e4n5.java:24:\
    \ error: cannot find symbol\n                return ((Integer) numberOfOnes(o1)).compareTo(numberOfOnes(o2));\n\
    \                                                              ^\n  symbol: method\
    \ numberOfOnes(Integer)\n2 errors\n"
  stdout: ''
  timestamp: 1660011300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        final int N = arr.size();\n        ArrayList<Integer> res = new ArrayList<>(N);\n\
    \        for (int i = 0; i < N; i++) {\n            res.add(0);\n        }\n \
    \       ArrayList<Pair<Integer, Integer>> p = new ArrayList<>(N);\n        for\
    \ (int i = 0; i < N; i++) {\n            p.add(new Pair<>(Integer.bitCount(arr.get(i)),\
    \ arr.get(i)));\n        }\n        Collections.sort(p, (a, b) -> {\n        \
    \    if (a.getValue0() != b.getValue0()) {\n                return a.getValue0()\
    \ - b.getValue0();\n            }\n            return a.getValue1() - b.getValue1();\n\
    \        });\n        for (int i = 0; i < N; i++) {\n            res.set(i, p.get(i).getValue1());\n\
    \        }\n        return res;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.sortArray(tmp53v419bg.java:24)\n\tat Problem.main(tmp53v419bg.java:38)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> toReturn = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ positive = new ArrayList<Integer>();\n        ArrayList<Integer> negative =\
    \ new ArrayList<Integer>();\n        for (int number : arr) {\n            if\
    \ (number < 0) {\n                negative.add(number);\n            } else {\n\
    \                positive.add(number);\n            }\n        }\n        if (positive.size()\
    \ > 0) {\n            positive = sortPositive(positive);\n        }\n        if\
    \ (negative.size() > 0) {\n            negative = sortNegative(negative);\n  \
    \      }\n        toReturn.addAll(negative);\n        toReturn.addAll(positive);\n\
    \        return toReturn;\n}\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2,\
    \ (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq6kv8rw6.java:28: error: cannot find symbol\n            positive\
    \ = sortPositive(positive);\n                       ^\n  symbol:   method sortPositive(ArrayList<Integer>)\n\
    \  location: class Problem\n/tmp/tmpq6kv8rw6.java:31: error: cannot find symbol\n\
    \            negative = sortNegative(negative);\n                       ^\n  symbol:\
    \   method sortNegative(ArrayList<Integer>)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // ans = []\n        // for i in range(len(arr)):\n        //     ans.append(arr[i])\n\
    \        // for i in range(len(arr)):\n        //     for j in range(i + 1, len(arr)):\n\
    \        //         bit = bin(arr[i])[2:]\n        //         bit2 = bin(arr[j])[2:]\n\
    \        //         if bit.count('1') > bit2.count('1'):\n        //         \
    \    ans[i], ans[j] = ans[j], ans[i]\n        //         elif bit.count('1') ==\
    \ bit2.count('1'):\n        //             if arr[i] > arr[j]:\n        //   \
    \              ans[i], ans[j] = ans[j], ans[i]\n        // return ans\n      \
    \  ArrayList<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < arr.size();\
    \ i++)\n            ans.add(arr.get(i));\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n           \
    \     String bit = Integer.toBinaryString(arr.get(i));\n                String\
    \ bit2 = Integer.toBinaryString(arr.get(j));\n                if (bit.chars().filter(x\
    \ -> x == '1').count() > bit2.chars().filter(x -> x == '1').count()) {\n     \
    \               int temp = ans.get(i);\n                    ans.set(i, ans.get(j));\n\
    \                    ans.set(j, temp);\n                } else if (bit.chars().filter(x\
    \ -> x == '1').count() == bit2.chars().filter(x -> x == '1').count()) {\n    \
    \                if (arr.get(i) > arr.get(j)) {\n                        int temp\
    \ = ans.get(i);\n                        ans.set(i, ans.get(j));\n           \
    \             ans.set(j, temp);\n                    }\n                }\n  \
    \          }\n        }\n        return ans;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6fliwnfd.java:53)\n"
  stdout: ''
  timestamp: 1660011301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        if (arr.size() < 2) return arr;\n        ArrayList<Integer> ones  = new\
    \ ArrayList<>();\n        ArrayList<Integer> zeros = new ArrayList<>();\n    \
    \    for (int i : arr) {\n            if (Integer.bitCount(i) % 2 == 0) zeros.add(i);\n\
    \            else ones.add(i);\n        }\n        Collections.sort(ones);\n \
    \       Collections.sort(zeros);\n        ones.addAll(zeros);\n        return\
    \ ones;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpya8dlvib.java:31)\n"
  stdout: ''
  timestamp: 1660011301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> ret = new ArrayList<>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            String str = String.format(\"%32s\",\n \
    \               Integer.toBinaryString(arr.get(i))).replace(' ', '0');\n     \
    \       String str2 = str.replaceAll(\"0\", \"\");\n            ret.add(i, str2.length());\n\
    \        }\n        Collections.sort(ret);\n        return ret;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqwbrl7dr.java:28)\n"
  stdout: ''
  timestamp: 1660011301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // Write your code here\n        ArrayList<Integer> newArr = new ArrayList<Integer>();\n\
    \        HashMap<Integer, Integer> counts = new HashMap<Integer, Integer>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            Integer count = counts.get(arr.get(i));\n\
    \            if (count == null) {\n                count = new Integer(0);\n \
    \           }\n            count += 1;\n            counts.put(arr.get(i), count);\n\
    \        }\n        HashMap<Integer, Integer> positions = new HashMap<Integer,\
    \ Integer>();\n        ArrayList<Integer> ordered = new ArrayList<Integer>();\n\
    \        for (Integer i : counts.keySet()) {\n            ordered.add(i);\n  \
    \      }\n        Collections.sort(ordered, new Comparator<Integer>() {\n    \
    \        public int compare(Integer lhs, Integer rhs) {\n                Integer\
    \ lhsBits = findOnes(lhs);\n                Integer rhsBits = findOnes(rhs);\n\
    \                if (lhsBits > rhsBits) {\n                    return 1;\n   \
    \             } else if (lhsBits < rhsBits) {\n                    return -1;\n\
    \                } else {\n                    return lhs - rhs;\n           \
    \     }\n            }\n        });\n        for (int i = 0; i < ordered.size();\
    \ i++) {\n            positions.put(ordered.get(i), i);\n        }\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            int index = positions.get(arr.get(i));\n\
    \            while (newArr.size() <= index) {\n                newArr.add(null);\n\
    \            }\n            newArr.set(index, arr.get(i));\n        }\n      \
    \  return newArr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp21oi0vww.java:23: warning: [removal] Integer(int) in Integer has\
    \ been deprecated and marked for removal\n                count = new Integer(0);\n\
    \                        ^\n/tmp/tmp21oi0vww.java:35: error: cannot find symbol\n\
    \                Integer lhsBits = findOnes(lhs);\n                          \
    \        ^\n  symbol: method findOnes(Integer)\n/tmp/tmp21oi0vww.java:36: error:\
    \ cannot find symbol\n                Integer rhsBits = findOnes(rhs);\n     \
    \                             ^\n  symbol: method findOnes(Integer)\n2 errors\n\
    1 warning\n"
  stdout: ''
  timestamp: 1660011301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            int min = arr.get(i);\n         \
    \   int min_index = i;\n            for (int j = i; j < arr.size(); j++) {\n \
    \               if (hammingWeight(arr.get(j)) < hammingWeight(min)) {\n      \
    \              min = arr.get(j);\n                    min_index = j;\n       \
    \         }\n            }\n            int temp = arr.get(i);\n            arr.set(i,\
    \ min);\n            arr.set(min_index, temp);\n        }\n        return arr;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuc4gkgqm.java:22: error: cannot find symbol\n                if\
    \ (hammingWeight(arr.get(j)) < hammingWeight(min)) {\n                    ^\n\
    \  symbol:   method hammingWeight(Integer)\n  location: class Problem\n/tmp/tmpuc4gkgqm.java:22:\
    \ error: cannot find symbol\n                if (hammingWeight(arr.get(j)) < hammingWeight(min))\
    \ {\n                                                ^\n  symbol:   method hammingWeight(int)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        arr.sort(new Comparator<Integer>() {\n            @Override\n       \
    \     public int compare(Integer a, Integer b) {\n                int countA =\
    \ Integer.bitCount(a);\n                int countB = Integer.bitCount(b);\n  \
    \              return countA == countB ? a - b : countA - countB;\n          \
    \  }\n        });\n        return arr;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7_b7elxo.java:29)\n"
  stdout: ''
  timestamp: 1660011301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n\
    \            public int compare(Integer o1, Integer o2) {\n                return\
    \ Integer.bitCount(o1) - Integer.bitCount(o2);\n            }\n        });\n \
    \       return arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgdrynk78.java:26)\n"
  stdout: ''
  timestamp: 1660011301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // https://stackoverflow.com/questions/7578595/how-to-sort-hashmap-by-values\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            map.put(i, arr.get(i));\n        }\n   \
    \     map = sortByValue(map);\n        ArrayList<Integer> sorted = new ArrayList<>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(map.get(i));\n\
    \        }\n        return sorted;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplyrq1u25.java:22: error: cannot find symbol\n        map = sortByValue(map);\n\
    \              ^\n  symbol:   method sortByValue(Map<Integer,Integer>)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        //\n        // Sort arr by number of ones in binary representation.\n\
    \        //\n        for (int i = 0; i < arr.size(); i++) {\n            for (int\
    \ j = i + 1; j < arr.size(); j++) {\n                Integer a = arr.get(i);\n\
    \                Integer b = arr.get(j);\n                int onesA = 1;\n   \
    \             int onesB = 1;\n                while (a > 0) {\n              \
    \      onesA += a % 2;\n                    a /= 2;\n                }\n     \
    \           while (b > 0) {\n                    onesB += b % 2;\n           \
    \         b /= 2;\n                }\n                if (onesA > onesB) {\n \
    \                   Collections.swap(arr, i, j);\n                } else if (onesA\
    \ == onesB) {\n                    if (arr.get(i) > arr.get(j)) {\n          \
    \              Collections.swap(arr, i, j);\n                    }\n         \
    \       }\n            }\n        }\n        return arr;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3gsggarb.java:47)\n"
  stdout: ''
  timestamp: 1660011301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // Write your code here\n        ArrayList<Integer> res = new ArrayList<>();\n\
    \        //iterate through array, get ones in each integer\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            // System.out.println(Integer.toBinaryString(arr.get(i)));\n\
    \            res.add(countOnes(arr.get(i)));\n        }\n        // System.out.println(res);\n\
    \        Collections.sort(res);\n        // System.out.println(res);\n       \
    \ return res;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb6wseyfv.java:22: error: cannot find symbol\n            res.add(countOnes(arr.get(i)));\n\
    \                    ^\n  symbol:   method countOnes(Integer)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        if (arr.size() == 0) {\n            return arr;\n        }\n        Collections.sort(arr,\
    \ new Comparator<Integer>() {\n            @Override\n            public int compare(Integer\
    \ n1, Integer n2) {\n                int num1 = Integer.bitCount(n1);\n      \
    \          int num2 = Integer.bitCount(n2);\n                if (num1 == num2)\
    \ {\n                    return n1 - n2;\n                }\n                return\
    \ num1 - num2;\n            }\n        });\n        return arr;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiwauryq2.java:35)\n"
  stdout: ''
  timestamp: 1660011302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Tuple<Integer, Integer>> vals = new ArrayList<>();\n      \
    \  for (int i = 0; i < arr.size(); i++) {\n            int val = arr.get(i);\n\
    \            int ones = Integer.bitCount(val);\n            vals.add(new Tuple<Integer,\
    \ Integer>(val, ones));\n        }\n        Collections.sort(vals, (a, b) -> {\n\
    \            if (a.getValue1() < b.getValue1()) return -1;\n            if (a.getValue1()\
    \ > b.getValue1()) return 1;\n            if (a.getValue0() < b.getValue0()) return\
    \ -1;\n            if (a.getValue0() > b.getValue0()) return 1;\n            return\
    \ 0;\n        });\n        ArrayList<Integer> sorted = new ArrayList<>();\n  \
    \      for (int i = 0; i < vals.size(); i++) {\n            sorted.add(vals.get(i).getValue0());\n\
    \        }\n        return sorted;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplu82xifx.java:17: error: type Tuple does not take parameters\n\
    \        ArrayList<Tuple<Integer, Integer>> vals = new ArrayList<>();\n      \
    \                 ^\n/tmp/tmplu82xifx.java:21: error: type Tuple does not take\
    \ parameters\n            vals.add(new Tuple<Integer, Integer>(val, ones));\n\
    \                              ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        String prefix = \"\";\n        String[] temp = new String[arr.size()];\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            String binary = Integer.toBinaryString(arr.get(i));\n\
    \            prefix = \"\";\n            for (int j = 0; j < 32 - binary.length();\
    \ j++) {\n                prefix += \"0\";\n            }\n            temp[i]\
    \ = prefix + binary;\n        }\n        ArrayList<Integer> res = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            int ones = 0;\n \
    \           for (int j = 0; j < temp[i].length(); j++) {\n                if (temp[i].charAt(j)\
    \ == '1') {\n                    ones++;\n                }\n            }\n \
    \           res.add(Integer.parseInt(temp[i], 2));\n        }\n        Collections.sort(res);\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw29st230.java:41)\n"
  stdout: ''
  timestamp: 1660011302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // this does not count negatives\n        ArrayList<Integer> sorted =\
    \ arr.stream()\n            .map(i -> Integer.bitCount(i))\n            .distinct()\n\
    \            .sorted()\n            .collect(Collectors.toCollection(ArrayList::new));\n\
    \        return sorted;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2,\
    \ (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptww2zky3.java:26)\n"
  stdout: ''
  timestamp: 1660011302
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> result = new ArrayList<>();\n        while (arr.size()\
    \ > 0) {\n            Integer indexOfLowest = 0;\n            Integer lowestInt\
    \ = Integer.MAX_VALUE;\n            for (int i = 0; i < arr.size(); i++) {\n \
    \               Integer currInt = arr.get(i);\n                if (currInt < lowestInt)\
    \ {\n                    lowestInt = currInt;\n                    indexOfLowest\
    \ = i;\n                }\n            }\n            arr.remove(indexOfLowest);\n\
    \            result.add(lowestInt);\n        }\n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ ones = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            int a = arr.get(i);\n\
    \            if (a < 0) {\n                if (a > -1)\n                    throw\
    \ new IllegalArgumentException();\n                a = -a;\n            }\n  \
    \          if (countOnes(a) == 0)\n                zeros.add(a);\n           \
    \ else\n                ones.add(a);\n        }\n        Collections.sort(zeros);\n\
    \        Collections.sort(ones);\n        sorted.addAll(zeros);\n        sorted.addAll(ones);\n\
    \        return sorted;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2,\
    \ (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp14ks3f65.java:27: error: cannot find symbol\n            if (countOnes(a)\
    \ == 0)\n                ^\n  symbol:   method countOnes(int)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        if (arr.size() < 2) return arr;\n        List<Integer> negativeList =\
    \ new ArrayList<>();\n        List<Integer> nonNegativeList = new ArrayList<>();\n\
    \        ArrayList<Integer> sortedArr = new ArrayList<>();\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n           \
    \ if (num < 0) {\n                negativeList.add(num);\n            } else {\n\
    \                nonNegativeList.add(num);\n            }\n        }\n       \
    \ Collections.sort(negativeList);\n        Collections.sort(nonNegativeList, new\
    \ Comparator<Integer>() {\n            @Override\n            public int compare(Integer\
    \ x, Integer y) {\n                String xStr = Integer.toBinaryString(x);\n\
    \                String yStr = Integer.toBinaryString(y);\n                if\
    \ (countOnes(xStr) == countOnes(yStr)) {\n                    return x - y;\n\
    \                } else {\n                    return countOnes(xStr) - countOnes(yStr);\n\
    \                }\n            }\n        });\n        for (int i = 0; i < negativeList.size();\
    \ i++) {\n            sortedArr.add(negativeList.get(i));\n        }\n       \
    \ for (int i = 0; i < nonNegativeList.size(); i++) {\n            sortedArr.add(nonNegativeList.get(i));\n\
    \        }\n        return sortedArr;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp79hy0s_x.java:35: error: cannot find symbol\n                if\
    \ (countOnes(xStr) == countOnes(yStr)) {\n                    ^\n  symbol: method\
    \ countOnes(String)\n/tmp/tmp79hy0s_x.java:35: error: cannot find symbol\n   \
    \             if (countOnes(xStr) == countOnes(yStr)) {\n                    \
    \                   ^\n  symbol: method countOnes(String)\n/tmp/tmp79hy0s_x.java:38:\
    \ error: cannot find symbol\n                    return countOnes(xStr) - countOnes(yStr);\n\
    \                           ^\n  symbol: method countOnes(String)\n/tmp/tmp79hy0s_x.java:38:\
    \ error: cannot find symbol\n                    return countOnes(xStr) - countOnes(yStr);\n\
    \                                             ^\n  symbol: method countOnes(String)\n\
    4 errors\n"
  stdout: ''
  timestamp: 1660011302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> result = new ArrayList<>();\n        ArrayList<Integer>\
    \ isZero = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            int n = arr.get(i);\n            if (n < 0) {\n                result.add(n);\n\
    \            } else if (n == 0) {\n                isZero.add(n);\n          \
    \  } else {\n                result.add(Integer.MAX_VALUE);\n            }\n \
    \       }\n        result.sort(new Comparator<Integer>() {\n            @Override\n\
    \            public int compare(Integer o1, Integer o2) {\n                int\
    \ ones1 = countOnes(o1);\n                int ones2 = countOnes(o2);\n       \
    \         if (ones1 == ones2) {\n                    return o1 - o2;\n       \
    \         } else {\n                    return ones1 - ones2;\n              \
    \  }\n            }\n        });\n        isZero.addAll(result);\n        return\
    \ isZero;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr6ps_eel.java:32: error: cannot find symbol\n                int\
    \ ones1 = countOnes(o1);\n                            ^\n  symbol: method countOnes(Integer)\n\
    /tmp/tmpr6ps_eel.java:33: error: cannot find symbol\n                int ones2\
    \ = countOnes(o2);\n                            ^\n  symbol: method countOnes(Integer)\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        arr.sort(new Comparator<Integer>() {\n            @Override\n       \
    \     public int compare(Integer o1, Integer o2) {\n                int onesInO1\
    \ = (int) (Math.log(o1) / Math.log(2)) + 1;\n                int onesInO2 = (int)\
    \ (Math.log(o2) / Math.log(2)) + 1;\n                if (onesInO1 == onesInO2)\
    \ {\n                    return o1.compareTo(o2);\n                } else {\n\
    \                    return onesInO1 - onesInO2;\n                }\n        \
    \    }\n        });\n        return arr;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp852vxxxy.java:32)\n"
  stdout: ''
  timestamp: 1660011302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        List<Pair<Integer, Integer>> collection = new ArrayList<>();\n      \
    \  for (int i : arr) {\n            int count = 0;\n            for (char c :\
    \ Integer.toBinaryString(i).toCharArray())\n                if (c == '1')\n  \
    \                  count++;\n            collection.add(new Pair<>(count, i));\n\
    \        }\n        Collections.sort(collection, new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0().compareTo(o2.getValue0())\
    \ == 0)\n                    return o1.getValue1().compareTo(o2.getValue1());\n\
    \                return o1.getValue0().compareTo(o2.getValue0());\n          \
    \  }\n        });\n        ArrayList<Integer> sorted = new ArrayList<>();\n  \
    \      for (Pair<Integer, Integer> pair : collection)\n            sorted.add(pair.getValue1());\n\
    \        return sorted;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2,\
    \ (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.sortArray(tmpksvwfv3j.java:23)\n\tat Problem.main(tmpksvwfv3j.java:39)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        class Pair {\n            final int ones;\n            final int value;\n\
    \            Pair(int ones, int value) {\n                this.ones = ones;\n\
    \                this.value = value;\n            }\n        }\n        class\
    \ SortedPairs {\n            final Pair[] pairs;\n            SortedPairs(ArrayList<Integer>\
    \ arr) {\n                pairs = new Pair[arr.size()];\n                for (int\
    \ i = 0; i < arr.size(); i++) {\n                    pairs[i] = new Pair(ones(arr.get(i)),\
    \ arr.get(i));\n                }\n                Arrays.sort(pairs, (a, b) ->\
    \ {\n                    if (a.ones == b.ones) {\n                        return\
    \ a.value - b.value;\n                    }\n                    return a.ones\
    \ - b.ones;\n                });\n            }\n            ArrayList<Integer>\
    \ getSorted() {\n                ArrayList<Integer> res = new ArrayList<Integer>();\n\
    \                for (int i = 0; i < pairs.length; i++) {\n                  \
    \  res.add(pairs[i].value);\n                }\n                return res;\n\
    \            }\n        }\n        return new SortedPairs(arr).getSorted();\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ik16l6_.java:30: error: cannot find symbol\n                 \
    \   pairs[i] = new Pair(ones(arr.get(i)), arr.get(i));\n                     \
    \                   ^\n  symbol:   method ones(Integer)\n  location: class SortedPairs\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> ans = new ArrayList<Integer>();\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            for (int j = i; j < arr.size(); j++)\
    \ {\n                if (countOnes(arr.get(i)) > countOnes(arr.get(j))) {\n  \
    \                  int tmp = arr.get(i);\n                    arr.set(i, arr.get(j));\n\
    \                    arr.set(j, tmp);\n                }\n            }\n    \
    \    }\n        return arr;\n}\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2,\
    \ (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5e6k7go3.java:20: error: cannot find symbol\n                if\
    \ (countOnes(arr.get(i)) > countOnes(arr.get(j))) {\n                    ^\n \
    \ symbol:   method countOnes(Integer)\n  location: class Problem\n/tmp/tmp5e6k7go3.java:20:\
    \ error: cannot find symbol\n                if (countOnes(arr.get(i)) > countOnes(arr.get(j)))\
    \ {\n                                            ^\n  symbol:   method countOnes(Integer)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // Your Code goes here\n        Collections.sort(arr, new Comparator<Integer>()\
    \ {\n            @Override\n            public int compare(Integer o1, Integer\
    \ o2) {\n                int result = Integer.bitCount(o1) - Integer.bitCount(o2);\n\
    \                if (result == 0) {\n                    result = o1 - o2;\n \
    \               }\n                return result;\n            }\n        });\n\
    \        return arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp797m4pw0.java:32)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        // Add\
    \ code here\n        return sorted;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppjt2qp_9.java:22)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n\
    \            public int compare(Integer a, Integer b) {\n                if (countOnes(a)\
    \ == countOnes(b)) {\n                    return a - b;\n                }\n \
    \               return countOnes(a) - countOnes(b);\n            }\n        });\n\
    \        return arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjmnz_buu.java:20: error: cannot find symbol\n                if\
    \ (countOnes(a) == countOnes(b)) {\n                    ^\n  symbol: method countOnes(Integer)\n\
    /tmp/tmpjmnz_buu.java:20: error: cannot find symbol\n                if (countOnes(a)\
    \ == countOnes(b)) {\n                                    ^\n  symbol: method\
    \ countOnes(Integer)\n/tmp/tmpjmnz_buu.java:23: error: cannot find symbol\n  \
    \              return countOnes(a) - countOnes(b);\n                       ^\n\
    \  symbol: method countOnes(Integer)\n/tmp/tmpjmnz_buu.java:23: error: cannot\
    \ find symbol\n                return countOnes(a) - countOnes(b);\n         \
    \                             ^\n  symbol: method countOnes(Integer)\n4 errors\n"
  stdout: ''
  timestamp: 1660011302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Integer[] f = new Integer[arr.size()];\n        f = arr.toArray(f);\n\
    \        Map<Integer,Integer> res = new HashMap<>();\n        for (int i = 0;\
    \ i < f.length; i++) {\n            res.put(f[i], countOnes(f[i]));\n        }\n\
    \        Arrays.sort(f, new Comparator<Integer>() {\n            @Override\n \
    \           public int compare(Integer i1, Integer i2) {\n                if (res.get(i1)\
    \ == res.get(i2)) {\n                    return i1.compareTo(i2);\n          \
    \      }\n                return res.get(i1).compareTo(res.get(i2));\n       \
    \     }\n        });\n        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(f));\n\
    \        return list;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplua0wpcu.java:21: error: cannot find symbol\n            res.put(f[i],\
    \ countOnes(f[i]));\n                          ^\n  symbol:   method countOnes(Integer)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> positive = new ArrayList<>();\n        ArrayList<Integer>\
    \ negative = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) >= 0) {\n                positive.add(arr.get(i));\n\
    \            } else {\n                negative.add(arr.get(i));\n           \
    \ }\n        }\n        Comparator<Integer> comparator = new Comparator<Integer>()\
    \ {\n            @Override\n            public int compare(Integer x, Integer\
    \ y) {\n                String binaryX = Integer.toBinaryString(x);\n        \
    \        String binaryY = Integer.toBinaryString(y);\n                if (countOnes(binaryX)\
    \ == countOnes(binaryY)) {\n                    return x - y;\n              \
    \  } else {\n                    return countOnes(binaryX) - countOnes(binaryY);\n\
    \                }\n            }\n        };\n        positive.sort(comparator);\n\
    \        negative.sort(comparator);\n        Collections.reverse(negative);\n\
    \        arr.clear();\n        arr.addAll(negative);\n        arr.addAll(positive);\n\
    \        return arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd64496ov.java:31: error: cannot find symbol\n                if\
    \ (countOnes(binaryX) == countOnes(binaryY)) {\n                    ^\n  symbol:\
    \ method countOnes(String)\n/tmp/tmpd64496ov.java:31: error: cannot find symbol\n\
    \                if (countOnes(binaryX) == countOnes(binaryY)) {\n           \
    \                               ^\n  symbol: method countOnes(String)\n/tmp/tmpd64496ov.java:34:\
    \ error: cannot find symbol\n                    return countOnes(binaryX) - countOnes(binaryY);\n\
    \                           ^\n  symbol: method countOnes(String)\n/tmp/tmpd64496ov.java:34:\
    \ error: cannot find symbol\n                    return countOnes(binaryX) - countOnes(binaryY);\n\
    \                                                ^\n  symbol: method countOnes(String)\n\
    4 errors\n"
  stdout: ''
  timestamp: 1660011302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Collections.sort(arr, (a, b) -> {\n            int aOnes = Integer.bitCount(a);\n\
    \            int bOnes = Integer.bitCount(b);\n            if (aOnes == bOnes)\
    \ return Integer.compare(a, b);\n            return Integer.compare(aOnes, bOnes);\n\
    \        });\n        return arr;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvnllu1ck.java:27)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        int[] m = new int[arr.size()];\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            int n = arr.get(i);\n            m[i] = (int) Integer.toBinaryString(n).chars().filter(e\
    \ -> e == '1').count();\n        }\n        int[][] s = new int[m.length][m.length];\n\
    \        for (int i = 0; i < m.length; i++) {\n            for (int j = 0; j <\
    \ m.length; j++) {\n                s[i][j] = arr.get(i);\n            }\n   \
    \     }\n        return null;\n}\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2,\
    \ (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.sortArray(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmplv1d8z_w.java:31)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        return arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbsm38qiq.java:20)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sorted = new ArrayList<>();\n        Collections.sort(arr,\
    \ (a, b) -> Integer.compare(ones(a), ones(b)));\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (i + 1 < arr.size() && ones(arr.get(i)) == ones(arr.get(i\
    \ + 1))) {\n                int j = i + 1;\n                while (j < arr.size()\
    \ && ones(arr.get(i)) == ones(arr.get(j))) j++;\n                ArrayList<Integer>\
    \ aux = new ArrayList<>();\n                for (int k = i; k < j; k++) aux.add(arr.get(k));\n\
    \                Collections.sort(aux);\n                for (int k = i; k < j;\
    \ k++) sorted.add(aux.get(k - i));\n                i = j - 1;\n            }\
    \ else {\n                sorted.add(arr.get(i));\n            }\n        }\n\
    \        return sorted;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2,\
    \ (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppvwnopkg.java:18: error: cannot find symbol\n        Collections.sort(arr,\
    \ (a, b) -> Integer.compare(ones(a), ones(b)));\n                            \
    \                            ^\n  symbol:   method ones(Integer)\n  location:\
    \ class Problem\n/tmp/tmppvwnopkg.java:18: error: cannot find symbol\n       \
    \ Collections.sort(arr, (a, b) -> Integer.compare(ones(a), ones(b)));\n      \
    \                                                           ^\n  symbol:   method\
    \ ones(Integer)\n  location: class Problem\n/tmp/tmppvwnopkg.java:20: error: cannot\
    \ find symbol\n            if (i + 1 < arr.size() && ones(arr.get(i)) == ones(arr.get(i\
    \ + 1))) {\n                                      ^\n  symbol:   method ones(Integer)\n\
    \  location: class Problem\n/tmp/tmppvwnopkg.java:20: error: cannot find symbol\n\
    \            if (i + 1 < arr.size() && ones(arr.get(i)) == ones(arr.get(i + 1)))\
    \ {\n                                                          ^\n  symbol:  \
    \ method ones(Integer)\n  location: class Problem\n/tmp/tmppvwnopkg.java:22: error:\
    \ cannot find symbol\n                while (j < arr.size() && ones(arr.get(i))\
    \ == ones(arr.get(j))) j++;\n                                         ^\n  symbol:\
    \   method ones(Integer)\n  location: class Problem\n/tmp/tmppvwnopkg.java:22:\
    \ error: cannot find symbol\n                while (j < arr.size() && ones(arr.get(i))\
    \ == ones(arr.get(j))) j++;\n                                                \
    \             ^\n  symbol:   method ones(Integer)\n  location: class Problem\n\
    6 errors\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n      \
    \  for (int i : arr) {\n            int ones = Integer.bitCount(i);\n        \
    \    pairs.add(new Pair<>(ones, i));\n        }\n        pairs.sort((p1, p2) ->\
    \ {\n            if (p1.getValue0().equals(p2.getValue0()))\n                return\
    \ p1.getValue1().compareTo(p2.getValue1());\n            return p1.getValue0().compareTo(p2.getValue0());\n\
    \        });\n        ArrayList<Integer> result = new ArrayList<>();\n       \
    \ for (Pair<Integer, Integer> p : pairs)\n            result.add(p.getValue1());\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2,\
    \ (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.sortArray(tmphyw3avr9.java:20)\n\tat Problem.main(tmphyw3avr9.java:33)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        return new ArrayList<Integer>(arr.stream().sorted((x, y) -> Integer.compare(Integer.bitCount(x),\
    \ Integer.bitCount(y))).collect(Collectors.toList()));\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpboz3bnwb.java:20)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // Write code here...\n        // binary search tree\n        // Time\
    \ complexity: O(nlogn)\n        // Space complexity: O(n)\n        class Node\
    \ {\n            public int val;\n            public int ones;\n            public\
    \ Node right;\n            public Node left;\n            public Node(int val,\
    \ int ones) {\n                this.val = val;\n                this.ones = ones;\n\
    \                this.right = null;\n                this.left = null;\n     \
    \       }\n        }\n        class BST {\n            public Node root;\n   \
    \         public BST() {\n                this.root = null;\n            }\n \
    \           public void insert(int val) {\n                int ones = 0;\n   \
    \             while (val > 0) {\n                    if (val % 2 == 1) {\n   \
    \                     ones++;\n                    }\n                    val\
    \ /= 2;\n                }\n                insert(this.root, val, ones);\n  \
    \          }\n            public void insert(Node node, int val, int ones) {\n\
    \                if (node == null) {\n                    this.root = new Node(val,\
    \ ones);\n                    return;\n                }\n                if (ones\
    \ < node.ones) {\n                    if (node.left == null) {\n             \
    \           node.left = new Node(val, ones);\n                    } else {\n \
    \                       insert(node.left, val, ones);\n                    }\n\
    \                } else if (ones > node.ones) {\n                    if (node.right\
    \ == null) {\n                        node.right = new Node(val, ones);\n    \
    \                } else {\n                        insert(node.right, val, ones);\n\
    \                    }\n                } else {\n                    if (val\
    \ < node.val) {\n                        if (node.left == null) {\n          \
    \                  node.left = new Node(val, ones);\n                        }\
    \ else {\n                            insert(node.left, val, ones);\n        \
    \                }\n                    } else {\n                        if (node.right\
    \ == null) {\n                            node.right = new Node(val, ones);\n\
    \                        } else {\n                            insert(node.right,\
    \ val, ones);\n                        }\n                    }\n            \
    \    }\n            }\n            public ArrayList<Integer> inorder() {\n   \
    \             ArrayList<Integer> output = new Array\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq24stvbh.java:83: error: '(' or '[' expected\n}\n^\n/tmp/tmpq24stvbh.java:95:\
    \ error: reached end of file while parsing\n}\n ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        int[] bin = new int[arr.size()];\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            int num = arr.get(i);\n            int count = 0;\n    \
    \        while (num > 0) {\n                if (num % 2 == 1) {\n            \
    \        count++;\n                }\n                num /= 2;\n            }\n\
    \            bin[i] = count;\n        }\n        ArrayList<Integer> newArr = new\
    \ ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n    \
    \        for (int j = 0; j < arr.size(); j++) {\n                if (bin[j] ==\
    \ i) {\n                    newArr.add(arr.get(j));\n                }\n     \
    \       }\n        }\n        return newArr;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqa4_gu9u.java:40)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Pair<Integer, Integer>> sorted = new ArrayList<>();\n     \
    \   for (int i : arr) {\n            int count = 0;\n            for (char c :\
    \ Integer.toBinaryString(i).toCharArray()) {\n                if (c == '1') count++;\n\
    \            }\n            sorted.add(new Pair<>(count, i));\n        }\n   \
    \     Collections.sort(sorted, new Comparator<Pair<Integer, Integer>>() {\n  \
    \          @Override\n            public int compare(Pair<Integer, Integer> o1,\
    \ Pair<Integer, Integer> o2) {\n                return o1.getValue0().compareTo(o2.getValue0())\
    \ == 0 ? o1.getValue1().compareTo(o2.getValue1()) : o1.getValue0().compareTo(o2.getValue0());\n\
    \            }\n        });\n        ArrayList<Integer> sortedArray = new ArrayList<>();\n\
    \        for (Pair<Integer, Integer> p : sorted) {\n            sortedArray.add(p.getValue1());\n\
    \        }\n        return sortedArray;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.sortArray(tmptg5gwqdm.java:23)\n\tat Problem.main(tmptg5gwqdm.java:38)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> oneArr = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ zeroArr = new ArrayList<Integer>();\n        ArrayList<Integer> res = new ArrayList<Integer>();\n\
    \        for (int i : arr) {\n            if (Integer.bitCount(i) == 1) {\n  \
    \              oneArr.add(i);\n            } else {\n                zeroArr.add(i);\n\
    \            }\n        }\n        Collections.sort(oneArr);\n        Collections.sort(zeroArr);\n\
    \        for (int i : oneArr) {\n            res.add(i);\n        }\n        for\
    \ (int i : zeroArr) {\n            res.add(i);\n        }\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_0w8ns6r.java:39)\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
    \ i = 1; i <= 32; i++) {\n            for (int j = 0; j < arr.size(); j++) {\n\
    \                int num_count = countSetBits(arr.get(j));\n                if\
    \ (num_count == i) {\n                    sorted.add(arr.get(j));\n          \
    \      }\n            }\n        }\n        return sorted;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8f_lk6hn.java:20: error: cannot find symbol\n                int\
    \ num_count = countSetBits(arr.get(j));\n                                ^\n \
    \ symbol:   method countSetBits(Integer)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Integer[][] sortable = new Integer[arr.size()][2];\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            sortable[i][0] = arr.get(i);\n  \
    \          sortable[i][1] = Integer.bitCount(arr.get(i));\n        }\n       \
    \ Arrays.sort(sortable, new Comparator<Integer[]>() {\n            @Override\n\
    \            public int compare(Integer[] a, Integer[] b) {\n                return\
    \ a[1].compareTo(b[1]);\n            }\n        });\n        return new ArrayList<Integer>(Arrays.asList(sortable));\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ayz64a9.java:28: error: no suitable constructor found for ArrayList(List<Integer[]>)\n\
    \        return new ArrayList<Integer>(Arrays.asList(sortable));\n           \
    \    ^\n    constructor ArrayList.ArrayList(int) is not applicable\n      (argument\
    \ mismatch; no instance(s) of type variable(s) T exist so that List<T> conforms\
    \ to int)\n    constructor ArrayList.ArrayList(Collection<? extends Integer>)\
    \ is not applicable\n      (argument mismatch; inference variable T has incompatible\
    \ bounds\n          lower bounds: Integer,Object\n          lower bounds: Integer[])\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>asList(T...)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Map<Integer, Integer> m = new HashMap<>();\n        Integer mV = 0;\n\
    \        StringBuilder sb = new StringBuilder();\n        String s = \"\";\n \
    \       for (Integer n : arr) {\n            sb.setLength(0);\n            sb.append(Integer.toBinaryString(n));\n\
    \            s = sb.toString();\n            mV = (int) s.chars().filter(ch ->\
    \ ch == '1').count();\n            m.put(n, mV);\n        }\n        // we could\
    \ get rid of the temp arraylist, but this is explicit and easier to read\n   \
    \     ArrayList<Integer> temp = new ArrayList<>();\n        temp.addAll(m.keySet());\n\
    \        temp.sort((a, b) -> {\n            if (m.get(a).equals(m.get(b))) {\n\
    \                return a.compareTo(b);\n            } else {\n              \
    \  return m.get(a).compareTo(m.get(b));\n            }\n        });\n        return\
    \ temp;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1yf7u0qs.java:42)\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // Sort the array based on number of ones in binary representation\n\
    \        // using method \"getOnes\" which counts the number of ones in a binary\
    \ number\n        Collections.sort(arr, (a, b) -> {\n            if (getOnes(a)\
    \ != getOnes(b)) {\n                return getOnes(a) - getOnes(b);\n        \
    \    } else {\n                return a - b;\n            }\n        });\n   \
    \     return arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk3lnrxvc.java:20: error: cannot find symbol\n            if (getOnes(a)\
    \ != getOnes(b)) {\n                ^\n  symbol:   method getOnes(Integer)\n \
    \ location: class Problem\n/tmp/tmpk3lnrxvc.java:20: error: cannot find symbol\n\
    \            if (getOnes(a) != getOnes(b)) {\n                              ^\n\
    \  symbol:   method getOnes(Integer)\n  location: class Problem\n/tmp/tmpk3lnrxvc.java:21:\
    \ error: cannot find symbol\n                return getOnes(a) - getOnes(b);\n\
    \                       ^\n  symbol:   method getOnes(Integer)\n  location: class\
    \ Problem\n/tmp/tmpk3lnrxvc.java:21: error: cannot find symbol\n             \
    \   return getOnes(a) - getOnes(b);\n                                    ^\n \
    \ symbol:   method getOnes(Integer)\n  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sorted = new ArrayList<>();\n        ArrayList<Integer>\
    \ positives = new ArrayList<>();\n        ArrayList<Integer> negatives = new ArrayList<>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >=\
    \ 0) {\n                positives.add(arr.get(i));\n            } else {\n   \
    \             negatives.add(arr.get(i));\n            }\n        }\n        Collections.sort(positives,\
    \ new Comparator<Integer>() {\n            @Override\n            public int compare(Integer\
    \ o1, Integer o2) {\n                return Integer.bitCount(o1) == Integer.bitCount(o2)\
    \ ? o1 - o2 : Integer.bitCount(o1) - Integer.bitCount(o2);\n            }\n  \
    \      });\n        Collections.sort(negatives, new Comparator<Integer>() {\n\
    \            @Override\n            public int compare(Integer o1, Integer o2)\
    \ {\n                return Integer.bitCount(o1) == Integer.bitCount(o2) ? o1\
    \ - o2 : Integer.bitCount(o1) - Integer.bitCount(o2);\n            }\n       \
    \ });\n        Collections.reverse(negatives);\n        sorted.addAll(negatives);\n\
    \        sorted.addAll(positives);\n        return sorted;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkkfzrwez.java:46)\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Map<Integer, Integer> onesCount = new HashMap<>();\n        for (int\
    \ a : arr) {\n            String bin = Integer.toBinaryString(a);\n          \
    \  int ones = (int) bin.chars().filter(ch -> ch == '1').count();\n           \
    \ onesCount.put(a, ones);\n        }\n        Collections.sort(arr, new Comparator<Integer>()\
    \ {\n            @Override\n            public int compare(Integer i1, Integer\
    \ i2) {\n                int ones1 = onesCount.get(i1);\n                int ones2\
    \ = onesCount.get(i2);\n                if (ones1 == ones2) return i1 - i2;\n\
    \                return ones1 - ones2;\n            }\n        });\n        return\
    \ arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi3ahxdlb.java:36)\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        TreeMap<Integer,ArrayList<Integer>> map = new TreeMap<>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            String binary = Integer.toBinaryString(arr.get(i));\n\
    \            int ones = binary.replaceAll(\"0\",\"\").length();\n            ArrayList<Integer>\
    \ list = map.getOrDefault(ones,new ArrayList<>());\n            list.add(arr.get(i));\n\
    \            map.put(ones,list);\n        }\n        ArrayList<Integer> answer\
    \ = new ArrayList<>();\n        while (map.size() > 0) {\n            int key\
    \ = map.firstKey();\n            answer.addAll(map.get(key));\n            map.remove(key);\n\
    \        }\n        return answer;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpucyt9u40.java:34)\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        int [] bin = new int[arr.size()];\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            int num = arr.get(i);\n            int count = 0;\n    \
    \        while (num > 0) {\n                count += num % 2;\n              \
    \  num /= 2;\n            }\n            bin[i] = count;\n        }\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            int min = i;\n            for\
    \ (int j = i + 1; j < arr.size(); j++) {\n                if (bin[j] < bin[min])\
    \ {\n                    min = j;\n                }\n            }\n        \
    \    if (i != min) {\n                int tmp = bin[i];\n                bin[i]\
    \ = bin[min];\n                bin[min] = tmp;\n                tmp = arr.get(i);\n\
    \                arr.set(i, arr.get(min));\n                arr.set(min, tmp);\n\
    \            }\n        }\n        return arr;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpucw7_zyl.java:47)\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // Good Luck!\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n\
    \            int count = 0;\n            while (num > 0) {\n                num\
    \ = num & (num - 1);\n                count++;\n            }\n            //\
    \ System.out.println(count);\n            result.add(count);\n        }\n    \
    \    Collections.sort(result);\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxi1b0iz2.java:33)\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> arrSorted = new ArrayList<>();\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            int val = arr.get(i);\n           \
    \ String binaryVal = Integer.toBinaryString(val);\n            int ones = (int)\
    \ binaryVal.chars().filter(ch -> ch == '1').count();\n            int decimalVal\
    \ = Integer.parseInt(binaryVal, 2);\n            arrSorted.add(ones * 100000 +\
    \ decimalVal);\n        }\n        Collections.sort(arrSorted);\n        for (int\
    \ i = 0; i < arrSorted.size(); i++) {\n            int val = arrSorted.get(i);\n\
    \            int ones = val / 100000;\n            val -= ones * 100000;\n   \
    \         String binaryVal = Integer.toBinaryString(val);\n            int decimalVal\
    \ = Integer.parseInt(binaryVal, 2);\n            arrSorted.set(i, decimalVal);\n\
    \        }\n        return arrSorted;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"11111111111111111111111111111110\" under radix 2\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat Problem.sortArray(tmpti24jwen.java:22)\n\
    \tat Problem.main(tmpti24jwen.java:38)\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> negative = new ArrayList<>();\n        ArrayList<Integer>\
    \ positive = new ArrayList<>();\n        ArrayList<Integer> zero = new ArrayList<>();\n\
    \        for (int i : arr) {\n            if (i == 0) {\n                zero.add(i);\n\
    \            } else if (i < 0) {\n                negative.add(i);\n         \
    \   } else {\n                positive.add(i);\n            }\n        }\n   \
    \     int curr = 0;\n        while (negative.size() > 0) {\n            while\
    \ (curr < negative.size() && negative.get(curr) != -1) {\n                curr++;\n\
    \            }\n            if (curr == negative.size()) {\n                curr\
    \ = 0;\n                for (int i = 0; i < negative.size(); i++) {\n        \
    \            negative.set(i, -negative.get(i) - 1);\n                }\n     \
    \       } else {\n                negative.set(curr, -negative.get(curr) - 1);\n\
    \                curr++;\n            }\n        }\n        curr = 0;\n      \
    \  while (positive.size() > 0) {\n            while (curr < positive.size() &&\
    \ positive.get(curr) != 1) {\n                curr++;\n            }\n       \
    \     if (curr == positive.size()) {\n                curr = 0;\n            \
    \    for (int i = 0; i < positive.size(); i++) {\n                    positive.set(i,\
    \ positive.get(i) + 1);\n                }\n            } else {\n           \
    \     positive.set(curr, positive.get(curr) + 1);\n                curr++;\n \
    \           }\n        }\n        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Collections.reverse(negative);\n        result.addAll(negative);\n  \
    \      result.addAll(zero);\n        result.addAll(positive);\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> result = new ArrayList<>();\n        while (arr.size()\
    \ > 0) {\n            int min = arr.get(0);\n            int min_index = 0;\n\
    \            for (int i = 1; i < arr.size(); i++) {\n                int ones\
    \ = countOnes(arr.get(i));\n                if (countOnes(min) > ones) {\n   \
    \                 min = arr.get(i);\n                    min_index = i;\n    \
    \            } else if (countOnes(min) == ones) {\n                    if (min\
    \ > arr.get(i)) {\n                        min = arr.get(i);\n               \
    \         min_index = i;\n                    }\n                }\n         \
    \   }\n            result.add(min);\n            arr.remove(min_index);\n    \
    \    }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnbmgbjwd.java:22: error: cannot find symbol\n                int\
    \ ones = countOnes(arr.get(i));\n                           ^\n  symbol:   method\
    \ countOnes(Integer)\n  location: class Problem\n/tmp/tmpnbmgbjwd.java:23: error:\
    \ cannot find symbol\n                if (countOnes(min) > ones) {\n         \
    \           ^\n  symbol:   method countOnes(int)\n  location: class Problem\n\
    /tmp/tmpnbmgbjwd.java:26: error: cannot find symbol\n                } else if\
    \ (countOnes(min) == ones) {\n                           ^\n  symbol:   method\
    \ countOnes(int)\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        return arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbsm38qiq.java:20)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Collections.sort(arr, (Integer n1, Integer n2) -> {\n            int\
    \ n1Ones = Integer.bitCount(n1);\n            int n2Ones = Integer.bitCount(n2);\n\
    \            if (n1Ones == n2Ones) {\n                return n1 - n2;\n      \
    \      }\n            return n1Ones - n2Ones;\n        });\n        return arr;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2b6jqft5.java:29)\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n\
    \            public int compare(Integer o1, Integer o2) {\n                return\
    \ Integer.bitCount(o1) != Integer.bitCount(o2) ?\n                    Integer.bitCount(o1)\
    \ - Integer.bitCount(o2) : o1 - o2;\n            }\n        });\n        return\
    \ arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx0lro8h0.java:28)\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> res = new ArrayList<Integer>();\n        Integer max_ones\
    \ = 0;\n        ArrayList<ArrayList<Integer>> grouped_ones = new ArrayList<ArrayList<Integer>>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            Integer dec = arr.get(i);\n\
    \            Integer bin = Integer.parseInt(Integer.toBinaryString(dec));\n  \
    \          Integer ones = 0;\n            while (bin > 0) {\n                ones\
    \ += bin % 10;\n                bin /= 10;\n            }\n            if (ones\
    \ > max_ones) max_ones = ones;\n        }\n        for (int i = 0; i <= max_ones;\
    \ i++) {\n            grouped_ones.add(new ArrayList<Integer>());\n        }\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            Integer dec = arr.get(i);\n\
    \            Integer bin = Integer.parseInt(Integer.toBinaryString(dec));\n  \
    \          Integer ones = 0;\n            while (bin > 0) {\n                ones\
    \ += bin % 10;\n                bin /= 10;\n            }\n            grouped_ones.get(ones).add(dec);\n\
    \        }\n        for (int i = 0; i < grouped_ones.size(); i++) {\n        \
    \    Collections.sort(grouped_ones.get(i));\n            for (int j = 0; j < grouped_ones.get(i).size();\
    \ j++) {\n                res.add(grouped_ones.get(i).get(j));\n            }\n\
    \        }\n        return res;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"11111111111111111111111111111110\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.sortArray(tmpll9kl0r8.java:22)\n\tat Problem.main(tmpll9kl0r8.java:53)\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        return new ArrayList<Integer>(\n            arr.stream()\n          \
    \      .map(i -> Pair.with(i, Integer.bitCount(i)))\n                .sorted((a,\
    \ b) ->\n                    a.getValue1() != b.getValue1() ?\n              \
    \          Integer.compare(a.getValue1(), b.getValue1()) :\n                 \
    \       Integer.compare(a.getValue0(), b.getValue0())\n                )\n   \
    \             .map(i -> i.getValue0())\n                .collect(Collectors.toList())\n\
    \        );\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.sortArray(tmp_25hz9i7.java:18)\n\tat Problem.main(tmp_25hz9i7.java:30)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> ones = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ twos = new ArrayList<Integer>();\n        ArrayList<Integer> threes = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> fours = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ fives = new ArrayList<Integer>();\n        ArrayList<Integer> sixes = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> sevens = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ eights = new ArrayList<Integer>();\n        ArrayList<Integer> nines = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> tens = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ elevens = new ArrayList<Integer>();\n        ArrayList<Integer> twelves = new\
    \ ArrayList<Integer>();\n        ArrayList<Integer> thirteens = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> fourteens = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ fifteen = new ArrayList<Integer>();\n        ArrayList<Integer> sixteen = new\
    \ ArrayList<Integer>();\n        ArrayList<Integer> seventeen = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> eighteen = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ nineteen = new ArrayList<Integer>();\n        ArrayList<Integer> twenty = new\
    \ ArrayList<Integer>();\n        ArrayList<Integer> twentyOne = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> twentyTwo = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ twentyThree = new ArrayList<Integer>();\n        ArrayList<Integer> twentyFour\
    \ = new ArrayList<Integer>();\n        ArrayList<Integer> twentyFive = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> twentySix = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ twentySeven = new ArrayList<Integer>();\n        ArrayList<Integer> twentyEight\
    \ = new ArrayList<Integer>();\n        ArrayList<Integer> twentyNine = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> thirty = new ArrayList<Integer>();\n        ArrayList<Integer>\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpubvyxfgp.java:47: error: not a statement\n        ArrayList<Integer>\n\
    \                 ^\n/tmp/tmpubvyxfgp.java:47: error: ';' expected\n        ArrayList<Integer>\n\
    \                          ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // Write your code here.\n        ArrayList<Pair<Integer, Integer>> decBinPairs\
    \ = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n     \
    \       Pair<Integer, Integer> pair = new Pair<Integer, Integer>(arr.get(i), decimalToBinary(arr.get(i)));\n\
    \            decBinPairs.add(pair);\n        }\n        Collections.sort(decBinPairs,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> a, Pair<Integer, Integer> b) {\n\
    \                return a.getValue1().equals(b.getValue1()) ? a.getValue0().compareTo(b.getValue0())\
    \ : a.getValue1().compareTo(b.getValue1());\n            }\n        });\n    \
    \    ArrayList<Integer> result = new ArrayList<>();\n        for (int i = 0; i\
    \ < decBinPairs.size(); i++) {\n            result.add(decBinPairs.get(i).getValue0());\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcbfvxpha.java:20: error: cannot find symbol\n            Pair<Integer,\
    \ Integer> pair = new Pair<Integer, Integer>(arr.get(i), decimalToBinary(arr.get(i)));\n\
    \                                                                            \
    \     ^\n  symbol:   method decimalToBinary(Integer)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        if (arr.size() == 0) {\n            return arr;\n        }\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        ArrayList<Integer> positive = new\
    \ ArrayList<Integer>();\n        ArrayList<Integer> negative = new ArrayList<Integer>();\n\
    \        arr.stream().forEach(e -> {\n            if (e < 0) {\n             \
    \   negative.add(e);\n            } else {\n                positive.add(e);\n\
    \            }\n        });\n        Collections.sort(positive, (a, b) -> {\n\
    \            return Integer.bitCount(a) - Integer.bitCount(b);\n        });\n\
    \        Collections.sort(negative, (a, b) -> {\n            return Integer.bitCount(b)\
    \ - Integer.bitCount(a);\n        });\n        result.addAll(negative);\n    \
    \    result.addAll(positive);\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdk5talab.java:41)\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Pair<Integer, Integer>> ones = new ArrayList<>();\n       \
    \ for (int i = 0; i < arr.size(); i++) {\n            ones.add(new Pair<>(arr.get(i),\
    \ Long.bitCount(arr.get(i))));\n        }\n        ones.sort((a, b) -> (a.getValue1()\
    \ == b.getValue1()) ? a.getValue0().compareTo(b.getValue0()) : a.getValue1().compareTo(b.getValue1()));\n\
    \        ArrayList<Integer> out = new ArrayList<>();\n        for (int i = 0;\
    \ i < ones.size(); i++) {\n            out.add(ones.get(i).getValue0());\n   \
    \     }\n        return out;\n}\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2,\
    \ (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.sortArray(tmpknaaapt8.java:19)\n\tat Problem.main(tmpknaaapt8.java:29)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        arr.forEach(item\
    \ -> {\n            sorted.add(item);\n        });\n        Collections.sort(sorted,\
    \ (a, b) -> {\n            String sa = Integer.toBinaryString(a);\n          \
    \  String sb = Integer.toBinaryString(b);\n            int na = (int) sa.chars().filter(ch\
    \ -> ch == '1').count();\n            int nb = (int) sb.chars().filter(ch -> ch\
    \ == '1').count();\n            if (na == nb) {\n                return a - b;\n\
    \            } else {\n                return na - nb;\n            }\n      \
    \  });\n        return sorted;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kmz7wfa.java:36)\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // Your code here\n        arr.sort(new CustomComparator());\n      \
    \  return arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc0lvx5s7.java:18: error: cannot find symbol\n        arr.sort(new\
    \ CustomComparator());\n                     ^\n  symbol:   class CustomComparator\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>();\n        List<Pair<Integer,\
    \ Integer>> pairList = new ArrayList<Pair<Integer, Integer>>();\n        HashMap<Integer,\
    \ Integer> onesMap = new HashMap<Integer, Integer>();\n        int ones = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            ones = Integer.bitCount(arr.get(i));\n\
    \            onesMap.put(ones, arr.get(i));\n            pairList.add(new Pair<Integer,\
    \ Integer>(ones, arr.get(i)));\n        }\n        Collections.sort(pairList,\
    \ new SortByKey());\n        // pairList.forEach(item -> System.out.println(item.getValue0()\
    \ + \" - \" + item.getValue1()));\n        pairList.forEach(item -> result.add(item.getValue1()));\n\
    \        // result.forEach(item -> System.out.println(item));\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiyog572a.java:26: error: cannot find symbol\n        Collections.sort(pairList,\
    \ new SortByKey());\n                                       ^\n  symbol:   class\
    \ SortByKey\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sortedList = new ArrayList<Integer>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= 0) {\n   \
    \             sortedList.add(arr.get(i));\n            }\n        }\n        Collections.sort(sortedList,\
    \ new Comparator<Integer>() {\n            @Override\n            public int compare(Integer\
    \ integer, Integer t1) {\n                int count1 = Integer.bitCount(integer);\n\
    \                int count2 = Integer.bitCount(t1);\n                if (count1\
    \ < count2) {\n                    return -1;\n                } else if (count1\
    \ > count2) {\n                    return 1;\n                } else {\n     \
    \               return Integer.compare(integer, t1);\n                }\n    \
    \        }\n        });\n        for (int i = 0; i < arr.size(); i++) {\n    \
    \        if (arr.get(i) < 0) {\n                sortedList.add(arr.get(i));\n\
    \            }\n        }\n        return sortedList;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb8mg7puu.java:46)\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        arr.sort(Comparator.comparing(a -> Integer.bitCount(a)));\n        return\
    \ arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn27wb6md.java:21)\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j\
    \ < arr.size() - 1; j++) {\n                if (ones(arr.get(j + 1)) < ones(arr.get(j)))\
    \ {\n                    int temp = arr.get(j);\n                    arr.set(j,\
    \ arr.get(j + 1));\n                    arr.set(j + 1, temp);\n              \
    \  } else if (ones(arr.get(j + 1)) == ones(arr.get(j))) {\n                  \
    \  if (arr.get(j + 1) < arr.get(j)) {\n                        int temp = arr.get(j);\n\
    \                        arr.set(j, arr.get(j + 1));\n                       \
    \ arr.set(j + 1, temp);\n                    }\n                }\n          \
    \  }\n        }\n        return arr;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp222jlpa3.java:19: error: cannot find symbol\n                if\
    \ (ones(arr.get(j + 1)) < ones(arr.get(j))) {\n                    ^\n  symbol:\
    \   method ones(Integer)\n  location: class Problem\n/tmp/tmp222jlpa3.java:19:\
    \ error: cannot find symbol\n                if (ones(arr.get(j + 1)) < ones(arr.get(j)))\
    \ {\n                                           ^\n  symbol:   method ones(Integer)\n\
    \  location: class Problem\n/tmp/tmp222jlpa3.java:23: error: cannot find symbol\n\
    \                } else if (ones(arr.get(j + 1)) == ones(arr.get(j))) {\n    \
    \                       ^\n  symbol:   method ones(Integer)\n  location: class\
    \ Problem\n/tmp/tmp222jlpa3.java:23: error: cannot find symbol\n             \
    \   } else if (ones(arr.get(j + 1)) == ones(arr.get(j))) {\n                 \
    \                                  ^\n  symbol:   method ones(Integer)\n  location:\
    \ class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sorted = new ArrayList<>();\n        ArrayList<Integer>\
    \ zeros = new ArrayList<>();\n        ArrayList<Integer> ones = new ArrayList<>();\n\
    \        ArrayList<Integer> two = new ArrayList<>();\n        ArrayList<Integer>\
    \ three = new ArrayList<>();\n        ArrayList<Integer> four = new ArrayList<>();\n\
    \        ArrayList<Integer> five = new ArrayList<>();\n        ArrayList<Integer>\
    \ six = new ArrayList<>();\n        ArrayList<Integer> seven = new ArrayList<>();\n\
    \        ArrayList<Integer> eight = new ArrayList<>();\n        ArrayList<Integer>\
    \ nine = new ArrayList<>();\n        for (int num : arr) {\n            int count\
    \ = countOnes(num);\n            if (count == 0) {\n                zeros.add(num);\n\
    \            } else if (count == 1) {\n                ones.add(num);\n      \
    \      } else if (count == 2) {\n                two.add(num);\n            }\
    \ else if (count == 3) {\n                three.add(num);\n            } else\
    \ if (count == 4) {\n                four.add(num);\n            } else if (count\
    \ == 5) {\n                five.add(num);\n            } else if (count == 6)\
    \ {\n                six.add(num);\n            } else if (count == 7) {\n   \
    \             seven.add(num);\n            } else if (count == 8) {\n        \
    \        eight.add(num);\n            } else if (count == 9) {\n             \
    \   nine.add(num);\n            }\n        }\n        if (zeros.size() > 0) {\n\
    \            zeros.sort(Comparator.naturalOrder());\n            sorted.addAll(zeros);\n\
    \        }\n        if (ones.size() > 0) {\n            ones.sort(Comparator.naturalOrder());\n\
    \            sorted.addAll(ones);\n        }\n        if (two.size() > 0) {\n\
    \            two.sort(Comparator.naturalOrder());\n            sorted.addAll(two);\n\
    \        }\n        if (three.size() > 0) {\n            three.sort(Compar\n}\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpifa5zq_k.java:65: error: ')' expected\n            three.sort(Compar\n\
    \                             ^\n/tmp/tmpifa5zq_k.java:67: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        return arr.stream()\n                .sorted(Comparator.comparingInt(Problem::countBits).thenComparing(Function.identity()))\n\
    \                .collect(Collectors.toCollection(ArrayList::new));\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2tz8st6u.java:18: error: invalid method reference\n           \
    \     .sorted(Comparator.comparingInt(Problem::countBits).thenComparing(Function.identity()))\n\
    \                                                ^\n  cannot find symbol\n   \
    \ symbol:   method countBits()\n    location: class Problem\n/tmp/tmp2tz8st6u.java:18:\
    \ error: cannot find symbol\n                .sorted(Comparator.comparingInt(Problem::countBits).thenComparing(Function.identity()))\n\
    \                                                                            \
    \      ^\n  symbol:   variable Function\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // your code here\n        return arr;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwc2r0y_w.java:21)\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> res = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ res2 = new ArrayList<Integer>();\n        ArrayList<Integer> res3 = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> res4 = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ res5 = new ArrayList<Integer>();\n        res = getArray(arr, 0);\n        res2\
    \ = getArray(arr, 1);\n        res3 = getArray(arr, 2);\n        res4 = getArray(arr,\
    \ 3);\n        res5 = getArray(arr, 4);\n        arr.clear();\n        arr.addAll(res);\n\
    \        arr.addAll(res2);\n        arr.addAll(res3);\n        arr.addAll(res4);\n\
    \        arr.addAll(res5);\n        return arr;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgtpbohy2.java:22: error: cannot find symbol\n        res = getArray(arr,\
    \ 0);\n              ^\n  symbol:   method getArray(ArrayList<Integer>,int)\n\
    \  location: class Problem\n/tmp/tmpgtpbohy2.java:23: error: cannot find symbol\n\
    \        res2 = getArray(arr, 1);\n               ^\n  symbol:   method getArray(ArrayList<Integer>,int)\n\
    \  location: class Problem\n/tmp/tmpgtpbohy2.java:24: error: cannot find symbol\n\
    \        res3 = getArray(arr, 2);\n               ^\n  symbol:   method getArray(ArrayList<Integer>,int)\n\
    \  location: class Problem\n/tmp/tmpgtpbohy2.java:25: error: cannot find symbol\n\
    \        res4 = getArray(arr, 3);\n               ^\n  symbol:   method getArray(ArrayList<Integer>,int)\n\
    \  location: class Problem\n/tmp/tmpgtpbohy2.java:26: error: cannot find symbol\n\
    \        res5 = getArray(arr, 4);\n               ^\n  symbol:   method getArray(ArrayList<Integer>,int)\n\
    \  location: class Problem\n5 errors\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Pair<Integer, Integer>> arrPairs = new ArrayList<>();\n   \
    \     ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            arrPairs.add(new Pair<Integer, Integer>(countOne(arr.get(i)),\
    \ arr.get(i)));\n        }\n        Collections.sort(arrPairs, new Compare<Integer,\
    \ Integer>());\n        for (int i = 0; i < arrPairs.size(); i++) {\n        \
    \    res.add(arrPairs.get(i).getValue1());\n        }\n        return res;\n}\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp58j4_rfz.java:20: error: cannot find symbol\n            arrPairs.add(new\
    \ Pair<Integer, Integer>(countOne(arr.get(i)), arr.get(i)));\n               \
    \                                     ^\n  symbol:   method countOne(Integer)\n\
    \  location: class Problem\n/tmp/tmp58j4_rfz.java:22: error: cannot find symbol\n\
    \        Collections.sort(arrPairs, new Compare<Integer, Integer>());\n      \
    \                                 ^\n  symbol:   class Compare\n  location: class\
    \ Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Pair<Integer, Integer>> p = new ArrayList<>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            p.add(new Pair<Integer, Integer>(arr.get(i),\
    \ Integer.bitCount(arr.get(i))));\n        }\n        Collections.sort(p, (a,\
    \ b) -> {\n            if (a.getValue1() == b.getValue1()) {\n               \
    \ return a.getValue0() - b.getValue0();\n            }\n            return a.getValue1()\
    \ - b.getValue1();\n        });\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            arr.set(i, p.get(i).getValue0());\n        }\n        return\
    \ arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.sortArray(tmpa6mtxc40.java:19)\n\tat Problem.main(tmpa6mtxc40.java:33)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Integer[] tmp = arr.toArray(new Integer[arr.size()]);\n        Arrays.sort(tmp,\
    \ new Comparator<Integer>() {\n            @Override\n            public int compare(Integer\
    \ o1, Integer o2) {\n                String o1Bin = Integer.toBinaryString(o1);\n\
    \                String o2Bin = Integer.toBinaryString(o2);\n                int\
    \ o1Ones = (int) o1Bin.chars().filter(x -> x == '1').count();\n              \
    \  int o2Ones = (int) o2Bin.chars().filter(x -> x == '1').count();\n         \
    \       if (o1Ones == o2Ones)\n                    return o1.compareTo(o2);\n\
    \                return o1Ones - o2Ones;\n            }\n        });\n       \
    \ return new ArrayList<Integer>(Arrays.asList(tmp));\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp17ru_7h7.java:34)\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> ret = new ArrayList<>();\n        for (int i = 1;\
    \ i <= Integer.MIN_VALUE; i <<= 1) {\n            for (int j = 0; j < arr.size();\
    \ j++) {\n                if ((arr.get(j) & i) != 0) {\n                    ret.add(arr.get(j));\n\
    \                }\n            }\n        }\n        return ret;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdduvrc6g.java:28)\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        if (arr.size() <= 1) return arr;\n        int mid = arr.size() / 2;\n\
    \        ArrayList<Integer> left = new ArrayList<>();\n        ArrayList<Integer>\
    \ right = new ArrayList<>();\n        for (int i = 0; i < mid; i++) {\n      \
    \      left.add(arr.get(i));\n        }\n        for (int i = mid; i < arr.size();\
    \ i++) {\n            right.add(arr.get(i));\n        }\n        return mergeArray(sortArray(left),\
    \ sortArray(right));\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6dz2pxx_.java:27: error: cannot find symbol\n        return mergeArray(sortArray(left),\
    \ sortArray(right));\n               ^\n  symbol:   method mergeArray(ArrayList<Integer>,ArrayList<Integer>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        return arr.stream()\n                .sorted(Comparator\n           \
    \             .comparingInt(x -> Integer.bitCount(x))\n                      \
    \  .thenComparingInt(x -> x))\n                .collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnn8i5by2.java:19: error: incompatible types: Object cannot be converted\
    \ to int\n                        .comparingInt(x -> Integer.bitCount(x))\n  \
    \                                                          ^\n/tmp/tmpnn8i5by2.java:20:\
    \ error: incompatible types: bad return type in lambda expression\n          \
    \              .thenComparingInt(x -> x))\n                                  \
    \             ^\n    Object cannot be converted to int\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // your code here\n        ArrayList<Pair<Integer, Integer>> pairs =\
    \ new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n       \
    \     pairs.add(new Pair<>(Integer.bitCount(arr.get(i)), arr.get(i)));\n     \
    \   }\n        Collections.sort(pairs, (a, b) -> (a.getValue0() == b.getValue0())\
    \ ? a.getValue1() - b.getValue1() : a.getValue0() - b.getValue0());\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        for (int i = 0; i < pairs.size(); i++)\
    \ {\n            result.add(pairs.get(i).getValue1());\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.sortArray(tmppk3f9azk.java:20)\n\tat Problem.main(tmppk3f9azk.java:30)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sorted = new ArrayList<>();\n        Map<Integer,Integer>\
    \ ones = new HashMap<>();\n        Map<Integer,Integer> values = new HashMap<>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            int oneCount = Integer.bitCount(arr.get(i));\n\
    \            if (!ones.containsKey(oneCount)) {\n                ones.put(oneCount,\
    \ 0);\n            }\n            ones.put(oneCount, ones.get(oneCount) + 1);\n\
    \            if (!values.containsKey(oneCount)) {\n                values.put(oneCount,\
    \ new ArrayList<Integer>());\n            }\n            values.get(oneCount).add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < ones.size(); i++) {\n            int oneCount\
    \ = ones.get(i);\n            if (oneCount > 0) {\n                ArrayList<Integer>\
    \ temp = values.get(i);\n                Collections.sort(temp);\n           \
    \     sorted.addAll(temp);\n            }\n        }\n        return sorted;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwyzqpud.java:27: error: incompatible types: ArrayList<Integer>\
    \ cannot be converted to Integer\n                values.put(oneCount, new ArrayList<Integer>());\n\
    \                                     ^\n/tmp/tmpkwyzqpud.java:29: error: cannot\
    \ find symbol\n            values.get(oneCount).add(arr.get(i));\n           \
    \                     ^\n  symbol:   method add(Integer)\n  location: class Integer\n\
    /tmp/tmpkwyzqpud.java:34: error: incompatible types: Integer cannot be converted\
    \ to ArrayList<Integer>\n                ArrayList<Integer> temp = values.get(i);\n\
    \                                                    ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> c = new ArrayList<Integer>();\n        for (int i\
    \ : arr) {\n            if (i < 0) {\n                c.add(i);\n            }\n\
    \        }\n        for (int i : arr) {\n            if (i >= 0) {\n         \
    \       c.add(i);\n            }\n        }\n        return c;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpay0j3jud.java:31)\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // Your code here\n        String[] binaryArray = new String[arr.size()];\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            binaryArray[i] =\
    \ Integer.toBinaryString(arr.get(i));\n        }\n        ArrayList<Pair<Integer,\
    \ String>> binaryPairs = new ArrayList<>();\n        for (int i = 0; i < binaryArray.length;\
    \ i++) {\n            Integer count = 0;\n            for (int j = 0; j < binaryArray[i].length();\
    \ j++) {\n                if (binaryArray[i].charAt(j) == '1') {\n           \
    \         count++;\n                }\n            }\n            binaryPairs.add(new\
    \ Pair<Integer, String>(count, binaryArray[i]));\n        }\n        Collections.sort(binaryPairs,\
    \ new Comparator<Pair<Integer, String>>() {\n            @Override\n         \
    \   public int compare(Pair<Integer, String> o1, Pair<Integer, String> o2) {\n\
    \                if (o1.getValue0().equals(o2.getValue0())) {\n              \
    \      return Integer.compare(Integer.parseInt(o1.getValue1(), 2), Integer.parseInt(o2.getValue1(),\
    \ 2));\n                }\n                return Integer.compare(o1.getValue0(),\
    \ o2.getValue0());\n            }\n        });\n        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        for (int i = 0; i < binaryPairs.size(); i++) {\n\
    \            result.add(Integer.parseInt(binaryPairs.get(i).getValue1(), 2));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.sortArray(tmp0geoub44.java:30)\n\tat Problem.main(tmp0geoub44.java:48)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Tuple> tuples = new ArrayList<>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            tuples.add(getTuple(arr.get(i)));\n    \
    \    }\n        tuples.sort(new Comparator<Tuple>() {\n            @Override\n\
    \            public int compare(Tuple o1, Tuple o2) {\n                if (o1.getValue(0).equals(o2.getValue(0)))\
    \ {\n                    return (int) o1.getValue(1) - (int) o2.getValue(1);\n\
    \                }\n                return (int) o1.getValue(0) - (int) o2.getValue(0);\n\
    \            }\n        });\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            arr.set(i, (int) tuples.get(i).getValue(1));\n        }\n       \
    \ return arr;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7afbt__v.java:19: error: cannot find symbol\n            tuples.add(getTuple(arr.get(i)));\n\
    \                       ^\n  symbol:   method getTuple(Integer)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        return new ArrayList<Integer>(new TreeSet<Integer>(arr));\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphptqi05h.java:20)\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // Your code goes here\n        // Sort each digit in the array in binary\
    \ order\n        // http://stackoverflow.com/questions/4720271/find-a-pair-of-elements-from-an-array-whose-sum-equals-a-given-number\n\
    \        // http://stackoverflow.com/questions/3253297/what-is-the-best-way-to-convert-an-integer-to-binary-in-java\n\
    \        // http://stackoverflow.com/questions/18913233/how-to-convert-decimal-to-binary-java\n\
    \        ArrayList<Pair<Integer, Integer>> list = new ArrayList<Pair<Integer,\
    \ Integer>>();\n        for (int i = 0; i < arr.size(); i++) {\n            String\
    \ bin = Integer.toBinaryString(arr.get(i));\n            int ones = 0;\n     \
    \       for (int j = 0; j < bin.length(); j++) {\n                if (bin.charAt(j)\
    \ == '1') ones++;\n            }\n            list.add(new Pair<Integer, Integer>(ones,\
    \ arr.get(i)));\n        }\n        // Sort binary digits in ascending order\n\
    \        Collections.sort(list, new Comparator<Pair<Integer, Integer>>() {\n \
    \           @Override\n            public int compare(Pair<Integer, Integer> x,\
    \ Pair<Integer, Integer> y) {\n                if (x.getValue0() < y.getValue0())\
    \ {\n                    return -1;\n                } else if (x.getValue0()\
    \ > y.getValue0()) {\n                    return 1;\n                } else {\n\
    \                    if (x.getValue1() < y.getValue1()) {\n                  \
    \      return -1;\n                    } else if (x.getValue1() > y.getValue1())\
    \ {\n                        return 1;\n                    } else {\n       \
    \                 return 0;\n                    }\n                }\n      \
    \      }\n        });\n        // Rebuild array\n        ArrayList<Integer> sorted\
    \ = new ArrayList<Integer>();\n        for (int i = 0; i < list.size(); i++) {\n\
    \            sorted.add(list.get(i).getValue\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjc3kcpd7.java:53: error: ')' expected\n            sorted.add(list.get(i).getValue\n\
    \                                           ^\n/tmp/tmpjc3kcpd7.java:55: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> newList = new ArrayList<>();\n        // for (Integer\
    \ i : arr) {\n        //     newList.add(Integer.toBinaryString(i).length());\n\
    \        // }\n        Collections.sort(arr, (a, b) -> {\n            return Integer.bitCount(a)\
    \ == Integer.bitCount(b) ? a - b : Integer.bitCount(a) - Integer.bitCount(b);\n\
    \        });\n        return arr;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpelqoe6pw.java:28)\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n\
    \            public int compare(Integer o1, Integer o2) {\n                int\
    \ o1Ones = getOnesCount(o1);\n                int o2Ones = getOnesCount(o2);\n\
    \                if (o1Ones != o2Ones) {\n                    return Integer.compare(o1Ones,\
    \ o2Ones);\n                } else {\n                    return Integer.compare(o1,\
    \ o2);\n                }\n            }\n        });\n        return arr;\n}\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxe6na1d7.java:20: error: cannot find symbol\n                int\
    \ o1Ones = getOnesCount(o1);\n                             ^\n  symbol: method\
    \ getOnesCount(Integer)\n/tmp/tmpxe6na1d7.java:21: error: cannot find symbol\n\
    \                int o2Ones = getOnesCount(o2);\n                            \
    \ ^\n  symbol: method getOnesCount(Integer)\n2 errors\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n       \
    \ }\n        Collections.sort(sorted, new Comparator<Integer>() {\n          \
    \  @Override\n            public int compare(Integer a, Integer b) {\n       \
    \         int aBitCount = countBits(a);\n                int bBitCount = countBits(b);\n\
    \                if (aBitCount == bBitCount) {\n                    return a.compareTo(b);\n\
    \                } else {\n                    return aBitCount - bBitCount;\n\
    \                }\n            }\n        });\n        return sorted;\n}\n  \
    \  public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpubklhq1c.java:24: error: cannot find symbol\n                int\
    \ aBitCount = countBits(a);\n                                ^\n  symbol: method\
    \ countBits(Integer)\n/tmp/tmpubklhq1c.java:25: error: cannot find symbol\n  \
    \              int bBitCount = countBits(b);\n                               \
    \ ^\n  symbol: method countBits(Integer)\n2 errors\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // make array of tuples of ones and decimal value\n        ArrayList<Pair<Integer,\
    \ Integer>> pairs = new ArrayList<>();\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            pairs.add(getNumOfOnes(arr.get(i)));\n        }\n      \
    \  // sort pairs by number of ones\n        Collections.sort(pairs, new Comparator<Pair<Integer,\
    \ Integer>>() {\n            @Override\n            public int compare(Pair<Integer,\
    \ Integer> o1, Pair<Integer, Integer> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n\
    \            }\n        });\n        // return list of decimals in order\n   \
    \     ArrayList<Integer> list = new ArrayList<>();\n        for (int i = 0; i\
    \ < pairs.size(); i++) {\n            list.add(pairs.get(i).getValue1());\n  \
    \      }\n        return list;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc924dfvd.java:20: error: cannot find symbol\n            pairs.add(getNumOfOnes(arr.get(i)));\n\
    \                      ^\n  symbol:   method getNumOfOnes(Integer)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> ans = new ArrayList<>();\n        int n = arr.size();\n\
    \        for (int i = 0; i < n; i++) {\n            int tmp = arr.get(i);\n  \
    \          int ones = Integer.bitCount(tmp);\n            ans.add(tmp * 1000 +\
    \ ones);\n        }\n        Collections.sort(ans);\n        for (int i = 0; i\
    \ < n; i++) {\n            ans.set(i, ans.get(i) % 1000);\n        }\n       \
    \ return ans;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq5dlp3w9.java:31)\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // your code goes here\n        System.out.println(arr);\n        int[]\
    \ arr2 = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            arr2[i] = arr.get(i);\n        }\n        int[] ones = new int[arr.size()];\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            String bin = Integer.toBinaryString(arr2[i]);\n\
    \            //System.out.println(bin);\n            int numOnes = 0;\n      \
    \      for (int j = 0; j < bin.length(); j++) {\n                if (bin.charAt(j)\
    \ == '1') {\n                    numOnes++;\n                }\n            }\n\
    \            ones[i] = numOnes;\n        }\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            for (int j = 0; j < arr.size() - 1; j++) {\n           \
    \     if (ones[j] > ones[j + 1]) {\n                    int temp = ones[j];\n\
    \                    ones[j] = ones[j + 1];\n                    ones[j + 1] =\
    \ temp;\n                    temp = arr2[j];\n                    arr2[j] = arr2[j\
    \ + 1];\n                    arr2[j + 1] = temp;\n                }\n        \
    \    }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  for (int j = 0; j < arr.size() - 1; j++) {\n                if (ones[j] ==\
    \ ones[j + 1]) {\n                    if (arr2[j] > arr2[j + 1]) {\n         \
    \               int temp = ones[j];\n                        ones[j] = ones[j\
    \ + 1];\n                        ones[j + 1] = temp;\n                       \
    \ temp = arr2[j];\n                        arr2[j] = arr2[j + 1];\n          \
    \              arr2[j + 1] = temp;\n                    }\n                }\n\
    \            }\n        }\n        ArrayList<Integer> arr3 = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < arr\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd2f2ng37.java:62: error: ';' expected\n        for (int i = 0;\
    \ i < arr\n                               ^\n/tmp/tmpd2f2ng37.java:63: error:\
    \ illegal start of expression\n}\n^\n2 errors\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Tuple2<Integer,\
    \ Integer>> tuples = new ArrayList<Tuple2<Integer, Integer>>();\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n         \
    \   String binary = Integer.toBinaryString(num);\n            int ones = 0;\n\
    \            for (int j = 0; j < binary.length(); j++) {\n                if (binary.charAt(j)\
    \ == '1') {\n                    ones++;\n                }\n            }\n \
    \           tuples.add(new Tuple2<Integer, Integer>(ones, num));\n        }\n\
    \        Collections.sort(tuples, new Comparator<Tuple2<Integer, Integer>>() {\n\
    \            @Override\n            public int compare(Tuple2<Integer, Integer>\
    \ o1, Tuple2<Integer, Integer> o2) {\n                if (o1.getValue0() < o2.getValue0())\
    \ {\n                    return -1;\n                } else if (o1.getValue0()\
    \ > o2.getValue0()) {\n                    return 1;\n                } else {\n\
    \                    if (o1.getValue1() < o2.getValue1()) {\n                \
    \        return -1;\n                    } else if (o1.getValue1() > o2.getValue1())\
    \ {\n                        return 1;\n                    } else {\n       \
    \                 return 0;\n                    }\n                }\n      \
    \      }\n        });\n        for (int i = 0; i < tuples.size(); i++) {\n   \
    \         sorted.add(tuples.get(i).getValue1());\n        }\n        return sorted;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp3m8o1db.java:18: error: cannot find symbol\n        ArrayList<Tuple2<Integer,\
    \ Integer>> tuples = new ArrayList<Tuple2<Integer, Integer>>();\n            \
    \      ^\n  symbol:   class Tuple2\n  location: class Problem\n/tmp/tmpp3m8o1db.java:18:\
    \ error: cannot find symbol\n        ArrayList<Tuple2<Integer, Integer>> tuples\
    \ = new ArrayList<Tuple2<Integer, Integer>>();\n                             \
    \                                      ^\n  symbol:   class Tuple2\n  location:\
    \ class Problem\n/tmp/tmpp3m8o1db.java:28: error: cannot find symbol\n       \
    \     tuples.add(new Tuple2<Integer, Integer>(ones, num));\n                 \
    \          ^\n  symbol:   class Tuple2\n  location: class Problem\n/tmp/tmpp3m8o1db.java:30:\
    \ error: cannot find symbol\n        Collections.sort(tuples, new Comparator<Tuple2<Integer,\
    \ Integer>>() {\n                                                ^\n  symbol:\
    \   class Tuple2\n  location: class Problem\n/tmp/tmpp3m8o1db.java:32: error:\
    \ cannot find symbol\n            public int compare(Tuple2<Integer, Integer>\
    \ o1, Tuple2<Integer, Integer> o2) {\n                               ^\n  symbol:\
    \ class Tuple2\n/tmp/tmpp3m8o1db.java:32: error: cannot find symbol\n        \
    \    public int compare(Tuple2<Integer, Integer> o1, Tuple2<Integer, Integer>\
    \ o2) {\n                                                            ^\n  symbol:\
    \ class Tuple2\n6 errors\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> ans = new ArrayList<Integer>();\n        ans.addAll(arr);\n\
    \        Collections.sort(ans, new Comparator<Integer>() {\n            @Override\n\
    \            public int compare(Integer o1, Integer o2) {\n                int\
    \ o1o = Integer.bitCount(o1);\n                int o2o = Integer.bitCount(o2);\n\
    \                if (o1o == o2o)\n                    return o1 - o2;\n      \
    \          return o1o - o2o;\n            }\n        });\n        return ans;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9_l6nkwb.java:33)\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // Add code here\n        return arr;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjny2q1sg.java:21)\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> b = new ArrayList<>();\n        ArrayList<Integer>\
    \ a = new ArrayList<>();\n        ArrayList<Integer> c = new ArrayList<>();\n\
    \        ArrayList<Integer> d = new ArrayList<>();\n        ArrayList<Integer>\
    \ e = new ArrayList<>();\n        ArrayList<Integer> f = new ArrayList<>();\n\
    \        ArrayList<Integer> g = new ArrayList<>();\n        for (int i : arr)\
    \ {\n            int x = Integer.bitCount(i);\n            if (x == 0) {\n   \
    \             if (i < 0) {\n                    b.add(i);\n                } else\
    \ {\n                    a.add(i);\n                }\n            } else if (x\
    \ == 1) {\n                if (i < 0) {\n                    d.add(i);\n     \
    \           } else {\n                    c.add(i);\n                }\n     \
    \       } else if (x == 2) {\n                if (i < 0) {\n                 \
    \   f.add(i);\n                } else {\n                    e.add(i);\n     \
    \           }\n            } else {\n                if (i < 0) {\n          \
    \          g.add(i);\n                } else {\n                    g.add(i);\n\
    \                }\n            }\n        }\n        Collections.sort(a);\n \
    \       Collections.sort(b);\n        Collections.sort(c);\n        Collections.sort(d);\n\
    \        Collections.sort(e);\n        Collections.sort(f);\n        Collections.sort(g);\n\
    \        Collections.reverse(b);\n        Collections.reverse(d);\n        Collections.reverse(f);\n\
    \        a.addAll(b);\n        a.addAll(c);\n        a.addAll(d);\n        a.addAll(e);\n\
    \        a.addAll(f);\n        a.addAll(g);\n        return a;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo5li43lm.java:72)\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // Your code here.\n        ArrayList<Integer> result = new ArrayList<>();\n\
    \        ArrayList<Integer> s = new ArrayList<>();\n        ArrayList<Integer>\
    \ z = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n   \
    \         int count = 0;\n            int num = arr.get(i);\n            if (num\
    \ == 0) {\n                z.add(num);\n            } else {\n               \
    \ while (num > 0) {\n                    count += num % 2;\n                 \
    \   num /= 2;\n                }\n                s.add(count);\n            }\n\
    \        }\n        Collections.sort(s);\n        // s.forEach(e -> System.out.println(e));\n\
    \        for (int i = 0; i < s.size(); i++) {\n            int num = s.get(i);\n\
    \            int c = 0;\n            while (c < arr.size()) {\n              \
    \  int count = 0;\n                int n = arr.get(c);\n                if (n\
    \ != 0) {\n                    while (n > 0) {\n                        count\
    \ += n % 2;\n                        n /= 2;\n                    }\n        \
    \            if (count == num) {\n                        result.add(arr.get(c));\n\
    \                        arr.set(c, 0);\n                        break;\n    \
    \                }\n                }\n                c++;\n            }\n \
    \       }\n        result.addAll(z);\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb12elmz3.java:60)\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // takes the array, converts each to binary and puts the number of ones\
    \ in front\n        // and sorts it by the number of ones, then removes the number\
    \ of ones and returns\n        ArrayList<Integer> bin = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            bin.add(arr.get(i));\n\
    \        }\n        Collections.sort(bin, new Comparator<Integer>() {\n      \
    \      public int compare(Integer i1, Integer i2) {\n                int n1 =\
    \ countBinaryOnes(i1);\n                int n2 = countBinaryOnes(i2);\n      \
    \          return n1 < n2 ? -1 : n1 > n2 ? 1 : i1.compareTo(i2);\n           \
    \ }\n        });\n        return bin;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpas9rrege.java:25: error: cannot find symbol\n                int\
    \ n1 = countBinaryOnes(i1);\n                         ^\n  symbol: method countBinaryOnes(Integer)\n\
    /tmp/tmpas9rrege.java:26: error: cannot find symbol\n                int n2 =\
    \ countBinaryOnes(i2);\n                         ^\n  symbol: method countBinaryOnes(Integer)\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> arr1 = (ArrayList<Integer>) arr.clone();\n       \
    \ arr1.sort(new Comparator<Integer>() {\n            @Override\n            public\
    \ int compare(Integer o1, Integer o2) {\n                return Integer.compare(Integer.bitCount(o1),\
    \ Integer.bitCount(o2));\n            }\n        });\n        return arr1;\n}\n\
    \    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjsi5v1jy.java:27)\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Comparator<Integer> c = new Comparator<Integer>() {\n            public\
    \ int compare(Integer o1, Integer o2) {\n                int c1 = countOnes(o1);\n\
    \                int c2 = countOnes(o2);\n                if (c1 == c2) return\
    \ o1.compareTo(o2);\n                return c1 - c2;\n            }\n        };\n\
    \        Collections.sort(arr, c);\n        return arr;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsa3g_goi.java:19: error: cannot find symbol\n                int\
    \ c1 = countOnes(o1);\n                         ^\n  symbol: method countOnes(Integer)\n\
    /tmp/tmpsa3g_goi.java:20: error: cannot find symbol\n                int c2 =\
    \ countOnes(o2);\n                         ^\n  symbol: method countOnes(Integer)\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ sortedDec = new ArrayList<Integer>();\n        ArrayList<Integer> res = new\
    \ ArrayList<Integer>();\n        ArrayList<Integer> resDec = new ArrayList<Integer>();\n\
    \        int oneCount = 0;\n        int decCount = 0;\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) < 0) {\n                continue;\n\
    \            }\n            oneCount = Integer.bitCount(arr.get(i));\n       \
    \     decCount = arr.get(i);\n            if (sorted.contains(oneCount)) {\n \
    \               sortedDec.add(sorted.indexOf(oneCount), decCount);\n         \
    \   } else {\n                sorted.add(oneCount);\n                sortedDec.add(decCount);\n\
    \            }\n        }\n        int index = 0;\n        while (index < sorted.size())\
    \ {\n            res.add(sorted.get(index));\n            index++;\n        }\n\
    \        index = 0;\n        while (index < sortedDec.size()) {\n            resDec.add(sortedDec.get(index));\n\
    \            index++;\n        }\n        return resDec;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxpnst9ed.java:49)\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // First: Convert each number in the array to a Pair.\n        // Element\
    \ 0 of the Pair will contain the number's binary count.\n        // Element 1\
    \ of the Pair will contain the number's decimal count.\n        ArrayList<Pair<Integer,\
    \ Integer>> pairs = new ArrayList<Pair<Integer, Integer>>();\n        arr.forEach(x\
    \ -> pairs.add(new Pair<Integer, Integer>(countBinary(x), x)));\n        // Second:\
    \ Sort the Pair array\n        // If a pair's binary count is less than another\
    \ pair's binary count,\n        // the first pair is less than the second pair.\n\
    \        // If a pair's binary count is equal to another pair's binary count,\n\
    \        // the first pair is less than the second pair if the first pair's decimal\n\
    \        // count is less than the second pair's decimal count.\n        Collections.sort(pairs,\
    \ new Comparator<Pair<Integer, Integer>>() {\n            @Override\n        \
    \    public int compare(Pair<Integer, Integer> p1, Pair<Integer, Integer> p2)\
    \ {\n                if (p1.getValue0() < p2.getValue0()) {\n                \
    \    return -1;\n                } else if (p1.getValue0() > p2.getValue0()) {\n\
    \                    return 1;\n                } else {\n                   \
    \ if (p1.getValue1() < p2.getValue1()) {\n                        return -1;\n\
    \                    } else if (p1.getValue1() > p2.getValue1()) {\n         \
    \               return 1;\n                    } else {\n                    \
    \    return 0;\n                    }\n                }\n            }\n    \
    \    });\n        // Third: Convert the Pair array to an Integer array\n     \
    \   // Return the array of Integers\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
    \        pairs.forEach(x -> sorted.add(x.getValue1()));\n        return sorted;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7nbhskdu.java:21: error: cannot find symbol\n        arr.forEach(x\
    \ -> pairs.add(new Pair<Integer, Integer>(countBinary(x), x)));\n            \
    \                                                  ^\n  symbol:   method countBinary(Integer)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // write your code here\n        return arr;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps0j8hdpy.java:21)\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        int n = arr.size();\n        Integer[] result = new Integer[n];\n   \
    \     for (int i = 0; i < n; i++) {\n            String binary = Integer.toBinaryString(arr.get(i));\n\
    \            int count = 0;\n            for (int j = 0; j < binary.length();\
    \ j++) {\n                if (binary.charAt(j) == '1') {\n                   \
    \ count++;\n                }\n            }\n            result[i] = arr.get(i);\n\
    \            arr.set(i, count);\n        }\n        ArrayList<Integer> copy =\
    \ new ArrayList<>(arr);\n        Arrays.sort(arr.toArray());\n        ArrayList<Integer>\
    \ result2 = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n      \
    \      int max = Collections.max(copy);\n            int maxIndex = copy.indexOf(max);\n\
    \            int count = 0;\n            for (int j = 0; j < arr.size(); j++)\
    \ {\n                if (arr.get(j) == max) {\n                    if (count ==\
    \ 0) {\n                        result2.add(result[maxIndex]);\n             \
    \           copy.set(maxIndex, -1);\n                        arr.remove(j);\n\
    \                        count++;\n                    }\n                }\n\
    \            }\n        }\n        return result2;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9pjym522.java:51)\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> temp = new ArrayList<Integer>();\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            temp.add(numberOfOnes(arr.get(i)));\n\
    \        }\n        Integer[] order = insertionSort(temp);\n        return insertionSort2(order,\
    \ arr);\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptct9v2s2.java:19: error: cannot find symbol\n            temp.add(numberOfOnes(arr.get(i)));\n\
    \                     ^\n  symbol:   method numberOfOnes(Integer)\n  location:\
    \ class Problem\n/tmp/tmptct9v2s2.java:21: error: cannot find symbol\n       \
    \ Integer[] order = insertionSort(temp);\n                          ^\n  symbol:\
    \   method insertionSort(ArrayList<Integer>)\n  location: class Problem\n/tmp/tmptct9v2s2.java:22:\
    \ error: cannot find symbol\n        return insertionSort2(order, arr);\n    \
    \           ^\n  symbol:   method insertionSort2(Integer[],ArrayList<Integer>)\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> onesList = arr.stream().map(x -> BigInteger.valueOf(x).bitCount()).collect(Collectors.toCollection(ArrayList::new));\n\
    \        ArrayList<Integer> sortedOnesList = new ArrayList<>(onesList);\n    \
    \    Collections.sort(sortedOnesList);\n        Map<Integer, Integer> onesMap\
    \ = onesList.stream().distinct().collect(Collectors.toMap(x -> x, x -> 0));\n\
    \        int num = 0;\n        for (int i = 0; i < sortedOnesList.size(); i++)\
    \ {\n            if (onesMap.get(sortedOnesList.get(i)) == 0) {\n            \
    \    onesMap.put(sortedOnesList.get(i), num);\n                num++;\n      \
    \      }\n        }\n        for (int i = 0; i < onesList.size(); i++) {\n   \
    \         onesList.set(i, onesMap.get(onesList.get(i)));\n        }\n        ArrayList<Integer>\
    \ res = new ArrayList<>();\n        ArrayList<Integer> copy = new ArrayList<>(arr);\n\
    \        while (copy.size() > 0) {\n            int min = Collections.min(copy);\n\
    \            int minOne = onesList.get(arr.indexOf(min));\n            ArrayList<Integer>\
    \ temp = new ArrayList<>();\n            for (int i = 0; i < arr.size(); i++)\
    \ {\n                if (onesList.get(i) == minOne) {\n                    temp.add(arr.get(i));\n\
    \                }\n            }\n            temp.sort(Integer::compareTo);\n\
    \            res.addAll(temp);\n            copy.removeAll(temp);\n        }\n\
    \        return res;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2h_ie5uq.java:50)\n"
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> sorted = new ArrayList<>();\n        ArrayList<Integer>\
    \ negative = new ArrayList<>();\n        ArrayList<Integer> positive = new ArrayList<>();\n\
    \        for (int i : arr) {\n            if (i >= 0) {\n                positive.add(i);\n\
    \            } else {\n                negative.add(i);\n            }\n     \
    \   }\n        // sorting positive list in binary order\n        Collections.sort(positive,\
    \ new Comparator<Integer>() {\n            @Override\n            public int compare(Integer\
    \ integer, Integer t1) {\n                return Integer.bitCount(integer) - Integer.bitCount(t1);\n\
    \            }\n        });\n        Collections.sort(negative, new Comparator<Integer>()\
    \ {\n            @Override\n            public int compare(Integer integer, Integer\
    \ t1) {\n                return Integer.bitCount(t1) - Integer.bitCount(integer);\n\
    \            }\n        });\n        for (int i : positive) {\n            sorted.add(i);\n\
    \        }\n        for (int i : negative) {\n            sorted.add(i);\n   \
    \     }\n        return sorted;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5jco6z9v.java:49)\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // number of ones is saved as a key in the HashMap\n        // value\
    \ is an ArrayList of all numbers that have a specific number of ones in their\
    \ binary representation\n        HashMap<Integer, ArrayList<Integer>> map = new\
    \ HashMap<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int\
    \ number = arr.get(i);\n            int numberOfOnes = numberOfOnes(number);\n\
    \            if (map.containsKey(numberOfOnes)) {\n                ArrayList<Integer>\
    \ list = map.get(numberOfOnes);\n                list.add(number);\n         \
    \       map.put(numberOfOnes, list);\n            } else {\n                ArrayList<Integer>\
    \ list = new ArrayList<>();\n                list.add(number);\n             \
    \   map.put(numberOfOnes, list);\n            }\n        }\n        // sort the\
    \ HashMap by key\n        Object[] array = map.entrySet().toArray();\n       \
    \ Arrays.sort(array, new Comparator() {\n            public int compare(Object\
    \ o1, Object o2) {\n                return ((Map.Entry<Integer, ArrayList<Integer>>)\
    \ o1).getKey()\n                        .compareTo(((Map.Entry<Integer, ArrayList<Integer>>)\
    \ o2).getKey());\n            }\n        });\n        // put all sorted numbers\
    \ from the HashMap into an ArrayList\n        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        for (Object e : array) {\n            ArrayList<Integer>\
    \ list = ((Map.Entry<Integer, ArrayList<Integer>>) e).getValue();\n          \
    \  Collections.sort(list);\n            for (int i = 0; i < list.size(); i++)\
    \ {\n                result.add(list.get(i));\n            }\n        }\n    \
    \    return result;\n}\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)3, (int)5)))));\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2, (int)-3,\
    \ (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeck5ajyp.java:22: error: cannot find symbol\n            int numberOfOnes\
    \ = numberOfOnes(number);\n                               ^\n  symbol:   method\
    \ numberOfOnes(int)\n  location: class Problem\nNote: /tmp/tmpeck5ajyp.java uses\
    \ unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Pair<Integer, Integer>> binaryToArr = new ArrayList<>();\n\
    \        ArrayList<Integer> sortedArr = new ArrayList<>();\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            if (arr.get(i) < 0) {\n           \
    \     sortedArr.add(arr.get(i));\n            } else {\n                String\
    \ binary = Integer.toBinaryString(arr.get(i));\n                int numOnes =\
    \ 0;\n                for (int j = 0; j < binary.length(); j++) {\n          \
    \          if (binary.charAt(j) == '1') {\n                        numOnes++;\n\
    \                    }\n                }\n                binaryToArr.add(new\
    \ Pair<>(numOnes, arr.get(i)));\n            }\n        }\n        binaryToArr.sort(new\
    \ Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public\
    \ int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n      \
    \          if (o1.getValue0() > o2.getValue0()) {\n                    return\
    \ 1;\n                } else if (o1.getValue0() < o2.getValue0()) {\n        \
    \            return -1;\n                } else {\n                    if (o1.getValue1()\
    \ > o2.getValue1()) {\n                        return 1;\n                   \
    \ } else if (o1.getValue1() < o2.getValue1()) {\n                        return\
    \ -1;\n                    } else {\n                        return 0;\n     \
    \               }\n                }\n            }\n        });\n        for\
    \ (int i = 0; i < binaryToArr.size(); i++) {\n            sortedArr.add(binaryToArr.get(i).getValue1());\n\
    \        }\n        return sortedArr;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\
    \tat Problem.sortArray(tmpmzbnm3h9.java:30)\n\tat Problem.main(tmpmzbnm3h9.java:57)\n\
    Caused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\n\
    \tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\n\
    \tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\n\t... 2\
    \ more\n"
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // do something with input\n        ArrayList<Integer> sorted = new ArrayList<>();\n\
    \        int pos = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      sorted.add(arr.get(i));\n        }\n        while (pos < sorted.size())\
    \ {\n            int min = sorted.get(pos);\n            int minIndex = pos;\n\
    \            for (int i = pos; i < sorted.size(); i++) {\n                // find\
    \ min\n                if (countBits(sorted.get(i)) < countBits(min)) {\n    \
    \                min = sorted.get(i);\n                    minIndex = i;\n   \
    \             } else if (countBits(sorted.get(i)) == countBits(min)) {\n     \
    \               if (sorted.get(i) < min) {\n                        min = sorted.get(i);\n\
    \                        minIndex = i;\n                    }\n              \
    \  }\n            }\n            // swap min and pos\n            int temp = sorted.get(pos);\n\
    \            sorted.set(pos, min);\n            sorted.set(minIndex, temp);\n\
    \            pos++;\n        }\n        return sorted;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqk4d93ie.java:28: error: cannot find symbol\n                if\
    \ (countBits(sorted.get(i)) < countBits(min)) {\n                    ^\n  symbol:\
    \   method countBits(Integer)\n  location: class Problem\n/tmp/tmpqk4d93ie.java:28:\
    \ error: cannot find symbol\n                if (countBits(sorted.get(i)) < countBits(min))\
    \ {\n                                               ^\n  symbol:   method countBits(int)\n\
    \  location: class Problem\n/tmp/tmpqk4d93ie.java:31: error: cannot find symbol\n\
    \                } else if (countBits(sorted.get(i)) == countBits(min)) {\n  \
    \                         ^\n  symbol:   method countBits(Integer)\n  location:\
    \ class Problem\n/tmp/tmpqk4d93ie.java:31: error: cannot find symbol\n       \
    \         } else if (countBits(sorted.get(i)) == countBits(min)) {\n         \
    \                                              ^\n  symbol:   method countBits(int)\n\
    \  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // write your code here\n        Collections.sort(arr, new Comparator<Integer>()\
    \ {\n            @Override\n            public int compare(Integer o1, Integer\
    \ o2) {\n                int c1 = Integer.bitCount(o1);\n                int c2\
    \ = Integer.bitCount(o2);\n                if (c1 < c2) return -1;\n         \
    \       if (c1 > c2) return 1;\n                return o1 - o2;\n            }\n\
    \        });\n        return arr;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5,\
    \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpexyc7y54.java:32)\n"
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        // your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> positive = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ negative = new ArrayList<Integer>();\n        ArrayList<Integer> zeros = new\
    \ ArrayList<Integer>();\n        ArrayList<Integer> ones = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> twos = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ threes = new ArrayList<Integer>();\n        ArrayList<Integer> fours = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> fives = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ sixes = new ArrayList<Integer>();\n        ArrayList<Integer> sevens = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> eights = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ nines = new ArrayList<Integer>();\n        ArrayList<Integer> ten = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> eleven = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ twelve = new ArrayList<Integer>();\n        ArrayList<Integer> thirteen = new\
    \ ArrayList<Integer>();\n        ArrayList<Integer> fourteen = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> fifteen = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ sixteen = new ArrayList<Integer>();\n        ArrayList<Integer> seventeen =\
    \ new ArrayList<Integer>();\n        ArrayList<Integer> eighteen = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> nineteen = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ twenty = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (arr.get(i) < 0) {\n                negative.add(arr.get(i));\n\
    \            } else if (arr.get(i) > 0) {\n                positive.add(arr.get(i));\n\
    \            } else {\n                zeros.add(arr.get(i));\n            }\n\
    \        }\n        negative.sort(Collections.reverseOrder());\n        positive.sort\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptqi4t2rx.java:52: error: not a statement\n        positive.sort\n\
    \                ^\n/tmp/tmptqi4t2rx.java:52: error: ';' expected\n        positive.sort\n\
    \                     ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        ArrayList<Integer> ret = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ sorted = new ArrayList<Integer>();\n        HashMap<Integer, Integer> h = new\
    \ HashMap<Integer, Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            String s = Integer.toBinaryString(arr.get(i));\n            char[]\
    \ c = s.toCharArray();\n            int count = 0;\n            for (int j = 0;\
    \ j < c.length; j++) {\n                if (c[j] == '1')\n                   \
    \ count++;\n            }\n            h.put(arr.get(i), count);\n        }\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            int max = Collections.max(h.values());\n\
    \            for (int k : h.keySet()) {\n                if (h.get(k) == max)\
    \ {\n                    sorted.add(k);\n                    break;\n        \
    \        }\n            }\n            for (int j = 0; j < arr.size(); j++) {\n\
    \                if (h.get(arr.get(j)) == max) {\n                    h.put(arr.get(j),\
    \ -1);\n                }\n            }\n        }\n        return sorted;\n\
    }\n    public static void main(String[] args) {\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)5, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq46hjrnf.java:47)\n"
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6])\
    \ == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3,\
    \ 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n\
    \        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n\
    \            public int compare(Integer a, Integer b) {\n                return\
    \ (Integer.bitCount(a) > Integer.bitCount(b)) ? 1 : -1;\n            }\n     \
    \   });\n        return arr;\n}\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1, (int)5, (int)2,\
    \ (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)3, (int)5)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)-2,\
    \ (int)-3, (int)-4, (int)-5, (int)-6)))).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-2, (int)-6, (int)-5, (int)-3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)0, (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)4, (int)3)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList()))).equals((new\
    \ ArrayList<Integer>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)5, (int)77, (int)4, (int)5, (int)3, (int)5, (int)7, (int)2, (int)3, (int)4)))).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)4, (int)4, (int)3, (int)3,\
    \ (int)5, (int)5, (int)5, (int)7, (int)77)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)3,\
    \ (int)6, (int)44, (int)12, (int)32, (int)5)))).equals((new ArrayList<Integer>(Arrays.asList((int)32,\
    \ (int)3, (int)5, (int)6, (int)12, (int)44)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    assert(sortArray((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)4, (int)8, (int)16, (int)32)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt85ttjut.java:26)\n"
  stdout: ''
  timestamp: 1660011309
