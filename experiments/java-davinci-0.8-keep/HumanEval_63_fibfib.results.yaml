language: java
name: HumanEval_63_fibfib
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        int[] memo = new int[n + 1];\n\
    \        memo[0] = 0;\n        memo[1] = 0;\n        memo[2] = 1;\n        return\
    \ fibfib(n, memo);\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc4ge2f65.java:35: error: method fibfib in class Problem cannot\
    \ be applied to given types;\n        return fibfib(n, memo);\n              \
    \ ^\n  required: int\n  found:    int,int[]\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int a = 0;\n        int b = 0;\n        int c =\
    \ 1;\n        int d = 0;\n        if (n == 0) {\n            return a;\n     \
    \   }\n        if (n == 1) {\n            return b;\n        }\n        if (n\
    \ == 2) {\n            return c;\n        }\n        for (int i = 3; i <= n; i++)\
    \ {\n            d = a + b + c;\n            a = b;\n            b = c;\n    \
    \        c = d;\n        }\n        return d;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return -1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp7rv956j.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        throw new RuntimeException(\"Not implemented\"\
    );\n}\n    public static void main(String[] args) {\n    assert(fibfib((2)) ==\
    \ (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n  \
    \  assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.fibfib(tmpu916j4gd.java:22)\n\tat Problem.main(tmpu916j4gd.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int[] fibfib = new int[n+1];\n        fibfib[0]\
    \ = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        for (int i = 3;\
    \ i <= n; i++) {\n            fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n\
    \        }\n        return fibfib[n];\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 2 out of bounds for length 2\n\tat Problem.fibfib(tmpwkgwi7ty.java:25)\n\
    \tat Problem.main(tmpwkgwi7ty.java:33)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n <= 1) return 0;\n        else if (n == 2)\
    \ return 1;\n        else return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    \    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        int prev = 0;\n        int prevprev\
    \ = 0;\n        int prevprevprev = 1;\n        int ans = 1;\n        for (int\
    \ i = 2; i < n; i++) {\n            ans = prev + prevprev + prevprevprev;\n  \
    \          prevprevprev = prevprev;\n            prevprev = prev;\n          \
    \  prev = ans;\n        }\n        return ans;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpesg86pf0.java:40)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n <= 1) return 0;\n        if (n == 2) return\
    \ 1;\n        int[] dp = new int[n+1];\n        dp[0] = 0;\n        dp[1] = 0;\n\
    \        dp[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            dp[i]\
    \ = dp[i-1] + dp[i-2] + dp[i-3];\n        }\n        return dp[n];\n}\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        switch (n) {\n            case 0:\n           \
    \     return 0;\n            case 1:\n                return 0;\n            case\
    \ 2:\n                return 1;\n            default:\n                return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        int a = 0;\n        int b = 0;\n\
    \        int c = 1;\n        int sum = 0;\n        for (int i = 3; i <= n; i++)\
    \ {\n            sum = a + b + c;\n            a = b;\n            b = c;\n  \
    \          c = sum;\n        }\n        return sum;\n}\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7o8muorp.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        throw new UnsupportedOperationException(\"TODO\"\
    );\n}\n    public static void main(String[] args) {\n    assert(fibfib((2)) ==\
    \ (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n  \
    \  assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: TODO\n\
    \tat Problem.fibfib(tmpf539lo1p.java:22)\n\tat Problem.main(tmpf539lo1p.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // Your code here.\n        return -1;\n}\n   \
    \ public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaftto45e.java:26)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n      // Write your code here.\n      int a = 0;\n    \
    \  int b = 0;\n      int c = 1;\n      for (int i = 2; i <= n; i++) {\n      \
    \  int d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n      }\n\
    \      return c;\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp82zd8la7.java:36)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        int ans = 0;\n        int a = 0;\n\
    \        int b = 0;\n        int c = 1;\n        for (int i = 3; i <= n; i++)\
    \ {\n            ans = a + b + c;\n            a = b;\n            b = c;\n  \
    \          c = ans;\n        }\n        return ans;\n}\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        int a = 0;\n        int b = 0;\n\
    \        int c = 1;\n        int sum = 0;\n        for (int i = 3; i <= n; i++)\
    \ {\n            sum = a + b + c;\n            a = b;\n            b = c;\n  \
    \          c = sum;\n        }\n        return sum;\n}\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7o8muorp.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n\
    \        if (n == 2) {\n            return 1;\n        }\n        int dp[] = new\
    \ int[n+1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 1;\n    \
    \    for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n\
    \        }\n        return dp[n];\n}\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5))\
    \ == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n\
    \    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7o8muorp.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int[] fibfibs = new int[3];\n        fibfibs[0]\
    \ = 0;\n        fibfibs[1] = 0;\n        fibfibs[2] = 1;\n        if (n <= 2)\
    \ {\n            return fibfibs[n];\n        }\n        for (int i = 3; i <= n;\
    \ i++) {\n            int curr = fibfibs[0] + fibfibs[1] + fibfibs[2];\n     \
    \       fibfibs[0] = fibfibs[1];\n            fibfibs[1] = fibfibs[2];\n     \
    \       fibfibs[2] = curr;\n        }\n        return fibfibs[2];\n}\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        int f0 = 0;\n        int f1 = 0;\n\
    \        int f2 = 1;\n        int result = 0;\n        for (int i = 3; i <= n;\
    \ i++) {\n            result = f0 + f1 + f2;\n            f0 = f1;\n         \
    \   f1 = f2;\n            f2 = result;\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7o8muorp.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int a = 0;\n        int b = 0;\n        int c =\
    \ 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = c;\n    \
    \        c = a + b + c;\n            a = b;\n            b = temp;\n        }\n\
    \        return c;\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr1tzljug.java:35)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        int[] fibs = new int[n];\n      \
    \  fibs[0] = 0;\n        fibs[1] = 0;\n        fibs[2] = 1;\n        for (int\
    \ i = 3; i < n; i++) {\n            fibs[i] = fibs[i-1] + fibs[i-2] + fibs[i-3];\n\
    \        }\n        return fibs[n-1];\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpayiytrjg.java:37)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // TODO\n        return 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2pz2or9h.java:26)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // I haven't checked whether this is efficient.\
    \ But it's a lot more efficient than a recursive solution!\n        int n1 = 0;\n\
    \        int n2 = 0;\n        int n3 = 1;\n        int sum = n1 + n2 + n3;\n \
    \       for (int i = 3; i <= n; i++) {\n            n1 = n2;\n            n2 =\
    \ n3;\n            n3 = sum;\n            sum = n1 + n2 + n3;\n        }\n   \
    \     return sum;\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpggtzsmur.java:37)\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int dp[] = new int[n+1];\n        dp[0] = 0;\n\
    \        dp[1] = 0;\n        dp[2] = 1;\n        for(int i = 3; i <= n; i++) {\n\
    \            dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n        }\n        return dp[n];\n\
    }\n    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 2 out of bounds for length 2\n\tat Problem.fibfib(tmpgxim_1ew.java:25)\n\
    \tat Problem.main(tmpgxim_1ew.java:33)\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7o8muorp.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n < 2) return 0;\n        int f0 = 0, f1 =\
    \ 0, f2 = 1;\n        for (int i = 3; i <= n; i++) {\n            int f3 = f0\
    \ + f1 + f2;\n            f0 = f1;\n            f1 = f2;\n            f2 = f3;\n\
    \        }\n        return f2;\n}\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5))\
    \ == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n\
    \    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011693
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n < 2) {\n            return 0;\n        }\n\
    \        if (n == 2) {\n            return 1;\n        }\n        int l1 = 0;\n\
    \        int l2 = 0;\n        int l3 = 1;\n        int cur = 0;\n        for (int\
    \ i = 3; i <= n; i++) {\n            cur = l1 + l2 + l3;\n            l1 = l2;\n\
    \            l2 = l3;\n            l3 = cur;\n        }\n        return cur;\n\
    }\n    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int first = 0;\n        int second = 0;\n     \
    \   int third = 1;\n        int result = 0;\n        for (int i = 3; i <= n; i++)\
    \ {\n            result = first + second + third;\n            first = second;\n\
    \            second = third;\n            third = result;\n        }\n       \
    \ return result;\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvt13swu8.java:35)\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int a = 0;\n        int b = 0;\n        int c =\
    \ 1;\n        for (int i = 2; i <= n; i++) {\n            int d = a + b + c;\n\
    \            a = b;\n            b = c;\n            c = d;\n        }\n     \
    \   return c;\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdukzc1t7.java:35)\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n <= 1) return 0;\n        if (n == 2) return\
    \ 1;\n        int prev = 0;\n        int prev2 = 0;\n        int prev3 = 1;\n\
    \        int curr = 1;\n        for (int i = 3; i <= n; i++) {\n            prev\
    \ = prev2;\n            prev2 = prev3;\n            prev3 = curr;\n          \
    \  curr = prev + prev2 + prev3;\n        }\n        return curr;\n}\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6orjs2w0.java:39)\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        throw new RuntimeException(\"not implemented\"\
    );\n}\n    public static void main(String[] args) {\n    assert(fibfib((2)) ==\
    \ (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n  \
    \  assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: not implemented\n\
    \tat Problem.fibfib(tmppkom7t5f.java:22)\n\tat Problem.main(tmppkom7t5f.java:25)\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int[] ans = new int[n + 1];\n        ans[0] = 0;\n\
    \        ans[1] = 0;\n        ans[2] = 1;\n        for (int i = 3; i <= n; i++)\
    \ {\n            ans[i] = ans[i - 1] + ans[i - 2] + ans[i - 3];\n        }\n \
    \       return ans[n];\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 2 out of bounds for length 2\n\tat Problem.fibfib(tmp34yh8t8t.java:25)\n\
    \tat Problem.main(tmp34yh8t8t.java:33)\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        throw new RuntimeException(\"Not implemented\"\
    );\n}\n    public static void main(String[] args) {\n    assert(fibfib((2)) ==\
    \ (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n  \
    \  assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.fibfib(tmpu916j4gd.java:22)\n\tat Problem.main(tmpu916j4gd.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // TODO: Write your code here\n        return 0;\n\
    }\n    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7w3zwpvf.java:26)\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n\
    \        if (n == 2) {\n            return 1;\n        }\n        int[] f = new\
    \ int[n + 1];\n        f[0] = 0;\n        f[1] = 0;\n        f[2] = 1;\n     \
    \   for (int i = 3; i <= n; i++) {\n            f[i] = f[i - 1] + f[i - 2] + f[i\
    \ - 3];\n        }\n        return f[n];\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011693
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int[] dp = new int[n+1];\n        for (int i =\
    \ 0; i <= n; i++) {\n            if (i == 0) {\n                dp[i] = 0;\n \
    \           } else if (i == 1) {\n                dp[i] = 0;\n            } else\
    \ if (i == 2) {\n                dp[i] = 1;\n            } else {\n          \
    \      dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n            }\n        }\n      \
    \  return dp[n];\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011693
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n\
    \        if (n == 2) {\n            return 1;\n        }\n        int prev = 1;\n\
    \        int prevPrev = 0;\n        int prevPrevPrev = 0;\n        int curr =\
    \ 1;\n        for (int i = 3; i <= n; i++) {\n            curr = prev + prevPrev\
    \ + prevPrevPrev;\n            prevPrevPrev = prevPrev;\n            prevPrev\
    \ = prev;\n            prev = curr;\n        }\n        return curr;\n}\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // Write code here.\n        int[] fib = new int[n+1];\n\
    \        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for(int\
    \ i = 3; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n\
    \        }\n        return fib[n];\n}\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5))\
    \ == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n\
    \    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 2 out of bounds for length 2\n\tat Problem.fibfib(tmp01ojvf5i.java:26)\n\
    \tat Problem.main(tmp01ojvf5i.java:34)\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7o8muorp.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        if (n == 3) return 1;\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        throw new RuntimeException(\"Not Implemented\"\
    );\n}\n    public static void main(String[] args) {\n    assert(fibfib((2)) ==\
    \ (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n  \
    \  assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not Implemented\n\
    \tat Problem.fibfib(tmppdq79tpe.java:22)\n\tat Problem.main(tmppdq79tpe.java:25)\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        int prev3 = 0;\n        int prev2\
    \ = 0;\n        int prev1 = 1;\n        int current = prev1 + prev2 + prev3;\n\
    \        for (int i = 3; i < n; i++) {\n            prev3 = prev2;\n         \
    \   prev2 = prev1;\n            prev1 = current;\n            current = prev1\
    \ + prev2 + prev3;\n        }\n        return current;\n}\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011693
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n\t    if (n == 0) return 0;\n\t    if (n == 1) return 0;\n\
    \t    if (n == 2) return 1;\n\t    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return -1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp7rv956j.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        int a = 0;\n        int b = 0;\n\
    \        int c = 1;\n        int d = 0;\n        for (int i = 3; i <= n; i++)\
    \ {\n            d = a + b + c;\n            a = b;\n            b = c;\n    \
    \        c = d;\n        }\n        return d;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011693
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        int a = 0;\n        int b = 0;\n\
    \        int c = 1;\n        int d = 0;\n        while (n-- > 2) {\n         \
    \   d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n\
    \        }\n        return d;\n}\n    public static void main(String[] args) {\n\
    \    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5))\
    \ == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n\
    \    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // TODO: fill this in.\n        return 0;\n}\n\
    \    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu4g7cac2.java:26)\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // fill in code here\n}\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpuxgpmo_q.java:23: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int[] fibs = new int[n+1];\n        fibs[0] = 0;\n\
    \        fibs[1] = 0;\n        fibs[2] = 1;\n        for (int i = 3; i <= n; i++)\
    \ {\n            fibs[i] = fibs[i-1] + fibs[i-2] + fibs[i-3];\n        }\n   \
    \     return fibs[n];\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 2 out of bounds for length 2\n\tat Problem.fibfib(tmpcwax5h1p.java:25)\n\
    \tat Problem.main(tmpcwax5h1p.java:33)\n"
  stdout: ''
  timestamp: 1660011694
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int[] f = new int[n+1];\n        f[0] = 0;\n  \
    \      f[1] = 0;\n        f[2] = 1;\n        for (int i = 3; i <= n; i++) {\n\
    \            f[i] = f[i-1] + f[i-2] + f[i-3];\n        }\n        return f[n];\n\
    }\n    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 2 out of bounds for length 2\n\tat Problem.fibfib(tmp5nq8acdp.java:25)\n\
    \tat Problem.main(tmp5nq8acdp.java:33)\n"
  stdout: ''
  timestamp: 1660011694
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n <= 2) {\n            return n-1;\n      \
    \  }\n        int first = 0;\n        int second = 1;\n        int third = 1;\n\
    \        int current = 0;\n        for (int i = 2; i < n; i++) {\n           \
    \ current = first + second + third;\n            first = second;\n           \
    \ second = third;\n            third = current;\n        }\n        return current;\n\
    }\n    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxn1_qngk.java:40)\n"
  stdout: ''
  timestamp: 1660011694
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        int i = 3;\n        int a = 0;\n\
    \        int b = 0;\n        int c = 1;\n        int sum = 1;\n        while (i\
    \ <= n) {\n            sum = a + b + c;\n            a = b;\n            b = c;\n\
    \            c = sum;\n            i++;\n        }\n        return sum;\n}\n \
    \   public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011694
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // return fibfib(n, new int[n+1]);\n        return\
    \ fibfibDP(n);\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp32pbubgh.java:23: error: cannot find symbol\n        return fibfibDP(n);\n\
    \               ^\n  symbol:   method fibfibDP(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011694
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // Replace with a better implementation.\n    \
    \    // return (int)Math.pow(2, n-1);\n        if (n < 2) return 0;\n        if\
    \ (n == 2) return 1;\n        int a = 0, b = 0, c = 1;\n        for (int i = 3;\
    \ i <= n; i++) {\n            int d = a + b + c;\n            a = b;\n       \
    \     b = c;\n            c = d;\n        }\n        return c;\n}\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011694
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int[] arr = new int[n+1];\n        for (int i =\
    \ 0; i < arr.length; i++) {\n            if (i < 2) {\n                arr[i]\
    \ = 0;\n            } else if (i == 2) {\n                arr[i] = 1;\n      \
    \      } else {\n                arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n  \
    \          }\n        }\n        return arr[n];\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011694
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // YOUR CODE HERE\n        return -1;\n}\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy_7oh9e5.java:26)\n"
  stdout: ''
  timestamp: 1660011694
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int last = 0;\n        int next = 0;\n        int\
    \ curr = 1;\n        for (int i = 2; i <= n; i++) {\n            last = next;\n\
    \            next = curr;\n            curr = next + last + (i - 2);\n       \
    \ }\n        return curr;\n}\n    public static void main(String[] args) {\n \
    \   assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5))\
    \ == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n\
    \    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p0ozcep.java:34)\n"
  stdout: ''
  timestamp: 1660011694
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n <= 2) {\n            return n-1;\n      \
    \  } else {\n            int a = 0;\n            int b = 1;\n            int c\
    \ = 1;\n            for (int i = 3; i <= n; i++) {\n                int s = a\
    \ + b + c;\n                a = b;\n                b = c;\n                c\
    \ = s;\n            }\n            return c;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpccy8z8xl.java:40)\n"
  stdout: ''
  timestamp: 1660011694
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        if (n == 3) return 1;\n        int\
    \ n0 = 0;\n        int n1 = 0;\n        int n2 = 1;\n        int n3 = 1;\n   \
    \     for (int i = 4; i <= n; i++) {\n            int tmp = n0 + n1 + n2;\n  \
    \          n0 = n1;\n            n1 = n2;\n            n2 = n3;\n            n3\
    \ = tmp;\n        }\n        return n3;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu4liec4q.java:42)\n"
  stdout: ''
  timestamp: 1660011694
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        int f1 = 0;\n        int f2 = 0;\n\
    \        int f3 = 1;\n        int current = 3;\n        while (current < n) {\n\
    \            int temp = f1 + f2 + f3;\n            f1 = f2;\n            f2 =\
    \ f3;\n            f3 = temp;\n            current++;\n        }\n        return\
    \ f1 + f2 + f3;\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011694
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int a = 0;\n        int b = 0;\n        int c =\
    \ 1;\n        for (int i = 0; i < n; i++) {\n            int next = a + b + c;\n\
    \            a = b;\n            b = c;\n            c = next;\n        }\n  \
    \      return a;\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011694
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // TODO\n        return 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2pz2or9h.java:26)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        throw new RuntimeException(\"Not implemented\"\
    );\n}\n    public static void main(String[] args) {\n    assert(fibfib((2)) ==\
    \ (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n  \
    \  assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.fibfib(tmpu916j4gd.java:22)\n\tat Problem.main(tmpu916j4gd.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n      int[] dp = new int[n+1];\n      dp[0] = 0;\n    \
    \  dp[1] = 0;\n      dp[2] = 1;\n      for(int i = 3; i <= n; i++) {\n       \
    \ dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n      }\n      return dp[n];\n}\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 2 out of bounds for length 2\n\tat Problem.fibfib(tmpipvp8ssh.java:25)\n\
    \tat Problem.main(tmpipvp8ssh.java:33)\n"
  stdout: ''
  timestamp: 1660011694
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // TODO: implement this function\n        return\
    \ -1;\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq8ukvzn0.java:26)\n"
  stdout: ''
  timestamp: 1660011694
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        throw new UnsupportedOperationException(\"Not implemented\
    \ yet.\");\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ implemented yet.\n\tat Problem.fibfib(tmpv71b4crn.java:22)\n\tat Problem.main(tmpv71b4crn.java:25)\n"
  stdout: ''
  timestamp: 1660011695
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        int a = 0;\n        int b = 0;\n\
    \        int c = 1;\n        int ans = 0;\n        for (int i = 3; i <= n; i++)\
    \ {\n            ans = a + b + c;\n            a = b;\n            b = c;\n  \
    \          c = ans;\n        }\n        return ans;\n}\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011694
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int t1 = 0, t2 = 0, t3 = 1;\n        for (int i\
    \ = 0; i < n; i++) {\n            int sum = t1 + t2 + t3;\n            t1 = t2;\n\
    \            t2 = t3;\n            t3 = sum;\n        }\n        return t1;\n\
    }\n    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011694
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7o8muorp.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // write your code here\n        return 0;\n}\n\
    \    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe2_chmzx.java:26)\n"
  stdout: ''
  timestamp: 1660011694
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        int a = 0;\n        int b = 0;\n\
    \        int c = 1;\n        int d = 0;\n        for (int i = 3; i <= n; i++)\
    \ {\n            d = a + b + c;\n            a = b;\n            b = c;\n    \
    \        c = d;\n        }\n        return d;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011693
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        else {\n            return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011694
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        int v0 = 0;\n        int v1 = 0;\n\
    \        int v2 = 1;\n        int i = 3;\n        while (i <= n) {\n         \
    \   int newV0 = v1;\n            int newV1 = v2;\n            int newV2 = v0 +\
    \ v1 + v2;\n            v0 = newV0;\n            v1 = newV1;\n            v2 =\
    \ newV2;\n            i++;\n        }\n        return v2;\n}\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011694
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // TODO: Fill in this function\n        if (n ==\
    \ 0 || n == 1) return 0;\n        if (n == 2) return 1;\n        int[] f = new\
    \ int[n + 1];\n        f[0] = 0;\n        f[1] = 0;\n        f[2] = 1;\n     \
    \   for (int i = 3; i <= n; i++) {\n            f[i] = f[i - 1] + f[i - 2] + f[i\
    \ - 3];\n        }\n        return f[n];\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011695
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int prevPrev = 0;\n        int prev = 0;\n    \
    \    int current = 1;\n        for (int i = 2; i <= n; i++) {\n            prevPrev\
    \ = prev;\n            prev = current;\n            current = prevPrev + prev\
    \ + current;\n        }\n        return current;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6e_knh_c.java:33)\n"
  stdout: ''
  timestamp: 1660011695
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return n;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2oh2v8yk.java:25)\n"
  stdout: ''
  timestamp: 1660011695
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n < 0) return 0;\n        int x = 0, y = 0,\
    \ z = 1;\n        for (int i = 2; i <= n; i++) {\n            int t = x;\n   \
    \         x = y;\n            y = z;\n            z = t + y + z;\n        }\n\
    \        return z;\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0jr765_o.java:33)\n"
  stdout: ''
  timestamp: 1660011695
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        int[] arr = new int[n+1];\n     \
    \   arr[0] = 0;\n        arr[1] = 0;\n        arr[2] = 1;\n        for (int i\
    \ = 3; i <= n; i++) {\n            arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n\
    \        }\n        return arr[n];\n}\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5))\
    \ == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n\
    \    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011695
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int[] mem = new int[n+1];\n        mem[0] = 0;\n\
    \        mem[1] = 0;\n        mem[2] = 1;\n        for (int i = 3; i <= n; i++)\
    \ {\n            mem[i] = mem[i-1] + mem[i-2] + mem[i-3];\n        }\n       \
    \ return mem[n];\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 2 out of bounds for length 2\n\tat Problem.fibfib(tmp03iz7fbx.java:25)\n\
    \tat Problem.main(tmp03iz7fbx.java:33)\n"
  stdout: ''
  timestamp: 1660011696
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int[] f = new int[n+1];\n        f[0] = 0;\n  \
    \      f[1] = 0;\n        f[2] = 1;\n        for (int i = 3; i <= n; i++) {\n\
    \            f[i] = f[i-1] + f[i-2] + f[i-3];\n        }\n        return f[n];\n\
    }\n    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 2 out of bounds for length 2\n\tat Problem.fibfib(tmp5nq8acdp.java:25)\n\
    \tat Problem.main(tmp5nq8acdp.java:33)\n"
  stdout: ''
  timestamp: 1660011694
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return n < 2 ? 0 : n < 3 ? 1 : fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011696
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7o8muorp.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // Please write your code here.\n        if (n\
    \ == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011696
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int[] fibfibSequence = new int[n+1];\n        fibfibSequence[0]\
    \ = 0;\n        fibfibSequence[1] = 0;\n        fibfibSequence[2] = 1;\n     \
    \   for (int i = 3; i <= n; i++) {\n            fibfibSequence[i] = fibfibSequence[i-1]\
    \ + fibfibSequence[i-2] + fibfibSequence[i-3];\n        }\n        return fibfibSequence[n];\n\
    }\n    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 2 out of bounds for length 2\n\tat Problem.fibfib(tmp4ysvezbq.java:25)\n\
    \tat Problem.main(tmp4ysvezbq.java:33)\n"
  stdout: ''
  timestamp: 1660011695
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int a = 0;\n        int b = 0;\n        int c =\
    \ 1;\n        int r = 0;\n        if (n == 0) {\n            return 0;\n     \
    \   }\n        if (n == 1) {\n            return 0;\n        }\n        if (n\
    \ == 2) {\n            return 1;\n        }\n        for (int i = 3; i <= n; i++)\
    \ {\n            r = a + b + c;\n            a = b;\n            b = c;\n    \
    \        c = r;\n        }\n        return r;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011695
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int a = 0;\n        int b = 0;\n        int c =\
    \ 1;\n        int res = 0;\n        for (int i = 2; i <= n; i++) {\n         \
    \   res = a + b + c;\n            a = b;\n            b = c;\n            c =\
    \ res;\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9hnu43ad.java:37)\n"
  stdout: ''
  timestamp: 1660011696
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    Invalid argument\");\n        }\n        if (n == 0) {\n            return 0;\n\
    \        }\n        if (n == 1) {\n            return 0;\n        }\n        if\
    \ (n == 2) {\n            return 1;\n        }\n        int n1 = 0;\n        int\
    \ n2 = 0;\n        int n3 = 1;\n        int n4 = 0;\n        for (int i = 3; i\
    \ <= n; i++) {\n            n4 = n1 + n2 + n3;\n            n1 = n2;\n       \
    \     n2 = n3;\n            n3 = n4;\n        }\n        return n4;\n}\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011696
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int a = 0;\n        int b = 0;\n        int c =\
    \ 1;\n        int d = 1;\n        if (n == 0) return a;\n        if (n == 1) return\
    \ b;\n        if (n == 2) return c;\n        if (n == 3) return d;\n        while\
    \ (n-- > 3) {\n            int e = a + b + c;\n            a = b;\n          \
    \  b = c;\n            c = d;\n            d = e;\n        }\n        return d;\n\
    }\n    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps6g81mf0.java:42)\n"
  stdout: ''
  timestamp: 1660011696
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return -1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp7rv956j.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n < 2) return 0;\n        if (n == 2) return\
    \ 1;\n        int[] f = new int[n+1];\n        f[0] = 0;\n        f[1] = 0;\n\
    \        f[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            f[i] =\
    \ f[i-1] + f[i-2] + f[i-3];\n        }\n        return f[n];\n}\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011696
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n <= 1) return 0;\n        if (n == 2) return\
    \ 1;\n        int[] A = new int[n];\n        A[0] = 0;\n        A[1] = 0;\n  \
    \      A[2] = 1;\n        for (int i = 3; i < n; i++) {\n            A[i] = A[i-1]\
    \ + A[i-2] + A[i-3];\n        }\n        return A[n-1];\n}\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa8w066dw.java:36)\n"
  stdout: ''
  timestamp: 1660011696
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011693
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n <= 2) {\n            return n - 1;\n    \
    \    }\n        int prev = 0;\n        int prev2 = 0;\n        int prev3 = 1;\n\
    \        int res = 1;\n        for (int i = 2; i < n; i++) {\n            res\
    \ = prev + prev2 + prev3;\n            prev3 = prev2;\n            prev2 = prev;\n\
    \            prev = res;\n        }\n        return res;\n}\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph6i9a720.java:40)\n"
  stdout: ''
  timestamp: 1660011696
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        //TODO\n        return 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprvdm6rd.java:26)\n"
  stdout: ''
  timestamp: 1660011696
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n\
    \        if (n == 2) {\n            return 1;\n        }\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5))\
    \ == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n\
    \    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011696
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7o8muorp.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int a = 0;\n        int b = 0;\n        int c =\
    \ 1;\n        for (int i = 3; i <= n; i++) {\n            int next = a + b + c;\n\
    \            a = b;\n            b = c;\n            c = next;\n        }\n  \
    \      return c;\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptb7knmgn.java:35)\n"
  stdout: ''
  timestamp: 1660011696
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n < 3) {\n            return n-1;\n       \
    \ }\n        int[] fib = new int[n];\n        fib[0] = 0;\n        fib[1] = 0;\n\
    \        fib[2] = 1;\n        for (int i = 3; i < n; i++) {\n            fib[i]\
    \ = fib[i-1] + fib[i-2] + fib[i-3];\n        }\n        return fib[n-1];\n}\n\
    \    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyth9rwrv.java:37)\n"
  stdout: ''
  timestamp: 1660011696
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        if (n == 3) return 1;\n        int\
    \ n1 = 1;\n        int n2 = 1;\n        int n3 = 2;\n        for (int i = 4; i\
    \ <= n; i++) {\n            int tmp = n1 + n2 + n3;\n            n1 = n2;\n  \
    \          n2 = n3;\n            n3 = tmp;\n        }\n        return n3;\n}\n\
    \    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfudg9nem.java:40)\n"
  stdout: ''
  timestamp: 1660011696
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        throw new IllegalArgumentException(\"Please implement\
    \ me\");\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IllegalArgumentException: Please\
    \ implement me\n\tat Problem.fibfib(tmpknpu4w3a.java:22)\n\tat Problem.main(tmpknpu4w3a.java:25)\n"
  stdout: ''
  timestamp: 1660011696
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return -1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp7rv956j.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        int n1 = 0;\n        int n2 = 0;\n\
    \        int n3 = 1;\n        int n4 = 0;\n        int count = 2;\n        while\
    \ (count < n) {\n            n4 = n1 + n2 + n3;\n            n1 = n2;\n      \
    \      n2 = n3;\n            n3 = n4;\n            count++;\n        }\n     \
    \   return n4;\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011696
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // Use a Map to cache the results so we don't have\
    \ to recompute them when we run into repeats.\n        // When we call fibfib(2),\
    \ we'll compute fibfib(1) and fibfib(0) and cache the results.\n        // When\
    \ we call fibfib(3), we'll compute fibfib(2) which will hit the cache and thus\
    \ be a cheap lookup.\n        Map<Integer, Integer> map = new HashMap<>();\n \
    \       // You can call a method recursively without specifying the class name.\n\
    \        return fibfib(n, map);\n}\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5))\
    \ == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n\
    \    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5fl1204t.java:27: error: method fibfib in class Problem cannot\
    \ be applied to given types;\n        return fibfib(n, map);\n               ^\n\
    \  required: int\n  found:    int,Map<Integer,Integer>\n  reason: actual and formal\
    \ argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011696
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // TODO write your code here\n        return 0;\n\
    }\n    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfp6m7o80.java:26)\n"
  stdout: ''
  timestamp: 1660011696
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // Your code here.\n        int[] fib = new int[n\
    \ + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n     \
    \   for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i -\
    \ 2] + fib[i - 3];\n        }\n        return fib[n];\n}\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 2 out of bounds for length 2\n\tat Problem.fibfib(tmpajuyldmk.java:26)\n\
    \tat Problem.main(tmpajuyldmk.java:34)\n"
  stdout: ''
  timestamp: 1660011697
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int first = 0;\n        int second = 0;\n     \
    \   int third = 1;\n        int temp = 0;\n        if (n == 0) {\n           \
    \ return 0;\n        }\n        if (n == 1) {\n            return 0;\n       \
    \ }\n        if (n == 2) {\n            return 1;\n        }\n        for (int\
    \ i = 2; i < n; i++) {\n            temp = first + second + third;\n         \
    \   first = second;\n            second = third;\n            third = temp;\n\
    \        }\n        return temp;\n}\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5))\
    \ == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n\
    \    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011697
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int prev = 0;\n        int prevprev = 0;\n    \
    \    int prevprevprev = 0;\n        int current = 0;\n        for (int i = 0;\
    \ i < n; i++) {\n            if (i < 2) {\n                current = 0;\n    \
    \        } else if (i == 2) {\n                current = 1;\n            } else\
    \ {\n                prevprevprev = prevprev;\n                prevprev = prev;\n\
    \                prev = current;\n                current = prev + prevprev +\
    \ prevprevprev;\n            }\n        }\n        return current;\n}\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv3xu77jc.java:41)\n"
  stdout: ''
  timestamp: 1660011697
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7o8muorp.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        throw new UnsupportedOperationException(\"Please\
    \ implement the fibfib function\");\n}\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5))\
    \ == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n\
    \    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Please\
    \ implement the fibfib function\n\tat Problem.fibfib(tmpr870bqmc.java:22)\n\t\
    at Problem.main(tmpr870bqmc.java:25)\n"
  stdout: ''
  timestamp: 1660011697
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // TODO: Implement me!\n        int[] array = new\
    \ int[n+1];\n        array[0] = 0;\n        array[1] = 0;\n        array[2] =\
    \ 1;\n        for(int i = 3; i <= n; i++){\n            array[i] = array[i-1]\
    \ + array[i-2] + array[i-3];\n        }\n        return array[n];\n}\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 2 out of bounds for length 2\n\tat Problem.fibfib(tmpro2u311f.java:26)\n\
    \tat Problem.main(tmpro2u311f.java:34)\n"
  stdout: ''
  timestamp: 1660011697
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // Your code here.\n        return 0;\n}\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpja33zl5u.java:26)\n"
  stdout: ''
  timestamp: 1660011697
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n < 2) {\n            return 0;\n        }\n\
    \        if (n == 2) {\n            return 1;\n        }\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5))\
    \ == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n\
    \    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011697
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        throw new RuntimeException(\"not implemented\"\
    );\n}\n    public static void main(String[] args) {\n    assert(fibfib((2)) ==\
    \ (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n  \
    \  assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: not implemented\n\
    \tat Problem.fibfib(tmppkom7t5f.java:22)\n\tat Problem.main(tmppkom7t5f.java:25)\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int a = 0;\n        int b = 0;\n        int c =\
    \ 1;\n        int d = 0;\n        for (int i = 2; i <= n; i++) {\n           \
    \ d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n\
    \        }\n        return d;\n}\n    public static void main(String[] args) {\n\
    \    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5))\
    \ == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n\
    \    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7lfndr8p.java:37)\n"
  stdout: ''
  timestamp: 1660011697
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        int a = 0;\n        int b = 0;\n\
    \        int c = 1;\n        int answer = 0;\n        for (int i = 3; i <= n;\
    \ i++) {\n            answer = a + b + c;\n            a = b;\n            b =\
    \ c;\n            c = answer;\n        }\n        return answer;\n}\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011697
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        int[] f = new int[n + 1];\n     \
    \   f[0] = 0;\n        f[1] = 0;\n        f[2] = 1;\n        for (int i = 3; i\
    \ <= n; i++) {\n            f[i] = f[i - 1] + f[i - 2] + f[i - 3];\n        }\n\
    \        return f[n];\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011697
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        int a = 0;\n        int b = 0;\n\
    \        int c = 1;\n        int i = 3;\n        while (i <= n) {\n          \
    \  int d = a + b + c;\n            a = b;\n            b = c;\n            c =\
    \ d;\n            i++;\n        }\n        return c;\n}\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011697
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        int prev = 0;\n        int curr =\
    \ 1;\n        int i = 2;\n        while (i < n) {\n            int next = prev\
    \ + curr + prev;\n            prev = curr;\n            curr = next;\n       \
    \     i += 1;\n        }\n        return curr;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5szq5tko.java:39)\n"
  stdout: ''
  timestamp: 1660011697
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        int []fibs = new int[n+1];\n    \
    \    fibs[0] = 0;\n        fibs[1] = 0;\n        fibs[2] = 1;\n        for (int\
    \ i = 3; i <= n; i++) {\n            fibs[i] = fibs[i-1] + fibs[i-2] + fibs[i-3];\n\
    \        }\n        return fibs[n];\n}\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5))\
    \ == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n\
    \    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011697
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        int[][] result = {{1,1,1},{1,0,0},{0,1,0}};\n\
    \        int[][] fibfibMatrix = power(result, n-2);\n        return fibfibMatrix[0][0]*1\
    \ + fibfibMatrix[0][1]*0 + fibfibMatrix[0][2]*0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0bywq2_s.java:26: error: cannot find symbol\n        int[][] fibfibMatrix\
    \ = power(result, n-2);\n                               ^\n  symbol:   method\
    \ power(int[][],int)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011697
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int a = 0;\n        int b = 0;\n        int c =\
    \ 1;\n        int d = 1;\n        if (n == 0) return a;\n        if (n == 1) return\
    \ b;\n        if (n == 2) return c;\n        int i = 3;\n        while (i <= n)\
    \ {\n            int next = a + b + c;\n            a = b;\n            b = c;\n\
    \            c = d;\n            d = next;\n            i++;\n        }\n    \
    \    return d;\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9_8nlk_m.java:43)\n"
  stdout: ''
  timestamp: 1660011697
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        //\n        //\n        //\n        return 0;\n\
    }\n    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptzyzj7q7.java:28)\n"
  stdout: ''
  timestamp: 1660011697
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        int a = 0;\n        int b = 0;\n\
    \        int c = 1;\n        int ans = 0;\n        for (int i = 2; i < n; i++)\
    \ {\n            ans = a + b + c;\n            a = b;\n            b = c;\n  \
    \          c = ans;\n        }\n        return ans;\n}\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011697
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n < 0) return -1;\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        int\
    \ a = 0;\n        int b = 0;\n        int c = 1;\n        int sum = 1;\n     \
    \   for (int i = 3; i <= n; i++) {\n            sum = a + b + c;\n           \
    \ a = b;\n            b = c;\n            c = sum;\n        }\n        return\
    \ sum;\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011697
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return -1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp7rv956j.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        int [] memo = new int[n];\n   \
    \     memo[0] = 0;\n        memo[1] = 0;\n        memo[2] = 1;\n        for (int\
    \ i = 3; i < n; i++) {\n            memo[i] = memo[i-1] + memo[i-2] + memo[i-3];\n\
    \        }\n        return memo[n-1];\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsfn9s5r1.java:43)\n"
  stdout: ''
  timestamp: 1660011697
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int[] arr = new int[n + 1];\n        arr[0] = 0;\n\
    \        arr[1] = 0;\n        arr[2] = 1;\n        for (int i = 3; i <= n; i++)\
    \ {\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n        }\n \
    \       return arr[n];\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 2 out of bounds for length 2\n\tat Problem.fibfib(tmpywvpajfo.java:25)\n\
    \tat Problem.main(tmpywvpajfo.java:33)\n"
  stdout: ''
  timestamp: 1660011697
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int first = 0;\n        int second = 0;\n     \
    \   int third = 1;\n        for (int i = 3; i <= n; i++) {\n            int result\
    \ = first + second + third;\n            first = second;\n            second =\
    \ third;\n            third = result;\n        }\n        return third;\n}\n \
    \   public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg13lho4e.java:35)\n"
  stdout: ''
  timestamp: 1660011697
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        throw new UnsupportedOperationException(\"Not Implemented\
    \ Yet.\");\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ Implemented Yet.\n\tat Problem.fibfib(tmp2vp8cnd3.java:22)\n\tat Problem.main(tmp2vp8cnd3.java:25)\n"
  stdout: ''
  timestamp: 1660011697
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int[] p = new int[n+1];\n        p[0] = 0;\n  \
    \      p[1] = 0;\n        p[2] = 1;\n        for(int i = 3; i <= n; i++) {\n \
    \           p[i] = p[i-1] + p[i-2] + p[i-3];\n        }\n        return p[n];\n\
    }\n    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 2 out of bounds for length 2\n\tat Problem.fibfib(tmpeujoadw3.java:25)\n\
    \tat Problem.main(tmpeujoadw3.java:33)\n"
  stdout: ''
  timestamp: 1660011697
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int a = 0;\n        int b = 0;\n        int c =\
    \ 1;\n        int d = 0;\n        while (n > 0) {\n            d = a + b + c;\n\
    \            a = b;\n            b = c;\n            c = d;\n            n--;\n\
    \        }\n        return d;\n}\n    public static void main(String[] args) {\n\
    \    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5))\
    \ == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n\
    \    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpevowkdjg.java:36)\n"
  stdout: ''
  timestamp: 1660011698
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n <= 2) return n-1;\n        int curr = 0,\
    \ next = 1, fib1 = 0, fib2 = 1, fib3 = 1;\n        while (curr < n) {\n      \
    \      fib1 = fib2;\n            fib2 = fib3;\n            fib3 = fib1 + fib2\
    \ + fib3;\n            curr++;\n        }\n        return fib3;\n}\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1cuvw6h4.java:35)\n"
  stdout: ''
  timestamp: 1660011698
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7o8muorp.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // TODO\n        return 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2pz2or9h.java:26)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int[] arr = new int[n+1];\n        arr[0] = 0;\n\
    \        arr[1] = 0;\n        arr[2] = 1;\n        for(int i = 3; i <= n; i++)\
    \ {\n            arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n        }\n       \
    \ return arr[n];\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 2 out of bounds for length 2\n\tat Problem.fibfib(tmprrh5uebm.java:25)\n\
    \tat Problem.main(tmprrh5uebm.java:33)\n"
  stdout: ''
  timestamp: 1660011698
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        int a = 0;\n        int b = 0;\n\
    \        int c = 1;\n        int sum = 0;\n        for (int i = 3; i <= n; i++)\
    \ {\n            sum = a + b + c;\n            a = b;\n            b = c;\n  \
    \          c = sum;\n        }\n        return sum;\n}\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return -1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp7rv956j.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // Fill in the body of this function.\n       \
    \ // Your code must run in O(n) time.\n        // You may write recursive code\
    \ if you want.\n        int[] result = new int[n + 1];\n        result[0] = 0;\n\
    \        result[1] = 0;\n        result[2] = 1;\n        for (int i = 3; i <=\
    \ n; i++) {\n            result[i] = result[i - 1] + result[i - 2] + result[i\
    \ - 3];\n        }\n        return result[n];\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 2 out of bounds for length 2\n\tat Problem.fibfib(tmp5xr9eoz0.java:28)\n\
    \tat Problem.main(tmp5xr9eoz0.java:36)\n"
  stdout: ''
  timestamp: 1660011698
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // Fill in the code here\n        return 0;\n}\n\
    \    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph9et01d2.java:26)\n"
  stdout: ''
  timestamp: 1660011698
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int[] arr = new int[n+1];\n        arr[0] = 0;\n\
    \        arr[1] = 0;\n        arr[2] = 1;\n        for(int i = 3; i < n+1; i++)\
    \ {\n            arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n        }\n       \
    \ return arr[n];\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 2 out of bounds for length 2\n\tat Problem.fibfib(tmp8lzgieif.java:25)\n\
    \tat Problem.main(tmp8lzgieif.java:33)\n"
  stdout: ''
  timestamp: 1660011698
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n\t\tint x = fibfib(n - 1);\n\t\tint y = fibfib(n - 2);\n\
    \t\tint z = fibfib(n - 3);\n\t\treturn x + y + z;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.java:22)\n\tat Problem.fibfib(tmpkm2a7imm.java:22)\n\
    \tat Problem.fibfib(tmpkm2a7imm.j"
  stdout: ''
  timestamp: 1660011698
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        int a = 0;\n        int b = 0;\n\
    \        int c = 1;\n        int d = 0;\n        while (n > 2) {\n           \
    \ d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n\
    \            n -= 1;\n        }\n        return d;\n}\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011698
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        int first = 0;\n        int second\
    \ = 0;\n        int third = 1;\n        int result = 1;\n        for (int i =\
    \ 2; i < n; i++) {\n            result = first + second + third;\n           \
    \ first = second;\n            second = third;\n            third = result;\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5))\
    \ == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n\
    \    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011698
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // YOUR CODE HERE\n        return 0;\n}\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_k3ouulw.java:26)\n"
  stdout: ''
  timestamp: 1660011698
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // YOUR CODE HERE\n        if (n == 0) return 0;\n\
    \        if (n == 1) return 0;\n        if (n == 2) return 1;\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011698
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // Fill this in.\n        if (n < 2) return 0;\n\
    \        if (n == 2) return 1;\n        int prev1 = 0, prev2 = 1, curr = 0;\n\
    \        for (int i = 3; i <= n; i++) {\n            curr = prev1 + prev2 + (i\
    \ - 3);\n            prev1 = prev2;\n            prev2 = curr;\n        }\n  \
    \      return curr;\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm_g4lji7.java:36)\n"
  stdout: ''
  timestamp: 1660011698
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // Solution:\n        //\n        //         n\
    \  n == 0   n == 1   n == 2   n > 2\n        // f(n) = { 0  n = 0    n = 1   \
    \ n = 2    n > 2\n        //\n        //         n  f(n) == 0 f(n) == 1 f(n) ==\
    \ 2 f(n) > 2\n        // f(n) = { 0  n = 0    n = 1    n = 2    n > 2\n      \
    \  //\n        //         n  f(n) < 3  f(n) < 3  f(n) < 3  f(n) > 2\n        //\
    \ f(n) = { 0  n = 0    n = 1    n = 2    n > 2\n        //\n        //       \
    \  n  f(n) < 3  f(n) < 3  f(n) < 3  f(n) > 2\n        // f(n) = { 0  n = 0   \
    \ n = 1    n = 2    n > 2\n        //\n        //         n  n = 0     n = 1 \
    \    n = 2     n > 2\n        // f(n) = { 0  n = 0    n = 1    n = 2    n > 2\n\
    \        //\n        //         n  n = 0     n = 1     n = 2     n > 2\n     \
    \   // f(n) = { 0  n = 0    n = 1    n = 2    n > 2\n        //\n        //  \
    \       n  n = 0     n = 1     n = 2     n > 2\n        // f(n) = { 0  n = 0 \
    \   n = 1    n = 2    n > 2\n        //\n        //         n  n = 0     n = 1\
    \     n = 2     n > 2\n        // f(n) = { 0  n = 0    n = 1    n = 2    n > 2\n\
    \        //\n        //         n  n = 0     n = 1     n = 2     n > 2\n     \
    \   // f(n) = { 0  n = 0    n = 1    n = 2    n > 2\n        //\n        //  \
    \       n  n = 0     n = 1     n = 2     n > 2\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmphgj_577n.java:52: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011698
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n <= 1) return 0;\n        if (n == 2) return\
    \ 1;\n        int f0 = 0;\n        int f1 = 0;\n        int f2 = 1;\n        int\
    \ fibfib = 0;\n        for (int i = 3; i <= n; i++) {\n            fibfib = f0\
    \ + f1 + f2;\n            f0 = f1;\n            f1 = f2;\n            f2 = fibfib;\n\
    \        }\n        return fibfib;\n}\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5))\
    \ == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n\
    \    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011698
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return -1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp7rv956j.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return -1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp7rv956j.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        int a = 0;\n        int b = 0;\n\
    \        int c = 1;\n        int d = 0;\n        for (int i = 0; i < n - 2; i++)\
    \ {\n            d = c + b + a;\n            a = b;\n            b = c;\n    \
    \        c = d;\n        }\n        return d;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011698
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // Time: O(n), Space: O(1)\n        if (n == 0)\
    \ return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n  \
    \      int n1 = 0, n2 = 0, n3 = 1;\n        for (int i = 3; i <= n; i++) {\n \
    \           int tmp = n1 + n2 + n3;\n            n1 = n2;\n            n2 = n3;\n\
    \            n3 = tmp;\n        }\n        return n3;\n}\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011698
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int[] f = new int[3];\n        f[0] = 0;\n    \
    \    f[1] = 0;\n        f[2] = 1;\n        if (n == 0) return f[0];\n        if\
    \ (n == 1) return f[1];\n        if (n == 2) return f[2];\n        for (int i\
    \ = 3; i <= n; i++) {\n            int x = f[0] + f[1] + f[2];\n            f[0]\
    \ = f[1];\n            f[1] = f[2];\n            f[2] = x;\n        }\n      \
    \  return f[2];\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011698
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        int fib1 = 0;\n        int fib2 =\
    \ 0;\n        int fib3 = 1;\n        int value = 0;\n        for (int i = 3; i\
    \ <= n; i++) {\n            value = fib1 + fib2 + fib3;\n            fib1 = fib2;\n\
    \            fib2 = fib3;\n            fib3 = value;\n        }\n        return\
    \ value;\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011698
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        if (n == 3) return 1;\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011693
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n <= 1) return 0;\n        else if (n == 2)\
    \ return 1;\n        else {\n            int a = 0, b = 0, c = 1;\n          \
    \  for (int i = 3; i <= n; i++) {\n                int d = a + b + c;\n      \
    \          a = b;\n                b = c;\n                c = d;\n          \
    \  }\n            return c;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011698
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // TODO.\n        int first = 0;\n        int second\
    \ = 0;\n        int third = 1;\n        if (n == 0) return first;\n        if\
    \ (n == 1) return second;\n        for (int i = 2; i <= n; i++) {\n          \
    \  int current = first + second + third;\n            first = second;\n      \
    \      second = third;\n            third = current;\n        }\n        return\
    \ third;\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjgazed_8.java:39)\n"
  stdout: ''
  timestamp: 1660011698
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n\
    \        if (n == 2) {\n            return 1;\n        }\n        int n1 = 0;\n\
    \        int n2 = 0;\n        int n3 = 1;\n        int nth = 0;\n        for (int\
    \ i = 3; i <= n; i++) {\n            nth = n1 + n2 + n3;\n            n1 = n2;\n\
    \            n2 = n3;\n            n3 = nth;\n        }\n        return nth;\n\
    }\n    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011698
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n <= 1) return 0;\n        else if (n == 2)\
    \ return 1;\n        else {\n            int[] fibfibs = new int[n];\n       \
    \     fibfibs[0] = 0;\n            fibfibs[1] = 0;\n            fibfibs[2] = 1;\n\
    \            for (int i = 3; i < n; i++) {\n                fibfibs[i] = fibfibs[i-1]\
    \ + fibfibs[i-2] + fibfibs[i-3];\n            }\n            return fibfibs[n-1];\n\
    \        }\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx1fzttwj.java:38)\n"
  stdout: ''
  timestamp: 1660011698
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        int f1 = 0;\n        int f2 = 0;\n\
    \        int f3 = 1;\n        int f = 0;\n        for (int i = 3; i <= n; i++)\
    \ {\n            f = f1 + f2 + f3;\n            f1 = f2;\n            f2 = f3;\n\
    \            f3 = f;\n        }\n        return f;\n}\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011698
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7o8muorp.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7o8muorp.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // Fill in the function body.\n        return 0;\n\
    }\n    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5h4vr0tg.java:26)\n"
  stdout: ''
  timestamp: 1660011699
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7o8muorp.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // TODO: write your code here\n        return -1;\n\
    }\n    public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphfg3kuag.java:26)\n"
  stdout: ''
  timestamp: 1660011699
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        int n_minus_3 = 0;\n        int\
    \ n_minus_2 = 0;\n        int n_minus_1 = 1;\n        int i = 3;\n        while\
    \ (i <= n) {\n            int curr = n_minus_3 + n_minus_2 + n_minus_1;\n    \
    \        n_minus_3 = n_minus_2;\n            n_minus_2 = n_minus_1;\n        \
    \    n_minus_1 = curr;\n            i += 1;\n        }\n        return n_minus_3\
    \ + n_minus_2 + n_minus_1;\n}\n    public static void main(String[] args) {\n\
    \    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5))\
    \ == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n\
    \    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx5b2_unj.java:47)\n"
  stdout: ''
  timestamp: 1660011699
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        int a = 0;\n        int b = 0;\n\
    \        int c = 1;\n        int d = a + b + c;\n        for (int i = 3; i < n;\
    \ i++) {\n            a = b;\n            b = c;\n            c = d;\n       \
    \     d = a + b + c;\n        }\n        return d;\n}\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011699
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int f0 = 0;\n        int f1 = 0;\n        int f2\
    \ = 1;\n        int fn = f2;\n        for (int i = 3; i <= n; i++) {\n       \
    \     fn = f0 + f1 + f2;\n            f0 = f1;\n            f1 = f2;\n       \
    \     f2 = fn;\n        }\n        return fn;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptetjbh4r.java:36)\n"
  stdout: ''
  timestamp: 1660011699
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        // YOUR CODE HERE\n        return 0;\n}\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_k3ouulw.java:26)\n"
  stdout: ''
  timestamp: 1660011698
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int[] fibfib = new int[n + 1];\n        fibfib[0]\
    \ = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        for (int i = 3;\
    \ i <= n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i\
    \ - 3];\n        }\n        return fibfib[n];\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 2 out of bounds for length 2\n\tat Problem.fibfib(tmpq6ikrhnu.java:25)\n\
    \tat Problem.main(tmpq6ikrhnu.java:33)\n"
  stdout: ''
  timestamp: 1660011699
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        int i = 3;\n        int[] arr = new\
    \ int[n+1];\n        arr[0] = 0;\n        arr[1] = 0;\n        arr[2] = 1;\n \
    \       while (i <= n) {\n            arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n\
    \            i++;\n        }\n        return arr[n];\n}\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011699
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int[] memo = new int[n + 1];\n        return fibfib(n,\
    \ memo);\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgjr3zzdh.java:23: error: method fibfib in class Problem cannot\
    \ be applied to given types;\n        return fibfib(n, memo);\n              \
    \ ^\n  required: int\n  found:    int,int[]\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011699
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        int f0 = 0;\n        int f1 = 0;\n\
    \        int f2 = 1;\n        int curr = 3;\n        while (curr <= n) {\n   \
    \         int new_f0 = f1;\n            int new_f1 = f2;\n            int new_f2\
    \ = f0 + f1 + f2;\n            f0 = new_f0;\n            f1 = new_f1;\n      \
    \      f2 = new_f2;\n            curr++;\n        }\n        return f2;\n}\n \
    \   public static void main(String[] args) {\n    assert(fibfib((2)) == (1));\n\
    \    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
    \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
    \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011699
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n <= 2) return n - 1;\n        int a = 0, b\
    \ = 0, c = 1;\n        for (int i = 3; i <= n; i++) {\n            int cur = a\
    \ + b + c;\n            a = b;\n            b = c;\n            c = cur;\n   \
    \     }\n        return c;\n}\n    public static void main(String[] args) {\n\
    \    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5))\
    \ == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n\
    \    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011699
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7o8muorp.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7o8muorp.java:25)\n"
  stdout: ''
  timestamp: 1660011692
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 0;\n        if (n == 2) return 1;\n        int n1 = 0;\n        int n2 = 0;\n\
    \        int n3 = 1;\n        int sum = 0;\n        for (int i = 2; i < n; i++)\
    \ {\n            sum = n1 + n2 + n3;\n            n1 = n2;\n            n2 = n3;\n\
    \            n3 = sum;\n        }\n        return sum;\n}\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1))\
    \ == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n\
    \    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14))\
    \ == (927));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011699
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int[] arr = new int[n+1];\n        if (n == 0)\
    \ return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n  \
    \      arr[0] = 0;\n        arr[1] = 0;\n        arr[2] = 1;\n        for (int\
    \ i = 3; i <= n; i++) {\n            arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n\
    \        }\n        return arr[n];\n}\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5))\
    \ == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n\
    \    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011699
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int a = 0;\n        int b = 0;\n        int c =\
    \ 1;\n        for (int i = 2; i <= n; i++) {\n            int d = a + b + c;\n\
    \            a = b;\n            b = c;\n            c = d;\n        }\n     \
    \   return c;\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdukzc1t7.java:35)\n"
  stdout: ''
  timestamp: 1660011693
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n\
    \        if (n == 1) {\n            return 0;\n        }\n        if (n == 2)\
    \ {\n            return 1;\n        }\n        int a = 0;\n        int b = 0;\n\
    \        int c = 1;\n        int d = 0;\n        for (int i = 3; i <= n; i++)\
    \ {\n            d = a + b + c;\n            a = b;\n            b = c;\n    \
    \        c = d;\n        }\n        return d;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011699
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int i = 0;\n        int a = 0;\n        int b =\
    \ 0;\n        int c = 1;\n        while (i < n) {\n            int d = a;\n  \
    \          a = b;\n            b = c;\n            c = d + b + c;\n          \
    \  i++;\n        }\n        return a;\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9l6xk1wd.java:38)\n"
  stdout: ''
  timestamp: 1660011699
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        throw new UnsupportedOperationException(\"Not Implemented\
    \ Yet\");\n}\n    public static void main(String[] args) {\n    assert(fibfib((2))\
    \ == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n\
    \    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12))\
    \ == (274));\n    assert(fibfib((14)) == (927));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ Implemented Yet\n\tat Problem.fibfib(tmpmaimzd_n.java:22)\n\tat Problem.main(tmpmaimzd_n.java:25)\n"
  stdout: ''
  timestamp: 1660011699
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        if (n < 0) throw new IllegalArgumentException();\n\
    \        int [] fibfib = new int[n+1];\n        if (n == 0) return 0;\n      \
    \  if (n == 1) return 0;\n        if (n == 2) return 1;\n        fibfib[0] = 0;\n\
    \        fibfib[1] = 0;\n        fibfib[2] = 1;\n        for (int i = 3; i <=\
    \ n; i++) {\n            fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n\
    \        }\n        return fibfib[n];\n}\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n\
    \    assert(fibfib((5)) == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10))\
    \ == (81));\n    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011699
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n   \
    \ // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static\
    \ int fibfib(int n) {\n        int a = 0;\n        int b = 0;\n        int c =\
    \ 1;\n        int d = 0;\n        for (int i = 0; i < n; i++) {\n            d\
    \ = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n \
    \       }\n        return d;\n}\n    public static void main(String[] args) {\n\
    \    assert(fibfib((2)) == (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5))\
    \ == (4));\n    assert(fibfib((8)) == (24));\n    assert(fibfib((10)) == (81));\n\
    \    assert(fibfib((12)) == (274));\n    assert(fibfib((14)) == (927));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppxrx3a9s.java:35)\n"
  stdout: ''
  timestamp: 1660011699
