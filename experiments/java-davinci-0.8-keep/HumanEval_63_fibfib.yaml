completions:
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        int[] memo = new int[n + 1];\n        memo[0] = 0;\n       \
  \ memo[1] = 0;\n        memo[2] = 1;\n        return fibfib(n, memo);"
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);"
- "        int a = 0;\n        int b = 0;\n        int c = 1;\n        int d = 0;\n\
  \        if (n == 0) {\n            return a;\n        }\n        if (n == 1) {\n\
  \            return b;\n        }\n        if (n == 2) {\n            return c;\n\
  \        }\n        for (int i = 3; i <= n; i++) {\n            d = a + b + c;\n\
  \            a = b;\n            b = c;\n            c = d;\n        }\n       \
  \ return d;"
- '        return -1;'
- '        throw new RuntimeException("Not implemented");'
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);"
- "        int[] fibfib = new int[n+1];\n        fibfib[0] = 0;\n        fibfib[1]\
  \ = 0;\n        fibfib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n       \
  \     fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n        }\n        return\
  \ fibfib[n];"
- "        if (n <= 1) return 0;\n        else if (n == 2) return 1;\n        else\
  \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        int prev = 0;\n        int prevprev = 0;\n        int prevprevprev\
  \ = 1;\n        int ans = 1;\n        for (int i = 2; i < n; i++) {\n          \
  \  ans = prev + prevprev + prevprevprev;\n            prevprevprev = prevprev;\n\
  \            prevprev = prev;\n            prev = ans;\n        }\n        return\
  \ ans;"
- "        if (n <= 1) return 0;\n        if (n == 2) return 1;\n        int[] dp\
  \ = new int[n+1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 1;\n\
  \        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i-1] + dp[i-2] +\
  \ dp[i-3];\n        }\n        return dp[n];"
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);"
- "        switch (n) {\n            case 0:\n                return 0;\n        \
  \    case 1:\n                return 0;\n            case 2:\n                return\
  \ 1;\n            default:\n                return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
  \        }"
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        int a = 0;\n        int b = 0;\n        int c = 1;\n       \
  \ int sum = 0;\n        for (int i = 3; i <= n; i++) {\n            sum = a + b\
  \ + c;\n            a = b;\n            b = c;\n            c = sum;\n        }\n\
  \        return sum;"
- '        return 0;'
- '        throw new UnsupportedOperationException("TODO");'
- "        // Your code here.\n        return -1;"
- "      // Write your code here.\n      int a = 0;\n      int b = 0;\n      int c\
  \ = 1;\n      for (int i = 2; i <= n; i++) {\n        int d = a + b + c;\n     \
  \   a = b;\n        b = c;\n        c = d;\n      }\n      return c;"
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        int ans = 0;\n        int a = 0;\n        int b = 0;\n     \
  \   int c = 1;\n        for (int i = 3; i <= n; i++) {\n            ans = a + b\
  \ + c;\n            a = b;\n            b = c;\n            c = ans;\n        }\n\
  \        return ans;"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        int a = 0;\n        int b = 0;\n        int c = 1;\n   \
  \     int sum = 0;\n        for (int i = 3; i <= n; i++) {\n            sum = a\
  \ + b + c;\n            a = b;\n            b = c;\n            c = sum;\n     \
  \   }\n        return sum;"
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);"
- '        return 0;'
- "        if (n <= 1) {\n            return 0;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        int dp[] = new int[n+1];\n        dp[0]\
  \ = 0;\n        dp[1] = 0;\n        dp[2] = 1;\n        for (int i = 3; i <= n;\
  \ i++) {\n            dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n        }\n        return\
  \ dp[n];"
- '        return 0;'
- "        int[] fibfibs = new int[3];\n        fibfibs[0] = 0;\n        fibfibs[1]\
  \ = 0;\n        fibfibs[2] = 1;\n        if (n <= 2) {\n            return fibfibs[n];\n\
  \        }\n        for (int i = 3; i <= n; i++) {\n            int curr = fibfibs[0]\
  \ + fibfibs[1] + fibfibs[2];\n            fibfibs[0] = fibfibs[1];\n           \
  \ fibfibs[1] = fibfibs[2];\n            fibfibs[2] = curr;\n        }\n        return\
  \ fibfibs[2];"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        int f0 = 0;\n        int f1 = 0;\n        int f2 = 1;\n\
  \        int result = 0;\n        for (int i = 3; i <= n; i++) {\n            result\
  \ = f0 + f1 + f2;\n            f0 = f1;\n            f1 = f2;\n            f2 =\
  \ result;\n        }\n        return result;"
- '        return 0;'
- "        int a = 0;\n        int b = 0;\n        int c = 1;\n        for (int i\
  \ = 2; i <= n; i++) {\n            int temp = c;\n            c = a + b + c;\n \
  \           a = b;\n            b = temp;\n        }\n        return c;"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        int[] fibs = new int[n];\n        fibs[0] = 0;\n       \
  \ fibs[1] = 0;\n        fibs[2] = 1;\n        for (int i = 3; i < n; i++) {\n  \
  \          fibs[i] = fibs[i-1] + fibs[i-2] + fibs[i-3];\n        }\n        return\
  \ fibs[n-1];"
- "        // TODO\n        return 0;"
- "        // I haven't checked whether this is efficient. But it's a lot more efficient\
  \ than a recursive solution!\n        int n1 = 0;\n        int n2 = 0;\n       \
  \ int n3 = 1;\n        int sum = n1 + n2 + n3;\n        for (int i = 3; i <= n;\
  \ i++) {\n            n1 = n2;\n            n2 = n3;\n            n3 = sum;\n  \
  \          sum = n1 + n2 + n3;\n        }\n        return sum;"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);"
- "        int dp[] = new int[n+1];\n        dp[0] = 0;\n        dp[1] = 0;\n    \
  \    dp[2] = 1;\n        for(int i = 3; i <= n; i++) {\n            dp[i] = dp[i-1]\
  \ + dp[i-2] + dp[i-3];\n        }\n        return dp[n];"
- '        return 0;'
- "        if (n < 2) return 0;\n        int f0 = 0, f1 = 0, f2 = 1;\n        for\
  \ (int i = 3; i <= n; i++) {\n            int f3 = f0 + f1 + f2;\n            f0\
  \ = f1;\n            f1 = f2;\n            f2 = f3;\n        }\n        return f2;"
- "        if (n < 2) {\n            return 0;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        int l1 = 0;\n        int l2 = 0;\n  \
  \      int l3 = 1;\n        int cur = 0;\n        for (int i = 3; i <= n; i++) {\n\
  \            cur = l1 + l2 + l3;\n            l1 = l2;\n            l2 = l3;\n \
  \           l3 = cur;\n        }\n        return cur;"
- "        int first = 0;\n        int second = 0;\n        int third = 1;\n     \
  \   int result = 0;\n        for (int i = 3; i <= n; i++) {\n            result\
  \ = first + second + third;\n            first = second;\n            second = third;\n\
  \            third = result;\n        }\n        return result;"
- "        int a = 0;\n        int b = 0;\n        int c = 1;\n        for (int i\
  \ = 2; i <= n; i++) {\n            int d = a + b + c;\n            a = b;\n    \
  \        b = c;\n            c = d;\n        }\n        return c;"
- "        if (n <= 1) return 0;\n        if (n == 2) return 1;\n        int prev\
  \ = 0;\n        int prev2 = 0;\n        int prev3 = 1;\n        int curr = 1;\n\
  \        for (int i = 3; i <= n; i++) {\n            prev = prev2;\n           \
  \ prev2 = prev3;\n            prev3 = curr;\n            curr = prev + prev2 + prev3;\n\
  \        }\n        return curr;"
- '        throw new RuntimeException("not implemented");'
- "        int[] ans = new int[n + 1];\n        ans[0] = 0;\n        ans[1] = 0;\n\
  \        ans[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            ans[i]\
  \ = ans[i - 1] + ans[i - 2] + ans[i - 3];\n        }\n        return ans[n];"
- '        throw new RuntimeException("Not implemented");'
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);"
- "        // TODO: Write your code here\n        return 0;"
- "        if (n <= 1) {\n            return 0;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        int[] f = new int[n + 1];\n        f[0]\
  \ = 0;\n        f[1] = 0;\n        f[2] = 1;\n        for (int i = 3; i <= n; i++)\
  \ {\n            f[i] = f[i - 1] + f[i - 2] + f[i - 3];\n        }\n        return\
  \ f[n];"
- "        int[] dp = new int[n+1];\n        for (int i = 0; i <= n; i++) {\n    \
  \        if (i == 0) {\n                dp[i] = 0;\n            } else if (i ==\
  \ 1) {\n                dp[i] = 0;\n            } else if (i == 2) {\n         \
  \       dp[i] = 1;\n            } else {\n                dp[i] = dp[i-1] + dp[i-2]\
  \ + dp[i-3];\n            }\n        }\n        return dp[n];"
- "        if (n <= 1) {\n            return 0;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        int prev = 1;\n        int prevPrev =\
  \ 0;\n        int prevPrevPrev = 0;\n        int curr = 1;\n        for (int i =\
  \ 3; i <= n; i++) {\n            curr = prev + prevPrev + prevPrevPrev;\n      \
  \      prevPrevPrev = prevPrev;\n            prevPrev = prev;\n            prev\
  \ = curr;\n        }\n        return curr;"
- "        // Write code here.\n        int[] fib = new int[n+1];\n        fib[0]\
  \ = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for(int i = 3; i <= n;\
  \ i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n        }\n    \
  \    return fib[n];"
- '        return 0;'
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        if (n == 3) return 1;\n        return fibfib(n-1) + fibfib(n-2)\
  \ + fibfib(n-3);"
- '        throw new RuntimeException("Not Implemented");'
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        int prev3 = 0;\n        int prev2 = 0;\n        int prev1 =\
  \ 1;\n        int current = prev1 + prev2 + prev3;\n        for (int i = 3; i <\
  \ n; i++) {\n            prev3 = prev2;\n            prev2 = prev1;\n          \
  \  prev1 = current;\n            current = prev1 + prev2 + prev3;\n        }\n \
  \       return current;"
- "\t    if (n == 0) return 0;\n\t    if (n == 1) return 0;\n\t    if (n == 2) return\
  \ 1;\n\t    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);"
- '        return -1;'
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        int a = 0;\n        int b = 0;\n        int c = 1;\n   \
  \     int d = 0;\n        for (int i = 3; i <= n; i++) {\n            d = a + b\
  \ + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n\
  \        return d;"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        int a = 0;\n        int b = 0;\n        int c = 1;\n   \
  \     int d = 0;\n        while (n-- > 2) {\n            d = a + b + c;\n      \
  \      a = b;\n            b = c;\n            c = d;\n        }\n        return\
  \ d;"
- "        // TODO: fill this in.\n        return 0;"
- '        // fill in code here'
- "        int[] fibs = new int[n+1];\n        fibs[0] = 0;\n        fibs[1] = 0;\n\
  \        fibs[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fibs[i]\
  \ = fibs[i-1] + fibs[i-2] + fibs[i-3];\n        }\n        return fibs[n];"
- "        int[] f = new int[n+1];\n        f[0] = 0;\n        f[1] = 0;\n       \
  \ f[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            f[i] = f[i-1] +\
  \ f[i-2] + f[i-3];\n        }\n        return f[n];"
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);"
- "        if (n <= 2) {\n            return n-1;\n        }\n        int first =\
  \ 0;\n        int second = 1;\n        int third = 1;\n        int current = 0;\n\
  \        for (int i = 2; i < n; i++) {\n            current = first + second + third;\n\
  \            first = second;\n            second = third;\n            third = current;\n\
  \        }\n        return current;"
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        int i = 3;\n        int a = 0;\n        int b = 0;\n       \
  \ int c = 1;\n        int sum = 1;\n        while (i <= n) {\n            sum =\
  \ a + b + c;\n            a = b;\n            b = c;\n            c = sum;\n   \
  \         i++;\n        }\n        return sum;"
- "        // return fibfib(n, new int[n+1]);\n        return fibfibDP(n);"
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);"
- "        // Replace with a better implementation.\n        // return (int)Math.pow(2,\
  \ n-1);\n        if (n < 2) return 0;\n        if (n == 2) return 1;\n        int\
  \ a = 0, b = 0, c = 1;\n        for (int i = 3; i <= n; i++) {\n            int\
  \ d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n \
  \       }\n        return c;"
- "        int[] arr = new int[n+1];\n        for (int i = 0; i < arr.length; i++)\
  \ {\n            if (i < 2) {\n                arr[i] = 0;\n            } else if\
  \ (i == 2) {\n                arr[i] = 1;\n            } else {\n              \
  \  arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n            }\n        }\n        return\
  \ arr[n];"
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);"
- "        // YOUR CODE HERE\n        return -1;"
- "        int last = 0;\n        int next = 0;\n        int curr = 1;\n        for\
  \ (int i = 2; i <= n; i++) {\n            last = next;\n            next = curr;\n\
  \            curr = next + last + (i - 2);\n        }\n        return curr;"
- "        if (n <= 2) {\n            return n-1;\n        } else {\n            int\
  \ a = 0;\n            int b = 1;\n            int c = 1;\n            for (int i\
  \ = 3; i <= n; i++) {\n                int s = a + b + c;\n                a = b;\n\
  \                b = c;\n                c = s;\n            }\n            return\
  \ c;\n        }"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        if (n == 3) return 1;\n        int n0 = 0;\n        int\
  \ n1 = 0;\n        int n2 = 1;\n        int n3 = 1;\n        for (int i = 4; i <=\
  \ n; i++) {\n            int tmp = n0 + n1 + n2;\n            n0 = n1;\n       \
  \     n1 = n2;\n            n2 = n3;\n            n3 = tmp;\n        }\n       \
  \ return n3;"
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        int f1 = 0;\n        int f2 = 0;\n        int f3 = 1;\n    \
  \    int current = 3;\n        while (current < n) {\n            int temp = f1\
  \ + f2 + f3;\n            f1 = f2;\n            f2 = f3;\n            f3 = temp;\n\
  \            current++;\n        }\n        return f1 + f2 + f3;"
- "        int a = 0;\n        int b = 0;\n        int c = 1;\n        for (int i\
  \ = 0; i < n; i++) {\n            int next = a + b + c;\n            a = b;\n  \
  \          b = c;\n            c = next;\n        }\n        return a;"
- "        // TODO\n        return 0;"
- '        throw new RuntimeException("Not implemented");'
- "      int[] dp = new int[n+1];\n      dp[0] = 0;\n      dp[1] = 0;\n      dp[2]\
  \ = 1;\n      for(int i = 3; i <= n; i++) {\n        dp[i] = dp[i-1] + dp[i-2] +\
  \ dp[i-3];\n      }\n      return dp[n];"
- "        // TODO: implement this function\n        return -1;"
- '        throw new UnsupportedOperationException("Not implemented yet.");'
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        int a = 0;\n        int b = 0;\n        int c = 1;\n   \
  \     int ans = 0;\n        for (int i = 3; i <= n; i++) {\n            ans = a\
  \ + b + c;\n            a = b;\n            b = c;\n            c = ans;\n     \
  \   }\n        return ans;"
- "        int t1 = 0, t2 = 0, t3 = 1;\n        for (int i = 0; i < n; i++) {\n  \
  \          int sum = t1 + t2 + t3;\n            t1 = t2;\n            t2 = t3;\n\
  \            t3 = sum;\n        }\n        return t1;"
- '        return 0;'
- "        // write your code here\n        return 0;"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        int a = 0;\n        int b = 0;\n        int c = 1;\n   \
  \     int d = 0;\n        for (int i = 3; i <= n; i++) {\n            d = a + b\
  \ + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n\
  \        return d;"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        else {\n            return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
  \        }"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        int v0 = 0;\n        int v1 = 0;\n        int v2 = 1;\n\
  \        int i = 3;\n        while (i <= n) {\n            int newV0 = v1;\n   \
  \         int newV1 = v2;\n            int newV2 = v0 + v1 + v2;\n            v0\
  \ = newV0;\n            v1 = newV1;\n            v2 = newV2;\n            i++;\n\
  \        }\n        return v2;"
- "        // TODO: Fill in this function\n        if (n == 0 || n == 1) return 0;\n\
  \        if (n == 2) return 1;\n        int[] f = new int[n + 1];\n        f[0]\
  \ = 0;\n        f[1] = 0;\n        f[2] = 1;\n        for (int i = 3; i <= n; i++)\
  \ {\n            f[i] = f[i - 1] + f[i - 2] + f[i - 3];\n        }\n        return\
  \ f[n];"
- "        int prevPrev = 0;\n        int prev = 0;\n        int current = 1;\n  \
  \      for (int i = 2; i <= n; i++) {\n            prevPrev = prev;\n          \
  \  prev = current;\n            current = prevPrev + prev + current;\n        }\n\
  \        return current;"
- '        return n;'
- "        if (n < 0) return 0;\n        int x = 0, y = 0, z = 1;\n        for (int\
  \ i = 2; i <= n; i++) {\n            int t = x;\n            x = y;\n          \
  \  y = z;\n            z = t + y + z;\n        }\n        return z;"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        int[] arr = new int[n+1];\n        arr[0] = 0;\n       \
  \ arr[1] = 0;\n        arr[2] = 1;\n        for (int i = 3; i <= n; i++) {\n   \
  \         arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n        }\n        return arr[n];"
- "        int[] mem = new int[n+1];\n        mem[0] = 0;\n        mem[1] = 0;\n \
  \       mem[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            mem[i]\
  \ = mem[i-1] + mem[i-2] + mem[i-3];\n        }\n        return mem[n];"
- "        int[] f = new int[n+1];\n        f[0] = 0;\n        f[1] = 0;\n       \
  \ f[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            f[i] = f[i-1] +\
  \ f[i-2] + f[i-3];\n        }\n        return f[n];"
- '        return n < 2 ? 0 : n < 3 ? 1 : fibfib(n-1) + fibfib(n-2) + fibfib(n-3);'
- '        return 0;'
- "        // Please write your code here.\n        if (n == 0) return 0;\n      \
  \  if (n == 1) return 0;\n        if (n == 2) return 1;\n        return fibfib(n-1)\
  \ + fibfib(n-2) + fibfib(n-3);"
- "        int[] fibfibSequence = new int[n+1];\n        fibfibSequence[0] = 0;\n\
  \        fibfibSequence[1] = 0;\n        fibfibSequence[2] = 1;\n        for (int\
  \ i = 3; i <= n; i++) {\n            fibfibSequence[i] = fibfibSequence[i-1] + fibfibSequence[i-2]\
  \ + fibfibSequence[i-3];\n        }\n        return fibfibSequence[n];"
- "        int a = 0;\n        int b = 0;\n        int c = 1;\n        int r = 0;\n\
  \        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        for (int i = 3; i <= n; i++) {\n            r = a + b + c;\n\
  \            a = b;\n            b = c;\n            c = r;\n        }\n       \
  \ return r;"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);"
- "        int a = 0;\n        int b = 0;\n        int c = 1;\n        int res = 0;\n\
  \        for (int i = 2; i <= n; i++) {\n            res = a + b + c;\n        \
  \    a = b;\n            b = c;\n            c = res;\n        }\n        return\
  \ res;"
- "        if (n < 0) {\n            throw new IllegalArgumentException(\"Invalid\
  \ argument\");\n        }\n        if (n == 0) {\n            return 0;\n      \
  \  }\n        if (n == 1) {\n            return 0;\n        }\n        if (n ==\
  \ 2) {\n            return 1;\n        }\n        int n1 = 0;\n        int n2 =\
  \ 0;\n        int n3 = 1;\n        int n4 = 0;\n        for (int i = 3; i <= n;\
  \ i++) {\n            n4 = n1 + n2 + n3;\n            n1 = n2;\n            n2 =\
  \ n3;\n            n3 = n4;\n        }\n        return n4;"
- "        int a = 0;\n        int b = 0;\n        int c = 1;\n        int d = 1;\n\
  \        if (n == 0) return a;\n        if (n == 1) return b;\n        if (n ==\
  \ 2) return c;\n        if (n == 3) return d;\n        while (n-- > 3) {\n     \
  \       int e = a + b + c;\n            a = b;\n            b = c;\n           \
  \ c = d;\n            d = e;\n        }\n        return d;"
- '        return -1;'
- "        if (n < 2) return 0;\n        if (n == 2) return 1;\n        int[] f =\
  \ new int[n+1];\n        f[0] = 0;\n        f[1] = 0;\n        f[2] = 1;\n     \
  \   for (int i = 3; i <= n; i++) {\n            f[i] = f[i-1] + f[i-2] + f[i-3];\n\
  \        }\n        return f[n];"
- "        if (n <= 1) return 0;\n        if (n == 2) return 1;\n        int[] A =\
  \ new int[n];\n        A[0] = 0;\n        A[1] = 0;\n        A[2] = 1;\n       \
  \ for (int i = 3; i < n; i++) {\n            A[i] = A[i-1] + A[i-2] + A[i-3];\n\
  \        }\n        return A[n-1];"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);"
- "        if (n <= 2) {\n            return n - 1;\n        }\n        int prev =\
  \ 0;\n        int prev2 = 0;\n        int prev3 = 1;\n        int res = 1;\n   \
  \     for (int i = 2; i < n; i++) {\n            res = prev + prev2 + prev3;\n \
  \           prev3 = prev2;\n            prev2 = prev;\n            prev = res;\n\
  \        }\n        return res;"
- "        //TODO\n        return 0;"
- "        if (n <= 1) {\n            return 0;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);"
- '        return 0;'
- "        int a = 0;\n        int b = 0;\n        int c = 1;\n        for (int i\
  \ = 3; i <= n; i++) {\n            int next = a + b + c;\n            a = b;\n \
  \           b = c;\n            c = next;\n        }\n        return c;"
- "        if (n < 3) {\n            return n-1;\n        }\n        int[] fib = new\
  \ int[n];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n     \
  \   for (int i = 3; i < n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n\
  \        }\n        return fib[n-1];"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        if (n == 3) return 1;\n        int n1 = 1;\n        int\
  \ n2 = 1;\n        int n3 = 2;\n        for (int i = 4; i <= n; i++) {\n       \
  \     int tmp = n1 + n2 + n3;\n            n1 = n2;\n            n2 = n3;\n    \
  \        n3 = tmp;\n        }\n        return n3;"
- '        throw new IllegalArgumentException("Please implement me");'
- '        return -1;'
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);"
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 1;\n    \
  \    int n4 = 0;\n        int count = 2;\n        while (count < n) {\n        \
  \    n4 = n1 + n2 + n3;\n            n1 = n2;\n            n2 = n3;\n          \
  \  n3 = n4;\n            count++;\n        }\n        return n4;"
- "        // Use a Map to cache the results so we don't have to recompute them when\
  \ we run into repeats.\n        // When we call fibfib(2), we'll compute fibfib(1)\
  \ and fibfib(0) and cache the results.\n        // When we call fibfib(3), we'll\
  \ compute fibfib(2) which will hit the cache and thus be a cheap lookup.\n     \
  \   Map<Integer, Integer> map = new HashMap<>();\n        // You can call a method\
  \ recursively without specifying the class name.\n        return fibfib(n, map);"
- "        // TODO write your code here\n        return 0;"
- "        // Your code here.\n        int[] fib = new int[n + 1];\n        fib[0]\
  \ = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for (int i = 3; i <= n;\
  \ i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n        }\n\
  \        return fib[n];"
- "        int first = 0;\n        int second = 0;\n        int third = 1;\n     \
  \   int temp = 0;\n        if (n == 0) {\n            return 0;\n        }\n   \
  \     if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n \
  \           return 1;\n        }\n        for (int i = 2; i < n; i++) {\n      \
  \      temp = first + second + third;\n            first = second;\n           \
  \ second = third;\n            third = temp;\n        }\n        return temp;"
- "        int prev = 0;\n        int prevprev = 0;\n        int prevprevprev = 0;\n\
  \        int current = 0;\n        for (int i = 0; i < n; i++) {\n            if\
  \ (i < 2) {\n                current = 0;\n            } else if (i == 2) {\n  \
  \              current = 1;\n            } else {\n                prevprevprev\
  \ = prevprev;\n                prevprev = prev;\n                prev = current;\n\
  \                current = prev + prevprev + prevprevprev;\n            }\n    \
  \    }\n        return current;"
- '        return 0;'
- '        throw new UnsupportedOperationException("Please implement the fibfib function");'
- "        // TODO: Implement me!\n        int[] array = new int[n+1];\n        array[0]\
  \ = 0;\n        array[1] = 0;\n        array[2] = 1;\n        for(int i = 3; i <=\
  \ n; i++){\n            array[i] = array[i-1] + array[i-2] + array[i-3];\n     \
  \   }\n        return array[n];"
- "        // Your code here.\n        return 0;"
- "        if (n < 2) {\n            return 0;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);"
- '        throw new RuntimeException("not implemented");'
- "        int a = 0;\n        int b = 0;\n        int c = 1;\n        int d = 0;\n\
  \        for (int i = 2; i <= n; i++) {\n            d = a + b + c;\n          \
  \  a = b;\n            b = c;\n            c = d;\n        }\n        return d;"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        int a = 0;\n        int b = 0;\n        int c = 1;\n   \
  \     int answer = 0;\n        for (int i = 3; i <= n; i++) {\n            answer\
  \ = a + b + c;\n            a = b;\n            b = c;\n            c = answer;\n\
  \        }\n        return answer;"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        int[] f = new int[n + 1];\n        f[0] = 0;\n        f[1]\
  \ = 0;\n        f[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            f[i]\
  \ = f[i - 1] + f[i - 2] + f[i - 3];\n        }\n        return f[n];"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        int a = 0;\n        int b = 0;\n        int c = 1;\n   \
  \     int i = 3;\n        while (i <= n) {\n            int d = a + b + c;\n   \
  \         a = b;\n            b = c;\n            c = d;\n            i++;\n   \
  \     }\n        return c;"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        int prev = 0;\n        int curr = 1;\n        int i = 2;\n\
  \        while (i < n) {\n            int next = prev + curr + prev;\n         \
  \   prev = curr;\n            curr = next;\n            i += 1;\n        }\n   \
  \     return curr;"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        int []fibs = new int[n+1];\n        fibs[0] = 0;\n     \
  \   fibs[1] = 0;\n        fibs[2] = 1;\n        for (int i = 3; i <= n; i++) {\n\
  \            fibs[i] = fibs[i-1] + fibs[i-2] + fibs[i-3];\n        }\n        return\
  \ fibs[n];"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        int[][] result = {{1,1,1},{1,0,0},{0,1,0}};\n        int[][]\
  \ fibfibMatrix = power(result, n-2);\n        return fibfibMatrix[0][0]*1 + fibfibMatrix[0][1]*0\
  \ + fibfibMatrix[0][2]*0;"
- "        int a = 0;\n        int b = 0;\n        int c = 1;\n        int d = 1;\n\
  \        if (n == 0) return a;\n        if (n == 1) return b;\n        if (n ==\
  \ 2) return c;\n        int i = 3;\n        while (i <= n) {\n            int next\
  \ = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n   \
  \         d = next;\n            i++;\n        }\n        return d;"
- "        //\n        //\n        //\n        return 0;"
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        int a = 0;\n        int b = 0;\n        int c = 1;\n       \
  \ int ans = 0;\n        for (int i = 2; i < n; i++) {\n            ans = a + b +\
  \ c;\n            a = b;\n            b = c;\n            c = ans;\n        }\n\
  \        return ans;"
- "        if (n < 0) return -1;\n        if (n == 0) return 0;\n        if (n ==\
  \ 1) return 0;\n        if (n == 2) return 1;\n        int a = 0;\n        int b\
  \ = 0;\n        int c = 1;\n        int sum = 1;\n        for (int i = 3; i <= n;\
  \ i++) {\n            sum = a + b + c;\n            a = b;\n            b = c;\n\
  \            c = sum;\n        }\n        return sum;"
- '        return -1;'
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        int [] memo = new int[n];\n        memo[0] = 0;\n        memo[1]\
  \ = 0;\n        memo[2] = 1;\n        for (int i = 3; i < n; i++) {\n          \
  \  memo[i] = memo[i-1] + memo[i-2] + memo[i-3];\n        }\n        return memo[n-1];"
- "        int[] arr = new int[n + 1];\n        arr[0] = 0;\n        arr[1] = 0;\n\
  \        arr[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            arr[i]\
  \ = arr[i - 1] + arr[i - 2] + arr[i - 3];\n        }\n        return arr[n];"
- "        int first = 0;\n        int second = 0;\n        int third = 1;\n     \
  \   for (int i = 3; i <= n; i++) {\n            int result = first + second + third;\n\
  \            first = second;\n            second = third;\n            third = result;\n\
  \        }\n        return third;"
- '        throw new UnsupportedOperationException("Not Implemented Yet.");'
- "        int[] p = new int[n+1];\n        p[0] = 0;\n        p[1] = 0;\n       \
  \ p[2] = 1;\n        for(int i = 3; i <= n; i++) {\n            p[i] = p[i-1] +\
  \ p[i-2] + p[i-3];\n        }\n        return p[n];"
- "        int a = 0;\n        int b = 0;\n        int c = 1;\n        int d = 0;\n\
  \        while (n > 0) {\n            d = a + b + c;\n            a = b;\n     \
  \       b = c;\n            c = d;\n            n--;\n        }\n        return\
  \ d;"
- "        if (n <= 2) return n-1;\n        int curr = 0, next = 1, fib1 = 0, fib2\
  \ = 1, fib3 = 1;\n        while (curr < n) {\n            fib1 = fib2;\n       \
  \     fib2 = fib3;\n            fib3 = fib1 + fib2 + fib3;\n            curr++;\n\
  \        }\n        return fib3;"
- '        return 0;'
- "        // TODO\n        return 0;"
- "        int[] arr = new int[n+1];\n        arr[0] = 0;\n        arr[1] = 0;\n \
  \       arr[2] = 1;\n        for(int i = 3; i <= n; i++) {\n            arr[i] =\
  \ arr[i-1] + arr[i-2] + arr[i-3];\n        }\n        return arr[n];"
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        int a = 0;\n        int b = 0;\n        int c = 1;\n       \
  \ int sum = 0;\n        for (int i = 3; i <= n; i++) {\n            sum = a + b\
  \ + c;\n            a = b;\n            b = c;\n            c = sum;\n        }\n\
  \        return sum;"
- '        return -1;'
- "        // Fill in the body of this function.\n        // Your code must run in\
  \ O(n) time.\n        // You may write recursive code if you want.\n        int[]\
  \ result = new int[n + 1];\n        result[0] = 0;\n        result[1] = 0;\n   \
  \     result[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            result[i]\
  \ = result[i - 1] + result[i - 2] + result[i - 3];\n        }\n        return result[n];"
- "        // Fill in the code here\n        return 0;"
- "        int[] arr = new int[n+1];\n        arr[0] = 0;\n        arr[1] = 0;\n \
  \       arr[2] = 1;\n        for(int i = 3; i < n+1; i++) {\n            arr[i]\
  \ = arr[i-1] + arr[i-2] + arr[i-3];\n        }\n        return arr[n];"
- "\t\tint x = fibfib(n - 1);\n\t\tint y = fibfib(n - 2);\n\t\tint z = fibfib(n -\
  \ 3);\n\t\treturn x + y + z;"
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        int a = 0;\n        int b = 0;\n        int c = 1;\n       \
  \ int d = 0;\n        while (n > 2) {\n            d = a + b + c;\n            a\
  \ = b;\n            b = c;\n            c = d;\n            n -= 1;\n        }\n\
  \        return d;"
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        int first = 0;\n        int second = 0;\n        int third =\
  \ 1;\n        int result = 1;\n        for (int i = 2; i < n; i++) {\n         \
  \   result = first + second + third;\n            first = second;\n            second\
  \ = third;\n            third = result;\n        }\n        return result;"
- "        // YOUR CODE HERE\n        return 0;"
- "        // YOUR CODE HERE\n        if (n == 0) return 0;\n        if (n == 1) return\
  \ 0;\n        if (n == 2) return 1;\n        return fibfib(n-1) + fibfib(n-2) +\
  \ fibfib(n-3);"
- "        // Fill this in.\n        if (n < 2) return 0;\n        if (n == 2) return\
  \ 1;\n        int prev1 = 0, prev2 = 1, curr = 0;\n        for (int i = 3; i <=\
  \ n; i++) {\n            curr = prev1 + prev2 + (i - 3);\n            prev1 = prev2;\n\
  \            prev2 = curr;\n        }\n        return curr;"
- "        // Solution:\n        //\n        //         n  n == 0   n == 1   n ==\
  \ 2   n > 2\n        // f(n) = { 0  n = 0    n = 1    n = 2    n > 2\n        //\n\
  \        //         n  f(n) == 0 f(n) == 1 f(n) == 2 f(n) > 2\n        // f(n) =\
  \ { 0  n = 0    n = 1    n = 2    n > 2\n        //\n        //         n  f(n)\
  \ < 3  f(n) < 3  f(n) < 3  f(n) > 2\n        // f(n) = { 0  n = 0    n = 1    n\
  \ = 2    n > 2\n        //\n        //         n  f(n) < 3  f(n) < 3  f(n) < 3 \
  \ f(n) > 2\n        // f(n) = { 0  n = 0    n = 1    n = 2    n > 2\n        //\n\
  \        //         n  n = 0     n = 1     n = 2     n > 2\n        // f(n) = {\
  \ 0  n = 0    n = 1    n = 2    n > 2\n        //\n        //         n  n = 0 \
  \    n = 1     n = 2     n > 2\n        // f(n) = { 0  n = 0    n = 1    n = 2 \
  \   n > 2\n        //\n        //         n  n = 0     n = 1     n = 2     n > 2\n\
  \        // f(n) = { 0  n = 0    n = 1    n = 2    n > 2\n        //\n        //\
  \         n  n = 0     n = 1     n = 2     n > 2\n        // f(n) = { 0  n = 0 \
  \   n = 1    n = 2    n > 2\n        //\n        //         n  n = 0     n = 1 \
  \    n = 2     n > 2\n        // f(n) = { 0  n = 0    n = 1    n = 2    n > 2\n\
  \        //\n        //         n  n = 0     n = 1     n = 2     n > 2"
- "        if (n <= 1) return 0;\n        if (n == 2) return 1;\n        int f0 =\
  \ 0;\n        int f1 = 0;\n        int f2 = 1;\n        int fibfib = 0;\n      \
  \  for (int i = 3; i <= n; i++) {\n            fibfib = f0 + f1 + f2;\n        \
  \    f0 = f1;\n            f1 = f2;\n            f2 = fibfib;\n        }\n     \
  \   return fibfib;"
- '        return -1;'
- '        return -1;'
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        int a = 0;\n        int b = 0;\n        int c = 1;\n   \
  \     int d = 0;\n        for (int i = 0; i < n - 2; i++) {\n            d = c +\
  \ b + a;\n            a = b;\n            b = c;\n            c = d;\n        }\n\
  \        return d;"
- "        // Time: O(n), Space: O(1)\n        if (n == 0) return 0;\n        if (n\
  \ == 1) return 0;\n        if (n == 2) return 1;\n        int n1 = 0, n2 = 0, n3\
  \ = 1;\n        for (int i = 3; i <= n; i++) {\n            int tmp = n1 + n2 +\
  \ n3;\n            n1 = n2;\n            n2 = n3;\n            n3 = tmp;\n     \
  \   }\n        return n3;"
- "        int[] f = new int[3];\n        f[0] = 0;\n        f[1] = 0;\n        f[2]\
  \ = 1;\n        if (n == 0) return f[0];\n        if (n == 1) return f[1];\n   \
  \     if (n == 2) return f[2];\n        for (int i = 3; i <= n; i++) {\n       \
  \     int x = f[0] + f[1] + f[2];\n            f[0] = f[1];\n            f[1] =\
  \ f[2];\n            f[2] = x;\n        }\n        return f[2];"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        int fib1 = 0;\n        int fib2 = 0;\n        int fib3 =\
  \ 1;\n        int value = 0;\n        for (int i = 3; i <= n; i++) {\n         \
  \   value = fib1 + fib2 + fib3;\n            fib1 = fib2;\n            fib2 = fib3;\n\
  \            fib3 = value;\n        }\n        return value;"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        if (n == 3) return 1;\n        return fibfib(n-1) + fibfib(n-2)\
  \ + fibfib(n-3);"
- "        if (n <= 1) return 0;\n        else if (n == 2) return 1;\n        else\
  \ {\n            int a = 0, b = 0, c = 1;\n            for (int i = 3; i <= n; i++)\
  \ {\n                int d = a + b + c;\n                a = b;\n              \
  \  b = c;\n                c = d;\n            }\n            return c;\n      \
  \  }"
- "        // TODO.\n        int first = 0;\n        int second = 0;\n        int\
  \ third = 1;\n        if (n == 0) return first;\n        if (n == 1) return second;\n\
  \        for (int i = 2; i <= n; i++) {\n            int current = first + second\
  \ + third;\n            first = second;\n            second = third;\n         \
  \   third = current;\n        }\n        return third;"
- "        if (n <= 1) {\n            return 0;\n        }\n        if (n == 2) {\n\
  \            return 1;\n        }\n        int n1 = 0;\n        int n2 = 0;\n  \
  \      int n3 = 1;\n        int nth = 0;\n        for (int i = 3; i <= n; i++) {\n\
  \            nth = n1 + n2 + n3;\n            n1 = n2;\n            n2 = n3;\n \
  \           n3 = nth;\n        }\n        return nth;"
- "        if (n <= 1) return 0;\n        else if (n == 2) return 1;\n        else\
  \ {\n            int[] fibfibs = new int[n];\n            fibfibs[0] = 0;\n    \
  \        fibfibs[1] = 0;\n            fibfibs[2] = 1;\n            for (int i =\
  \ 3; i < n; i++) {\n                fibfibs[i] = fibfibs[i-1] + fibfibs[i-2] + fibfibs[i-3];\n\
  \            }\n            return fibfibs[n-1];\n        }"
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        int f1 = 0;\n        int f2 = 0;\n        int f3 = 1;\n    \
  \    int f = 0;\n        for (int i = 3; i <= n; i++) {\n            f = f1 + f2\
  \ + f3;\n            f1 = f2;\n            f2 = f3;\n            f3 = f;\n     \
  \   }\n        return f;"
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);"
- '        return 0;'
- '        return 0;'
- "        // Fill in the function body.\n        return 0;"
- '        return 0;'
- "        // TODO: write your code here\n        return -1;"
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        int n_minus_3 = 0;\n        int n_minus_2 = 0;\n        int\
  \ n_minus_1 = 1;\n        int i = 3;\n        while (i <= n) {\n            int\
  \ curr = n_minus_3 + n_minus_2 + n_minus_1;\n            n_minus_3 = n_minus_2;\n\
  \            n_minus_2 = n_minus_1;\n            n_minus_1 = curr;\n           \
  \ i += 1;\n        }\n        return n_minus_3 + n_minus_2 + n_minus_1;"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        int a = 0;\n        int b = 0;\n        int c = 1;\n   \
  \     int d = a + b + c;\n        for (int i = 3; i < n; i++) {\n            a =\
  \ b;\n            b = c;\n            c = d;\n            d = a + b + c;\n     \
  \   }\n        return d;"
- "        int f0 = 0;\n        int f1 = 0;\n        int f2 = 1;\n        int fn =\
  \ f2;\n        for (int i = 3; i <= n; i++) {\n            fn = f0 + f1 + f2;\n\
  \            f0 = f1;\n            f1 = f2;\n            f2 = fn;\n        }\n \
  \       return fn;"
- "        // YOUR CODE HERE\n        return 0;"
- "        int[] fibfib = new int[n + 1];\n        fibfib[0] = 0;\n        fibfib[1]\
  \ = 0;\n        fibfib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n       \
  \     fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n  \
  \      return fibfib[n];"
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        int i = 3;\n        int[] arr = new int[n+1];\n        arr[0]\
  \ = 0;\n        arr[1] = 0;\n        arr[2] = 1;\n        while (i <= n) {\n   \
  \         arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n            i++;\n        }\n\
  \        return arr[n];"
- "        int[] memo = new int[n + 1];\n        return fibfib(n, memo);"
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        int f0 = 0;\n        int f1 = 0;\n        int f2 = 1;\n    \
  \    int curr = 3;\n        while (curr <= n) {\n            int new_f0 = f1;\n\
  \            int new_f1 = f2;\n            int new_f2 = f0 + f1 + f2;\n        \
  \    f0 = new_f0;\n            f1 = new_f1;\n            f2 = new_f2;\n        \
  \    curr++;\n        }\n        return f2;"
- "        if (n <= 2) return n - 1;\n        int a = 0, b = 0, c = 1;\n        for\
  \ (int i = 3; i <= n; i++) {\n            int cur = a + b + c;\n            a =\
  \ b;\n            b = c;\n            c = cur;\n        }\n        return c;"
- '        return 0;'
- '        return 0;'
- "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
  \ 2) return 1;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 1;\n\
  \        int sum = 0;\n        for (int i = 2; i < n; i++) {\n            sum =\
  \ n1 + n2 + n3;\n            n1 = n2;\n            n2 = n3;\n            n3 = sum;\n\
  \        }\n        return sum;"
- "        int[] arr = new int[n+1];\n        if (n == 0) return 0;\n        if (n\
  \ == 1) return 0;\n        if (n == 2) return 1;\n        arr[0] = 0;\n        arr[1]\
  \ = 0;\n        arr[2] = 1;\n        for (int i = 3; i <= n; i++) {\n          \
  \  arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n        }\n        return arr[n];"
- "        int a = 0;\n        int b = 0;\n        int c = 1;\n        for (int i\
  \ = 2; i <= n; i++) {\n            int d = a + b + c;\n            a = b;\n    \
  \        b = c;\n            c = d;\n        }\n        return c;"
- "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
  \            return 0;\n        }\n        if (n == 2) {\n            return 1;\n\
  \        }\n        int a = 0;\n        int b = 0;\n        int c = 1;\n       \
  \ int d = 0;\n        for (int i = 3; i <= n; i++) {\n            d = a + b + c;\n\
  \            a = b;\n            b = c;\n            c = d;\n        }\n       \
  \ return d;"
- "        int i = 0;\n        int a = 0;\n        int b = 0;\n        int c = 1;\n\
  \        while (i < n) {\n            int d = a;\n            a = b;\n         \
  \   b = c;\n            c = d + b + c;\n            i++;\n        }\n        return\
  \ a;"
- '        throw new UnsupportedOperationException("Not Implemented Yet");'
- "        if (n < 0) throw new IllegalArgumentException();\n        int [] fibfib\
  \ = new int[n+1];\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n\
  \        if (n == 2) return 1;\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n\
  \        fibfib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fibfib[i]\
  \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n        }\n        return fibfib[n];"
- "        int a = 0;\n        int b = 0;\n        int c = 1;\n        int d = 0;\n\
  \        for (int i = 0; i < n; i++) {\n            d = a + b + c;\n           \
  \ a = b;\n            b = c;\n            c = d;\n        }\n        return d;"
language: java
name: HumanEval_63_fibfib
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // The FibFib number sequence is a sequence similar to the\
  \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
  \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
  \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
  \ element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n    //\
  \ >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static int\
  \ fibfib(int n) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(fibfib((2)) ==\
  \ (1));\n    assert(fibfib((1)) == (0));\n    assert(fibfib((5)) == (4));\n    assert(fibfib((8))\
  \ == (24));\n    assert(fibfib((10)) == (81));\n    assert(fibfib((12)) == (274));\n\
  \    assert(fibfib((14)) == (927));\n    }\n\n}\n"
