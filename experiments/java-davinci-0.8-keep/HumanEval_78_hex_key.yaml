completions:
- '        return (int)num.chars().filter(n -> "2357BD".indexOf(n) != -1).count();'
- "        int ans = 0;\n        for (int i = 0; i < num.length(); i++) {\n      \
  \      ans += isPrime(getDecimalFromHex(num.charAt(i)));\n        }\n        return\
  \ ans;"
- "        HashSet<Character> hs = new HashSet<Character>();\n        hs.add('2');\
  \ hs.add('3'); hs.add('5'); hs.add('7'); hs.add('B'); hs.add('D');\n        int\
  \ counter = 0;\n        for (char c : num.toCharArray()) {\n            if (hs.contains(c))\
  \ {\n                counter++;\n            }\n        }\n        return counter;"
- "        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n    \
  \        int x = Integer.parseInt(num.substring(i, i + 1), 16);\n            if\
  \ (isPrime(x)) count++;\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n    \
  \        int key = \"0x\" + num.charAt(i);\n            if (key == 2 || key == 3\
  \ || key == 5 || key == 7 || key == 11 || key == 13) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        String hexRegex = \"^[0-9A-F]+$\";\n        String hexPrimes = \"2357BD\"\
  ;\n        int result = 0;\n        if(num.matches(hexRegex)) {\n            for(int\
  \ i = 0; i < num.length(); i++) {\n                String currentHex = String.valueOf(num.charAt(i));\n\
  \                if(hexPrimes.contains(currentHex)) {\n                    result++;\n\
  \                }\n            }\n        }\n        return result;"
- "        HashSet<String> nums = new HashSet<>();\n        nums.add(\"A\");\n   \
  \     nums.add(\"B\");\n        nums.add(\"D\");\n        nums.add(\"E\");\n   \
  \     nums.add(\"F\");\n        nums.add(\"3\");\n        nums.add(\"5\");\n   \
  \     nums.add(\"7\");\n        nums.add(\"2\");\n        return num.chars().filter(x\
  \ -> nums.contains(String.valueOf((char)x))).toArray().length;"
- "        HashSet<Character> hexKeys = new HashSet<>();\n        hexKeys.add('2');\n\
  \        hexKeys.add('3');\n        hexKeys.add('5');\n        hexKeys.add('7');\n\
  \        hexKeys.add('B');\n        hexKeys.add('D');\n        char[] charArray\
  \ = num.toCharArray();\n        int count = 0;\n        for (char c : charArray)\
  \ {\n            if (hexKeys.contains(c)) {\n                count++;\n        \
  \    }\n        }\n        return count;"
- "        // #1\n        // HashSet<Character> hs = new HashSet<Character>();\n \
  \       // hs.add('2');\n        // hs.add('3');\n        // hs.add('5');\n    \
  \    // hs.add('7');\n        // hs.add('B');\n        // hs.add('D');\n       \
  \ // int counter = 0;\n        // for (char letter : num.toCharArray()) {\n    \
  \    //     if (hs.contains(letter)) counter++;\n        // }\n        // return\
  \ counter;\n        // #2\n        char[] arr = new char[] {'2', '3', '5', '7',\
  \ 'B', 'D'};\n        Set<Character> hs = new HashSet<Character>(Arrays.asList(arr));\n\
  \        int counter = 0;\n        for (char letter : num.toCharArray()) {\n   \
  \         if (hs.contains(letter)) counter++;\n        }\n        return counter;"
- "        char[] key = {'2', '3', '5', '7', 'B', 'D'};\n        return (int) Arrays.stream(num.split(\"\
  \"))\n            .filter(Arrays.stream(key)::contains)\n            .count();"
- "        Set<Character> primeHexDigits = new HashSet<Character>();\n        primeHexDigits.add('2');\n\
  \        primeHexDigits.add('3');\n        primeHexDigits.add('5');\n        primeHexDigits.add('7');\n\
  \        primeHexDigits.add('B');\n        primeHexDigits.add('D');\n        char[]\
  \ chars = num.toCharArray();\n        int count = 0;\n        for (char c : chars)\
  \ {\n            if (primeHexDigits.contains(c)) {\n                count++;\n \
  \           }\n        }\n        return count;"
- "        int count = 0;\n        ArrayList<String> hexNums = new ArrayList<String>();\n\
  \        hexNums.add(\"2\");\n        hexNums.add(\"3\");\n        hexNums.add(\"\
  5\");\n        hexNums.add(\"7\");\n        hexNums.add(\"B\");\n        hexNums.add(\"\
  D\");\n        for (int i = 0; i < num.length(); i++) {\n            if (hexNums.contains(num.substring(i,\
  \ i + 1))) {\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        String hex = \"0123456789ABCDEF\";\n        String primes = \"2357BDEF\"\
  ;\n        int result = 0;\n        for (int i = 0; i < num.length(); i++) {\n \
  \           if (primes.contains(String.valueOf(num.charAt(i)))) {\n            \
  \    result++;\n            }\n        }\n        return result;"
- "        // Define array of hexadecimal numbers\n        String[] hexDigits = new\
  \ String[] {\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
  , \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"};\n        // Define array of prime numbers,\
  \ then create list\n        Integer[] hexPrimes = new Integer[] {2, 3, 5, 7, 11,\
  \ 13};\n        List<Integer> hexPrimesList = Arrays.asList(hexPrimes);\n      \
  \  // create counter\n        int count = 0;\n        // convert to stream, then\
  \ iterate over and count\n        Stream<String> numStringStream = Stream.of(num);\n\
  \        for (String s : numStringStream.toArray(String[]::new)) {\n           \
  \ if (hexPrimesList.contains(Integer.parseInt(s, 16))) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        String key = \"2357BD\";\n        int count = 0;\n        for (char c :\
  \ num.toCharArray()) {\n            if (key.indexOf(c) > -1) {\n               \
  \ count++;\n            }\n        }\n        return count;"
- "        int ans = 0;\n        char[] hexDigits = { '0', '1', '2', '3', '4', '5',\
  \ '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n        int[] primes = {\
  \ 2, 3, 5, 7, 11, 13 };\n        Set<Character> primesSet = new HashSet<>();\n \
  \       for (int i = 0; i < primes.length; i++) {\n            primesSet.add(hexDigits[primes[i]]);\n\
  \        }\n        for (int i = 0; i < num.length(); i++) {\n            if (primesSet.contains(num.charAt(i)))\
  \ {\n                ans++;\n            }\n        }\n        return ans;"
- "        if (num.isEmpty()) return 0;\n        HashSet<String> set = new HashSet<String>();\n\
  \        set.add(\"2\");\n        set.add(\"3\");\n        set.add(\"5\");\n   \
  \     set.add(\"7\");\n        set.add(\"B\");\n        set.add(\"D\");\n      \
  \  int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n          \
  \  String s = num.substring(i, i + 1);\n            if (set.contains(s)) {\n   \
  \             count++;\n            }\n        }\n        return count;"
- "        String[] hex = {\"A\", \"B\", \"D\", \"E\"};\n        int count = 0;\n\
  \        char[] n = num.toCharArray();\n        for (int i = 0; i < n.length; i++)\
  \ {\n            if (n[i] == '2' || n[i] == '3' || n[i] == '5' || n[i] == '7') {\n\
  \                count++;\n            }\n            for (int j = 0; j < hex.length;\
  \ j++) {\n                if (n[i] == hex[j].charAt(0)) {\n                    count++;\n\
  \                }\n            }\n        }\n        return count;"
- "        int[] primes = {2, 3, 5, 7, 11, 13};\n        Set<Integer> primesSet =\
  \ new HashSet<Integer>();\n        for (int i : primes) {\n            primesSet.add(i);\n\
  \        }\n        int total = 0;\n        for (int i = 0; i < num.length(); i++)\
  \ {\n            if (primesSet.contains(Character.getNumericValue(num.charAt(i))))\
  \ {\n                total++;\n            }\n        }\n        return total;"
- "        char[] hex = { '2', '3', '5', '7', 'B', 'D' };\n        int count = 0;\n\
  \        for (int i = 0; i < num.length(); i++) {\n            for (int j = 0; j\
  \ < hex.length; j++) {\n                if (num.charAt(i) == hex[j]) {\n       \
  \             count++;\n                }\n            }\n        }\n        return\
  \ count;"
- "        int sol = 0;\n        String[] split = num.split(\"\");\n        for (String\
  \ dig : split) {\n            if (dig.equals(\"2\") || dig.equals(\"3\") || dig.equals(\"\
  5\") || dig.equals(\"7\") || dig.equals(\"B\") || dig.equals(\"D\")) {\n       \
  \         sol++;\n            }\n        }\n        return sol;"
- "        // Implement your solution here.\n        return 0;"
- "        // [2-B] [2-7] [A-D]\n        int count = 0;\n        for (int i = 0; i\
  \ < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c\
  \ == '2' || c == '3' || c == '5' || c == '7'\n                || c == 'B' || c ==\
  \ 'D') {\n                count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        Set<Character> hexPrimes = new HashSet<>(Arrays.asList('2',\
  \ '3', '5', '7', 'B', 'D'));\n        for (int i = 0; i < num.length(); i++) {\n\
  \            if (hexPrimes.contains(num.charAt(i))) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        if (num.isEmpty()) {\n            return 0;\n        }\n        int count\
  \ = 0;\n        char[] hexes = {'2', '3', '5', '7', 'B', 'D'};\n        for (int\
  \ i = 0; i < num.length(); i++) {\n            for (int j = 0; j < hexes.length;\
  \ j++) {\n                if (num.charAt(i) == hexes[j]) {\n                   \
  \ count++;\n                }\n            }\n        }\n        return count;"
- "        final int[] primes = {2, 3, 5, 7, 11, 13};\n        int count = 0;\n  \
  \      for (int i = 0; i < num.length(); i++) {\n            for (int j = 0; j <\
  \ primes.length; j++) {\n                if (Integer.parseInt(num.substring(i, i\
  \ + 1), 16) == primes[j])\n                    count++;\n            }\n       \
  \ }\n        return count;"
- "        if (num.isEmpty()) return 0;\n        int cnt = 0;\n        for (int i\
  \ = 0; i < num.length(); i++) {\n            switch (num.charAt(i)) {\n        \
  \        case '2':\n                case '3':\n                case '5':\n     \
  \           case '7':\n                case 'B':\n                case 'D':\n  \
  \                  cnt++;\n            }\n        }\n        return cnt;"
- "        String hexDigits = \"0123456789ABCDEF\";\n        String primes = \"2357BDEF\"\
  ;\n        Set<Character> hexKeySet = primes.chars().mapToObj(c -> (char)c).collect(Collectors.toSet());\n\
  \        int counter = 0;\n        if(num.length() == 0) {\n            return counter;\n\
  \        }\n        for(int i = 0; i < num.length(); i++) {\n            if(hexKeySet.contains(num.charAt(i)))\
  \ {\n                counter++;\n            }\n        }\n        return counter;"
- "        int result = 0;\n        for (int i = 0; i < num.length(); i++) {\n   \
  \         char ch = num.charAt(i);\n            int x = Character.digit(ch, 16);\n\
  \            if (x == 2 || x == 3 || x == 5 || x == 7 || x == 11 || x == 13) {\n\
  \                result++;\n            }\n        }\n        return result;"
- "        int count = 0;\n        // Write your code here\n        return count;"
- "        Set<String> primes = new HashSet<>(Arrays.asList(\"2\", \"3\", \"5\", \"\
  7\", \"B\", \"D\"));\n        return (int)num.chars().mapToObj(c -> Character.toString((char)c)).filter(primes::contains).count();"
- "        Set<Character> valid = new HashSet<>(Arrays.asList('2', '3', '5', '7',\
  \ 'B', 'D'));\n        return (int)num.chars().filter(c -> valid.contains((char)c)).count();"
- "        //your code goes here.\n        var result = 0;\n        var hexPrimes\
  \ = Set.of(\"2\", \"3\", \"5\", \"7\", \"B\", \"D\");\n        for (var ch : num.toCharArray())\
  \ {\n            if (hexPrimes.contains(ch + \"\")) {\n                result++;\n\
  \            }\n        }\n        return result;"
- "        // Decimal array and HashMap for the Hex primes\n        int[] decimal\
  \ = {2, 3, 5, 7, 11, 13};\n        HashMap<Integer, Character> hexPrime = new HashMap<>();\n\
  \        hexPrime.put(2, '2');\n        hexPrime.put(3, '3');\n        hexPrime.put(5,\
  \ '5');\n        hexPrime.put(7, '7');\n        hexPrime.put(11, 'B');\n       \
  \ hexPrime.put(13, 'D');\n        int count = 0;\n        for (int i = 0; i < num.length();\
  \ i++) {\n            int value = Character.getNumericValue(num.charAt(i));\n  \
  \          if (hexPrime.containsKey(value)) {\n                count++;\n      \
  \      }\n        }\n        return count;"
- "        int result = 0;\n        for (int i = 0; i < num.length(); i++) {\n   \
  \         String temp = num.substring(i, i + 1);\n            if (temp.equals(\"\
  2\") || temp.equals(\"3\") || temp.equals(\"5\") || temp.equals(\"7\") || temp.equals(\"\
  B\") || temp.equals(\"D\")) {\n                result++;\n            }\n      \
  \  }\n        return result;"
- "        char[] primes = {'2', '3', '5', '7', 'B', 'D'};\n        int count = 0;\n\
  \        for (int i = 0; i < num.length(); i++) {\n            for (int j = 0; j\
  \ < primes.length; j++) {\n                if (num.charAt(i) == primes[j]) {\n \
  \                   count++;\n                }\n            }\n        }\n    \
  \    return count;"
- '        return 0;'
- "        int count = 0;\n        String[] array = {\"2\", \"3\", \"5\", \"7\", \"\
  B\", \"D\"};\n        for (int i = 0; i < num.length(); i++) {\n            if (Arrays.asList(array).contains(num.substring(i,\
  \ i + 1))) {\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        // split the string at each character into an array\n        String[] array\
  \ = num.split(\"\");\n        // create a map to keep track of the count of hex\
  \ numbers\n        Map<String, Integer> counts = new HashMap<>();\n        // loop\
  \ through the string array\n        for (String s : array) {\n            // check\
  \ if the hex number is a key in the map\n            if (counts.containsKey(s))\
  \ {\n                // get the count of hex numbers\n                int count\
  \ = counts.get(s);\n                // increment the count by 1\n              \
  \  count++;\n                // put the key (hex number) in the map with the count\n\
  \                counts.put(s, count);\n            } else {\n                //\
  \ put the key (hex number) in the map with the count of 1\n                counts.put(s,\
  \ 1);\n            }\n        }\n        // loop through the map\n        for (Map.Entry<String,\
  \ Integer> entry : counts.entrySet()) {\n            // get the key (hex number)\n\
  \            String hex = entry.getKey();\n            // convert the hex number\
  \ to an integer\n            int value = Integer.parseInt(hex, 16);\n          \
  \  // check if the integer is greater than 1\n            if (value > 1) {\n   \
  \             // check if the integer is not prime\n                if (!isPrime(value))\
  \ {\n                    // remove the key (hex number) from the map\n         \
  \           counts.remove(hex);\n                }\n            } else {\n     \
  \           // remove the key (hex number) from the map\n                counts.remove(hex);\n\
  \            }\n        }\n        // count the number of prime hex numbers\n  \
  \      int total = 0;\n        // loop through the map\n        for (Map.Entry<String,\
  \ Integer> entry : counts.entrySet()) {\n            // get the count of prime hex\
  \ numbers\n            int count = entry.getValue();\n            // add the count\
  \ to the total\n            total += count;\n        }\n        // return the count\
  \ of prime hex numbers\n        return total;"
- "        final List<String> primes = Arrays.asList(\"2\", \"3\", \"5\", \"7\", \"\
  B\", \"D\");\n        int out = 0;\n        int i = 0;\n        while (i < num.length())\
  \ {\n            if (primes.contains(num.substring(i, i + 1))) {\n             \
  \   out++;\n            }\n            i++;\n        }\n        return out;"
- "        String digits = \"2357BD\";\n        char[] n = num.toCharArray();\n  \
  \      int count = 0;\n        for (int i = 0; i < n.length; i++) {\n          \
  \  char c = n[i];\n            if (digits.indexOf(c) != -1) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int result = 0;\n        Set<Character> hexDigits = new HashSet<>(Arrays.asList('2',\
  \ '3', '5', '7', 'B', 'D'));\n        for (char c : num.toCharArray()) {\n     \
  \       if (hexDigits.contains(c)) {\n                result++;\n            }\n\
  \        }\n        return result;"
- '        return 0;'
- "        int total = 0;\n        Map<String, Boolean> map = new HashMap<>();\n \
  \       for (String a : Arrays.asList(\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"))\
  \ {\n            map.put(a, true);\n        }\n        for (String a : num.split(\"\
  \")) {\n            if (map.containsKey(a)) {\n                total++;\n      \
  \      }\n        }\n        return total;"
- '        return 0;'
- "        int res = 0;\n        for (int i = 0; i < num.length(); i++) {\n      \
  \      char c = num.charAt(i);\n            if (c == 'A' || c == 'B' || c == 'D')\
  \ res++;\n        }\n        return res;"
- "        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n    \
  \        if (isPrime(\"\" + num.charAt(i))) {\n                count++;\n      \
  \      }\n        }\n        return count;"
- "        int count = 0;\n        int[] primes = {2, 3, 5, 7, 11, 13};\n        for\
  \ (char c : num.toCharArray()) {\n            if (c >= '0' && c <= '9') {\n    \
  \            if (primes[c - '0'] != 0) {\n                    count++;\n       \
  \         }\n            } else {\n                if (primes[10 + c - 'A'] != 0)\
  \ {\n                    count++;\n                }\n            }\n        }\n\
  \        return count;"
- "        // 10 based hex number\n        BigInteger hexInt = new BigInteger(num,\
  \ 16);\n        // Call prime hex number method\n        return primeHex(hexInt);"
- "        // Get the key\n        String[] keys = num.split(\"\");\n        // Initialize\
  \ the iterator and the result\n        int result = 0;\n        for (String key\
  \ : keys) {\n            switch (key) {\n                case \"2\":\n         \
  \       case \"3\":\n                case \"5\":\n                case \"7\":\n\
  \                case \"B\":\n                case \"D\":\n                    result++;\n\
  \                    break;\n                default:\n                    break;\n\
  \            }\n        }\n        return result;"
- "        int numConverted = Integer.parseInt(num, 16);\n        int n = numConverted;\n\
  \        int count = 0;\n        while (n % 2 == 0) {\n            count++;\n  \
  \          n /= 2;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n \
  \           while (n % i == 0) {\n                count++;\n                n /=\
  \ i;\n            }\n        }\n        if (n > 2) {\n            count++;\n   \
  \     }\n        return count;"
- "        return Stream.of(num.split(\"\"))\n            .map(i -> {\n          \
  \      switch (i) {\n                    case \"A\": return 10;\n              \
  \      case \"B\": return 11;\n                    case \"C\": return 12;\n    \
  \                case \"D\": return 13;\n                    case \"E\": return\
  \ 14;\n                    case \"F\": return 15;\n                    default:\
  \ return Integer.parseInt(i);\n                }\n            })\n            .filter(i\
  \ -> (i == 2 || i == 3 || i == 5 || i == 7 || i == 11 || i == 13))\n           \
  \ .collect(Collectors.toList())\n            .size();"
- "        String _numbers = \"2357BDF\";\n        int count = 0;\n        for (int\
  \ i = 0; i < num.length(); i++) {\n            if (_numbers.contains(String.valueOf(num.charAt(i))))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- '        return 0;'
- "        return Stream.of(num.split(\"\"))\n        .map(Integer::parseInt)\n  \
  \      .map(x -> x<10?x:x-7)\n        .map(x -> Integer.toString(x,10))\n      \
  \  .map(x -> Integer.parseInt(x))\n        .filter(x -> {\n            if (x<2)\
  \ return false;\n            for (int i=2;i<=Math.sqrt(x);i++) {\n             \
  \   if (x%i==0) return false;\n            }\n            return true;\n       \
  \ })\n        .collect(Collectors.toList())\n        .size();"
- "        String[] hexDigits = {\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"};\n    \
  \    int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n        \
  \    if (Arrays.asList(hexDigits).contains(String.valueOf(num.charAt(i)))) {\n \
  \               count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        // Set<Character> primes = new HashSet<Character>();\n\
  \        // primes.add(new Character('2'));\n        // primes.add(new Character('3'));\n\
  \        // primes.add(new Character('5'));\n        // primes.add(new Character('7'));\n\
  \        // primes.add(new Character('B'));\n        // primes.add(new Character('D'));\n\
  \        Map<Character, Boolean> map = new HashMap<Character, Boolean>();\n    \
  \    map.put(new Character('2'), true);\n        map.put(new Character('3'), true);\n\
  \        map.put(new Character('5'), true);\n        map.put(new Character('7'),\
  \ true);\n        map.put(new Character('B'), true);\n        map.put(new Character('D'),\
  \ true);\n        Set<Character> primes = map.keySet();\n        for (int i = 0;\
  \ i < num.length(); i++) {\n            if (primes.contains(num.charAt(i))) {\n\
  \                count++;\n            }\n        }\n        return count;"
- "        if (num.length() == 0) return 0;\n        // hexKey[i] is the decimal value\
  \ of the hex char at i.\n        int[] hexKey = {10, 11, 12, 13, 14, 15};\n    \
  \    // 2, 3, 5, 7, 11, 13, 17, 19\n        // Set can be used as a boolean map.\n\
  \        Set<Integer> primeSet = new HashSet<Integer>();\n        primeSet.add(2);\n\
  \        primeSet.add(3);\n        primeSet.add(5);\n        primeSet.add(7);\n\
  \        primeSet.add(11);\n        primeSet.add(13);\n        primeSet.add(17);\n\
  \        primeSet.add(19);\n        int count = 0;\n        for (int i = 0; i <\
  \ num.length(); i++) {\n            char c = num.charAt(i);\n            int value\
  \ = 0;\n            if (c >= '0' && c <= '9') {\n                value = c - '0';\n\
  \            } else {\n                value = hexKey[c - 'A'];\n            }\n\
  \            if (primeSet.contains(value)) {\n                count++;\n       \
  \     }\n        }\n        return count;"
- "        // Your code here\n        Set<Character> hexPrimes = new HashSet<Character>();\n\
  \        hexPrimes.add('2');\n        hexPrimes.add('3');\n        hexPrimes.add('5');\n\
  \        hexPrimes.add('7');\n        hexPrimes.add('B');\n        hexPrimes.add('D');\n\
  \        return num.chars().mapToObj(c -> (char) c).filter(c -> hexPrimes.contains(c)).toArray().length;"
- "        int n = 0;\n        int[] primes = {2, 3, 5, 7, 11, 13};\n        Set<Character>\
  \ p = new HashSet<Character>();\n        for (int i = 0; i < primes.length; i++)\
  \ {\n            p.add(Integer.toHexString(primes[i]).charAt(0));\n        }\n \
  \       for (int i = 0; i < num.length(); i++) {\n            if (p.contains(num.charAt(i)))\
  \ {\n                n++;\n            }\n        }\n        return n;"
- "        char[] hex = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B',\
  \ 'C', 'D', 'E', 'F'};\n        char[] prime = {'2', '3', '5', '7', 'B', 'D'};\n\
  \        //String hex = \"0123456789ABCDEF\";\n        //String prime = \"2357BD\"\
  ;\n        int count = 0;\n        char[] newNum = num.toCharArray();\n        for\
  \ (int i = 0; i < num.length(); i++) {\n            if (new String(prime).contains(new\
  \ String(newNum[i] + \"\"))) {\n                count++;\n            }\n      \
  \  }\n        return count;"
- "        int n=0;\n        for(int i=0;i<num.length();i++)\n            switch(num.charAt(i))\
  \ {\n                case '2':\n                case '3':\n                case\
  \ '5':\n                case '7':\n                case 'B':\n                case\
  \ 'D':\n                    n++;\n            }\n        return n;"
- "        int result = 0;\n        final String[] match = new String[]{\"2\", \"\
  3\", \"5\", \"7\", \"B\", \"D\"};\n        for (String s : match) {\n          \
  \  result += StringUtils.countMatches(num, s);\n        }\n        return result;"
- "        return new StringBuilder(num.replaceAll(\"[a-fA-F2-7B-D]\", \"\"))\n  \
  \          .length();"
- "        int counter = 0;\n        String primeHex = \"2357BDF\";\n        for (int\
  \ i = 0; i < num.length(); i++) {\n            if (primeHex.contains(num.substring(i,\
  \ i + 1))) {\n                counter++;\n            }\n        }\n        return\
  \ counter;"
- "        if (num.length() == 0) return 0;\n        String regex = \"[0-9A-F]*\"\
  ;\n        if (!num.matches(regex)) {\n            throw new IllegalArgumentException(\"\
  Invalid hex number\");\n        }\n        int result = 0;\n        for (int i =\
  \ 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n           \
  \ if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n\
  \                result++;\n            }\n        }\n        return result;"
- "        int ret = 0;\n        Set<String> primes = new HashSet<String>(\n     \
  \       Arrays.asList(\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"));\n        for (int\
  \ i = 0; i < num.length(); i++) {\n            if (primes.contains(String.valueOf(num.charAt(i))))\
  \ {\n                ret++;\n            }\n        }\n        return ret;"
- "        int[] Hexprimes = { 2, 3, 5, 7, 11, 13 };\n        int count = 0;\n   \
  \     for (int i = 0; i < num.length(); i++) {\n            for (int j = 0; j <\
  \ Hexprimes.length; j++) {\n                switch (num.charAt(i)) {\n         \
  \           case '1':\n                        if (Hexprimes[j] == 1) {\n      \
  \                      count++;\n                        }\n                   \
  \     break;\n                    case '2':\n                        if (Hexprimes[j]\
  \ == 2) {\n                            count++;\n                        }\n   \
  \                     break;\n                    case '3':\n                  \
  \      if (Hexprimes[j] == 3) {\n                            count++;\n        \
  \                }\n                        break;\n                    case '4':\n\
  \                        if (Hexprimes[j] == 4) {\n                            count++;\n\
  \                        }\n                        break;\n                   \
  \ case '5':\n                        if (Hexprimes[j] == 5) {\n                \
  \            count++;\n                        }\n                        break;\n\
  \                    case '6':\n                        if (Hexprimes[j] == 6) {\n\
  \                            count++;\n                        }\n             \
  \           break;\n                    case '7':\n                        if (Hexprimes[j]\
  \ == 7) {\n                            count++;\n                        }\n   \
  \                     break;\n                    case '8':\n                  \
  \      if (Hexprimes[j] == 8) {\n                            count++;\n        \
  \                }\n                        break;\n                    case '9':\n\
  \                        if (Hexprimes[j] == 9) {\n                            count++;\n\
  \                        }\n                        break;\n                   \
  \ case 'A':\n                        if (Hexprimes[j] == 10) {\n               \
  \             count++;\n                        }\n                        break;\n\
  \                    case 'B':\n                        if (Hexprimes[j] == 11)\
  \ {\n                            count++;\n                        }\n         \
  \               break;\n                    case 'C':\n                        if\
  \ (Hexprimes[j] == 12) {\n                            count++;\n               \
  \         }\n                        break;\n                    case 'D':\n   \
  \                     if (Hexprimes[j] == 13) {\n                            count++;\n\
  \                        }\n                        break;\n                   \
  \ case 'E':\n                        if (Hexprimes[j] == 14"
- "        String hexPrimes = \"2357BDEF\";\n        if (num.length() == 0) return\
  \ 0;\n        int counter = 0;\n        for (char c : num.toCharArray()) {\n   \
  \         if (hexPrimes.contains(c + \"\")) counter++;\n        }\n        return\
  \ counter;"
- "        int count = 0;\n        int[] primeKeys = {2, 3, 5, 7, 11, 13};\n     \
  \   for (int i = 0; i < num.length(); i++) {\n            String val = String.valueOf(num.charAt(i));\n\
  \            int key = Integer.parseInt(val, 16);\n            if (Arrays.binarySearch(primeKeys,\
  \ key) >= 0) {\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        if (num.length() == 0) {\n            return 0;\n        }\n        HashSet<String>\
  \ primes = new HashSet<String>();\n        primes.add(\"2\");\n        primes.add(\"\
  3\");\n        primes.add(\"5\");\n        primes.add(\"7\");\n        primes.add(\"\
  B\");\n        primes.add(\"D\");\n        primes.add(\"F\");\n        char[] arr\
  \ = num.toCharArray();\n        int count = 0;\n        for (int i = 0; i < arr.length;\
  \ i++) {\n            if (primes.contains(String.valueOf(arr[i]))) {\n         \
  \       count++;\n            }\n        }\n        return count;"
- "        final int[] primeNumbers = {2, 3, 5, 7, 11, 13};\n        final char[]\
  \ primeChars = {'2', '3', '5', '7', 'B', 'D'};\n        int count = 0;\n       \
  \ char[] chars = num.toCharArray();\n        for (char c : chars) {\n          \
  \  int charValue = Character.getNumericValue(c);\n            for (int i = 0; i\
  \ < primeNumbers.length; i++) {\n                if (charValue == primeNumbers[i]\
  \ || charValue == primeChars[i]) {\n                    count++;\n             \
  \   }\n            }\n        }\n        return count;"
- "        int result = 0;\n        String key = \"2 3 5 7 B D\";\n        String[]\
  \ keyArray = key.split(\" \");\n        String[] numArray = num.split(\"\");\n \
  \       for (int i = 0; i < numArray.length; i++) {\n            for (int j = 0;\
  \ j < keyArray.length; j++) {\n                if (numArray[i].equals(keyArray[j]))\
  \ {\n                    result++;\n                }\n            }\n        }\n\
  \        return result;"
- "        // Your code here...\n        return -1;"
- "        int solution = 0;\n        for (int index = 0; index < num.length(); index++)\
  \ {\n            char current = num.charAt(index);\n            if (current == '2'\
  \ || current == '3' || current == '5' || current == '7'\n            || current\
  \ == 'B' || current == 'D') {\n                solution++;\n            }\n    \
  \    }\n        return solution;"
- "        int cnt = 0;\n        for (char c : num.toCharArray()) {\n            if\
  \ (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n   \
  \             cnt++;\n            }\n        }\n        return cnt;"
- "        return Long.valueOf(num, 16).stream()\n            .filter(d -> d == '2'\
  \ || d == '3' || d == '5' || d == '7' || d == 'B' || d == 'D')\n            .count();"
- "        // Your code here\n        int count = 0;\n        for (char c : num.toCharArray())\
  \ {\n            int val = \"0123456789ABCDEF\".indexOf(c);\n            if (val\
  \ >= 0 && val <= 9)\n                if (val >= 2 && val <= 7)\n               \
  \     count++;\n            if (val >= 10 && val <= 15)\n                if (val\
  \ == 11 || val == 13)\n                    count++;\n        }\n        return count;"
- "        // Check the input here\n        if (num == null || num.isEmpty()) return\
  \ 0;\n        int n = num.length();\n        char[] ca = num.toCharArray();\n  \
  \      int[] ia = new int[n];\n        for (int i = 0; i < n; i++) {\n         \
  \   ia[i] = Integer.parseInt(ca[i]+\"\", 16);\n        }\n        return Arrays.stream(ia).filter(x\
  \ -> x == 2 || x == 3 || x == 5 || x == 7 || x == 11 || x == 13).sum();"
- "        // #\n        // # Write your code here\n        // #\n        return 0;"
- "        int n = 0;\n        HashSet<Character> hm = new HashSet<Character>();\n\
  \        hm.add('2');\n        hm.add('3');\n        hm.add('5');\n        hm.add('7');\n\
  \        hm.add('B');\n        hm.add('D');\n        for (char c : num.toCharArray())\
  \ {\n            if (hm.contains(c)) n++;\n        }\n        return n;"
- "        int[] array = {2, 3, 5, 7, 11, 13};\n        int count = 0;\n        char[]\
  \ chars = num.toCharArray();\n        for (char ch : chars) {\n            switch\
  \ (ch) {\n                case '2':\n                    count++;\n            \
  \        break;\n                case '3':\n                    count++;\n     \
  \               break;\n                case '5':\n                    count++;\n\
  \                    break;\n                case '7':\n                    count++;\n\
  \                    break;\n                case 'B':\n                    count++;\n\
  \                    break;\n                case 'D':\n                    count++;\n\
  \                    break;\n                case 'F':\n                    count++;\n\
  \                    break;\n            }\n        }\n        return count;"
- "        return (int) Arrays.stream(num.split(\"\"))\n            .filter(x -> \"\
  2357BD\".contains(x))\n            .count();"
- "        return num.toLowerCase().chars().map(x -> x - '0').filter(\n          \
  \  x -> x == 10 || x == 11 || x == 13 || x == 2 || x == 3 || x == 5 || x == 7).boxed().collect(Collectors.toList()).size();"
- "        // BASE CASE\n        if (num.length() < 1) {\n            return 0;\n\
  \        }\n        // RECURSIVE CASE\n        char firstChar = num.charAt(0);\n\
  \        String smallerStr = num.substring(1);\n        int smallerResult = hexKey(smallerStr);\n\
  \        // MY CODE\n        boolean isPrime = false;\n        int[] primeHex =\
  \ {2, 3, 5, 7, 11, 13};\n        if (firstChar >= '0' && firstChar <= '9') {\n \
  \           int n = Character.getNumericValue(firstChar);\n            for (int\
  \ i = 0; i < primeHex.length; i++) {\n                if (n == primeHex[i]) {\n\
  \                    isPrime = true;\n                }\n            }\n       \
  \ } else {\n            for (int i = 0; i < primeHex.length; i++) {\n          \
  \      if (firstChar == Character.forDigit(primeHex[i],16)) {\n                \
  \    isPrime = true;\n                }\n            }\n        }\n        if (isPrime)\
  \ {\n            return 1 + smallerResult;\n        } else {\n            return\
  \ smallerResult;\n        }"
- "        if (num.length() == 0) {\n            return 0;\n        }\n        Integer\
  \ hexKey = 0;\n        char[] hexCode = {'0', '1', '2', '3', '4', '5', '6', '7',\
  \ '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};\n        char[] hexPrime = {'2', '3',\
  \ '5', '7', 'B', 'D'};\n        for (int i = 0; i < num.length(); i++) {\n     \
  \       for (int j = 0; j < hexPrime.length; j++) {\n                if (num.charAt(i)\
  \ == hexPrime[j]) {\n                    hexKey++;\n                }\n        \
  \    }\n        }\n        return hexKey;"
- "        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n    \
  \        switch (num.charAt(i)) {\n                case '2':\n                case\
  \ '3':\n                case '5':\n                case '7':\n                case\
  \ 'B':\n                case 'D':\n                    count++;\n              \
  \      break;\n                default:\n                    break;\n          \
  \  }\n        }\n        return count;"
- "        // Good luck\n        int result = 0;\n        //System.out.println(num);\n\
  \        char[] characters = num.toCharArray();\n        for (char c : characters)\
  \ {\n            if (Character.getNumericValue(c) == 2 || Character.getNumericValue(c)\
  \ == 3 || Character.getNumericValue(c) == 5 || Character.getNumericValue(c) == 7\
  \ || Character.getNumericValue(c) == 11 || Character.getNumericValue(c) == 13) {\n\
  \                result++;\n            }\n        }\n        return result;"
- "        HashSet<Character> hs = new HashSet<Character>();\n        char[] hexa\
  \ = {'2', '3', '5', '7', 'B', 'D'};\n        char[] hex = {'0', '1', '2', '3', '4',\
  \ '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};\n        for (int i =\
  \ 0; i < hexa.length; i++) {\n            hs.add(hexa[i]);\n        }\n        int\
  \ count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (hs.contains(num.charAt(i)))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- '        return num.toUpperCase().replaceAll("[^234567BDEF]", "").length();'
- "        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n    \
  \        if (isPrime(hexDigitToDecimal(num.charAt(i)))) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        String[] pairs = new String[]{\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"\
  ,\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"};\n        List<String> primes\
  \ = Arrays.asList(\"2\",\"3\",\"5\",\"7\",\"B\",\"D\");\n        int primeCount\
  \ = 0;\n        if(num.length() > 0) {\n            for(int i = 0; i < num.length();\
  \ i++) {\n                primeCount += (primes.contains(num.substring(i,i+1)) ?\
  \ 1 : 0);\n            }\n        }\n        return primeCount;"
- "        int count = 0;\n        for (char ch : num.toCharArray()) {\n         \
  \   int dec = Integer.parseInt(Character.toString(ch), 16);\n            if (isPrime(dec))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        HashSet<Character> h = new HashSet<Character>();\n        int val = 0;\n\
  \        for (char s : \"2357BD\".toCharArray())\n            h.add(s);\n      \
  \  for (char c : num.toCharArray())\n            if (h.contains(c))\n          \
  \      val++;\n        return val;"
- "        char[] chars = num.toCharArray();\n        List<Character> list = new ArrayList<>();\n\
  \        Set<Character> set = new HashSet<>();\n        set.add('2');\n        set.add('3');\n\
  \        set.add('5');\n        set.add('7');\n        set.add('B');\n        set.add('D');\n\
  \        Arrays.asList(chars).forEach(c -> {\n            if (set.contains(c)) {\n\
  \                list.add(c);\n            }\n        });\n        return list.size();"
- "        char[] hex = \"0123456789ABCDEF\".toCharArray();\n        char[] numArr\
  \ = num.toCharArray();\n        String hexString = \"\";\n        for (char c :\
  \ numArr) {\n            for (char h : hex) {\n                if (c == h) {\n \
  \                   hexString += c;\n                }\n            }\n        }\n\
  \        int count = 0;\n        int numStr = Integer.parseInt(hexString, 16);\n\
  \        int m = numStr / 2;\n        for (int i = 2; i <= m; i++) {\n         \
  \   if (numStr % i == 0) {\n                return 0;\n            }\n        }\n\
  \        return 1;"
- "        // TODO: solve the problem :)\n        String[] hexa = {\"0\",\"1\",\"\
  2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"\
  };\n        int count = 0;\n        for(int i = 0; i < num.length(); i++){\n   \
  \         if(num.charAt(i) == '2' || num.charAt(i) == '3' || num.charAt(i) == '5'\
  \ || num.charAt(i) == '7' || num.charAt(i) == 'B' || num.charAt(i) == 'D'){\n  \
  \              count++;\n            }\n        }\n        return count;"
- "      final Set<Character> keys = new HashSet<Character>();\n      keys.add('2');\n\
  \      keys.add('3');\n      keys.add('5');\n      keys.add('7');\n      keys.add('B');\n\
  \      keys.add('D');\n      return (int) num.chars().filter(i -> keys.contains((char)\
  \ i)).count();"
- "        String chars = \"2357BD\";\n        int count = 0;\n        for (char c\
  \ : num.toCharArray()) {\n            for (char cc : chars.toCharArray()) {\n  \
  \              if (c == cc) {\n                    count++;\n                }\n\
  \            }\n        }\n        return count;"
- "        int[] isPrime = {0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0};\n   \
  \     int sum = 0;\n        for (int i = 0; i < num.length(); i++) {\n         \
  \   int val = hexToInt(num.charAt(i));\n            if (isPrime[val] == 1) {\n \
  \               sum++;\n            }\n        }\n        return sum;"
- "        int len = num.length();\n        if (len < 1) return 0;\n        int total\
  \ = 0;\n        int mod = 0;\n        char[] arr = num.toCharArray();\n        for\
  \ (int i = 0; i < len; i++) {\n            if (arr[i] == 'A' || arr[i] == 'B' ||\
  \ arr[i] == 'D') {\n                if (arr[i] == 'B') {\n                    total++;\n\
  \                } else {\n                    mod = i;\n                    for\
  \ (int j = i + 1; j < len; j++) {\n                        mod++;\n            \
  \            if (arr[j] == 'B') {\n                            total++;\n      \
  \                      i = mod;\n                            break;\n          \
  \              }\n                    }\n                }\n            }\n    \
  \    }\n        return total;"
- "        var primes = new HashSet<Integer>(List.of(2, 3, 5, 7, 11, 13));\n     \
  \   var result = 0;\n        for (var i = 0; i < num.length(); i++) {\n        \
  \    var hexDigit = num.charAt(i);\n            var decimalDigit = Integer.parseInt(String.valueOf(hexDigit),\
  \ 16);\n            if (primes.contains(decimalDigit)) {\n                result++;\n\
  \            }\n        }\n        return result;"
- "        if (num.length() == 0) return 0;\n        int count = 0;\n        Map<Character,Integer>\
  \ hm = new HashMap<>();\n        hm.put('0', 0);\n        hm.put('1', 1);\n    \
  \    hm.put('2', 2);\n        hm.put('3', 3);\n        hm.put('4', 4);\n       \
  \ hm.put('5', 5);\n        hm.put('6', 6);\n        hm.put('7', 7);\n        hm.put('8',\
  \ 8);\n        hm.put('9', 9);\n        hm.put('A', 10);\n        hm.put('B', 11);\n\
  \        hm.put('C', 12);\n        hm.put('D', 13);\n        hm.put('E', 14);\n\
  \        hm.put('F', 15);\n        Set<Integer> primes = new HashSet<>(\n      \
  \      Arrays.asList(2, 3, 5, 7, 11, 13)\n        );\n        for (int i = 0; i\
  \ < num.length(); i++) {\n            if (primes.contains(hm.get(num.charAt(i))))\
  \ count++;\n        }\n        return count;"
- '        return 0;'
- "        // I'm cheating by using a hashmap, but whatever, its more efficient\n\
  \        // than an array of booleans\n        Map<Character, Integer> primeCharToInt\
  \ = new HashMap<>();\n        primeCharToInt.put('2', 2);\n        primeCharToInt.put('3',\
  \ 3);\n        primeCharToInt.put('5', 5);\n        primeCharToInt.put('7', 7);\n\
  \        primeCharToInt.put('B', 11);\n        primeCharToInt.put('D', 13);\n  \
  \      int total = 0;\n        for (int i = 0; i < num.length(); i++) {\n      \
  \      if (primeCharToInt.containsKey(num.charAt(i))) {\n                total++;\n\
  \            }\n        }\n        return total;"
- "        final String PRIMES = \"2357BD\";\n        int cnt = 0;\n        for (int\
  \ i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n       \
  \     if (PRIMES.indexOf(c) != -1) cnt++;\n        }\n        return cnt;"
- "        int cnt = 0;\n        // System.out.println(num);\n        Set<Character>\
  \ primeKeys = new HashSet<Character>();\n        primeKeys.add('2');\n        primeKeys.add('3');\n\
  \        primeKeys.add('5');\n        primeKeys.add('7');\n        primeKeys.add('B');\n\
  \        primeKeys.add('D');\n        for (char key : num.toCharArray()) {\n   \
  \         // System.out.println(key);\n            if (primeKeys.contains(key))\
  \ {\n                cnt++;\n            }\n        }\n        return cnt;"
- "        String hexPrimes = \"2357BDC\";\n        return num.chars().filter(ch ->\
  \ hexPrimes.indexOf(ch) >= 0).count();"
- "        int primes = 0;\n        if (num.length() == 0) {\n            return 0;\n\
  \        }\n        int[] hex = {2, 3, 5, 7, 11, 13};\n        Map<Character, Integer>\
  \ digits = new HashMap<>();\n        digits.put('0', 0);\n        digits.put('1',\
  \ 1);\n        digits.put('2', 2);\n        digits.put('3', 3);\n        digits.put('4',\
  \ 4);\n        digits.put('5', 5);\n        digits.put('6', 6);\n        digits.put('7',\
  \ 7);\n        digits.put('8', 8);\n        digits.put('9', 9);\n        digits.put('A',\
  \ 10);\n        digits.put('B', 11);\n        digits.put('C', 12);\n        digits.put('D',\
  \ 13);\n        digits.put('E', 14);\n        digits.put('F', 15);\n        for\
  \ (int i = 0; i < num.length(); i++) {\n            if (Arrays.binarySearch(hex,\
  \ digits.get(num.charAt(i))) >= 0) {\n                primes++;\n            }\n\
  \        }\n        return primes;"
- "        final String primeHexes = \"2357BD\";\n        return (int)num.chars().mapToObj(x\
  \ -> Character.toString((char)x)).filter(x -> primeHexes.contains(x)).count();"
- "        int primes = 0;\n        for (char ch : num.toCharArray()) {\n        \
  \    if (Arrays.asList(new char[]{'2', '3', '5', '7', 'B', 'D'}).contains(ch)) {\n\
  \                primes++;\n            }\n        }\n        return primes;"
- "        int res = 0;\n        for (int i = 0; i < num.length(); i++) {\n      \
  \      char c = num.charAt(i);\n            if (c == '2' || c == '3' || c == '5'\
  \ || c == '7' || c == 'B' || c == 'D')\n                res++;\n        }\n    \
  \    return res;"
- "        int count = 0;\n        Set<Character> set = new HashSet<Character>();\n\
  \        set.add('2'); set.add('3'); set.add('5'); set.add('7');\n        set.add('B');\
  \ set.add('D');\n        //\n        for (char c : num.toCharArray()) {\n      \
  \      if (set.contains(c)) {\n                count++;\n            }\n       \
  \ }\n        return count;"
- "      int N = num.length();\n      Set<Character> primes = new HashSet<>(Arrays.asList('2','3','5','7','B','D'));\n\
  \      int count = 0;\n      for (int i = 0; i < N; i++) {\n        char c = num.charAt(i);\n\
  \        if (primes.contains(c)) count++;\n      }\n      return count;"
- "        int count = 0;\n        String hex = \"0123456789ABCDEF\";\n        String\
  \ prime = \"2357BDF\";\n        for (int i = 0; i < num.length(); i++) {\n     \
  \       String digit = String.valueOf(num.charAt(i));\n            if (prime.contains(digit))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        int sum = 0;\n        String[] hexKeys = {\"2\", \"3\", \"5\", \"7\", \"\
  B\", \"D\"};\n        for (int i = 0; i < num.length(); i++) {\n            String\
  \ hexKey = Character.toString(num.charAt(i));\n            for (int j = 0; j < hexKeys.length;\
  \ j++) {\n                if (hexKey.equals(hexKeys[j])) {\n                   \
  \ sum++;\n                }\n            }\n        }\n        return sum;"
- "        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n    \
  \        if (\"2357BDF\".contains(num.substring(i, i + 1))) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int sum = 0;\n        int[] keys = {2, 3, 5, 7, 11, 13};\n        int[]\
  \ digits = new int[num.length()];\n        for (int i = 0; i < num.length(); i++)\
  \ {\n            char c = num.charAt(i);\n            if (c >= '0' && c <= '9')\
  \ {\n                digits[i] = c - '0';\n            } else {\n              \
  \  digits[i] = c - 'A' + 10;\n            }\n        }\n        for (int digit :\
  \ digits) {\n            for (int key : keys) {\n                if (digit == key)\
  \ {\n                    sum++;\n                }\n            }\n        }\n \
  \       return sum;"
- "        // number of hexadecimal digits that are primes\n        // digits: 2,\
  \ 3, 5, 7, B (=decimal 11), D (=decimal 13)\n        // Examples:\n        // For\
  \ num = \"AB\" the output should be 1.\n        // For num = \"1077E\" the output\
  \ should be 2.\n        // For num = \"ABED1A33\" the output should be 4.\n    \
  \    // For num = \"123456789ABCDEF0\" the output should be 6.\n        // For num\
  \ = \"2020\" the output should be 2.\n        int count = 0;\n        if (num.isEmpty())\
  \ return count;\n        Map<Character, Integer> map = new HashMap<>();\n      \
  \  map.put('A', 11);\n        map.put('B', 11);\n        map.put('C', 11);\n   \
  \     map.put('D', 13);\n        map.put('E', 13);\n        map.put('F', 13);\n\
  \        for (int i = 0; i < num.length(); i++) {\n            int n = Character.isDigit(num.charAt(i))\
  \ ? \n                    Integer.parseInt(String.valueOf(num.charAt(i))) : \n \
  \                   map.get(num.charAt(i));\n            if (isPrime(n)) count++;\n\
  \        }\n        return count;"
- "        // Convert the given string to a string of char and then collect it as\
  \ a\n        // stream of char.\n        // Map the characters into integers.\n\
  \        // Filter the values by testing if each is greater than 1, not a product\n\
  \        // of two smaller natural numbers, and whether it is contained in the\n\
  \        // given array of prime hexadecimal digits.\n        // Add up the sizes\
  \ of the 3 streams.\n        // Count the number of elements in the stream.\n  \
  \      return Stream.of(num.chars().map(c -> Character.getNumericValue(c))\n   \
  \             .filter(i -> i > 1 && IntStream.range(2, i).noneMatch(j -> i % j ==\
  \ 0)\n                        && Arrays.asList(2, 3, 5, 7, 11, 13).contains(i)).count())\n\
  \                .collect(Collectors.toList()).size();"
- "        int result = 0;\n        if (num == null || num.length() == 0) {\n    \
  \        return result;\n        }\n        Map<Character, Integer> hexMap = new\
  \ HashMap<>();\n        hexMap.put('0', 0);\n        hexMap.put('1', 1);\n     \
  \   hexMap.put('2', 2);\n        hexMap.put('3', 3);\n        hexMap.put('4', 4);\n\
  \        hexMap.put('5', 5);\n        hexMap.put('6', 6);\n        hexMap.put('7',\
  \ 7);\n        hexMap.put('8', 8);\n        hexMap.put('9', 9);\n        hexMap.put('A',\
  \ 10);\n        hexMap.put('B', 11);\n        hexMap.put('C', 12);\n        hexMap.put('D',\
  \ 13);\n        hexMap.put('E', 14);\n        hexMap.put('F', 15);\n        List<Integer>\
  \ hexList = new ArrayList<>();\n        for (int i = 0; i < num.length(); i++) {\n\
  \            hexList.add(hexMap.get(num.charAt(i)));\n        }\n        System.out.println(hexList);\n\
  \        for (int i = 0; i < hexList.size(); i++) {\n            int digit = hexList.get(i);\n\
  \            if (digit == 2 || digit == 3 || digit == 5 || digit == 7 || \n    \
  \            digit == 11 || digit == 13) {\n                result++;\n        \
  \    }\n        }\n        return result;"
- "        Set<Character> primes = new HashSet<Character>();\n        primes.add('0');\n\
  \        primes.add('1');\n        primes.add('2');\n        primes.add('3');\n\
  \        primes.add('5');\n        primes.add('7');\n        primes.add('B');\n\
  \        primes.add('D');\n        return IntStream.range(0, num.length())\n   \
  \     .map(i -> primes.contains(num.charAt(i)) ? 1 : 0)\n        .sum();"
- "        int count = 0;\n        if (num.isEmpty()) return count;\n        char[]\
  \ digits = num.toCharArray();\n        Set<Character> primes = new HashSet<Character>(Arrays.asList('2',\
  \ '3', '5', '7', 'B', 'D'));\n        for (char digit : digits) {\n            if\
  \ (primes.contains(digit)) {\n                count++;\n            }\n        }\n\
  \        return count;"
- "        int digits = 0;\n        for (char digit : num.toCharArray()) {\n     \
  \       if (\"2357BD\".indexOf(digit) >= 0) {\n                digits++;\n     \
  \       }\n        }\n        return digits;"
- "        int count = 0;\n        char[] hexKeys = new char[]{'2', '3', '5', '7',\
  \ 'B', 'D'};\n        for (int i = 0; i < num.length(); i++) {\n            for\
  \ (int j = 0; j < hexKeys.length; j++) {\n                if (num.charAt(i) == hexKeys[j])\
  \ {\n                    count++;\n                }\n            }\n        }\n\
  \        return count;"
- "        int key = 0;\n        int count = 0;\n        char[] numArray = num.toCharArray();\n\
  \        int[] numArray2 = Arrays.stream(numArray).map(Character::getNumericValue).toArray();\n\
  \        for (int i = 0; i < numArray2.length; i++) {\n            if (numArray2[i]\
  \ == 2 || numArray2[i] == 3 || numArray2[i] == 5 || numArray2[i] == 7 ||\n     \
  \       numArray2[i] == 11 || numArray2[i] == 13) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        return (int) num.chars().filter(\n            c -> (c - '0' >= 0 && c -\
  \ '0' <= 9)\n                || (c - 'A' >= 0 && c - 'A' <= 5)\n        ).count();"
- "        StringBuffer buffer = new StringBuffer();\n        String[] hexadecimal\
  \ = {\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\"\
  , \"B\", \"C\", \"D\", \"E\", \"F\"};\n        int[] decimal = {0, 1, 2, 3, 4, 5,\
  \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n        int numDecimal = 0;\n        for\
  \ (int i = 0; i < num.length(); i++) {\n            for (int j = 0; j < hexadecimal.length;\
  \ j++) {\n                if (num.charAt(i) == hexadecimal[j].charAt(0)) {\n   \
  \                 buffer.append(decimal[j]);\n                }\n            }\n\
  \        }\n        numDecimal = Integer.parseInt(buffer.toString());\n        //\
  \ System.out.println(numDecimal);\n        int[] primes = {2, 3, 5, 7, 11, 13};\n\
  \        int answer = 0;\n        for (int i = 0; i < primes.length; i++) {\n  \
  \          int digit = numDecimal;\n            while (digit != 0) {\n         \
  \       if (digit % 10 == primes[i]) {\n                    answer++;\n        \
  \        }\n                digit /= 10;\n            }\n        }\n        return\
  \ answer;"
- '        return 0;'
- "        String hexPrimes = \"2357BDF\";\n        char[] nArr = num.toCharArray();\n\
  \        int count = 0;\n        for (char n : nArr) {\n            if (hexPrimes.indexOf(n)\
  \ != -1) {\n                count++;\n            }\n        }\n        return count;"
- "        // System.out.println(\"num: \" + num);\n        int count = 0;\n     \
  \   for (char ch : num.toCharArray()) {\n            if (ch == '2' || ch == '3'\
  \ || ch == '5' || ch == '7' || ch == 'B' || ch == 'D') {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        // your code here\n        int[] hex2int = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n\
  \        HashMap<Integer,Character> int2hex = new HashMap<Integer,Character>();\n\
  \        int i = 0;\n        for (int v : hex2int) {\n            if (v <= 9) {\n\
  \                int2hex.put(v, (char)(v + '0'));\n            } else {\n      \
  \          int2hex.put(v, (char)((v-10) + 'A'));\n            }\n            i++;\n\
  \        }\n        int c = 0;\n        for (char ch : num.toCharArray()) {\n  \
  \          int v = ch;\n            if (v >= 'A') {\n                v = v - 'A'\
  \ + 10;\n            } else {\n                v = v - '0';\n            }\n   \
  \         if (v == 2 || v == 3 || v == 5 || v == 7 || v == 11 || v == 13) {\n  \
  \              c++;\n            }\n        }\n        return c;"
- "        int result = 0;\n        Set<Character> hexSet = new HashSet<Character>();\n\
  \        hexSet.add('2');\n        hexSet.add('3');\n        hexSet.add('5');\n\
  \        hexSet.add('7');\n        hexSet.add('B');\n        hexSet.add('D');\n\
  \        for (int i = 0; i < num.length(); i++) {\n            if (hexSet.contains(num.charAt(i)))\
  \ {\n                result++;\n            }\n        }\n        return result;"
- "        String key = \"2357BDF\";\n        int count = 0;\n        for (char c\
  \ : num.toCharArray()) {\n            if (key.indexOf(c) != -1) {\n            \
  \    count++;\n            }\n        }\n        return count;"
- "        int n = num.length();\n        int count = 0;\n        for (int i = 0;\
  \ i < n; i++) {\n            char ch = num.charAt(i);\n            if (ch == '2'\
  \ || ch == '3' || ch == '5' || ch == '7' ||\n                ch == 'B' || ch ==\
  \ 'D') {\n                count++;\n            }\n        }\n        return count;"
- "        return num.length() == 0 ? 0 : \n            num.replaceAll(\"^[0-9]+$\"\
  , \"\")\n                .replaceAll(\"[ABCDEF]\", \"X\")\n                .replaceAll(\"\
  [^X]\", \"\")\n                .length();"
- "        int ret = 0;\n        if (num == null || num.length() == 0) {\n       \
  \     return ret;\n        }\n        int dec = 0;\n        int pos = 0;\n     \
  \   while (pos < num.length()) {\n            char c = num.charAt(pos);\n      \
  \      if (c >= '0' && c <= '9') {\n                dec += (c - '0') * Math.pow(16,\
  \ num.length() - pos - 1);\n            } else if (c >= 'A' && c <= 'F') {\n   \
  \             dec += (c - 'A' + 10) * Math.pow(16, num.length() - pos - 1);\n  \
  \          }\n            pos++;\n        }\n        System.out.println(dec);\n\
  \        if (dec == 2 || dec == 3 || dec == 5 || dec == 7 || dec == 11 || dec ==\
  \ 13) {\n            ret++;\n        }\n        return ret;"
- "        if (num.length() == 0) return 0;\n        int numPrimes = 0;\n        int\
  \ len = num.length();\n        int sum = 0;\n        int[] digits = new int[len];\n\
  \        for (int i = 0; i < len; i++) {\n            switch (num.charAt(i)) {\n\
  \                case '0':\n                    sum += 0;\n                    break;\n\
  \                case '1':\n                    sum += 1;\n                    break;\n\
  \                case '2':\n                    sum += 2;\n                    break;\n\
  \                case '3':\n                    sum += 3;\n                    break;\n\
  \                case '4':\n                    sum += 4;\n                    break;\n\
  \                case '5':\n                    sum += 5;\n                    break;\n\
  \                case '6':\n                    sum += 6;\n                    break;\n\
  \                case '7':\n                    sum += 7;\n                    break;\n\
  \                case '8':\n                    sum += 8;\n                    break;\n\
  \                case '9':\n                    sum += 9;\n                    break;\n\
  \                case 'A':\n                    sum += 10;\n                   \
  \ break;\n                case 'B':\n                    sum += 11;\n          \
  \          break;\n                case 'C':\n                    sum += 12;\n \
  \                   break;\n                case 'D':\n                    sum +=\
  \ 13;\n                    break;\n                case 'E':\n                 \
  \   sum += 14;\n                    break;\n                case 'F':\n        \
  \            sum += 15;\n                    break;\n            }\n        }\n\
  \        System.out.println(sum);\n        return sum;"
- "        String hex = \"0123456789ABCDEF\";\n        String primes = \"2357BDF\"\
  ;\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n  \
  \          if (primes.contains(num.substring(i, i + 1))) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int count = 0;\n        String[] hex = {\"2\", \"3\", \"5\", \"7\", \"\
  B\", \"D\"};\n        for (int i = 0; i < num.length(); i++) {\n            for\
  \ (int j = 0; j < hex.length; j++) {\n                if (num.substring(i, i + 1).equals(hex[j]))\
  \ {\n                    count++;\n                }\n            }\n        }\n\
  \        return count;"
- "        int sum = 0;\n        for (int i = 0; i < num.length(); i++) {\n      \
  \      char c = num.charAt(i);\n            int n = 0;\n            switch (c) {\n\
  \                case 'A': n = 10; break;\n                case 'B': n = 11; break;\n\
  \                case 'C': n = 12; break;\n                case 'D': n = 13; break;\n\
  \                case 'E': n = 14; break;\n                case 'F': n = 15; break;\n\
  \                default: n = Integer.parseInt(String.valueOf(c));\n           \
  \ }\n            if (isPrime(n)) sum++;\n        }\n        return sum;"
- "        // make an array of hex keys\n        String[] hexKeys = new String[] {\"\
  0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\"\
  , \"C\", \"D\", \"E\", \"F\"};\n        int count = 0;\n        // create a set\
  \ to check if it is a prime number\n        Set<String> primeNumbers = new HashSet<String>(Arrays.asList(\"\
  2\", \"3\", \"5\", \"7\", \"B\", \"D\"));\n        // loop through the hex key and\
  \ check if it is in the prime number\n        for (int i = 0; i < hexKeys.length;\
  \ i++) {\n            if (primeNumbers.contains(hexKeys[i])) {\n               \
  \ count++;\n            }\n        }\n        return count;"
- "        int[] primes = {2, 3, 5, 7, 11, 13};\n        char[] hexDigits = {'0',\
  \ '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};\n\
  \        int[] hexVals = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n\
  \        int count = 0;\n        for (int i = 0; i < primes.length; i++) {\n   \
  \         for (int j = 0; j < hexDigits.length; j++) {\n                if (primes[i]\
  \ == hexVals[j]) {\n                    for (int k = 0; k < num.length(); k++) {\n\
  \                        if (num.charAt(k) == hexDigits[j]) {\n                \
  \            count++;\n                        }\n                    }\n      \
  \          }\n            }\n        }\n        return count;"
- "        int count = 0;\n        int []hexArray = {2,3,5,7,11,13};\n        if (num\
  \ == \"\") return 0;\n        char []s = num.toCharArray();\n        for (int i\
  \ = 0; i < s.length; i++) {\n            if ((s[i] >= '0' && s[i] <= '9') || (s[i]\
  \ >= 'A' && s[i] <= 'F')) {\n                int hex = Integer.parseInt(Character.toString(s[i]),\
  \ 16);\n                for (int j = 0; j < hexArray.length; j++) {\n          \
  \          if (hex == hexArray[j]) count++;\n                }\n            }\n\
  \        }\n        return count;"
- "        int primes = 0;\n        for (int i = 0; i < num.length(); i++) {\n   \
  \         if (isPrime(Integer.parseInt(num.substring(i, i + 1), 16))) {\n      \
  \          primes++;\n            }\n        }\n        return primes;"
- "        int result = 0;\n        List<String> lst = Arrays.asList(\"2\", \"3\"\
  , \"5\", \"7\", \"B\", \"D\");\n        for (int i = 0; i < num.length(); i++) {\n\
  \            String d = num.substring(i, i + 1);\n            if (lst.contains(d))\
  \ {\n                result++;\n            }\n        }\n        return result;"
- "        int hexCount = 0;\n        String[] hex = num.split(\"\");\n        HashMap<String,Integer>\
  \ hexMap = new HashMap<String,Integer>();\n        hexMap.put(\"0\",0);\n      \
  \  hexMap.put(\"1\",1);\n        hexMap.put(\"2\",2);\n        hexMap.put(\"3\"\
  ,3);\n        hexMap.put(\"4\",4);\n        hexMap.put(\"5\",5);\n        hexMap.put(\"\
  6\",6);\n        hexMap.put(\"7\",7);\n        hexMap.put(\"8\",8);\n        hexMap.put(\"\
  9\",9);\n        hexMap.put(\"A\",10);\n        hexMap.put(\"B\",11);\n        hexMap.put(\"\
  C\",12);\n        hexMap.put(\"D\",13);\n        hexMap.put(\"E\",14);\n       \
  \ hexMap.put(\"F\",15);\n        for(int i = 0; i < hex.length; i++) {\n       \
  \     if (isPrime(hexMap.get(hex[i]))) {\n                hexCount++;\n        \
  \    }\n        }\n        return hexCount;"
- "        int result = 0;\n        Map<String, Integer> hextable = new HashMap<String,\
  \ Integer>();\n        hextable.put(\"A\", 10);\n        hextable.put(\"B\", 11);\n\
  \        hextable.put(\"C\", 12);\n        hextable.put(\"D\", 13);\n        hextable.put(\"\
  E\", 14);\n        hextable.put(\"F\", 15);\n        Set<Integer> primes = new HashSet<Integer>();\n\
  \        primes.add(2);\n        primes.add(3);\n        primes.add(5);\n      \
  \  primes.add(7);\n        primes.add(11);\n        primes.add(13);\n        for\
  \ (int i = 0; i < num.length(); i++) {\n            if (primes.contains(hextable.getOrDefault(String.valueOf(num.charAt(i)),\
  \ Integer.parseInt(String.valueOf(num.charAt(i)))))) {\n                result++;\n\
  \            }\n        }\n        return result;"
- "        int primeCount = 0;\n        int maxDigit = num.length();\n        for\
  \ (int i = 0; i < maxDigit; i++) {\n            if (prime(hexToDec(num.charAt(i))))\
  \ primeCount++;\n        }\n        return primeCount;"
- "        if (num.isEmpty()) return 0;\n        int count = 0;\n        for (int\
  \ i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n       \
  \     if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\
  \ count++;\n        }\n        return count;"
- "        int result = 0;\n        // Write code here\n        return result;"
- "        // python to java\n        // def hexKey(num):\n        //     if num ==\
  \ \"\":\n        //         return 0\n        //     return len([x for x in num\
  \ if x in \"2357BD\"])\n        // Good Luck!\n        if (num.equals(\"\")) return\
  \ 0;\n        int hexKey = 0;\n        for (int i = 0; i < num.length(); i++) {\n\
  \            if (num.charAt(i) == '2' ||\n                num.charAt(i) == '3' ||\n\
  \                num.charAt(i) == '5' ||\n                num.charAt(i) == '7' ||\n\
  \                num.charAt(i) == 'B' ||\n                num.charAt(i) == 'D')\
  \ hexKey++;\n        }\n        return hexKey;"
- "        String hex = \"0123456789ABCDEF\";\n        String primes = \"2357BDEF\"\
  ;\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n  \
  \          if (primes.contains(num.substring(i, i + 1))) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int ans = 0;\n        int mod = 1000000007;\n        for (int i = 0; i\
  \ < num.length(); i++) {\n            int k = num.charAt(i);\n            if (k\
  \ == '2' || k == '3' || k == '5' || k == '7' || k == 'B' || k == 'D') {\n      \
  \          ans = (ans + 1) % mod;\n            }\n        }\n        return ans;"
- "        int count = 0;\n        String[] arr = {\"2\", \"3\", \"5\", \"7\", \"\
  B\", \"D\"};\n        for (int i = 0; i < num.length(); i++) {\n            for\
  \ (int j = 0; j < arr.length; j++) {\n                if (num.substring(i, i + 1).equals(arr[j]))\
  \ {\n                    count++;\n                }\n            }\n        }\n\
  \        return count;"
- "        int counter = 0;\n        for (char c : num.toCharArray()) {\n        \
  \    if (isPrime(c)) {\n                counter++;\n            }\n        }\n \
  \       return counter;"
- '        return 0;'
- "        Map<Character, Integer> hm = new HashMap<>();\n        //         hm.put('0',\
  \ 0);\n        //         hm.put('1', 1);\n        //         hm.put('2', 2);\n\
  \        //         hm.put('3', 3);\n        //         hm.put('4', 4);\n      \
  \  //         hm.put('5', 5);\n        //         hm.put('6', 6);\n        //  \
  \       hm.put('7', 7);\n        //         hm.put('8', 8);\n        //        \
  \ hm.put('9', 9);\n        //         hm.put('A', 10);\n        //         hm.put('B',\
  \ 11);\n        //         hm.put('C', 12);\n        //         hm.put('D', 13);\n\
  \        //         hm.put('E', 14);\n        //         hm.put('F', 15);\n    \
  \    hm.put('0', 2);\n        hm.put('1', 3);\n        hm.put('2', 5);\n       \
  \ hm.put('3', 7);\n        hm.put('4', 11);\n        hm.put('5', 13);\n        hm.put('6',\
  \ 17);\n        hm.put('7', 19);\n        hm.put('8', 23);\n        hm.put('9',\
  \ 29);\n        hm.put('A', 31);\n        hm.put('B', 37);\n        hm.put('C',\
  \ 41);\n        hm.put('D', 43);\n        hm.put('E', 47);\n        hm.put('F',\
  \ 53);\n        String[] numbers = num.split(\"\");\n        int count = 0;\n  \
  \      for (String n : numbers) {\n            if (hm.get(n.charAt(0)) != null)\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        int result = 0;\n        List<String> primes = new ArrayList<>();\n   \
  \     primes.add(\"2\");\n        primes.add(\"3\");\n        primes.add(\"5\");\n\
  \        primes.add(\"7\");\n        primes.add(\"B\");\n        primes.add(\"D\"\
  );\n        for (int i = 0; i < num.length(); i++) {\n            if (primes.contains(num.substring(i,\
  \ i + 1))) {\n                result++;\n            }\n        }\n        return\
  \ result;"
- "        // 1. iterate over each char in the string\n        // 2. check if it's\
  \ a hex key or not\n        // 3. map hex key to a decimal number\n        // 4.\
  \ check if the decimal number is a prime\n        // 5. return the number of primes\
  \ \n        int primes = 0;\n        for (int i = 0; i < num.length(); i++) {\n\
  \            char c = num.charAt(i);\n            if (isHexKey(c)) {\n         \
  \       if (isPrime(toDecimal(c))) {\n                    primes++;\n          \
  \      }\n            }\n        }\n        return primes;"
- "        int n = 0;\n        for (int i = 0; i < num.length(); i++) {\n        \
  \    if (isPrime(num.charAt(i))) n++;\n        }\n        return n;"
- "        int c = 0;\n        for (int i = 0; i < num.length(); i++) {\n        \
  \    char ch = num.charAt(i);\n            if (ch == '2' || ch == '3' || ch == '5'\
  \ || ch == '7' || ch == 'B' || ch == 'D') c++;\n        }\n        return c;"
- "        int[] hex2dec = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n\
  \        int result = 0;\n        String[] hex = {\"A\", \"B\", \"C\", \"D\", \"\
  E\", \"F\"};\n        int index = 0;\n        while (index < num.length()) {\n \
  \           String a = num.substring(index, index + 1);\n            for (int i\
  \ = 0; i < 16; i++) {\n                if (a.equals(hex[i])) {\n               \
  \     a = Integer.toString(hex2dec[i]);\n                }\n            }\n    \
  \        int n = Integer.parseInt(a);\n            boolean isPrime = true;\n   \
  \         for (int i = 2; i < n; i++) {\n                if (n % i == 0) {\n   \
  \                 isPrime = false;\n                    break;\n               \
  \ }\n            }\n            if (isPrime) {\n                result++;\n    \
  \        }\n            index++;\n        }\n        return result;"
- "        char[] nums = num.toCharArray();\n        int count = 0;\n        int[]\
  \ primes = {2, 3, 5, 7, 11, 13};\n        for (char n : nums) {\n            int\
  \ numToInt = Character.digit(n, 16);\n            if (Arrays.binarySearch(primes,\
  \ numToInt) > -1) {\n                count++;\n            }\n        }\n      \
  \  return count;"
- "        String[] hex = { \"2\", \"3\", \"5\", \"7\", \"B\", \"D\" };\n        int\
  \ count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (Arrays.asList(hex).contains(num.substring(i,\
  \ i + 1))) {\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        int result = 0;\n        for (char c : num.toCharArray()) {\n         \
  \   switch (c) {\n                case '2':\n                case '3':\n       \
  \         case '5':\n                case '7':\n                case 'B':\n    \
  \            case 'D':\n                    result++;\n            }\n        }\n\
  \        return result;"
- "        String[] hex = {\"A\", \"B\", \"D\", \"E\"};\n        Set<String> set =\
  \ new HashSet<>(Arrays.asList(hex));\n        char[] c = num.toCharArray();\n  \
  \      int count = 0;\n        for (char i : c) {\n            if (set.contains(Character.toString(i)))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        // Convert to upper case to avoid case sensitivity.\n        String hexDigits\
  \ = num.toUpperCase();\n        // Keep track of the number of keys.\n        int\
  \ keyCount = 0;\n        // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
  \ A, B, C, D, E, F.\n        // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n \
  \       // So you have to determine a number of the following digits: 2, 3, 5, 7,\
  \ \n        // B (=decimal 11), D (=decimal 13).\n        // Note: you may assume\
  \ the input is always correct or empty string, \n        // and symbols A,B,C,D,E,F\
  \ are always uppercase.\n        // Hex: [\"0\", \"1\", \"2\", \"3\", \"4\", \"\
  5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n   \
  \     // Keys: [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n        // Loop over\
  \ each character in the string.\n        for (int i = 0; i < hexDigits.length();\
  \ i++) {\n            // Get the char at the current index.\n            char digit\
  \ = hexDigits.charAt(i);\n            // Convert the char to a string.\n       \
  \     String digitStr = String.valueOf(digit);\n            // If the hex digit\
  \ is one of the keys, increment the key count.\n            if (digitStr.equals(\"\
  2\") || digitStr.equals(\"3\") || digitStr.equals(\"5\") || digitStr.equals(\"7\"\
  ) || digitStr.equals(\"B\") || digitStr.equals(\"D\")) {\n                keyCount++;\n\
  \            }\n        }\n        // Return the key count.\n        return keyCount;"
- '        return 0;'
- "        HashSet<String> primes = new HashSet<String>();\n        primes.add(\"\
  2\");\n        primes.add(\"3\");\n        primes.add(\"5\");\n        primes.add(\"\
  7\");\n        primes.add(\"B\");\n        primes.add(\"D\");\n        primes.add(\"\
  F\");\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n\
  \            if (primes.contains(num.substring(i, i + 1))) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int result = 0;\n        char[] hexArray = \"0123456789ABCDEF\".toCharArray();\n\
  \        Map<Character, Integer> map = new HashMap<Character, Integer>();\n    \
  \    for (int i = 0; i < hexArray.length; i++) {\n            map.put(hexArray[i],\
  \ i);\n        }\n        char[] nums = num.toCharArray();\n        for (int i =\
  \ 0; i < nums.length; i++) {\n            int n = map.get(nums[i]);\n          \
  \  if (n == 1 || n == 2 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13) {\n\
  \                result++;\n            }\n        }\n        return result;"
- "        int result = 0;\n        // Use Streams from Java 8\n        result = (int)num.chars().mapToObj(x\
  \ -> (char)x).filter(c ->\n            c == '2' || c == '3' || c == '5' || c ==\
  \ '7' ||\n            c == 'B' || c == 'D').count();\n        return result;"
- "        if (num.length()==0) return 0;\n        Map<Character,Integer> map = new\
  \ HashMap<>();\n        for (int i=0;i<=9;i++) map.put((char)(i+'0'),i);\n     \
  \   for (int i=10;i<=15;i++) map.put((char)(i-10+'A'),i);\n        char[] chars\
  \ = num.toCharArray();\n        int count = 0;\n        for (char c:chars) {\n \
  \           int d = map.get(c);\n            if (d==1) continue;\n            if\
  \ (d==2 || d==3 || d==5 || d==7 || d==11 || d==13) count++;\n        }\n       \
  \ return count;"
- "        // A list of prime numbers that are hexadecimal digits\n        List<String>\
  \ hexPrimes = Arrays.asList(\"2\", \"3\", \"5\", \"7\", \"B\", \"D\");\n       \
  \ // Convert the hex number string to a list of chars\n        List<String> hexChars\
  \ = new ArrayList<>();\n        hexChars = Arrays.asList(num.split(\"\"));\n   \
  \     // Count number of prime hexadecimal digits\n        int nPrimes = 0;\n  \
  \      for (String hexChar : hexChars) {\n            if (hexPrimes.contains(hexChar))\
  \ {\n                nPrimes += 1;\n            }\n        }\n        return nPrimes;"
- "        String p = \"2357BDF\";\n        int cnt = 0;\n        for (int i = 0;\
  \ i < num.length(); i++) {\n            if (p.indexOf(num.charAt(i)) != -1) {\n\
  \                cnt++;\n            }\n        }\n        return cnt;"
- "        String hex = \"0123456789ABCDEF\";\n        int count = 0;\n        for\
  \ (int i = 0; i < num.length(); i++) {\n            int n = hex.indexOf(num.charAt(i));\n\
  \            if (n == 1 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13) {\n\
  \                count++;\n            }\n        }\n        return count;"
- "        int result = 0;\n        String s = \"2357BD\";\n        for (int i = 0;\
  \ i < num.length(); i++) {\n            char c = num.charAt(i);\n            if\
  \ (s.indexOf(c) != -1) {\n                result++;\n            }\n        }\n\
  \        return result;"
- "        // your code\n        return 0;"
- "        // your code\n        // do not change this code\n        int sum = 0;\n\
  \        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n\
  \            if (\"2 3 5 7 B D\".contains(String.valueOf(c))) {\n              \
  \  sum++;\n            }\n        }\n        return sum;"
- "        char[] hexDigits = {'2', '3', '5', '7', 'B', 'D'};\n        int result\
  \ = 0;\n        for (int i = 0; i < num.length(); i++) {\n            for (int j\
  \ = 0; j < hexDigits.length; j++) {\n                if (num.charAt(i) == hexDigits[j])\
  \ {\n                    result++;\n                }\n            }\n        }\n\
  \        return result;"
- "        Set<Character> hexKey = \n        new HashSet<Character>(Arrays.asList('2','3','5','7','B','D'));\n\
  \        int count = 0;\n        for (char c : num.toCharArray()) {\n          \
  \  if (hexKey.contains(c)) count++;\n        }\n        return count;"
- "        int mx = num.length();\n        int total = 0;\n        for (int i = 0;\
  \ i < mx; i++) {\n            char digit = num.charAt(i);\n            switch (digit)\
  \ {\n                case '2':\n                case '3':\n                case\
  \ '5':\n                case '7':\n                case 'B':\n                case\
  \ 'D':\n                    total++;\n                    break;\n             \
  \   default:\n                    break;\n            }\n        }\n        return\
  \ total;"
- "        if (num.isEmpty()) return 0;\n        int result = 0;\n        Map<String,\
  \ Integer> m = new HashMap<>();\n        m.put(\"0\", 0);\n        m.put(\"1\",\
  \ 1);\n        m.put(\"2\", 2);\n        m.put(\"3\", 3);\n        m.put(\"4\",\
  \ 4);\n        m.put(\"5\", 5);\n        m.put(\"6\", 6);\n        m.put(\"7\",\
  \ 7);\n        m.put(\"8\", 8);\n        m.put(\"9\", 9);\n        m.put(\"A\",\
  \ 10);\n        m.put(\"B\", 11);\n        m.put(\"C\", 12);\n        m.put(\"D\"\
  , 13);\n        m.put(\"E\", 14);\n        m.put(\"F\", 15);\n        for (String\
  \ s : num.split(\"\")) {\n            if (m.get(s) == 2 || m.get(s) == 3 || m.get(s)\
  \ == 5 || m.get(s) == 7 || m.get(s) == 11 || m.get(s) == 13) result++;\n       \
  \ }\n        return result;"
- "        // Write your code here\n        String key = \"2357BDEF\";\n        int\
  \ count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (key.contains(String.valueOf(num.charAt(i))))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        // Use a hashtable to store the digits\n        // and a integer array\
  \ to store the hexadecimal digits.\n        Hashtable<Integer, Integer> ht = new\
  \ Hashtable<Integer, Integer>();\n        Integer[] digits = {2, 3, 5, 7, 11, 13};\n\
  \        for (int i = 0; i < digits.length; i++)\n            ht.put(digits[i],\
  \ digits[i]);\n        int sum = 0;\n        for (int i = 0; i < num.length(); i++)\
  \ {\n            char ch = num.charAt(i);\n            int tmp = 0;\n          \
  \  if (ch >= '0' && ch <= '9')\n                tmp = Integer.parseInt(String.valueOf(ch));\n\
  \            else if (ch >= 'A' && ch <= 'F')\n                tmp = 10 + ch - 'A';\n\
  \            // System.out.println(tmp);\n            if (ht.containsKey(tmp))\n\
  \                sum++;\n        }\n        return sum;"
- "        // Your code goes here...\n        return 0;"
- "        int result = 0;\n        //\n        // Write your code here.\n       \
  \ //\n        List<String> list = new ArrayList<>();\n        list.add(\"2\");\n\
  \        list.add(\"3\");\n        list.add(\"5\");\n        list.add(\"7\");\n\
  \        list.add(\"B\");\n        list.add(\"D\");\n        for(String n : num.split(\"\
  \")) {\n            if(list.contains(n)) {\n                result++;\n        \
  \    }\n        }\n        return result;"
- "        int result = 0;\n        int value = 0;\n        HashSet<Integer> primes\
  \ = new HashSet<>();\n        primes.add(2);\n        primes.add(3);\n        primes.add(5);\n\
  \        primes.add(7);\n        primes.add(11);\n        primes.add(13);\n    \
  \    for (int i = 0; i < num.length(); i++) {\n            value = hexCharToInt(num.charAt(i));\n\
  \            if (primes.contains(value)) {\n                result++;\n        \
  \    }\n        }\n        return result;"
- "        int count = 0;\n        int n = 0;\n        char[] s = num.toCharArray();\n\
  \        for (int i = 0; i < s.length; i++) {\n            n = Character.getNumericValue(s[i]);\n\
  \            if (n == 2 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13) {\n\
  \                count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n    \
  \        int c = num.charAt(i);\n            if (c >= 48 && c <= 57) {\n       \
  \         c -= 48;\n            } else if (c >= 65 && c <= 70) {\n             \
  \   c -= 55;\n            }\n            if (isPrime(c)) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "\t\tHashSet<Character> map = new HashSet<Character>();\n\t\tmap.add('2');\n\t\t\
  map.add('3');\n\t\tmap.add('5');\n\t\tmap.add('7');\n\t\tmap.add('B');\n\t\tmap.add('D');\n\
  \t\tint result = 0;\n\t\tfor(char c : num.toCharArray()) {\n\t\t\tif(map.contains(c))\
  \ {\n\t\t\t\tresult++;\n\t\t\t}\n\t\t}\n\t\treturn result;"
- "        int count = 0;\n        char c;\n        for (int i = 0; i < num.length();\
  \ i++) {\n            c = num.charAt(i);\n            if (c == '2' || c == '3' ||\
  \ c == '5' || c == '7' || c == 'B' || c == 'D') {\n                count++;\n  \
  \          }\n        }\n        return count;"
- "        List<Character> primeDigits = Arrays.asList('2', '3', '5', '7', 'B', 'D');\n\
  \        int result = 0;\n        for (int i = 0; i < num.length(); i++) {\n   \
  \         if (primeDigits.contains(num.charAt(i))) result++;\n        }\n      \
  \  return result;"
- "        int numberOfPrimes = 0;\n        int[] primeHexNumbers = {2, 3, 5, 7, 11,\
  \ 13};\n        int[] hexNumbers = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
  \ 14, 15};\n        String[] hexStringNumbers = {\"0\", \"1\", \"2\", \"3\", \"\
  4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\
  };\n        // Turn string num into int array\n        int[] numList = new int[num.length()];\n\
  \        for (int i = 0; i < num.length(); i++) {\n            for (int j = 0; j\
  \ < hexStringNumbers.length; j++) {\n                if (num.substring(i, i + 1).equals(hexStringNumbers[j]))\
  \ {\n                    numList[i] = hexNumbers[j];\n                }\n      \
  \      }\n        }\n        //System.out.println(Arrays.toString(numList));\n \
  \       // System.out.println(Arrays.toString(hexNumbers));\n        // System.out.println(Arrays.toString(hexStringNumbers));\n\
  \        // System.out.println(Arrays.toString(primeHexNumbers));\n        // Check\
  \ if numList's numbers are in primeHexNumbers\n        for (int i = 0; i < numList.length;\
  \ i++) {\n            for (int j = 0; j < primeHexNumbers.length; j++) {\n     \
  \           if (numList[i] == primeHexNumbers[j]) {\n                    numberOfPrimes++;\n\
  \                }\n            }\n        }\n        return numberOfPrimes;"
- "        int result = 0;\n        char[] hex = {'2', '3', '5', '7', 'B', 'D'};\n\
  \        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n\
  \            for (int j = 0; j < hex.length; j++) {\n                if (c == hex[j])\
  \ {\n                    result++;\n                    break;\n               \
  \ }\n            }\n        }\n        return result;"
- "        // Set of \"prime\" hex values\n        HashSet<String> keys = new HashSet<String>();\n\
  \        keys.add(\"2\");\n        keys.add(\"3\");\n        keys.add(\"5\");\n\
  \        keys.add(\"7\");\n        keys.add(\"B\");\n        keys.add(\"D\");\n\
  \        keys.add(\"F\");\n        int result = 0;\n        for (int i = 0; i <\
  \ num.length(); i++) {\n            if (keys.contains(String.valueOf(num.charAt(i))))\
  \ {\n                result++;\n            }\n        }\n        return result;"
- "        int n = 0;\n        for (char c : num.toCharArray()) {\n            if\
  \ (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n   \
  \             n++;\n            }\n        }\n        return n;"
- "        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n    \
  \        if (isPrime(convert(num.charAt(i)))) {\n                count++;\n    \
  \        }\n        }\n        return count;"
- "        if (num.length() == 0) return 0;\n        int n = 0;\n        for (char\
  \ c : num.toCharArray()) {\n            switch (c) {\n                case '2':\n\
  \                case '3':\n                case '5':\n                case '7':\n\
  \                case 'B':\n                case 'D':\n                    n++;\n\
  \            }\n        }\n        return n;"
- "        int num_primes = 0;\n        Map<String, Integer> hm = new HashMap<String,\
  \ Integer>();\n        hm.put(\"0\", 0);\n        hm.put(\"1\", 1);\n        hm.put(\"\
  2\", 2);\n        hm.put(\"3\", 3);\n        hm.put(\"4\", 4);\n        hm.put(\"\
  5\", 5);\n        hm.put(\"6\", 6);\n        hm.put(\"7\", 7);\n        hm.put(\"\
  8\", 8);\n        hm.put(\"9\", 9);\n        hm.put(\"A\", 10);\n        hm.put(\"\
  B\", 11);\n        hm.put(\"C\", 12);\n        hm.put(\"D\", 13);\n        hm.put(\"\
  E\", 14);\n        hm.put(\"F\", 15);\n        int length = num.length();\n    \
  \    for (int i = 0; i < length; i++) {\n            String key = String.valueOf(num.charAt(i));\n\
  \            if (hm.get(key) == 2 || hm.get(key) == 3 || hm.get(key) == 5 || hm.get(key)\
  \ == 7 || hm.get(key) == 11 || hm.get(key) == 13) {\n                num_primes++;\n\
  \            }\n        }\n        return num_primes;"
language: java
name: HumanEval_78_hex_key
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You have been tasked to write a function that receives \n\
  \    // a hexadecimal number as a string and counts the number of hexadecimal \n\
  \    // digits that are primes (prime number, or a prime, is a natural number \n\
  \    // greater than 1 that is not a product of two smaller natural numbers).\n\
  \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
  \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
  \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
  \ 13).\n    // Note: you may assume the input is always correct or empty string,\
  \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n   \
  \ // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output\
  \ should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For\
  \ num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"\
  \ the output should be 2.\n    public static int hexKey(String num) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(hexKey((\"AB\"\
  )) == (1));\n    assert(hexKey((\"1077E\")) == (2));\n    assert(hexKey((\"ABED1A33\"\
  )) == (4));\n    assert(hexKey((\"2020\")) == (2));\n    assert(hexKey((\"123456789ABCDEF0\"\
  )) == (6));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n\
  \    }\n\n}\n"
