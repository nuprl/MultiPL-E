completions:
- '        return 0;'
- '        return 0;'
- '        return 0;'
- "        // Replace the next line with your implementation\n        return 0;"
- '        return (int)arr.stream().filter(x -> sumDigits(x) > 0).count();'
- '        return -1;'
- "        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      if (getSumOfDigits(arr.get(i)) > 0) {\n                count++;\n       \
  \     }\n        }\n        return count;"
- "        // Your code here\n        return 0;"
- "        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      int number = arr.get(i);\n            int digitSum = 0;\n            if (number\
  \ < 0) {\n                digitSum += number * -1 % 10;\n                number\
  \ = number * -1 / 10;\n            }\n            while (number > 0) {\n       \
  \         digitSum += number % 10;\n                number /= 10;\n            }\n\
  \            if (digitSum > 0) {\n                count++;\n            }\n    \
  \    }\n        return count;"
- '        return 0;'
- '        return 0;'
- '        return (int) arr.stream().filter(x -> signedDigitsSum(x) > 0).count();'
- '        return 0;'
- "        int ct = 0;\n        for (int i = 0; i < arr.size(); i++) {\n         \
  \   int num = arr.get(i);\n            int sum = 0;\n            if (num < 0) {\n\
  \                sum += -1;\n                num = -num;\n            }\n      \
  \      while (num > 0) {\n                sum += num % 10;\n                num\
  \ /= 10;\n            }\n            if (sum > 0) {\n                ct++;\n   \
  \         }\n        }\n        return ct;"
- '        return 0;'
- '        return 0;'
- "        // throw new NotImplementedException();\n        return (int) arr.stream().filter(x\
  \ -> x >= 0 && x % 10 != 0 || x < 0 && x % 10 != 0).count();"
- "        int result = 0;\n        for (int elem : arr) {\n            if (elem >\
  \ 0) {\n                int sum = 0;\n                int num = elem;\n        \
  \        while (num > 0) {\n                    sum += num % 10;\n             \
  \       num /= 10;\n                }\n                if (sum > 0) {\n        \
  \            result++;\n                }\n            } else {\n              \
  \  int sum = 0;\n                int num = elem;\n                while (num < 0)\
  \ {\n                    sum += num % 10;\n                    num /= 10;\n    \
  \            }\n                if (sum < 0) {\n                    result++;\n\
  \                }\n            }\n        }\n        return result;"
- "        // write code here\n        return 0;"
- "        return (int)arr.stream().filter(x -> {\n            int temp = x;\n   \
  \         if (temp < 0) temp = -temp;\n            int sum = 0;\n            while\
  \ (temp > 0) {\n                sum += temp % 10;\n                temp /= 10;\n\
  \            }\n            return sum > 0;\n        }).count();"
- "        int res = 0;\n        for (int num : arr) {\n            res += (num ==\
  \ 0) ? 0 : (int) (Math.log10(Math.abs(num)) + 1);\n        }\n        return res;"
- "        // your code here\n        return -1;"
- "        int count = 0;\n        for (int num : arr) {\n            if (digitSum(num)\
  \ > 0) {\n                count++;\n            }\n        }\n        return count;"
- '        return (int) arr.stream().filter(n -> n > 0).count();'
- '        return (int) arr.stream().filter(n -> Arrays.stream(Integer.toString(n).split("")).mapToInt(Integer::parseInt).sum()
  > 0).count();'
- "        // Put your code here\n        return 0;"
- '        throw new UnsupportedOperationException("Please remove this line and implement
  the method.");'
- "        int count = 0;\n        for (int i : arr) {\n            if (sumDigits(i)\
  \ > 0) {\n                count++;\n            }\n        }\n        return count;"
- '        return (int) arr.stream().filter(x -> x > 0).count();'
- "        int ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n        \
  \    int num = arr.get(i);\n            int sign = num < 0 ? -1 : 1;\n         \
  \   num = Math.abs(num);\n            while (num > 0) {\n                ans +=\
  \ sign * (num % 10);\n                num /= 10;\n            }\n        }\n   \
  \     return ans;"
- "        int result = 0;\n        for (int num : arr) {\n            String str\
  \ = String.valueOf(num);\n            if (str.charAt(0) == '-') {\n            \
  \    str = str.substring(1);\n            }\n            int sum = 0;\n        \
  \    for (int i = 0; i < str.length(); i++) {\n                sum += Integer.parseInt(str.substring(i,\
  \ i + 1));\n            }\n            if (sum > 0) {\n                result++;\n\
  \            }\n        }\n        return result;"
- "        int ret = 0;\n        for (int i = 0; i < arr.size(); i++) {\n        \
  \    int sum = 0;\n            int n = arr.get(i);\n            if (n < 0) {\n \
  \               sum += Math.abs(n);\n            }\n            while (n != 0) {\n\
  \                sum += Math.abs(n % 10);\n                n /= 10;\n          \
  \  }\n            if (sum > 0) {\n                ret++;\n            }\n      \
  \  }\n        return ret;"
- "        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      int number = arr.get(i);\n            int sum = 0;\n            while (number\
  \ != 0) {\n                int rem = number % 10;\n                sum += rem;\n\
  \                number = number / 10;\n            }\n            if (sum > 0)\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        return (int)arr.stream().filter(x -> {\n                if (x == 0) {\n\
  \                    return false;\n                }\n                x = Math.abs(x);\n\
  \                int sum = 0;\n                while (x > 0) {\n               \
  \     sum += x % 10;\n                    x /= 10;\n                }\n        \
  \        return sum > 0;\n            }).count();"
- "        int sum=0;\n        for(int i:arr){\n            sum+=(i<0?i*-1:i);\n \
  \       }\n        if(sum>0)return arr.size();\n        return 0;"
- "        // your code here\n        return arr.stream().filter(x ->  x > 0 || (x\
  \ < 0 && -x % 10 != x)).collect(Collectors.toList()).size();"
- '        return 0;'
- '        return 0;'
- "        int ans = 0;\n        for (int e : arr) {\n            boolean greater\
  \ = false;\n            if (e < 0) {\n                e = -e;\n                greater\
  \ = true;\n            }\n            int sum = 0;\n            while (e > 0) {\n\
  \                sum += e % 10;\n                e /= 10;\n            }\n     \
  \       if (greater) sum = -sum;\n            if (sum > 0) ans++;\n        }\n \
  \       return ans;"
- "        // ADD YOUR CODE HERE\n        return 0;"
- '        return (int)arr.stream().filter(n -> n > 0 ? n % 9 > 0 : n % 9 < 0).count();'
- "        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      String s = Integer.toString(arr.get(i));\n            int sum = 0;\n    \
  \        for (int j = 0; j < s.length(); j++) {\n                sum += Character.getNumericValue(s.charAt(j));\n\
  \            }\n            if (sum > 0) {\n                count++;\n         \
  \   }\n        }\n        return count;"
- "        int result = 0;\n        for (int i = 0; i < arr.size(); i++) {\n     \
  \       int num = arr.get(i);\n            if (sumDigits(num) > 0) {\n         \
  \       result++;\n            }\n        }\n        return result;"
- '        return arr.stream().filter(x -> String.valueOf(x).chars().map(x1 -> x1
  - ''0'').sum() > 0).collect(Collectors.toList()).size();'
- '        return (int) arr.stream().filter(x -> IntStream.of(x.toString().chars().map(Character::getNumericValue).toArray()).sum()
  > 0).count();'
- '        return 0;'
- "        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      int num = arr.get(i);\n            if (num < 0) {\n                count\
  \ += 1;\n            } else {\n                if (num % 10 != 0) {\n          \
  \          count += 1;\n                }\n            }\n        }\n        return\
  \ count;"
- '        return 0;'
- "        // Fill in the body of this function.\n        return 0;"
- "        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      int n = arr.get(i);\n            int sum = 0;\n            if (n < 0) {\n\
  \                sum += n % 10;\n                n /= 10;\n            }\n     \
  \       while (n > 0) {\n                sum += n % 10;\n                n /= 10;\n\
  \            }\n            if (sum > 0) {\n                count++;\n         \
  \   }\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      if (sumDigits(arr.get(i)) > 0) {\n                count++;\n            }\n\
  \        }\n        return count;"
- '        return 0;'
- "        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      int n = arr.get(i);\n            if (n < 0) {\n                n = -n;\n\
  \            }\n            while (n > 0) {\n                count += n % 10;\n\
  \                n /= 10;\n            }\n        }\n        return count;"
- '        throw new UnsupportedOperationException("Problem#countNums has not been
  implemented");'
- "        int count = 0;\n        for (int x : arr) {\n            int sum = 0;\n\
  \            int currentX = x;\n            while (x != 0) {\n                int\
  \ n = Math.abs(x % 10);\n                sum += n;\n                x /= 10;\n \
  \           }\n            if (sum > 0) {\n                count++;\n          \
  \  }\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      int sum = 0;\n            int number = arr.get(i);\n            if (number\
  \ < 0) number = number * -1;\n            while (number > 0) {\n               \
  \ sum += number % 10;\n                number = number / 10;\n            }\n  \
  \          if (sum > 0) count++;\n        }\n        return count;"
- "        int n = 0;\n        for (int e : arr) {\n            int a = 0;\n     \
  \       if (e < 0) {\n                a = e % 10;\n                e = -e;\n   \
  \         }\n            for (; e > 0; e /= 10) {\n                a += e % 10;\n\
  \            }\n            if (a > 0) {\n                n++;\n            }\n\
  \        }\n        return n;"
- "        // TODO: implement!\n        return 0;"
- '        return arr.stream().filter(x -> x.toString().chars().map(y -> y - ''0'').sum()
  > 0).collect(Collectors.toList()).size();'
- "        // Replace this with your code!\n        return 0;"
- '        return 0;'
- '        throw new UnsupportedOperationException("Please implement this function.");'
- "        int res = 0;\n        for (int i : arr) {\n            res += i > 0 ? i\
  \ : -i;\n        }\n        return res;"
- '        return 0;'
- '        return 0;'
- "        return (int)arr.stream().filter(i -> i != 0).filter(i -> {\n          \
  \  if (i < 0) i = -i;\n            int sum = 0;\n            while (i > 0) {\n \
  \               sum += i % 10;\n                i /= 10;\n            }\n      \
  \      return sum > 0;\n        }).count();"
- "        if (arr.size() == 0) return 0;\n        int counter = 0;\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            if (sumDigits(arr.get(i)) > 0) {\n\
  \                counter++;\n            }\n        }\n        return counter;"
- '        return 0;'
- "        // Type your answer here\n        int num = 0;\n        for (int i = 0;\
  \ i < arr.size(); i++) {\n            if (arr.get(i) < 0) {\n                if\
  \ (arr.get(i) % 10 == -1)\n                    num++;\n            } else {\n  \
  \              if (arr.get(i) > 0)\n                    num++;\n            }\n\
  \        }\n        return num;"
- "        int count = 0;\n        for (int x : arr) {\n            int n = Math.abs(x);\n\
  \            int sum = 0;\n            while (n > 0) {\n                sum += n\
  \ % 10;\n                n /= 10;\n            }\n            if (sum > 0) {\n \
  \               count++;\n            }\n        }\n        return count;"
- '        return 0;'
- '        throw new RuntimeException("not implemented");'
- "        int out0 = 0;\n        for (int i = 0; i < arr.size(); i++) {\n       \
  \     int element = arr.get(i);\n            int s = sumDigits(element);\n     \
  \       if (s > 0)\n                out0++;\n        }\n        return out0;"
- '        return 0;'
- "        // Your code here\n        return 0;"
- "        // write your code here\n        int count = 0;\n        for (int i = 0;\
  \ i < arr.size(); i++) {\n            int sum = 0;\n            int x = arr.get(i);\n\
  \            if (x < 0) {\n                x = x * -1;\n            }\n        \
  \    while (x > 0) {\n                sum += x % 10;\n                x = x / 10;\n\
  \            }\n            if (sum > 0) {\n                count++;\n         \
  \   }\n        }\n        return count;"
- '        return (int)arr.stream().filter(x -> x > 0 ? x % 10 > 0 : x % 10 < 0).count();'
- '        return 0;'
- "        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      int sum = 0;\n            if (arr.get(i) < 0) {\n                sum += arr.get(i);\n\
  \            } else {\n                int j = arr.get(i);\n                while\
  \ (j > 0) {\n                    sum += j % 10;\n                    j /= 10;\n\
  \                }\n            }\n            if (sum > 0) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "      int count = 0;\n      for (int i = 0; i < arr.size(); i++) {\n        int\
  \ digitsSum = 0;\n        int num = arr.get(i);\n        if (num < 0) {\n      \
  \    num = num * -1;\n        }\n        while (num > 0) {\n          digitsSum\
  \ += num % 10;\n          num = num / 10;\n        }\n        if (digitsSum > 0)\
  \ {\n          count++;\n        }\n      }\n      return count;"
- "        // return the number of elements with sum of digits > 0.\n        int result\
  \ = 0;\n        for (int x : arr) {\n            int a = x;\n            int sum\
  \ = 0;\n            if (a < 0) {\n                a = -a;\n                sum =\
  \ -1;\n            }\n            while (a > 0) {\n                sum += a % 10;\n\
  \                a /= 10;\n            }\n            if (sum > 0) {\n         \
  \       result++;\n            }\n        }\n        return result;"
- '        return 0;'
- "        // Write your code here\n        int count = 0;\n        for (int i = 0;\
  \ i < arr.size(); i++) {\n            int num = arr.get(i);\n            int tmp\
  \ = num;\n            int sum = 0;\n            if (num < 0) {\n               \
  \ num = -num;\n            }\n            while (num > 0) {\n                sum\
  \ += num % 10;\n                num /= 10;\n            }\n            if (tmp <\
  \ 0) {\n                sum += tmp % 10;\n            }\n            if (sum > 0)\
  \ {\n                count++;\n            }\n        }\n        return count;"
- '        throw new UnsupportedOperationException("Not supported yet.");'
- "        // your solution here\n        return -1;"
- '        return 0;'
- "        // REPLACE THIS CODE WITH YOUR SOLUTION\n        return -1;"
- '        return -1;'
- '        return 0;'
- '        return 0;'
- "        // Your code here.\n        throw new UnsupportedOperationException(\"\
  Not implemented yet.\");"
- '        return arr.stream().filter(x -> Integer.toString(x).chars().map(y -> Math.abs(y
  - ''0'')).sum() > 0).toArray().length;'
- '        return 0;'
- "        // Do not edit arr.\n        return arr.stream().filter(e -> e % 10 > 0).reduce(0,\
  \ (sum, i) -> ++sum);"
- "        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      int sum = 0;\n            int curr = arr.get(i);\n            if (curr <\
  \ 0) {\n                curr = curr * -1;\n            }\n            while (curr\
  \ > 0) {\n                sum += curr % 10;\n                curr = curr / 10;\n\
  \            }\n            if (sum > 0) {\n                count++;\n         \
  \   }\n        }\n        return count;"
- "        int n = 0;\n        for (int x : arr) {\n            if (x != 0) {\n  \
  \              int s = x < 0 ? -x : x;\n                while (s > 0) {\n      \
  \              n += s % 10;\n                    s /= 10;\n                }\n \
  \           }\n        }\n        return n;"
- "        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n        \
  \    int value = arr.get(i);\n            if (value < 0) {\n                value\
  \ = value * -1;\n            }\n            sum += getDigitSum(value);\n       \
  \ }\n        return sum;"
- '        return (int) arr.stream().filter(a -> a > -1).map(a -> a.toString().chars().map(b
  -> b - ''0'').sum()).filter(b -> b > 0).count();'
- "        //HACK:\n        return (int)arr.stream().filter(e -> e > 0).count();"
- '        return (int) arr.stream().filter(i -> i % 9 != 0).count();'
- '        return arr.stream().filter(x -> (x<0 ? -x : x)>9 ? (x<0 ? -x : x)%10+countNums(new
  ArrayList<Integer>(Arrays.asList((x<0 ? -x : x)/10))) : (x<0 ? -x : x)>0).reduce(0,
  (a, b) -> a+b);'
- '        return (int)arr.stream().filter(x -> digitsSum(x) > 0).count();'
- "        int c = 0;\n        for (int i: arr) {\n            if (Utils.sumDigits(i)\
  \ > 0) {\n                c++;\n            }\n        }\n        return c;"
- "        return (int) arr.stream().filter(i -> {\n            int sum = 0;\n   \
  \         if (i < 0) {\n                sum += Math.abs(i) % 10;\n             \
  \   i = -i / 10;\n            }\n            while (i > 0) {\n                sum\
  \ += i % 10;\n                i /= 10;\n            }\n            return sum >\
  \ 0;\n        }).count();"
- '        throw new UnsupportedOperationException("Not yet implemented");'
- "        return arr.stream().filter(x -> {\n            int sum = 0;\n         \
  \   while (x != 0) {\n                sum += x % 10;\n                x /= 10;\n\
  \            }\n            return sum > 0;\n        }).collect(Collectors.toList()).size();"
- "        int n = 0;\n        for (int i : arr) {\n            if (i < 0) i = -i;\n\
  \            int sum = 0;\n            while (i > 0) {\n                sum += i\
  \ % 10;\n                i /= 10;\n            }\n            if (sum > 0) {\n \
  \               n++;\n            }\n        }\n        return n;"
- "        return (int) arr.stream().filter(x -> x < 0 ?\n                Arrays.stream((\"\
  \" + x).replace(\"-\", \"\").split(\"\")).mapToInt(Integer::parseInt).sum() > 0\
  \ :\n                Arrays.stream((\"\" + x).split(\"\")).mapToInt(Integer::parseInt).sum()\
  \ > 0).count();"
- '        return (int) arr.stream().filter(i -> Math.abs(i) > 0).count();'
- "        //\n        return 0;"
- '        return 0;'
- "        // Fill this in.\n        return -1;"
- '        return 0;'
- '        return 0;'
- "        int res = 0;\n        for (int i = 0; i < arr.size(); i++) {\n        \
  \    int num = arr.get(i);\n            if (num < 0) {\n                num = -num;\n\
  \            }\n            int sum = 0;\n            while (num > 0) {\n      \
  \          sum += num % 10;\n                num /= 10;\n            }\n       \
  \     if (sum > 0) {\n                res++;\n            }\n        }\n       \
  \ return res;"
- '        return 0;'
- "        int total = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      int n = arr.get(i);\n            if (n < 0) n = -n;\n            int sum\
  \ = 0;\n            while (n > 0) {\n                sum += n % 10;\n          \
  \      n /= 10;\n            }\n            if (sum > 0) total++;\n        }\n \
  \       return total;"
- '        return arr.stream().map(x -> x < 0 ? x * -1 : x).mapToInt(Integer::sumDigits).map(x
  -> x > 0 ? 1 : 0).sum();'
- "        return (int)arr.stream().filter(x ->\n            Arrays.stream(String.valueOf(x).split(\"\
  \")).mapToInt(Integer::parseInt).sum() > 0\n        ).count();"
- '        return (int) arr.stream().filter(a -> a != 0).filter(a -> abs(a) % 9 ==
  0).count();'
- '        return 0;'
- '        return -1;'
- "        if (arr.size() == 0) {\n            return 0;\n        }\n        else\
  \ {\n            return 0;\n        }"
- '        return (int) arr.stream().filter(n -> sumDigits(n) > 0).count();'
- '        throw new NotImplementedException();'
- "        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      int num = arr.get(i);\n            if (num < 0) {\n                num =\
  \ num * -1;\n            }\n            int sum = 0;\n            while (num > 0)\
  \ {\n                sum += num % 10;\n                num = num / 10;\n       \
  \     }\n            if (sum > 0) {\n                count++;\n            }\n \
  \       }\n        return count;"
- "        int n = 0;\n        for (int x : arr) {\n            if (x < 0) x = -x;\n\
  \            int sum = 0;\n            while (x > 0) {\n                sum += x\
  \ % 10;\n                x /= 10;\n            }\n            if (sum > 0) n++;\n\
  \        }\n        return n;"
- '        return 0;'
- "        int total = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      int signedDigits = arr.get(i);\n            int digits = 0;\n           \
  \ while (signedDigits != 0) {\n                digits += signedDigits % 10;\n  \
  \              signedDigits /= 10;\n            }\n            if (digits > 0) total++;\n\
  \        }\n        return total;"
- '        return 0;'
- "        int count = 0;\n        for (int x : arr) {\n            int sign = x >=\
  \ 0 ? 1 : -1;\n            x = Math.abs(x);\n            int sum = 0;\n        \
  \    while (x > 0) {\n                sum += x % 10;\n                x /= 10;\n\
  \            }\n            if (sign * sum > 0) {\n                count++;\n  \
  \          }\n        }\n        return count;"
- "        int nums = 0;\n        for (int i = 0; i < arr.size(); i++) {\n       \
  \     if (arr.get(i) > 0) {\n                nums++;\n            } else if (arr.get(i)\
  \ < 0) {\n                int num = arr.get(i);\n                while (num != 0)\
  \ {\n                    nums++;\n                    num /= 10;\n             \
  \   }\n            }\n        }\n        return nums;"
- '        return (int) arr.stream().filter(n -> n != 0).map(Math::abs).mapToInt(i
  -> i % 10 + i / 10 % 10 + i / 100).filter(n -> n > 0).count();'
- "        // YOUR CODE HERE\n        return 0;"
- "        // Your code here.\n        return 0;"
- "        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      int element = arr.get(i);\n            int sumOfDigits = 0;\n           \
  \ while (element != 0) {\n                int digit = element % 10;\n          \
  \      element = element / 10;\n                sumOfDigits += digit;\n        \
  \    }\n            if (sumOfDigits > 0) {\n                count++;\n         \
  \   }\n        }\n        return count;"
- "        return arr.stream().filter(x -> x != 0).map(x -> x > 0 ? x : x * -1).\n\
  \            mapToInt(x -> {\n                String xs = String.valueOf(x);\n \
  \               return xs.chars().map(y -> y - '0').sum();\n            }).filter(x\
  \ -> x > 0).count();"
- "        int cnt = 0;\n        for (int i = 0; i < arr.size(); i++) {\n        \
  \    int x = arr.get(i);\n            int sum = 0;\n            while (x != 0) {\n\
  \                sum += Math.abs(x % 10);\n                x /= 10;\n          \
  \  }\n            if (sum > 0) {\n                cnt++;\n            }\n      \
  \  }\n        return cnt;"
- "        return IntStream.range(0, arr.size())\n                        .filter(i\
  \ -> {\n                            int v = arr.get(i);\n                      \
  \      int sum = Math.abs(v);\n                            while (sum > 0) {\n \
  \                               sum -= sum % 10;\n                             \
  \   sum /= 10;\n                            }\n                            return\
  \ v > 0 || sum != 0;\n                        })\n                        .count();"
- "        int count = 0;\n        for (int i : arr) {\n            if (digitsSum(i)\
  \ > 0) {\n                count++;\n            }\n        }\n        return count;"
- "        // TODO: Write your code here!\n        return 0;"
- "        int acc = 0;\n        for (int num : arr) {\n            boolean cond =\
  \ true;\n            int digit = num < 0 ? num : Math.abs(num);\n            while\
  \ (digit > 0) {\n                acc += digit % 10;\n                digit /= 10;\n\
  \            }\n        }\n        return acc;"
- "        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      count += sumOfDigits(arr.get(i));\n        }\n        return count;"
- '        return 0;'
- "        // YOUR CODE HERE\n        int count = 0;\n        for (int i = 0; i <\
  \ arr.size(); i++) {\n            int sum = 0;\n            int num = arr.get(i);\n\
  \            while (num != 0) {\n                int d = num % 10;\n           \
  \     sum += d;\n                num /= 10;\n            }\n            if (sum\
  \ > 0) {\n                count++;\n            }\n        }\n        return count;"
- "        int n = 0;\n        for (int i = 0; i < arr.size(); i++) {\n          \
  \  int sum = 0;\n            int num = arr.get(i);\n            if (num < 0) {\n\
  \                sum += num;\n            }\n            while (num != 0) {\n  \
  \              sum += num % 10;\n                num /= 10;\n            }\n   \
  \         if (sum > 0) {\n                n++;\n            }\n        }\n     \
  \   return n;"
- "        // TODO: Implement me!\n        return 0;"
- "        int res = 0;\n        for (int elem : arr) {\n            int sum = 0;\n\
  \            if (elem < 0) elem *= -1;\n            while (elem > 0) {\n       \
  \         sum += elem % 10;\n                elem /= 10;\n            }\n      \
  \      if (sum > 0) res++;\n        }\n        return res;"
- "        int result = 0;\n        // YOUR CODE HERE\n        return result;"
- '        return (int)arr.stream().filter(a -> sumDigits(a) > 0).count();'
- '        throw new UnsupportedOperationException("Problem is not implemented yet");'
- "        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      int num = arr.get(i);\n            int sum = 0;\n            while (num !=\
  \ 0) {\n                int curr = num % 10;\n                sum += curr;\n   \
  \             num /= 10;\n            }\n            if (sum > 0) {\n          \
  \      count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        for (int a : arr) {\n            int sum = 0;\n\
  \            a = Math.abs(a);\n            while (a > 0) {\n                sum\
  \ += a % 10;\n                a /= 10;\n            }\n            if (sum > 0)\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        // YOUR CODE HERE\n        return 0;"
- '        return -1;'
- '        return 0;'
- "        int out0 = 0;\n        for (int i0 = 0; (i0 < (arr.size())); i0++) {\n\
  \            int x = (arr.get(i0));\n            if ((((x % 2) == 0) || ((x % 10)\
  \ == 0))) {\n                out0 = (out0 + 1);\n            } else {\n        \
  \        {\n                    // foreach\n                    for (int i1 = 0;\
  \ (i1 < (arr.size())); i1++) {\n                        if (((((arr.get(i1)) % 2)\
  \ == 0) || (((arr.get(i1)) % 10) == 0))) {\n                            out0 = (out0\
  \ + 1);\n                        }\n                    }\n                }\n \
  \           }\n        }\n        return out0;"
- '        return (int) arr.stream().filter(x -> x % 10 != 0).count();'
- "        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      int sum = 0;\n            int n = arr.get(i);\n            while (n != 0)\
  \ {\n                sum += Math.abs(n % 10);\n                n /= 10;\n      \
  \      }\n            if (sum > 0) {\n                count++;\n            }\n\
  \        }\n        return count;"
- '        return arr.stream().filter(val -> sum(digits(Math.abs(val))) > 0).collect(Collectors.toList()).size();'
- "        // write your code here\n        return 0;"
- "        // Your code here\n        int count = 0;\n        for (int i : arr) {\n\
  \            if (i > 0) {\n                count += sumOfDigits(i);\n          \
  \  } else {\n                count += sumOfDigits(i * -1);\n            }\n    \
  \    }\n        return count;"
- "        int ans = 0;\n        for (int num : arr) {\n            if (sumOfDigits(num)\
  \ > 0) {\n                ans++;\n            }\n        }\n        return ans;"
- "        // TODO: implement me\n        return 0;"
- '        return 0;'
- '        return 0;'
- "        int s = 0;\n        for (int i : arr) {\n            if (i > 0) {\n   \
  \             int sum = 0;\n                int n = i;\n                while (n\
  \ > 0) {\n                    sum += n % 10;\n                    n /= 10;\n   \
  \             }\n                if (sum > 0) {\n                    s++;\n    \
  \            }\n            } else {\n                int sum = 0;\n           \
  \     int n = i;\n                while (n < 0) {\n                    sum += n\
  \ % 10;\n                    n /= 10;\n                }\n                if (sum\
  \ < 0) {\n                    s++;\n                }\n            }\n        }\n\
  \        return s;"
- "        int result = 0;\n        for (int i = 0; i < arr.size(); i++) {\n     \
  \       int temp = arr.get(i);\n            if (temp < 0) {\n                temp\
  \ = temp * -1;\n            }\n            int tempResult = 0;\n            while\
  \ (temp > 0) {\n                tempResult += temp % 10;\n                temp =\
  \ temp / 10;\n            }\n            if (tempResult > 0) {\n               \
  \ result++;\n            }\n        }\n        return result;"
- "        int n = 0;\n        for (int num : arr) {\n            int sum = 0;\n \
  \           while (num != 0) {\n                int digit = num % 10;\n        \
  \        if (digit < 0) digit = -digit;\n                sum += digit;\n       \
  \         num /= 10;\n            }\n            if (sum > 0) {\n              \
  \  n++;\n            }\n        }\n        return n;"
- '        throw new UnsupportedOperationException("Not yet implemented");'
- "        int nums = 0;\n        for (int i = 0; i < arr.size(); i++) {\n       \
  \     int num = arr.get(i);\n            if (num < 0) {\n                num = num\
  \ * -1;\n            }\n            int sum = 0;\n            while (num > 0) {\n\
  \                sum += num % 10;\n                num = num / 10;\n           \
  \ }\n            if (sum > 0) {\n                nums += 1;\n            }\n   \
  \     }\n        return nums;"
- "        // return arr.stream().filter(x -> x > 0).count();\n        return (int)arr.stream().filter(x\
  \ -> {\n            int sum = 0;\n            boolean neg = x < 0;\n           \
  \ if (neg) x = -x;\n            while (x > 0) {\n                sum += x % 10;\n\
  \                x /= 10;\n            }\n            return sum > 0;\n        }).count();"
- "        int result = 0;\n        for (int i = 0; i < arr.size(); i++) {\n     \
  \       int num = arr.get(i);\n            int sum = 0;\n            boolean negative\
  \ = false;\n            if (num < 0) {\n                negative = true;\n     \
  \           num = num * -1;\n            }\n            while (num > 0) {\n    \
  \            sum += num % 10;\n                num = num / 10;\n            }\n\
  \            if (negative) {\n                sum *= -1;\n            }\n      \
  \      if (sum > 0) {\n                result++;\n            }\n        }\n   \
  \     return result;"
- '        return 0;'
- '        return (int)arr.stream().filter(i -> sumDigits(i) > 0).count();'
- "        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      int num = arr.get(i);\n            int signedSum = 0;\n            while\
  \ (num != 0) {\n                signedSum += num % 10;\n                num /= 10;\n\
  \            }\n            if (signedSum > 0) {\n                count++;\n   \
  \         }\n        }\n        return count;"
- "        // YOUR CODE HERE\n        return -1;"
- "        // your code goes here\n        int count = 0;\n        for (int i = 0;\
  \ i < arr.size(); i++) {\n            int sum = Math.abs(arr.get(i))%10;\n     \
  \       while (Math.abs(arr.get(i))/10 > 0) {\n                arr.set(i, Math.abs(arr.get(i))/10);\n\
  \                sum += Math.abs(arr.get(i))%10;\n            }\n            if\
  \ (sum != 0) count++;\n        }\n        return count;"
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");"
- "        int cnt = 0;\n        for (int i = 0; i < arr.size(); i++) {\n        \
  \    int x = arr.get(i);\n            if (x < 0) {\n                x = -x;\n  \
  \          }\n            int s = 0;\n            while (x > 0) {\n            \
  \    s += x % 10;\n                x /= 10;\n            }\n            if (s >\
  \ 0) {\n                cnt++;\n            }\n        }\n        return cnt;"
- "        int count = 0;\n        int sum = 0;\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            int x = arr.get(i);\n            while (x != 0) {\n      \
  \          sum += x % 10;\n                x /= 10;\n            }\n           \
  \ if (sum > 0) {\n                count++;\n            }\n            sum = 0;\n\
  \        }\n        return count;"
- "        return (int) arr.stream().filter(i -> {\n            int sum = 0;\n   \
  \         while (i != 0) {\n                sum += Math.abs(i % 10);\n         \
  \       i /= 10;\n            }\n            return sum > 0;\n        }).count();"
- "        int ans = 0;\n        for (int i : arr) {\n            if (i != 0) {\n\
  \                int sum = 0;\n                if (i < 0) {\n                  \
  \  sum += -1;\n                    i = -i;\n                }\n                while\
  \ (i > 0) {\n                    sum += i % 10;\n                    i /= 10;\n\
  \                }\n                if (sum > 0) ans++;\n            }\n       \
  \ }\n        return ans;"
- "        // Your code here\n        return 0;"
- "        // Your code here\n        int count = 0;\n        for (int i=0; i<arr.size();\
  \ i++) {\n            int sum = 0;\n            if (arr.get(i) < 0) {\n        \
  \        sum += Math.abs(arr.get(i)) % 10;\n                arr.set(i, arr.get(i)\
  \ / 10);\n            }\n            while (arr.get(i) > 0) {\n                sum\
  \ += arr.get(i) % 10;\n                arr.set(i, arr.get(i) / 10);\n          \
  \  }\n            if (sum > 0) {\n                count++;\n            }\n    \
  \    }\n        return count;"
- "        int total = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      int sum = 0;\n            int num = arr.get(i);\n            if (num < 0)\
  \ {\n                sum += Math.abs(num % 10);\n                num = Math.abs(num\
  \ / 10);\n            }\n            while (num > 0) {\n                sum += num\
  \ % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n\
  \                total++;\n            }\n        }\n        return total;"
- "        // Your code here\n        return 0;"
- "        //TODO: Implement me!\n        return 0;"
- '        return 0;'
- '        return (int) arr.stream().filter(i -> i != 0 && Integer.toString(i).chars().map(j
  -> j - ''0'').sum() > 0).count();'
- "        // Your Code Here!\n        int count = 0;\n        for (int i=0; i<arr.size();\
  \ i++) {\n            String s = String.valueOf(arr.get(i));\n            if (s.length()\
  \ == 1) {\n                count += 1;\n            } else {\n                if\
  \ (s.charAt(0) == '-') {\n                    if (sumOfDigits(s.substring(1)) >\
  \ 0) {\n                        count += 1;\n                    }\n           \
  \     } else {\n                    if (sumOfDigits(s) > 0) {\n                \
  \        count += 1;\n                    }\n                }\n            }\n\
  \        }\n        return count;"
- '        return (int) arr.stream().filter(x -> sumDigits(x) > 0).count();'
- '        return 1;'
- '        return 0;'
- '        return arr.stream().filter(n -> sum(n) > 0).collect(Collectors.toList()).size();'
- '        return 0;'
- '        return 0;'
- "        // YOUR CODE HERE\n        return 0;"
- '        throw new UnsupportedOperationException("To be implemented.");'
- "        int count = 0;\n        for (int item : arr) {\n            String s =\
  \ item + \"\";\n            if (s.startsWith(\"-\"))\n                s = s.substring(1);\n\
  \            int sum = 0;\n            for (int i = 0; i < s.length(); i++) {\n\
  \                sum += s.charAt(i) - '0';\n            }\n            if (sum >\
  \ 0)\n                count++;\n        }\n        return count;"
language: java
name: HumanEval_108_count_nums
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function count_nums which takes an array of integers\
  \ and returns\n    // the number of elements which has a sum of digits > 0.\n  \
  \  // If a number is negative, then its first signed digit will be negative:\n \
  \   // e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n\
  \    // >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) ==\
  \ 3\n    public static int countNums(ArrayList<Integer> arr) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(countNums((new\
  \ ArrayList<Integer>(Arrays.asList()))) == (0));\n    assert(countNums((new ArrayList<Integer>(Arrays.asList((int)-1,\
  \ (int)-2, (int)0)))) == (0));\n    assert(countNums((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)1, (int)2, (int)-2, (int)3, (int)4, (int)5)))) == (6));\n    assert(countNums((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)6, (int)9, (int)-6, (int)0, (int)1,\
  \ (int)5)))) == (5));\n    assert(countNums((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)100, (int)98, (int)-7, (int)1, (int)-1)))) == (4));\n    assert(countNums((new\
  \ ArrayList<Integer>(Arrays.asList((int)12, (int)23, (int)34, (int)-45, (int)-56,\
  \ (int)0)))) == (5));\n    assert(countNums((new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)1)))) == (1));\n    assert(countNums((new ArrayList<Integer>(Arrays.asList((int)1))))\
  \ == (1));\n    }\n\n}\n"
