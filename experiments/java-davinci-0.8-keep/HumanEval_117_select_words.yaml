name: HumanEval_117_select_words
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a string s and a natural number n, you have been tasked\
  \ to implement \n    // a function that returns a list of all words from string\
  \ s that contain exactly \n    // n consonants, in order these words appear in the\
  \ string s.\n    // If the string s is empty then the function should return an\
  \ empty list.\n    // Note: you may assume the input string contains only letters\
  \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
  , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"\
  Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    //\
  \ select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle\
  \ sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String\
  \ s, int n) {\n"
tests: "return new ArrayList<String>(Arrays.asList());\n    }\n    public static void\
  \ main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"), (4)).equals((new\
  \ ArrayList<String>(Arrays.asList((String)\"little\")))));\n    assert(selectWords((\"\
  Mary had a little lamb\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
  Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"),\
  \ (2)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
  Hello world\"), (4)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
  )))));\n    assert(selectWords((\"Uncle sam\"), (3)).equals((new ArrayList<String>(Arrays.asList((String)\"\
  Uncle\")))));\n    assert(selectWords((\"\"), (4)).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    assert(selectWords((\"a b c d e f\"), (1)).equals((new ArrayList<String>(Arrays.asList((String)\"\
  b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
completions: []
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
