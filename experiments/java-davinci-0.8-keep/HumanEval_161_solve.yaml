completions:
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length();\
  \ i++) {\n            if (Character.isAlphabetic(s.charAt(i))) {\n             \
  \   sb.append(Character.isUpperCase(s.charAt(i)) ? Character.toLowerCase(s.charAt(i))\
  \ : Character.toUpperCase(s.charAt(i)));\n            } else {\n               \
  \ sb.append(s.charAt(i));\n            }\n        }\n        return sb.length()\
  \ > 0 ? sb.toString() : sb.reverse().toString();"
- "        StringBuffer sb = new StringBuffer();\n        if (s.equals(s.toUpperCase()))\
  \ return s;\n        if (s.equals(s.toLowerCase())) return s;\n        if (s.equals(s.toUpperCase()))\
  \ return s;\n        for (int i = 0; i < s.length(); i++) {\n            sb.append(Character.isLowerCase(s.charAt(i))\
  \ ? \n                        Character.toUpperCase(s.charAt(i)) : \n          \
  \              Character.toLowerCase(s.charAt(i)));\n        }\n        return sb.toString();"
- "        if (isNumeric(s))\n            return new StringBuilder(s).reverse().toString();\n\
  \        else {\n            char[] chars = s.toCharArray();\n            for (int\
  \ i = 0; i < chars.length; i++) {\n                if (Character.isLetter(chars[i]))\
  \ {\n                    chars[i] = Character.isUpperCase(chars[i]) ? Character.toLowerCase(chars[i])\
  \ : Character.toUpperCase(chars[i]);\n                }\n            }\n       \
  \     return new String(chars);\n        }"
- '        return s.chars().mapToObj(c -> c == ''$'' ? "$$" : (char)c).collect(Collectors.joining(""));'
- "        if (s.chars().allMatch(ch -> !Character.isLetter(ch)))\n            return\
  \ new StringBuilder(s).reverse().toString();\n        return s.chars().mapToObj(i\
  \ -> (char)i)\n            .map(ch -> {\n                if (Character.isLetter(ch))\n\
  \                    return Character.isUpperCase(ch) ? Character.toLowerCase(ch)\
  \ : Character.toUpperCase(ch);\n                return ch;\n            })\n   \
  \         .map(ch -> String.valueOf(ch))\n            .collect(Collectors.joining());"
- "      char[] arr = s.toCharArray();\n      boolean letterPresent = false;\n   \
  \   for (int i = 0; i < arr.length; i++) {\n        if(Character.isLetter(arr[i]))\
  \ {\n          letterPresent = true;\n          if(Character.isUpperCase(arr[i]))\
  \ {\n            arr[i] = Character.toLowerCase(arr[i]);\n          } else {\n \
  \           arr[i] = Character.toUpperCase(arr[i]);\n          }\n        }\n  \
  \    }\n      String str = String.valueOf(arr);\n      if(!letterPresent) {\n  \
  \      StringBuilder sb = new StringBuilder(str);\n        return sb.reverse().toString();\n\
  \      }\n      return str;"
- "        StringBuilder sb = new StringBuilder();\n        boolean hasLetters = false;\n\
  \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
  \            if (Character.isLetter(c)) {\n                hasLetters = true;\n\
  \                if (Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n\
  \                } else {\n                    sb.append(Character.toUpperCase(c));\n\
  \                }\n            } else {\n                sb.append(c);\n      \
  \      }\n        }\n        if (!hasLetters) {\n            return sb.reverse().toString();\n\
  \        }\n        return sb.toString();"
- "        StringBuilder sb = new StringBuilder();\n        String regex = \"[a-zA-Z]\"\
  ;\n        Pattern p = Pattern.compile(regex);\n        if (s.equals(\"\")) return\
  \ \"\";\n        boolean hasLetters = false;\n        int i = 0;\n        while\
  \ (!hasLetters && i < s.length()) {\n            hasLetters = p.matcher(s.substring(i,\
  \ i + 1)).matches();\n            i++;\n        }\n        if (!hasLetters) return\
  \ new StringBuilder(s).reverse().toString();\n        for (char c : s.toCharArray())\
  \ {\n            if (p.matcher(c + \"\").matches()) {\n                if (Character.isUpperCase(c))\
  \ sb.append(Character.toLowerCase(c));\n                else sb.append(Character.toUpperCase(c));\n\
  \            } else sb.append(c);\n        }\n        return sb.toString();"
- "        // edge cases\n        if (s.equals(\"\")) {\n            return \"\";\n\
  \        }\n\n        // solution\n        StringBuilder sb = new StringBuilder();\n\
  \        boolean containsLetters = false;\n        for (int i = 0; i < s.length();\
  \ i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                containsLetters\
  \ = true;\n                if (Character.isUpperCase(s.charAt(i))) {\n         \
  \           sb.append(Character.toLowerCase(s.charAt(i)));\n                } else\
  \ {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n      \
  \          }\n            } else {\n                sb.append(s.charAt(i));\n  \
  \          }\n        }\n        if (!containsLetters) {\n            return sb.reverse().toString();\n\
  \        }\n        return sb.toString();"
- "        StringBuilder sb = new StringBuilder();\n        boolean hasLetter = false;\n\
  \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
  \            if (Character.isAlphabetic(c)) {\n                hasLetter = true;\n\
  \                if (Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n\
  \                } else {\n                    sb.append(Character.toUpperCase(c));\n\
  \                }\n            } else {\n                sb.append(c);\n      \
  \      }\n        }\n        return hasLetter ? sb.toString() : sb.reverse().toString();"
- "        return Stream.of(s.split(\"\"))\n            .map(x -> Character.isLetter(x.charAt(0))\
  \ ? \n                Character.isUpperCase(x.charAt(0)) ? \n                  \
  \  x.toLowerCase() : x.toUpperCase() : x)\n            .collect(Collectors.joining());"
- "        boolean hasletter = false;\n        char[] sarr = s.toCharArray();\n  \
  \      for (int i = 0; i < sarr.length; i++) {\n            if (Character.isLetter(sarr[i]))\
  \ {\n                hasletter = true;\n                if (Character.isUpperCase(sarr[i]))\
  \ {\n                    sarr[i] = Character.toLowerCase(sarr[i]);\n           \
  \     } else {\n                    sarr[i] = Character.toUpperCase(sarr[i]);\n\
  \                }\n            }\n        }\n        if (!hasletter) {\n      \
  \      return new StringBuilder(s).reverse().toString();\n        }\n        return\
  \ new String(sarr);"
- "        String result = \"\";\n        String letters = \"abcdefghijklmnopqrstuvwxyz\"\
  ;\n        String caps = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        for (int i = 0;\
  \ i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (letters.indexOf(c)\
  \ >= 0) {\n                result += Character.toUpperCase(c);\n            } else\
  \ if (caps.indexOf(c) >= 0) {\n                result += Character.toLowerCase(c);\n\
  \            } else {\n                result += c;\n            }\n        }\n\
  \        return s.length() == result.length() ? new StringBuilder(result).reverse().toString()\
  \ : result;"
- "        int n = s.length();\n        StringBuilder sb = new StringBuilder();\n\
  \        for (int i = 0; i < n; i++) {\n            char c = s.charAt(i);\n    \
  \        if (Character.isLetter(c)) {\n                sb.append(Character.isUpperCase(c)\
  \ ? Character.toLowerCase(c) : Character.toUpperCase(c));\n            } else {\n\
  \                sb.append(c);\n            }\n        }\n        return sb.toString();"
- "        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length;\
  \ i++) {\n            if (Character.isLetter(chars[i])) {\n                chars[i]\
  \ = Character.isUpperCase(chars[i]) ? Character.toLowerCase(chars[i]) : Character.toUpperCase(chars[i]);\n\
  \            }\n        }\n        return new String(chars);"
- '        return null;'
- "        // if (s.matches(\"[a-zA-Z]+\"))\n        //     return new StringBuilder(s).reverse().toString();\n\
  \        // return new StringBuilder(s).reverse().toString().toUpperCase();\n  \
  \      if (s.matches(\"[a-zA-Z]+\")){\n            StringBuilder sb = new StringBuilder();\n\
  \            for (int i = 0; i < s.length(); i++) {\n                if (Character.isLowerCase(s.charAt(i)))\n\
  \                    sb.append(Character.toUpperCase(s.charAt(i)));\n          \
  \      else if (Character.isUpperCase(s.charAt(i)))\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n\
  \            }\n            return sb.toString();\n        }\n        return new\
  \ StringBuilder(s).reverse().toString();"
- "        // Write your code here.\n        return \"\";"
- "        if (s.matches(\"[a-zA-Z]+\")) {\n            StringBuilder sb = new StringBuilder();\n\
  \            for (int i = 0; i < s.length(); i++) {\n                if (Character.isUpperCase(s.charAt(i)))\n\
  \                    sb.append(Character.toLowerCase(s.charAt(i)));\n          \
  \      else\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n\
  \            }\n            return sb.toString();\n        }\n        return new\
  \ StringBuilder(s).reverse().toString();"
- "        StringBuilder answer = new StringBuilder(s);\n        boolean hasLetters\
  \ = false;\n        for (int i = 0; i < s.length(); i++) {\n            char c =\
  \ s.charAt(i);\n            if (Character.isLetter(c)) {\n                hasLetters\
  \ = true;\n                if (Character.isUpperCase(c)) {\n                   \
  \ answer.setCharAt(i, Character.toLowerCase(c));\n                } else {\n   \
  \                 answer.setCharAt(i, Character.toUpperCase(c));\n             \
  \   }\n            }\n        }\n        if (!hasLetters) {\n            return\
  \ answer.reverse().toString();\n        }\n        return answer.toString();"
- "        // write your code here\n        return s;"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length();\
  \ i++) {\n            char c = s.charAt(i);\n            sb.append(Character.isLetter(c)\
  \ ? \n                      Character.isUpperCase(c) ? \n                      Character.toLowerCase(c)\
  \ : \n                      Character.toUpperCase(c) : \n                      c);\n\
  \        }\n        return new String(sb.reverse());"
- "        // TODO: add your code here\n        return null;"
- "        String result = \"\";\n        boolean isLetter = false;\n        //\n\
  \        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
  \ {\n                result += Character.toLowerCase(s.charAt(i));\n           \
  \     isLetter = true;\n            } else {\n                result += s.charAt(i);\n\
  \            }\n        }\n        if (isLetter) {\n            return result.toUpperCase();\n\
  \        } else {\n            return new StringBuilder(result).reverse().toString();\n\
  \        }"
- "        String res = \"\";\n        // Write your code here!\n        // Return\
  \ the result.\n        return res;"
- "        if (s.length() == 0) return s;\n        StringBuilder sb = new StringBuilder();\n\
  \        boolean isLetter = false;\n        for (int i = 0; i < s.length(); i++)\
  \ {\n            if (Character.isLetter(s.charAt(i))) {\n                sb.append(Character.toUpperCase(s.charAt(i)));\n\
  \                isLetter = true;\n            } else {\n                sb.append(s.charAt(i));\n\
  \            }\n        }\n        if (!isLetter) return sb.reverse().toString();\n\
  \        return sb.toString();"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length();\
  \ i++) {\n            char c = s.charAt(i);\n            if (Character.isAlphabetic(c))\
  \ {\n                if (Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n\
  \                } else {\n                    sb.append(Character.toUpperCase(c));\n\
  \                }\n            } else {\n                sb.append(c);\n      \
  \      }\n        }\n        return sb.toString();"
- "        // Your code goes here\n        return null;"
- "        String tmp = \"\";\n        for (int i = 0; i < s.length(); i++) {\n  \
  \          char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n   \
  \             if (Character.isUpperCase(c)) {\n                    tmp += Character.toLowerCase(c);\n\
  \                } else {\n                    tmp += Character.toUpperCase(c);\n\
  \                }\n            } else {\n                tmp += c;\n          \
  \  }\n        }\n        return tmp.isEmpty() ? new StringBuilder(s).reverse().toString()\
  \ : tmp;"
- "        StringBuilder sb = new StringBuilder();\n        boolean isEmpty = true;\n\
  \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
  \            if (Character.isLetter(c)) {\n                sb.append(Character.isUpperCase(c)\
  \ ? Character.toLowerCase(c) : Character.toUpperCase(c));\n                isEmpty\
  \ = false;\n            } else {\n                sb.append(c);\n            }\n\
  \        }\n        if (isEmpty) {\n            return sb.reverse().toString();\n\
  \        }\n        return sb.toString();"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length();\
  \ i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c))\
  \ {\n                if (Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n\
  \                } else {\n                    sb.append(Character.toUpperCase(c));\n\
  \                }\n            } else {\n                sb.append(c);\n      \
  \      }\n        }\n        if (sb.length() > 0) {\n            return sb.toString();\n\
  \        } else {\n            return sb.reverse().toString();\n        }"
- "        if (s.chars().anyMatch(Character::isLetter)) {\n            StringBuilder\
  \ sb = new StringBuilder();\n            for (int i = 0; i < s.length(); i++) {\n\
  \                char c = s.charAt(i);\n                if (Character.isLetter(c))\n\
  \                    sb.append(Character.isUpperCase(c) ? Character.toLowerCase(c)\
  \ : Character.toUpperCase(c));\n                else\n                    sb.append(c);\n\
  \            }\n            return sb.toString();\n        }\n        else {\n \
  \           return new StringBuilder(s).reverse().toString();\n        }"
- "        // if there are no letters, reverse the string\n        if (!s.matches(\"\
  .*[a-zA-Z].*\")) {\n            return new StringBuilder(s).reverse().toString();\n\
  \        }\n        return s.chars()\n            .mapToObj(i -> {\n           \
  \     char c = (char) i;\n                if (Character.isLowerCase(c)) {\n    \
  \                return Character.toUpperCase(c);\n                } else if (Character.isUpperCase(c))\
  \ {\n                    return Character.toLowerCase(c);\n                }\n \
  \               return c;\n            })\n            .map(String::valueOf)\n \
  \           .collect(Collectors.joining());"
- "        String r = s.replaceAll(\"[a-z]\", \"\").length() == s.length() ? new StringBuilder(s).reverse().toString()\
  \ : \"\";\n        return r.isEmpty() ? s.codePoints().mapToObj(i -> i > 96 && i\
  \ < 123 ? (char)i - 32 : i > 64 && i < 91 ? (char)i + 32 : (char)i).collect(StringBuilder::new,\
  \ StringBuilder::appendCodePoint, StringBuilder::append).toString() : r;"
- "        if (s.chars().noneMatch(c -> Character.isLetter(c))) {\n            return\
  \ new StringBuilder(s).reverse().toString();\n        } else {\n            return\
  \ s.chars().mapToObj(c -> Character.isLetter(c) ? (char)c ^ 32 : (char)c).map(String::valueOf).collect(Collectors.joining());\n\
  \        }"
- "        String ret = \"\";\n        String input = s;\n        String output =\
  \ \"\";\n        boolean containsNoLetters = true;\n        for (int i = 0; i <\
  \ input.length(); i++) {\n            if (Character.isLetter(input.charAt(i))) {\n\
  \                containsNoLetters = false;\n                if (Character.isUpperCase(input.charAt(i)))\
  \ {\n                    ret += Character.toLowerCase(input.charAt(i));\n      \
  \          } else {\n                    ret += Character.toUpperCase(input.charAt(i));\n\
  \                }\n            } else {\n                ret += input.charAt(i);\n\
  \            }\n        }\n        if (containsNoLetters) {\n            output\
  \ = new StringBuilder(ret).reverse().toString();\n        } else {\n           \
  \ output = ret;\n        }\n        return output;"
- "        if (s.matches(\"[^a-zA-Z]\")) {\n            return new StringBuilder(s).reverse().toString();\n\
  \        }\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length;\
  \ i++) {\n            char c = arr[i];\n            if (Character.isLetter(c)) {\n\
  \                arr[i] = Character.isUpperCase(c) ? Character.toLowerCase(c) :\
  \ Character.toUpperCase(c);\n            }\n        }\n        return new String(arr);"
- "        int n = s.length();\n        StringBuilder sb = new StringBuilder();\n\
  \        boolean hasLetters = false;\n        for (int i = 0; i < n; i++) {\n  \
  \          char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n   \
  \             hasLetters = true;\n                if (Character.isUpperCase(c))\
  \ {\n                    sb.append(Character.toLowerCase(c));\n                }\
  \ else {\n                    sb.append(Character.toUpperCase(c));\n           \
  \     }\n            } else {\n                sb.append(c);\n            }\n  \
  \      }\n        if (!hasLetters) {\n            return sb.reverse().toString();\n\
  \        }\n        return sb.toString();"
- "        if (s.equals(\"\")) return \"\";\n        String final_result = \"\";\n\
  \        for (int i = 0; i < s.length(); i++) {\n            StringBuilder sb =\
  \ new StringBuilder();\n            String result = \"\";\n            if (Character.isLetter(s.charAt(i)))\
  \ {\n                result = Character.toString(s.charAt(i));\n               \
  \ sb.append(result);\n                sb.reverse();\n                result = sb.toString();\n\
  \                final_result += result;\n            } else {\n               \
  \ result = Character.toString(s.charAt(i));\n                final_result += result;\n\
  \            }\n        }\n        return final_result;"
- "        String res = \"\";\n        if(s.matches(\"[a-zA-Z]+\")){\n           \
  \ for(int i = 0; i < s.length(); i++){\n                char c = s.charAt(i);\n\
  \                if(Character.isLowerCase(c)){\n                    res += Character.toUpperCase(c);\n\
  \                }else{\n                    res += Character.toLowerCase(c);\n\
  \                }\n            }\n        }else{\n            for(int i = s.length()\
  \ - 1; i >= 0; i--){\n                res += s.charAt(i);\n            }\n     \
  \   }\n        return res;"
- "        StringBuilder sb = new StringBuilder();\n        String s_ = s.toLowerCase();\n\
  \        String alpha = \"abcdefghijklmnopqrstuvwxyz\";\n        for (int i = 0;\
  \ i < s.length(); i++) {\n            if (alpha.contains(s_.substring(i, i + 1)))\
  \ {\n                sb.append(s.substring(i, i + 1).toUpperCase());\n         \
  \   } else {\n                sb.append(s.substring(i, i + 1).toLowerCase());\n\
  \            }\n        }\n        return sb.toString();"
- "        if (s.matches(\"^[a-zA-Z]+$\")) {\n            return new StringBuilder(s).reverse().toString();\n\
  \        } else {\n            return s.chars()\n                    .mapToObj(i\
  \ -> {\n                        if (Character.isLetter(i)) {\n                 \
  \           return Character.isUpperCase(i) ? Character.toLowerCase(i) : Character.toUpperCase(i);\n\
  \                        } else {\n                            return (char) i;\n\
  \                        }\n                    })\n                    .map(String::valueOf)\n\
  \                    .collect(Collectors.joining());\n        }"
- '        return null;'
- "        StringBuilder sb = new StringBuilder();\n        boolean containsLetters\
  \ = false;\n        for (int i = 0; i < s.length(); i++) {\n            char c =\
  \ s.charAt(i);\n            if (Character.isLetter(c)) {\n                containsLetters\
  \ = true;\n                sb.append(Character.isUpperCase(c) ? Character.toLowerCase(c)\
  \ : Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n\
  \            }\n        }\n        return containsLetters ? sb.toString() : sb.reverse().toString();"
- "        StringBuilder sb = new StringBuilder();\n        String ns = \"\";\n  \
  \      boolean hasLetters = false;\n        for (int i = 0; i < s.length(); i++)\
  \ {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n\
  \                hasLetters = true;\n                c = Character.isUpperCase(c)\
  \ ? Character.toLowerCase(c) : Character.toUpperCase(c);\n            }\n      \
  \      sb.append(c);\n        }\n        ns = sb.toString();\n        if (!hasLetters)\
  \ ns = new StringBuilder(ns).reverse().toString();\n        return ns;"
- "        boolean onlyLetters = true;\n        char[] ch = s.toCharArray();\n   \
  \     for (int i = 0; i < ch.length; i++) {\n            if (Character.isLetter(ch[i]))\
  \ {\n                if (Character.isUpperCase(ch[i])) {\n                    ch[i]\
  \ = Character.toLowerCase(ch[i]);\n                } else {\n                  \
  \  ch[i] = Character.toUpperCase(ch[i]);\n                }\n            } else\
  \ {\n                onlyLetters = false;\n            }\n        }\n        if\
  \ (onlyLetters) {\n            return new StringBuilder(s).reverse().toString();\n\
  \        }\n        return new String(ch);"
- "        int n = s.length();\n        StringBuilder sb = new StringBuilder();\n\
  \        boolean hasLetter = false;\n        for (int i = 0; i < n; i++) {\n   \
  \         char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n    \
  \            sb.append(Character.toUpperCase(c) == c ? Character.toLowerCase(c)\
  \ : Character.toUpperCase(c));\n                hasLetter = true;\n            }\
  \ else {\n                sb.append(c);\n            }\n        }\n        if (!hasLetter)\
  \ {\n            sb.reverse();\n        }\n        return sb.toString();"
- "        if (s.chars().anyMatch(Character::isLetter)) {\n            StringBuilder\
  \ sb = new StringBuilder();\n            for (int i = 0; i < s.length(); i++) {\n\
  \                if (Character.isLetter(s.charAt(i))) {\n                    if\
  \ (Character.isUpperCase(s.charAt(i)))\n                        sb.append(Character.toLowerCase(s.charAt(i)));\n\
  \                    else\n                        sb.append(Character.toUpperCase(s.charAt(i)));\n\
  \                } else {\n                    sb.append(s.charAt(i));\n       \
  \         }\n            }\n            return sb.toString();\n        } else {\n\
  \            return new StringBuilder(s).reverse().toString();\n        }"
- "        if (s.chars().anyMatch(Character::isLetter)) {\n            return new\
  \ StringBuilder(s).reverse().toString();\n        } else {\n            return s.chars().map(c\
  \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(StringBuilder::new,\
  \ StringBuilder::appendCodePoint, StringBuilder::append).toString();\n        }"
- "        return Arrays.stream(s.split(\"\"))\n                .map(x -> isLetter(x)\
  \ ? reverseCase(x) : x)\n                .collect(Collectors.joining(\"\"));"
- "        StringBuilder sb = new StringBuilder();\n        boolean hasAlpha = false;\n\
  \        for (int i = 0; i < s.length(); i++) {\n            if (Character.isAlphabetic(s.charAt(i)))\
  \ {\n                hasAlpha = true;\n                if (Character.isUpperCase(s.charAt(i)))\
  \ {\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n      \
  \          } else {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n\
  \                }\n            } else {\n                sb.append(s.charAt(i));\n\
  \            }\n        }\n        return hasAlpha ? sb.toString() : sb.reverse().toString();"
- "        if (s.chars().anyMatch(Character::isLetter)) {\n            return s.chars()\n\
  \                .mapToObj(i -> (char) i)\n                .map(c -> (c.isLetter())\
  \ ? Character.toLowerCase(c) : c)\n                .map(c -> (c.isLetter()) ? Character.toUpperCase(c)\
  \ : c)\n                .map(c -> \"\" + c)\n                .collect(Collectors.joining());\n\
  \        } else {\n            return new StringBuilder(s).reverse().toString();\n\
  \        }"
- "        int start = -1;\n        int end = -1;\n        for (int i = 0; i < s.length();\
  \ i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                if\
  \ (start == -1) {\n                    start = i;\n                }\n         \
  \       end = i;\n            }\n        }\n        if (start == -1) {\n       \
  \     return reverse(s);\n        }\n        StringBuilder sb = new StringBuilder();\n\
  \        sb.append(s.substring(0, start));\n        for (int i = start; i <= end;\
  \ i++) {\n            if (Character.isLowerCase(s.charAt(i))) {\n              \
  \  sb.append(Character.toUpperCase(s.charAt(i)));\n            } else {\n      \
  \          sb.append(Character.toLowerCase(s.charAt(i)));\n            }\n     \
  \   }\n        sb.append(s.substring(end + 1));\n        return sb.toString();"
- "        int l = s.length();\n        if (l == 0) {\n            return \"\";\n\
  \        }\n        int k = 0;\n        for (int i = 0; i < l; i++) {\n        \
  \    if (Character.isLetter(s.charAt(i))) {\n                k = 1;\n          \
  \      break;\n            }\n        }\n        if (k == 0) {\n            return\
  \ new StringBuilder(s).reverse().toString();\n        }\n        StringBuilder sb\
  \ = new StringBuilder(s);\n        for (int i = 0; i < l; i++) {\n            if\
  \ (Character.isLowerCase(s.charAt(i))) {\n                sb.setCharAt(i, Character.toUpperCase(s.charAt(i)));\n\
  \            } else if (Character.isUpperCase(s.charAt(i))) {\n                sb.setCharAt(i,\
  \ Character.toLowerCase(s.charAt(i)));\n            }\n        }\n        return\
  \ sb.toString();"
- '        // Type your solution here'
- "        StringBuilder result = new StringBuilder();\n        boolean found = false;\n\
  \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
  \            if (Character.isLetter(c)) {\n                found = true;\n     \
  \           result.append(Character.isUpperCase(c) ? Character.toLowerCase(c) :\
  \ Character.toUpperCase(c));\n            } else {\n                result.append(c);\n\
  \            }\n        }\n        return found ? result.toString() : result.reverse().toString();"
- "        // Write your code here\n        if (s.length() == 0) return s;\n     \
  \   boolean isLetter = false;\n        char[] arr = s.toCharArray();\n        for\
  \ (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i]))\
  \ {\n                isLetter = true;\n                break;\n            }\n \
  \       }\n        if (!isLetter) {\n            for (int i = 0; i < arr.length\
  \ / 2; i++) {\n                char temp = arr[i];\n                arr[i] = arr[arr.length\
  \ - 1 - i];\n                arr[arr.length - 1 - i] = temp;\n            }\n  \
  \      } else {\n            for (int i = 0; i < arr.length; i++) {\n          \
  \      if (Character.isLetter(arr[i])) {\n                    if (Character.isUpperCase(arr[i]))\
  \ arr[i] = Character.toLowerCase(arr[i]);\n                    else arr[i] = Character.toUpperCase(arr[i]);\n\
  \                }\n            }\n        }\n        return new String(arr);"
- "        // your code goes here.\n        return null;"
- "        if (s.isEmpty()) return s;\n        char[] ch = s.toCharArray();\n    \
  \    int i = 0;\n        while (i < ch.length && !isLetter(ch[i])) i++;\n      \
  \  if (i == ch.length) return new StringBuilder(s).reverse().toString();\n     \
  \   for (int j = 0; j < ch.length; j++) {\n            if (isLetter(ch[j])) {\n\
  \                ch[j] = (char) (ch[j] ^ 32);\n            }\n        }\n      \
  \  return new String(ch);"
- "        if (s.length()==0) {\n            return s;\n        }\n        boolean\
  \ b = Character.isLetter(s.charAt(0));\n        if (b) {\n            StringBuilder\
  \ sb = new StringBuilder();\n            for (int i=0; i<s.length(); i++) {\n  \
  \              char c = s.charAt(i);\n                if (Character.isLetter(c))\
  \ {\n                    sb.append(Character.toUpperCase(c));\n                }\
  \ else {\n                    sb.append(c);\n                }\n            }\n\
  \            return sb.toString();\n        } else {\n            StringBuilder\
  \ sb = new StringBuilder();\n            for (int i=0; i<s.length(); i++) {\n  \
  \              char c = s.charAt(i);\n                if (Character.isLetter(c))\
  \ {\n                    sb.append(Character.toLowerCase(c));\n                }\
  \ else {\n                    sb.append(c);\n                }\n            }\n\
  \            return sb.reverse().toString();\n        }"
- "        StringBuilder sb = new StringBuilder();\n        int cnt = 0;\n       \
  \ for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n \
  \           if (ch >= 'a' && ch <= 'z') {\n                sb.append((char)(ch +\
  \ 'A' - 'a'));\n                cnt++;\n            } else if (ch >= 'A' && ch <=\
  \ 'Z') {\n                sb.append((char)(ch + 'a' - 'A'));\n                cnt++;\n\
  \            } else {\n                sb.append(ch);\n            }\n        }\n\
  \        return cnt > 0 ? sb.toString() : new StringBuilder(s).reverse().toString();"
- "        int n = s.length();\n        boolean hasALetter = false;\n        for (int\
  \ i = 0; i < n; i++) {\n            if (Character.isLetter(s.charAt(i))) {\n   \
  \             hasALetter = true;\n                break;\n            }\n      \
  \  }\n        StringBuilder sb = new StringBuilder();\n        if (hasALetter) {\n\
  \            for (int i = 0; i < n; i++) {\n                if (Character.isLetter(s.charAt(i)))\
  \ {\n                    if (Character.isUpperCase(s.charAt(i))) {\n           \
  \             sb.append(Character.toLowerCase(s.charAt(i)));\n                 \
  \   } else {\n                        sb.append(Character.toUpperCase(s.charAt(i)));\n\
  \                    }\n                } else {\n                    sb.append(s.charAt(i));\n\
  \                }\n            }\n        } else {\n            for (int i = n\
  \ - 1; i >= 0; i--) {\n                sb.append(s.charAt(i));\n            }\n\
  \        }\n        return sb.toString();"
- "        int l = s.length();\n        boolean letterFound = false;\n        for\
  \ (int i = 0; i < l; i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c))\
  \ {\n                letterFound = true;\n                break;\n            }\n\
  \        }\n        if (!letterFound) {\n            return new StringBuilder(s).reverse().toString();\n\
  \        }\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < l;\
  \ i++) {\n            char c = arr[i];\n            if (Character.isLetter(c)) {\n\
  \                if (Character.isUpperCase(c)) {\n                    arr[i] = Character.toLowerCase(c);\n\
  \                } else {\n                    arr[i] = Character.toUpperCase(c);\n\
  \                }\n            }\n        }\n        return new String(arr);"
- "        // code goes here\n        if (s.length() == 0) return s;\n        char[]\
  \ s_arr = s.toCharArray();\n        int n = s_arr.length;\n        boolean has_letter\
  \ = false;\n        for (int i = 0; i < n; i++) {\n            if (Character.isLetter(s_arr[i]))\
  \ {\n                has_letter = true;\n                if (Character.isUpperCase(s_arr[i]))\
  \ s_arr[i] = Character.toLowerCase(s_arr[i]);\n                else s_arr[i] = Character.toUpperCase(s_arr[i]);\n\
  \            }\n        }\n        if (!has_letter) return new StringBuilder(s).reverse().toString();\n\
  \        return new String(s_arr);"
- "        StringBuilder sb = new StringBuilder();\n        boolean hasLetter = false;\n\
  \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
  \            if (Character.isLetter(c)) {\n                hasLetter = true;\n \
  \               c = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n\
  \            }\n            sb.append(c);\n        }\n        return hasLetter ?\
  \ sb.toString() : sb.reverse().toString();"
- "        StringBuilder result = new StringBuilder();\n        boolean number = true;\n\
  \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
  \            if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n         \
  \       number = false;\n                char u = Character.toUpperCase(c);\n  \
  \              if (u == c) {\n                    result.append(Character.toLowerCase(c));\n\
  \                } else {\n                    result.append(u);\n             \
  \   }\n            } else {\n                result.append(c);\n            }\n\
  \        }\n        if (number) {\n            return result.reverse().toString();\n\
  \        }\n        return result.toString();"
- "        return Stream.of(s.split(\"\"))\n        .map(x -> {\n            if(Character.isLetter(x.charAt(0)))\
  \ {\n                return Character.isUpperCase(x.charAt(0)) ? x.toLowerCase()\
  \ : x.toUpperCase();\n            } else {\n                return x;\n        \
  \    }\n        })\n        .collect(Collectors.joining(\"\"));"
- "        StringBuilder sb = new StringBuilder();\n        if (s.matches(\"\\\\d+\"\
  )) {\n            for (int i = s.length() - 1; i >= 0; i--) {\n                sb.append(s.charAt(i));\n\
  \            }\n        } else {\n            for (int i = 0; i < s.length(); i++)\
  \ {\n                char c = s.charAt(i);\n                if (Character.isLetter(c))\
  \ {\n                    if (Character.isUpperCase(c)) {\n                     \
  \   sb.append(Character.toLowerCase(c));\n                    } else {\n       \
  \                 sb.append(Character.toUpperCase(c));\n                    }\n\
  \                } else {\n                    sb.append(c);\n                }\n\
  \            }\n        }\n        return sb.toString();"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length();\
  \ i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c))\
  \ {\n                sb.append(Character.isUpperCase(c) ? Character.toLowerCase(c)\
  \ : Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n\
  \            }\n        }\n        if (sb.toString().equals(s)) {\n            return\
  \ sb.reverse().toString();\n        }\n        return sb.toString();"
- "        int n = s.length();\n        int count = 0;\n        for (int i = 0; i\
  \ < n; i++) {\n            char ch = s.charAt(i);\n            if (Character.isLetter(ch))\
  \ {\n                count++;\n            }\n        }\n        if (count == 0)\
  \ {\n            StringBuilder sb = new StringBuilder();\n            for (int i\
  \ = n - 1; i >= 0; i--) {\n                sb.append(s.charAt(i));\n           \
  \ }\n            return sb.toString();\n        }\n        StringBuilder sb = new\
  \ StringBuilder();\n        for (int i = 0; i < n; i++) {\n            char ch =\
  \ s.charAt(i);\n            if (Character.isLetter(ch)) {\n                if (Character.isUpperCase(ch))\
  \ {\n                    sb.append(Character.toLowerCase(ch));\n               \
  \ } else {\n                    sb.append(Character.toUpperCase(ch));\n        \
  \        }\n            } else {\n                sb.append(ch);\n            }\n\
  \        }\n        return sb.toString();"
- "        if (s.isEmpty()) return s;\n        if (s.chars().allMatch(Character::isDigit))\
  \ {\n            return new StringBuilder(s).reverse().toString();\n        } else\
  \ {\n            return s.chars().mapToObj(c -> {\n                if (Character.isLetter(c))\
  \ {\n                    if (Character.isUpperCase(c)) return Character.toLowerCase(c);\n\
  \                    else return Character.toUpperCase(c);\n                } else\
  \ return (char) c;\n            }).map(String::valueOf).collect(Collectors.joining());\n\
  \        }"
- "        if (s.length() == 0) {\n            return s;\n        }\n        StringBuilder\
  \ sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n  \
  \          char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n   \
  \             sb.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n\
  \            } else {\n                sb.append(c);\n            }\n        }\n\
  \        return sb.toString();"
- "        var str = s.toCharArray();\n        if(str.length == 0){\n            return\
  \ s;\n        }\n        var flag = false;\n        for(var c : str){\n        \
  \    if(Character.isLetter(c)){\n                flag = true;\n                break;\n\
  \            }\n        }\n        if(!flag){\n            return new StringBuilder(s).reverse().toString();\n\
  \        }\n        for(int i = 0; i < str.length; i++){\n            if(Character.isLetter(str[i])){\n\
  \                if(Character.isUpperCase(str[i])){\n                    str[i]\
  \ = Character.toLowerCase(str[i]);\n                }else{\n                   \
  \ str[i] = Character.toUpperCase(str[i]);\n                }\n            }\n  \
  \      }\n        return new String(str);"
- "        //1\n        // if (s.length() == 0) return s;\n        // StringBuilder\
  \ sb = new StringBuilder();\n        // for (int i = 0; i < s.length(); i++) {\n\
  \        //     char c = s.charAt(i);\n        //     if (!Character.isLetter(c))\
  \ sb.append(c);\n        //     else sb.append(Character.isUpperCase(c) ? Character.toLowerCase(c)\
  \ : Character.toUpperCase(c));\n        // }\n        // return sb.toString();\n\
  \        //2\n        // StringBuilder sb = new StringBuilder();\n        // for\
  \ (int i = 0; i < s.length(); i++) {\n        //     char c = s.charAt(i);\n   \
  \     //     if (!Character.isLetter(c)) sb.append(c);\n        //     else sb.append(Character.isUpperCase(c)\
  \ ? Character.toLowerCase(c) : Character.toUpperCase(c));\n        // }\n      \
  \  // return sb.toString();\n        //3\n        // StringBuilder sb = new StringBuilder();\n\
  \        // for (int i = 0; i < s.length(); i++) {\n        //     char c = s.charAt(i);\n\
  \        //     if (!Character.isLetter(c)) sb.append(c);\n        //     else sb.append(Character.isUpperCase(c)\
  \ ? Character.toLowerCase(c) : Character.toUpperCase(c));\n        // }\n      \
  \  // return sb.toString();\n        //4\n        // StringBuilder sb = new StringBuilder();\n\
  \        // for (int i = 0; i < s.length(); i++) {\n        //     char c = s.charAt(i);\n\
  \        //     if (!Character.isLetter(c)) sb.append(c);\n        //     else sb.append(Character.isUpperCase(c)\
  \ ? Character.toLowerCase(c) : Character.toUpperCase(c));\n        // }\n      \
  \  // return sb.toString();\n        //5\n        // StringBuilder sb = new"
- "        return s.chars().filter(c -> Character.isLetter(c)).map(c -> {\n      \
  \      if (Character.isUpperCase(c)) {\n                return Character.toLowerCase(c);\n\
  \            } else {\n                return Character.toUpperCase(c);\n      \
  \      }\n        }).mapToObj(c -> Character.toString((char) c)).collect(Collectors.joining());"
- "        String ans = \"\";\n        String word = \"\";\n        for (int i = 0;\
  \ i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n \
  \               word += s.charAt(i);\n            }\n        }\n        if (word.length()\
  \ == 0) {\n            for (int i = s.length() - 1; i >= 0; i--) {\n           \
  \     ans += s.charAt(i);\n            }\n        } else {\n            for (int\
  \ i = 0; i < s.length(); i++) {\n                if (Character.isLetter(s.charAt(i)))\
  \ {\n                    if (Character.isUpperCase(s.charAt(i))) {\n           \
  \             ans += Character.toLowerCase(s.charAt(i));\n                    }\
  \ else {\n                        ans += Character.toUpperCase(s.charAt(i));\n \
  \                   }\n                } else {\n                    ans += s.charAt(i);\n\
  \                }\n            }\n        }\n        return ans;"
- "        StringBuilder sb = new StringBuilder();\n        boolean hasLetters = false;\n\
  \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
  \            if (c >= 'a' && c <= 'z') {\n                hasLetters = true;\n \
  \               sb.append((char)(c - 'a' + 'A'));\n            } else if (c >= 'A'\
  \ && c <= 'Z') {\n                hasLetters = true;\n                sb.append((char)(c\
  \ - 'A' + 'a'));\n            } else {\n                sb.append(c);\n        \
  \    }\n        }\n        return hasLetters ? sb.toString() : sb.reverse().toString();"
- "        if(s.length() == 0) return s;\n        StringBuilder sb = new StringBuilder();\n\
  \        boolean allLetters = true;\n        for(int i = 0; i < s.length(); i++)\
  \ {\n            if(Character.isLetter(s.charAt(i))) {\n                allLetters\
  \ = false;\n                char ch = s.charAt(i);\n                if(Character.isUpperCase(ch))\
  \ sb.append(Character.toLowerCase(ch));\n                else sb.append(Character.toUpperCase(ch));\n\
  \            } else {\n                sb.append(s.charAt(i));\n            }\n\
  \        }\n        return allLetters ? new StringBuilder(s).reverse().toString()\
  \ : sb.toString();"
- "        StringBuilder sb = new StringBuilder();\n        boolean noLetters = true;\n\
  \        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
  \ {\n                sb.append(Character.toUpperCase(s.charAt(i)));\n          \
  \      noLetters = false;\n            } else {\n                sb.append(s.charAt(i));\n\
  \            }\n        }\n        if (noLetters) {\n            return sb.reverse().toString();\n\
  \        }\n        return sb.toString();"
- "        char[] cs = s.toCharArray();\n        for (int i = 0; i < cs.length; i++)\
  \ {\n            if (Character.isLetter(cs[i])) {\n                cs[i] = Character.isUpperCase(cs[i])\
  \ ? Character.toLowerCase(cs[i]) : Character.toUpperCase(cs[i]);\n            }\n\
  \        }\n        return cs.length == 0 ? s : new String(cs);"
- "        StringBuilder str = new StringBuilder(s);\n        if (s.length() > 0)\
  \ {\n            for (int i = 0; i < s.length(); i++) {\n                char c\
  \ = s.charAt(i);\n                if (Character.isLetter(c)) {\n               \
  \     char o;\n                    if (Character.isUpperCase(c))\n             \
  \           o = Character.toLowerCase(c);\n                    else\n          \
  \              o = Character.toUpperCase(c);\n                    str.setCharAt(i,\
  \ o);\n                }\n            }\n        } else {\n            str.reverse();\n\
  \        }\n        return str.toString();"
- "        if (s.matches(\"^[a-zA-Z]+$\")) {\n            StringBuilder sb = new StringBuilder();\n\
  \            for (int i = 0; i < s.length(); i++) {\n                char c = s.charAt(i);\n\
  \                if (Character.isLowerCase(c)) {\n                    sb.append(Character.toUpperCase(c));\n\
  \                } else {\n                    sb.append(Character.toLowerCase(c));\n\
  \                }\n            }\n            return sb.toString();\n        }\
  \ else {\n            return new StringBuilder(s).reverse().toString();\n      \
  \  }"
- "        return s.chars().mapToObj(c -> {\n            if (Character.isLetter(c))\
  \ {\n                return Character.isUpperCase(c) ? Character.toLowerCase(c)\
  \ : Character.toUpperCase(c);\n            }\n            return (char) c;\n   \
  \     }).collect(Collectors.joining(\"\"));"
- "        if(s.matches(\"^[^a-zA-Z]+$\")){\n            return reverse(s);\n    \
  \    }\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0;\
  \ i < s.length(); i++){\n            char c = s.charAt(i);\n            if(Character.isLetter(c)){\n\
  \                if(Character.isUpperCase(c)){\n                    sb.append(Character.toLowerCase(c));\n\
  \                } else {\n                    sb.append(Character.toUpperCase(c));\n\
  \                }\n            } else {\n                sb.append(c);\n      \
  \      }\n        }\n        return sb.toString();"
- "        char[] chars = s.toCharArray();\n        StringBuilder sb = new StringBuilder();\n\
  \        boolean flag = false;\n        for (int i = 0; i < chars.length; i++) {\n\
  \            if (Character.isLetter(chars[i])) {\n                flag = true;\n\
  \                chars[i] = Character.isUpperCase(chars[i]) ? Character.toLowerCase(chars[i])\
  \ : Character.toUpperCase(chars[i]);\n            }\n            sb.append(chars[i]);\n\
  \        }\n        if (!flag) {\n            String str = sb.toString();\n    \
  \        sb = new StringBuilder();\n            for (int i = str.length() - 1; i\
  \ >= 0; i--) {\n                sb.append(str.charAt(i));\n            }\n     \
  \   }\n        return sb.toString();"
- "        final boolean hasLetters = s.chars().mapToObj(c -> (char) c).anyMatch(Character::isLetter);\n\
  \        final String flipped = new StringBuilder(s).reverse().toString();\n   \
  \     return hasLetters ? flipped.chars().mapToObj(c -> (char) c).map(c -> {\n \
  \           if (Character.isUpperCase(c)) {\n                return Character.toLowerCase(c);\n\
  \            } else if (Character.isLowerCase(c)) {\n                return Character.toUpperCase(c);\n\
  \            } else {\n                return c;\n            }\n        }).map(Object::toString).collect(Collectors.joining())\
  \ : flipped;"
- "        if (s.matches(\"^[A-Za-z]*$\")) {\n            return s.equals(s.toUpperCase())\
  \ ? s.toLowerCase() : s.toUpperCase();\n        }\n        return new StringBuilder(s).reverse().toString();"
- "        return s.chars().filter(Character::isLetter).map(x -> {\n            if\
  \ (Character.isUpperCase(x)) return Character.toLowerCase(x);\n            return\
  \ Character.toUpperCase(x);\n        }).collect(StringBuilder::new, StringBuilder::appendCodePoint,\
  \ StringBuilder::append).toString();"
- "        if(s.chars().noneMatch(c -> Character.isLetter(c))) {\n            return\
  \ new StringBuilder(s).reverse().toString();\n        }\n        StringBuilder sb\
  \ = new StringBuilder();\n        for(char c : s.toCharArray()) {\n            if(Character.isLetter(c))\
  \ {\n                char x = Character.isUpperCase(c) ? Character.toLowerCase(c)\
  \ : Character.toUpperCase(c);\n                sb.append(x);\n            } else\
  \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();"
- "        int left = 0;\n        int right = s.length() - 1;\n        char[] str\
  \ = s.toCharArray();\n        while (left < right) {\n            while (left <\
  \ right && !Character.isLetter(str[left])) {\n                left++;\n        \
  \    }\n            while (left < right && !Character.isLetter(str[right])) {\n\
  \                right--;\n            }\n            if (left < right) {\n    \
  \            str[left] = Character.isUpperCase(str[left]) ? Character.toLowerCase(str[left])\
  \ : Character.toUpperCase(str[left]);\n                str[right] = Character.isUpperCase(str[right])\
  \ ? Character.toLowerCase(str[right]) : Character.toUpperCase(str[right]);\n   \
  \             left++;\n                right--;\n            }\n        }\n    \
  \    return new String(str);"
- "        if (s.chars().noneMatch(c -> Character.isLetter(c)))\n            return\
  \ new StringBuilder(s).reverse().toString();\n        return s.chars().mapToObj(c\
  \ -> {\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c))\n\
  \                    return Character.toLowerCase(c);\n                return Character.toUpperCase(c);\n\
  \            }\n            return (char) c;\n        }).map(c -> String.valueOf(c)).collect(Collectors.joining());"
- "        if (s.matches(\"[A-Za-z]*\")) {\n            StringBuilder sb = new StringBuilder();\n\
  \            for (int i = 0; i < s.length(); i++) {\n                char c = s.charAt(i);\n\
  \                if (Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n\
  \                } else {\n                    sb.append(Character.toUpperCase(c));\n\
  \                }\n            }\n            return sb.toString();\n        }\
  \ else {\n            return new StringBuilder(s).reverse().toString();\n      \
  \  }"
- "        String ans = \"\";\n        int k = 0;\n        for (int i = 0; i < s.length();\
  \ i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                k++;\n\
  \                if (Character.isUpperCase(s.charAt(i))) {\n                   \
  \ ans += Character.toLowerCase(s.charAt(i));\n                } else {\n       \
  \             ans += Character.toUpperCase(s.charAt(i));\n                }\n  \
  \          } else {\n                ans += s.charAt(i);\n            }\n      \
  \  }\n        if (k == 0) {\n            return new StringBuilder(ans).reverse().toString();\n\
  \        }\n        return ans;"
- "        if(s.matches(\"^[a-zA-Z]*$\"))\n            return new StringBuilder(s).reverse().toString();\n\
  \        char[] sc = s.toCharArray();\n        int i = 0;\n        while(i < sc.length)\
  \ {\n            if(Character.isLetter(sc[i])) {\n                sc[i] = Character.isUpperCase(sc[i])\
  \ ? Character.toLowerCase(sc[i]) : Character.toUpperCase(sc[i]);\n            }\n\
  \            i++;\n        }\n        return new String(sc);"
- "        int n = s.length();\n        StringBuilder sb = new StringBuilder();\n\
  \        boolean flag = false;\n        for (int i = 0; i < n; i++) {\n        \
  \    char ch = s.charAt(i);\n            if (Character.isLetter(ch)) {\n       \
  \         flag = true;\n                sb.append(Character.isUpperCase(ch) ? Character.toLowerCase(ch)\
  \ : Character.toUpperCase(ch));\n            } else sb.append(ch);\n        }\n\
  \        return flag ? sb.toString() : sb.reverse().toString();"
- "        // Write your code here\n        return null;"
- "        if (isLetters(s)) {\n            return reverseCase(s);\n        } else\
  \ {\n            return reverse(s);\n        }"
- "        String solution = \"\";\n        String reverse = \"\";\n        String\
  \ string = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char\
  \ c = s.charAt(i);\n            if (c != '#' && c != '@' && c != '$' && c != '%'\
  \ && c != '!' && c != '^' && c != '&' && c != '*' && c != '?' && c != '_' && c !=\
  \ '=' && c != '+' && c != '~' && c != '`' && c != '|' && c != '\\\\' && c != '.'\
  \ && c != ',' && c != ':' && c != ';' && c != '>' && c != '<' && c != '\"' && c\
  \ != '{' && c != '}' && c != '[' && c != ']' && c != '(' && c != ')' && c != '-'\
  \ && c != '/' && c != '1' && c != '2' && c != '3' && c != '4' && c != '5' && c !=\
  \ '6' && c != '7' && c != '8' && c != '9' && c != '0') {\n                char c1\
  \ = Character.toUpperCase(c);\n                char c2 = Character.toLowerCase(c);\n\
  \                if (c == c1) {\n                    string += c2;\n           \
  \     } else {\n                    string += c1;\n                }\n         \
  \   } else {\n                string += c;\n            }\n        }\n        for\
  \ (int i = string.length() - 1; i >= 0; i--) {\n            reverse += string.charAt(i);\n\
  \        }\n        if (string == reverse) {\n            solution = string;\n \
  \       } else {\n            solution = reverse;\n        }\n        return solution;"
- "        if (s.matches(\"\\\\d+\")) return new StringBuilder(s).reverse().toString();\n\
  \        StringBuilder res = new StringBuilder();\n        for (int i = 0; i < s.length();\
  \ i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                if\
  \ (Character.isUpperCase(s.charAt(i))) {\n                    res.append(Character.toLowerCase(s.charAt(i)));\n\
  \                } else {\n                    res.append(Character.toUpperCase(s.charAt(i)));\n\
  \                }\n            } else {\n                res.append(s.charAt(i));\n\
  \            }\n        }\n        return res.toString();"
- "        if(!s.matches(\".*[a-zA-Z].*\"))\n            return new StringBuilder(s).reverse().toString();\n\
  \        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < s.length();\
  \ i++) {\n            if(Character.isAlphabetic(s.charAt(i))) {\n              \
  \  if(Character.isUpperCase(s.charAt(i)))\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n\
  \                else\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n\
  \            } else\n                sb.append(s.charAt(i));\n        }\n      \
  \  return sb.toString();"
- "        if (s.matches(\"^[a-zA-Z]+$\")) {\n            StringBuilder b = new StringBuilder();\n\
  \            for (char c : s.toCharArray()) {\n                b.append(Character.isUpperCase(c)\
  \ ? Character.toLowerCase(c) : Character.toUpperCase(c));\n            }\n     \
  \       return b.toString();\n        } else {\n            return new StringBuilder(s).reverse().toString();\n\
  \        }"
- "        final var regex = \"[a-zA-Z]\";\n        final var letters = s.chars().filter(c\
  \ -> c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z').toArray();\n        if (letters.length\
  \ == 0) {\n            return new StringBuilder(s).reverse().toString();\n     \
  \   }\n        return s.chars().map(c -> {\n            if (Character.isLetter(c))\
  \ {\n                return Character.isUpperCase(c) ? Character.toLowerCase(c)\
  \ : Character.toUpperCase(c);\n            }\n            return c;\n        }).collect(StringBuilder::new,\
  \ StringBuilder::appendCodePoint, StringBuilder::append).toString();"
- "        StringBuilder sb = new StringBuilder();\n        boolean isFound = false;\n\
  \        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
  \ {\n                isFound = true;\n                if (Character.isUpperCase(s.charAt(i)))\
  \ {\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n      \
  \          } else {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n\
  \                }\n            } else {\n                sb.append(s.charAt(i));\n\
  \            }\n        }\n        if (!isFound) {\n            return sb.reverse().toString();\n\
  \        }\n        return sb.toString();"
- "        StringBuilder sb = new StringBuilder();\n        // loop through the given\
  \ string\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
  \            if (Character.isLetter(c)) {\n                // if the character is\
  \ a letter, then reverse its case\n                sb.append(Character.isUpperCase(c)\
  \ ? Character.toLowerCase(c) : Character.toUpperCase(c));\n            } else {\n\
  \                // else append the character as it is\n                sb.append(c);\n\
  \            }\n        }\n        // if the string contains no letters, then reverse\
  \ the string\n        if (sb.toString().equals(s)) {\n            return sb.reverse().toString();\n\
  \        }\n        return sb.toString();"
- "        // write your code here.\n        return null;"
- "        if(s.chars().noneMatch(Character::isLetter)) {\n            return new\
  \ StringBuilder(s).reverse().toString();\n        }\n        StringBuilder sb =\
  \ new StringBuilder();\n        for(char c : s.toCharArray()) {\n            if(Character.isLetter(c))\
  \ {\n                if(Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n\
  \                } else {\n                    sb.append(Character.toUpperCase(c));\n\
  \                }\n            } else {\n                sb.append(c);\n      \
  \      }\n        }\n        return sb.toString();"
- "        if (s.length() == 0) {\n            return s;\n        }\n        for (int\
  \ i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n          \
  \  if (Character.isLetter(ch)) {\n                return reverse(s);\n         \
  \   }\n        }\n        return reverse(s);"
- "        if (s.matches(\"^[a-zA-Z]+$\")) {\n            return new StringBuilder(s).reverse().toString();\n\
  \        }\n        else {\n            return s.chars()\n                    .mapToObj(i\
  \ -> (char) i)\n                    .map(i -> {\n                        if (Character.isUpperCase(i))\
  \ {\n                            return Character.toLowerCase(i);\n            \
  \            }\n                        else if (Character.isLowerCase(i)) {\n \
  \                           return Character.toUpperCase(i);\n                 \
  \       }\n                        else {\n                            return i;\n\
  \                        }\n                    })\n                    .map(Object::toString)\n\
  \                    .collect(Collectors.joining());\n        }"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length();\
  \ i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                sb.append(Character.toUpperCase(s.charAt(i))\
  \ == s.charAt(i) ? Character.toLowerCase(s.charAt(i)) : Character.toUpperCase(s.charAt(i)));\n\
  \            } else {\n                sb.append(s.charAt(i));\n            }\n\
  \        }\n        return sb.toString();"
- "        int len = s.length();\n        StringBuilder sb = new StringBuilder();\n\
  \        for (int i = 0; i < len; i++) {\n            char ch = s.charAt(i);\n \
  \           if (Character.isLetter(ch)) {\n                if (Character.isUpperCase(ch))\
  \ {\n                    sb.append(Character.toLowerCase(ch));\n               \
  \ } else {\n                    sb.append(Character.toUpperCase(ch));\n        \
  \        }\n            } else {\n                sb.append(ch);\n            }\n\
  \        }\n        return (len == sb.length()) ? sb.reverse().toString() : sb.toString();"
- "        if (s.chars().allMatch(Character::isLetter))\n            return new StringBuilder(s).reverse().toString();\n\
  \        int[] a = s.chars().map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
  \ : Character.toLowerCase(c)).toArray();\n        return new String(a, 0, a.length);"
- "        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length;\
  \ i++) {\n            if (Character.isLetter(chars[i])) {\n                chars[i]\
  \ = Character.isUpperCase(chars[i]) ? Character.toLowerCase(chars[i]) : Character.toUpperCase(chars[i]);\n\
  \            }\n        }\n        return String.valueOf(chars);"
- "        if(s.chars().noneMatch(c -> Character.isLetter(c)))\n            return\
  \ new StringBuilder(s).reverse().toString();\n        return IntStream.range(0,\
  \ s.length())\n            .mapToObj(i -> Character.isLetter(s.charAt(i)) ? \n \
  \                      Character.isUpperCase(s.charAt(i)) ? Character.toLowerCase(s.charAt(i))\
  \ : Character.toUpperCase(s.charAt(i)) : s.charAt(i))\n            .map(c -> String.valueOf(c))\n\
  \            .collect(Collectors.joining());"
- "        int i = 0;\n        boolean nonLetter = true;\n        // find the first\
  \ letter from the left\n        while (i < s.length() && !Character.isLetter(s.charAt(i)))\
  \ {\n            i++;\n        }\n        // check if there are any letters\n  \
  \      if (i == s.length()) {\n            return new StringBuilder(s).reverse().toString();\n\
  \        }\n        // keep the first letter, if it is a letter, and change it to\
  \ upper case\n        String s2 = Character.toUpperCase(s.charAt(i)) + \"\";\n \
  \       // check if there are any other letters\n        if (i < s.length() - 1)\
  \ {\n            // add all other letters as lower case letters\n            for\
  \ (int j = i + 1; j < s.length(); j++) {\n                if (Character.isLetter(s.charAt(j)))\
  \ {\n                    s2 += Character.toLowerCase(s.charAt(j));\n           \
  \     } else {\n                    s2 += s.charAt(j);\n                }\n    \
  \        }\n        }\n        // add the rest of the string from the beginning\n\
  \        for (int j = 0; j < i; j++) {\n            s2 += s.charAt(j);\n       \
  \ }\n        return s2;"
- "        // if no letters, return the reverse string\n        if (s.length() ==\
  \ s.replaceAll(\"[a-zA-Z]\", \"\").length()) {\n            return new StringBuilder(s).reverse().toString();\n\
  \        }\n        StringBuilder sb = new StringBuilder();\n        for (char c\
  \ : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n             \
  \   sb.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n\
  \            } else {\n                sb.append(c);\n            }\n        }\n\
  \        return sb.toString();"
- "        StringBuilder sb = new StringBuilder();\n        boolean containsLetter\
  \ = false;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
  \ {\n                sb.append(Character.toLowerCase(s.charAt(i)) == s.charAt(i)\
  \ ? Character.toUpperCase(s.charAt(i)) : Character.toLowerCase(s.charAt(i)));\n\
  \                containsLetter = true;\n            } else {\n                sb.append(s.charAt(i));\n\
  \            }\n        }\n        return containsLetter ? sb.toString() : sb.reverse().toString();"
- "        if (s.matches(\"[A-Za-z]+\")) {\n            return new StringBuilder(s).reverse().toString();\n\
  \        }\n        StringBuilder str = new StringBuilder();\n        for (int i\
  \ = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)))\
  \ {\n                str.append(Character.toLowerCase(s.charAt(i)));\n         \
  \   } else if (Character.isLowerCase(s.charAt(i))) {\n                str.append(Character.toUpperCase(s.charAt(i)));\n\
  \            } else {\n                str.append(s.charAt(i));\n            }\n\
  \        }\n        return str.toString();"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length();\
  \ i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                if\
  \ (Character.isUpperCase(s.charAt(i)))\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n\
  \                else if (Character.isLowerCase(s.charAt(i)))\n                \
  \    sb.append(Character.toUpperCase(s.charAt(i)));\n            } else\n      \
  \          sb.append(s.charAt(i));\n        }\n        if (s.matches(\".*[a-zA-Z]+.*\"\
  ))\n            return sb.toString();\n        else\n            return sb.reverse().toString();"
- "        if(s.matches(\"[a-zA-Z]+\")){\n            return new StringBuilder(s).reverse().toString();\n\
  \        }\n        return s;"
- "        boolean letters = false;\n        int len = s.length();\n        char[]\
  \ t = new char[len];\n        for (int i = 0; i < len; i++) {\n            char\
  \ c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                letters\
  \ = true;\n                if (Character.isUpperCase(c)) t[i] = Character.toLowerCase(c);\n\
  \                else t[i] = Character.toUpperCase(c);\n            } else t[i]\
  \ = c;\n        }\n        if (!letters) return new StringBuilder(s).reverse().toString();\n\
  \        return new String(t);"
- "        if(s.chars().anyMatch(Character::isLetter)) {\n            return s.chars().mapToObj(c\
  \ -> (char)c).map(c -> {\n                if(Character.isLetter(c)) {\n        \
  \            return Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n\
  \                }\n                return c;\n            }).map(c -> c.toString()).collect(Collectors.joining());\n\
  \        } else {\n            return new StringBuilder(s).reverse().toString();\n\
  \        }"
- "        int n = s.length();\n        String ans = \"\";\n        int count = 0;\n\
  \        for (int i = 0; i < n; i++) {\n            if (Character.isLetter(s.charAt(i)))\
  \ {\n                count++;\n                if (Character.isUpperCase(s.charAt(i)))\
  \ {\n                    ans += Character.toLowerCase(s.charAt(i));\n          \
  \      } else {\n                    ans += Character.toUpperCase(s.charAt(i));\n\
  \                }\n            } else {\n                ans += s.charAt(i);\n\
  \            }\n        }\n        if (count == 0) {\n            return new StringBuilder(ans).reverse().toString();\n\
  \        }\n        return ans;"
- "        StringBuilder res = new StringBuilder(s);\n        if(s.chars().anyMatch(x\
  \ -> Character.isLetter(x))) {\n            res.reverse();\n            for(int\
  \ i = 0; i < res.length(); i++) {\n                char c = res.charAt(i);\n   \
  \             if(Character.isLetter(c)) {\n                    res.setCharAt(i,\
  \ Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n\
  \                }\n            }\n        } else {\n            res.reverse();\n\
  \        }\n        return res.toString();"
- "        String res = s.replaceAll(\"[a-zA-Z]\", \"\");\n        if (res.length()\
  \ == s.length()) return new StringBuilder(s).reverse().toString();\n        String\
  \ s2 = s.replaceAll(\"[^a-zA-Z]\", \"\");\n        for (int i = 0; i < s2.length();\
  \ i++) {\n            if (Character.isUpperCase(s2.charAt(i))) {\n             \
  \   s2 = s2.replace(s2.charAt(i), Character.toLowerCase(s2.charAt(i)));\n      \
  \      } else {\n                s2 = s2.replace(s2.charAt(i), Character.toUpperCase(s2.charAt(i)));\n\
  \            }\n        }\n        return res.replaceAll(\"\", s2);"
- "        // Write your code here\n        return \"\";"
- "        if (s.matches(\"^[a-zA-Z]+$\")) {\n            return new StringBuilder(s).reverse().toString();\n\
  \        } else {\n            return s.chars()\n                .mapToObj(c ->\
  \ {\n                    if (Character.isLetter(c)) {\n                        return\
  \ (char) (c ^ ' ');\n                    } else {\n                        return\
  \ (char) c;\n                    }\n                })\n                .collect(StringBuilder::new,\
  \ StringBuilder::append, StringBuilder::append)\n                .toString();\n\
  \        }"
- '        return "";'
- "        StringBuilder sb = new StringBuilder();\n        int i = 0;\n        while\
  \ (i < s.length() && !Character.isLetter(s.charAt(i))) {\n            sb.append(s.charAt(i));\n\
  \            i++;\n        }\n        if (i == s.length()) {\n            return\
  \ sb.reverse().toString();\n        }\n        for (; i < s.length(); i++) {\n \
  \           char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n  \
  \              if (Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n\
  \                } else {\n                    sb.append(Character.toUpperCase(c));\n\
  \                }\n            } else {\n                sb.append(c);\n      \
  \      }\n        }\n        return sb.toString();"
- "        String res = \"\";\n        if (s.length() == 0) {\n            return\
  \ res;\n        }\n        boolean isContainLetters = false;\n        for (int i\
  \ = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
  \ {\n                isContainLetters = true;\n                break;\n        \
  \    }\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if\
  \ (Character.isLowerCase(s.charAt(i))) {\n                res += Character.toUpperCase(s.charAt(i));\n\
  \            } else if (Character.isUpperCase(s.charAt(i))) {\n                res\
  \ += Character.toLowerCase(s.charAt(i));\n            } else {\n               \
  \ res += s.charAt(i);\n            }\n        }\n        if (!isContainLetters)\
  \ {\n            String reverseRes = \"\";\n            for (int i = res.length()\
  \ - 1; i >= 0; i--) {\n                reverseRes += res.charAt(i);\n          \
  \  }\n            return reverseRes;\n        }\n        return res;"
- "        StringBuilder sb = new StringBuilder();\n        int i = 0;\n        boolean\
  \ hasLetters = false;\n        while (i < s.length()) {\n            char c = s.charAt(i);\n\
  \            if (Character.isLetter(c)) {\n                hasLetters = true;\n\
  \                c = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n\
  \            }\n            sb.append(c);\n            i++;\n        }\n       \
  \ if (!hasLetters)\n            sb.reverse();\n        return sb.toString();"
- "        char[] str = s.toCharArray();\n        for (int i = 0; i < str.length;\
  \ i++) {\n            if (Character.isLetter(str[i])) {\n                if (Character.isUpperCase(str[i]))\
  \ {\n                    str[i] = Character.toLowerCase(str[i]);\n             \
  \   } else {\n                    str[i] = Character.toUpperCase(str[i]);\n    \
  \            }\n            }\n        }\n        String result = String.valueOf(str);\n\
  \        if (result.equals(s)) {\n            StringBuilder sb = new StringBuilder(result);\n\
  \            result = sb.reverse().toString();\n        }\n        return result;"
- "        // Write your code here\n        // To print results to the standard output\
  \ you can use System.out.println()\n        // Example: System.out.println(\"Hello\
  \ world!\");\n        int l = s.length();\n        if (l == 0) return \"\";\n  \
  \      if (l == 1) {\n            char c = s.charAt(0);\n            if (Character.isLetter(c))\
  \ return Character.isUpperCase(c) ? Character.toString(Character.toLowerCase(c))\
  \ : Character.toString(Character.toUpperCase(c));\n            else return s;\n\
  \        }\n        StringBuilder sb = new StringBuilder();\n        boolean flag\
  \ = false;\n        for (int i = 0; i < l; i++) {\n            char c = s.charAt(i);\n\
  \            if (Character.isLetter(c)) {\n                flag = true;\n      \
  \          sb.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n\
  \            } else {\n                sb.append(c);\n            }\n        }\n\
  \        if (flag) return sb.toString();\n        else return sb.reverse().toString();"
- "        char[] sArray = s.toCharArray();\n        int j = 0;\n        for (int\
  \ i = 0; i < sArray.length; i++) {\n            if (Character.isLetter(sArray[i]))\
  \ {\n                sArray[j] = sArray[i];\n                j++;\n            }\n\
  \        }\n        int n = j;\n        if (n == 0) {\n            int k = 0;\n\
  \            for (int i = sArray.length - 1; i >= 0; i--) {\n                sArray[k]\
  \ = sArray[i];\n                k++;\n            }\n            return new String(sArray);\n\
  \        }\n        for (int i = 0; i < n / 2; i++) {\n            char temp = sArray[i];\n\
  \            sArray[i] = sArray[n - i - 1];\n            sArray[n - i - 1] = temp;\n\
  \        }\n        for (int i = 0; i < sArray.length; i++) {\n            if (Character.isLetter(sArray[i]))\
  \ {\n                if (Character.isUpperCase(sArray[i])) {\n                 \
  \   sArray[i] = Character.toLowerCase(sArray[i]);\n                } else {\n  \
  \                  sArray[i] = Character.toUpperCase(sArray[i]);\n             \
  \   }\n            }\n        }\n        return new String(sArray);"
- "        // your code goes here\n        return null;"
- '        return null;'
- "        boolean hasLetters = false;\n        for (int i = 0; i < s.length(); i++)\
  \ {\n            if (Character.isLetter(s.charAt(i))) {\n                hasLetters\
  \ = true;\n                break;\n            }\n        }\n        if (!hasLetters)\
  \ {\n            return new StringBuilder(s).reverse().toString();\n        }\n\
  \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length();\
  \ i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c))\
  \ {\n                if (Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n\
  \                } else {\n                    sb.append(Character.toUpperCase(c));\n\
  \                }\n            } else {\n                sb.append(c);\n      \
  \      }\n        }\n        return sb.toString();"
- "        if (s.isEmpty()) {\n            return s;\n        }\n        boolean noLetters\
  \ = true;\n        for (int i = 0; i < s.length(); i++) {\n            char c =\
  \ s.charAt(i);\n            if (Character.isLetter(c)) {\n                noLetters\
  \ = false;\n                s = s.substring(0, i) +\n                    (Character.isUpperCase(c)\
  \ ? Character.toLowerCase(c) : Character.toUpperCase(c)) +\n                   \
  \ s.substring(i + 1);\n            }\n        }\n        if (noLetters) {\n    \
  \        return new StringBuilder(s).reverse().toString();\n        }\n        return\
  \ s;"
- "        // The problem and its variations can be solved by converting the string\
  \ to a char array,\n        // reversing and the converting to a string.\n     \
  \   // Another solution is to change the string to a list of integers, reversing\
  \ and converting\n        // back to a string.\n        if (s.length() == 0) return\
  \ s;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i\
  \ < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c))\
  \ sb.append(Character.isUpperCase(c) ? \n                    Character.toLowerCase(c)\
  \ : Character.toUpperCase(c));\n            else sb.append(c);\n        }\n    \
  \    return sb.toString();"
- "        StringBuilder result = new StringBuilder(s);\n        int length = s.length();\n\
  \        boolean noLetters = true;\n        for (int i = 0; i < length; i++) {\n\
  \            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n \
  \               result.setCharAt(i, (Character.isUpperCase(c)) ? Character.toLowerCase(c)\
  \ : Character.toUpperCase(c));\n                noLetters = false;\n           \
  \ }\n        }\n        if (noLetters) {\n            result.reverse();\n      \
  \  }\n        return result.toString();"
- "        // Write your code here\n        if (containsLetters(s))\n            return\
  \ reverseString(s);\n        else\n            return switchCase(s);"
- "        return s.chars().mapToObj(c -> Character.isLetter(c) ? \n            (char)\
  \ (Character.isUpperCase(c) ? \n            Character.toLowerCase(c) : Character.toUpperCase(c))\
  \ : (char) c)\n            .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)\n\
  \            .reverse().toString();"
- "        StringBuilder answer = new StringBuilder();\n        for (int i = 0; i\
  \ < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c))\
  \ {\n                answer.append(Character.isUpperCase(c) ? Character.toLowerCase(c)\
  \ : Character.toUpperCase(c));\n            } else {\n                answer.append(c);\n\
  \            }\n        }\n        if (answer.toString().equals(s)) {\n        \
  \    return answer.reverse().toString();\n        }\n        return answer.toString();"
- "        StringBuilder res = new StringBuilder();\n        for (int i = 0; i < s.length();\
  \ i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                if\
  \ (Character.isUpperCase(s.charAt(i))) {\n                    res.append(Character.toLowerCase(s.charAt(i)));\n\
  \                } else {\n                    res.append(Character.toUpperCase(s.charAt(i)));\n\
  \                }\n            } else {\n                res.append(s.charAt(i));\n\
  \            }\n        }\n        return s.matches(\"\\\\d+\") ? res.reverse().toString()\
  \ : res.toString();"
- "        char arr[] = s.toCharArray();\n        boolean isLetters = false;\n   \
  \     for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i]))\
  \ {\n                isLetters = true;\n                if (Character.isUpperCase(arr[i]))\n\
  \                    arr[i] = Character.toLowerCase(arr[i]);\n                else\n\
  \                    arr[i] = Character.toUpperCase(arr[i]);\n            }\n  \
  \      }\n        return isLetters ? new String(arr) : new StringBuilder(s).reverse().toString();"
- "        StringBuilder sb = new StringBuilder();\n        if (s.length() == 0) return\
  \ s;\n        String l = s.toLowerCase();\n        String u = s.toUpperCase();\n\
  \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
  \            if (s.charAt(i) == l.charAt(i)) sb.append(u.charAt(i));\n         \
  \   else if (s.charAt(i) == u.charAt(i)) sb.append(l.charAt(i));\n            else\
  \ sb.append(c);\n        }\n        return sb.toString();"
- "        StringBuilder result = new StringBuilder();\n        for (char c : s.toCharArray())\
  \ {\n            if (Character.isLetter(c)) {\n                result.append(Character.isUpperCase(c)\
  \ ? Character.toLowerCase(c) : Character.toUpperCase(c));\n            } else {\n\
  \                result.append(c);\n            }\n        }\n        return result.toString();"
- "        StringBuilder stringBuilder = new StringBuilder();\n        // we need\
  \ to check how many letters are in the string.\n        int count = 0;\n       \
  \ for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
  \ {\n                count++;\n            }\n        }\n        if (count == 0)\
  \ {\n            // we need to reverse the string.\n            for (int i = s.length()\
  \ - 1; i >= 0; i--) {\n                stringBuilder.append(s.charAt(i));\n    \
  \        }\n        } else {\n            for (int i = 0; i < s.length(); i++) {\n\
  \                if (Character.isLetter(s.charAt(i))) {\n                    stringBuilder.append(Character.toUpperCase(s.charAt(i)));\n\
  \                } else {\n                    stringBuilder.append(s.charAt(i));\n\
  \                }\n            }\n        }\n        return stringBuilder.toString();"
- "        // Your code here.\n        return null;"
- "        StringBuilder sb = new StringBuilder();\n        if(s.matches(\"[a-zA-Z]+\"\
  )) {\n            for(char c : s.toCharArray()) {\n                if(Character.isUpperCase(c))\
  \ {\n                    sb.append(Character.toLowerCase(c));\n                }\
  \ else {\n                    sb.append(Character.toUpperCase(c));\n           \
  \     }\n            }\n        } else {\n            for(int i = s.length() - 1;\
  \ i >= 0; i--) {\n                sb.append(s.charAt(i));\n            }\n     \
  \   }\n        return sb.toString();"
- "        String ans = \"\";\n        boolean isNumber = true;\n        for (int\
  \ i = 0; i < s.length(); i++) {\n            if (!Character.isDigit(s.charAt(i)))\
  \ {\n                isNumber = false;\n                if (Character.isUpperCase(s.charAt(i)))\
  \ {\n                    ans += Character.toLowerCase(s.charAt(i));\n          \
  \      } else {\n                    ans += Character.toUpperCase(s.charAt(i));\n\
  \                }\n            } else {\n                ans += s.charAt(i);\n\
  \            }\n        }\n        if (isNumber) {\n            ans = reverse(ans);\n\
  \        }\n        return ans;"
- "        if (s.matches(\"[a-zA-Z]+\")) {\n            return new StringBuilder(s).reverse().toString();\n\
  \        } else {\n            return new StringBuilder(s).reverse().toString().chars()\n\
  \            .map(i -> {\n                if (Character.isLetter((char) i)) {\n\
  \                    if (Character.isUpperCase((char) i)) {\n                  \
  \      return Character.toLowerCase((char) i);\n                    } else {\n \
  \                       return Character.toUpperCase((char) i);\n              \
  \      }\n                } else {\n                    return i;\n            \
  \    }\n            }).mapToObj(i -> String.valueOf((char) i)).collect(Collectors.joining());\n\
  \        }"
- "        if (s.length() > 0) {\n            StringBuilder sb = new StringBuilder();\n\
  \            for (int i = 0; i < s.length(); i++) {\n                char c = s.charAt(i);\n\
  \                if (Character.isLetter(c)) {\n                    if (Character.isUpperCase(c))\
  \ {\n                        sb.append(Character.toLowerCase(c));\n            \
  \        } else {\n                        sb.append(Character.toUpperCase(c));\n\
  \                    }\n                } else {\n                    sb.append(c);\n\
  \                }\n            }\n            return sb.toString();\n        }\
  \ else {\n            return s;\n        }"
- "        StringBuilder result = new StringBuilder();\n        if (s.chars().allMatch(Character::isLetter))\
  \ {\n            for (int i = 0; i < s.length(); i++) {\n                result.append(s.charAt(s.length()\
  \ - 1 - i));\n            }\n        } else {\n            for (int i = 0; i < s.length();\
  \ i++) {\n                if (Character.isLetter(s.charAt(i))) {\n             \
  \       if (Character.isUpperCase(s.charAt(i))) {\n                        result.append(Character.toLowerCase(s.charAt(i)));\n\
  \                    } else {\n                        result.append(Character.toUpperCase(s.charAt(i)));\n\
  \                    }\n                } else {\n                    result.append(s.charAt(i));\n\
  \                }\n            }\n        }\n        return result.toString();"
- "        String[] arr = s.split(\"\");\n        String newString = \"\";\n     \
  \   for (int i = 0; i < arr.length; i++) {\n            if (arr[i].equals(arr[i].toUpperCase()))\
  \ {\n                newString += arr[i].toLowerCase();\n            } else if (arr[i].equals(arr[i].toLowerCase()))\
  \ {\n                newString += arr[i].toUpperCase();\n            } else {\n\
  \                newString += arr[i];\n            }\n        }\n        return\
  \ newString;"
- "        // Write your code here\n        // return null;\n        if (s.isEmpty())\
  \ return s;\n        boolean isDigit = true;\n        for (int i = 0; i < s.length();\
  \ i++) {\n            if (!Character.isDigit(s.charAt(i))) {\n                isDigit\
  \ = false;\n                break;\n            }\n        }\n        if (isDigit)\
  \ {\n            StringBuilder sb = new StringBuilder();\n            for (int i\
  \ = s.length() - 1; i >= 0; i--) {\n                sb.append(s.charAt(i));\n  \
  \          }\n            return sb.toString();\n        } else {\n            StringBuilder\
  \ sb = new StringBuilder();\n            for (int i = 0; i < s.length(); i++) {\n\
  \                if (Character.isDigit(s.charAt(i))) {\n                    sb.append(s.charAt(i));\n\
  \                } else {\n                    if (Character.isUpperCase(s.charAt(i)))\
  \ {\n                        sb.append(Character.toLowerCase(s.charAt(i)));\n  \
  \                  } else {\n                        sb.append(Character.toUpperCase(s.charAt(i)));\n\
  \                    }\n                }\n            }\n            return sb.toString();\n\
  \        }"
- '        return "";'
- "        boolean doesContainLetters = s.matches(\".*[a-zA-Z].*\");\n        if (doesContainLetters)\
  \ {\n            return s.chars()\n                    .mapToObj(c -> (char) c)\n\
  \                    .map(c -> {\n                        if (Character.isLetter(c))\
  \ {\n                            return Character.isUpperCase(c) ? Character.toLowerCase(c)\
  \ : Character.toUpperCase(c);\n                        } else {\n              \
  \              return c;\n                        }\n                    })\n  \
  \                  .map(Object::toString)\n                    .collect(Collectors.joining());\n\
  \        } else {\n            return new StringBuilder(s).reverse().toString();\n\
  \        }"
- "        StringBuilder sb = new StringBuilder();\n        StringBuilder sb2 = new\
  \ StringBuilder();\n        int c = 0;\n        for (int i = 0; i < s.length();\
  \ i++) {\n            char ch = s.charAt(i);\n            if (Character.isLetter(ch))\
  \ {\n                sb.append(s.charAt(i));\n                c++;\n           \
  \ }\n        }\n        if (c == 0) {\n            sb2.append(s);\n            sb2.reverse();\n\
  \            return sb2.toString();\n        }\n        sb.reverse();\n        for\
  \ (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n     \
  \       if (Character.isLetter(ch)) {\n                if (Character.isUpperCase(ch))\
  \ {\n                    sb2.append(Character.toLowerCase(sb.charAt(0)));\n    \
  \                sb.deleteCharAt(0);\n                } else {\n               \
  \     sb2.append(Character.toUpperCase(sb.charAt(0)));\n                    sb.deleteCharAt(0);\n\
  \                }\n            } else {\n                sb2.append(s.charAt(i));\n\
  \            }\n        }\n        return sb2.toString();"
- "        //@BEGIN\n        if (s.equals(\"\")) {\n            return \"\";\n   \
  \     }\n        else {\n            char[] chars = s.toCharArray();\n         \
  \   for (int i = 0; i < chars.length; i++) {\n                if (Character.isLetter(chars[i]))\
  \ {\n                    chars[i] = Character.isUpperCase(chars[i]) ? Character.toLowerCase(chars[i])\
  \ : Character.toUpperCase(chars[i]);\n                }\n            }\n       \
  \     String result = String.valueOf(chars);\n            StringBuffer sb = new\
  \ StringBuffer(result);\n            return sb.reverse().toString();\n        }\n\
  \        //@END"
- "        StringBuffer buffer = new StringBuffer();\n        for (int i = 0; i <\
  \ s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n     \
  \           buffer.append(Character.toUpperCase(s.charAt(i)));\n            } else\
  \ {\n                buffer.append(s.charAt(i));\n            }\n        }\n   \
  \     if (buffer.length() == 0) {\n            return new StringBuffer(s).reverse().toString();\n\
  \        }\n        return buffer.toString();"
- "        // TODO\n        return null;"
- "        if (s.length() == 0) {\n            return s;\n        }\n        else\
  \ {\n            if (Stream.of(s.split(\"\")).filter(c -> c.matches(\"[a-zA-Z]\"\
  )).count() == 0) {\n                return s;\n            }\n            else {\n\
  \                char[] cs = s.toCharArray();\n                for (int i = 0; i\
  \ < cs.length; i++) {\n                    if (Character.isLetter(cs[i])) {\n  \
  \                      if (Character.isUpperCase(cs[i])) {\n                   \
  \         cs[i] = Character.toLowerCase(cs[i]);\n                        }\n   \
  \                     else {\n                            cs[i] = Character.toUpperCase(cs[i]);\n\
  \                        }\n                    }\n                }\n         \
  \       return new String(cs);\n            }\n        }"
- "        int l = s.length();\n        char[] arr = s.toCharArray();\n        for\
  \ (int i = 0; i < l; i++) {\n            if (Character.isLetter(arr[i])) {\n   \
  \             if (Character.isUpperCase(arr[i])) {\n                    arr[i] =\
  \ Character.toLowerCase(arr[i]);\n                } else {\n                   \
  \ arr[i] = Character.toUpperCase(arr[i]);\n                }\n            }\n  \
  \      }\n        if (s.matches(\"\\\\W*\")) {\n            return new StringBuilder(new\
  \ String(arr)).reverse().toString();\n        }\n        return new String(arr);"
- "        StringBuilder builder = new StringBuilder();\n        if (s.chars().allMatch(i\
  \ -> i < 65 || i > 122 || (i > 90 && i < 97))) {\n            builder.append(s);\n\
  \            builder.reverse();\n            return builder.toString();\n      \
  \  }\n        char[] array = s.toCharArray();\n        for (int i = 0; i < array.length;\
  \ i++) {\n            if (array[i] >= 65 && array[i] <= 90) {\n                builder.append((char)\
  \ (array[i] + 32));\n            } else if (array[i] >= 97 && array[i] <= 122) {\n\
  \                builder.append((char) (array[i] - 32));\n            } else {\n\
  \                builder.append(array[i]);\n            }\n        }\n        return\
  \ builder.toString();"
- '        return null;'
- '        return null;'
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length();\
  \ i++) {\n            char ch = s.charAt(i);\n            if (Character.isLetter(ch))\
  \ {\n                sb.append(Character.isUpperCase(ch) ? \n                  \
  \      Character.toLowerCase(ch) : Character.toUpperCase(ch));\n            } else\
  \ {\n                sb.append(ch);\n            }\n        }\n        return sb.length()\
  \ == 0 ? new StringBuilder(s).reverse().toString() : sb.toString();"
- "        String res = \"\";\n        int noLetters = 1;\n        for (int i = 0;\
  \ i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c))\
  \ {\n                noLetters = 0;\n                res += Character.isUpperCase(c)\
  \ ? Character.toLowerCase(c) : Character.toUpperCase(c);\n            } else {\n\
  \                res += c;\n            }\n        }\n        return noLetters ==\
  \ 1 ? new StringBuilder(s).reverse().toString() : res;"
- "        StringBuilder sb = new StringBuilder();\n        boolean letters = false;\n\
  \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
  \            if (Character.isLetter(c)) {\n                letters = true;\n   \
  \             c = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n\
  \            }\n            sb.append(c);\n        }\n        if (!letters) {\n\
  \            sb.reverse();\n        }\n        return sb.toString();"
- "        if(s.matches(\"[a-zA-Z]+\")) {\n            char[] ch = s.toCharArray();\n\
  \            for(int i = 0; i < ch.length; i++) {\n                if(Character.isLowerCase(ch[i]))\
  \ {\n                    ch[i] = Character.toUpperCase(ch[i]);\n               \
  \ } else {\n                    ch[i] = Character.toLowerCase(ch[i]);\n        \
  \        }\n            }\n            return new String(ch);\n        } else {\n\
  \            return new StringBuilder(s).reverse().toString();\n        }"
- "      if(s.matches(\"^[a-zA-Z]+$\")) {\n        StringBuilder stb = new StringBuilder();\n\
  \        char[] arr = s.toCharArray();\n        for(char c : arr) {\n          stb.append(Character.isUpperCase(c)\
  \ ? Character.toLowerCase(c) : Character.toUpperCase(c));\n        }\n        return\
  \ stb.toString();\n      } else {\n        StringBuilder stb = new StringBuilder();\n\
  \        char[] arr = s.toCharArray();\n        for(int i = arr.length - 1; i >=\
  \ 0; i--) {\n          stb.append(arr[i]);\n        }\n        return stb.toString();\n\
  \      }"
- "        // your code here.\n        return s;"
- "        StringBuilder sb = new StringBuilder();\n        boolean hasChar = false;\n\
  \        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
  \ {\n                sb.append(Character.toLowerCase(s.charAt(i)) == s.charAt(i)\n\
  \                        ? Character.toUpperCase(s.charAt(i)) : Character.toLowerCase(s.charAt(i)));\n\
  \                hasChar = true;\n            } else {\n                sb.append(s.charAt(i));\n\
  \            }\n        }\n        return hasChar ? sb.toString() : sb.reverse().toString();"
- "        char[] c = s.toCharArray();\n        int[] checks = new int[c.length];\n\
  \        // we need to check if the string contains letters\n        for (int i\
  \ = 0; i < c.length; i++) {\n            if (Character.isLetter(c[i])) {\n     \
  \           checks[i] = 1;\n            }\n        }\n        int sum = Arrays.stream(checks).sum();\n\
  \        // if it contains letters, reverse case\n        if (sum > 0) {\n     \
  \       for (int i = 0; i < c.length; i++) {\n                if (Character.isLowerCase(c[i]))\
  \ {\n                    c[i] = Character.toUpperCase(c[i]);\n                }\
  \ else if (Character.isUpperCase(c[i])) {\n                    c[i] = Character.toLowerCase(c[i]);\n\
  \                }\n            }\n        } else {\n            // if it doesn't\
  \ contain letters, reverse the string\n            char[] tmp = new char[c.length];\n\
  \            for (int i = 0; i < c.length; i++) {\n                tmp[i] = c[c.length\
  \ - i - 1];\n            }\n            c = tmp;\n        }\n        return new\
  \ String(c);"
- "        boolean isAllDigits = s.chars().allMatch(Character::isDigit);\n       \
  \ if (isAllDigits) {\n            return new StringBuilder(s).reverse().toString();\n\
  \        }\n        StringBuilder sb = new StringBuilder();\n        for (int i\
  \ = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if\
  \ (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n \
  \                   sb.append(Character.toLowerCase(c));\n                } else\
  \ {\n                    sb.append(Character.toUpperCase(c));\n                }\n\
  \            } else {\n                sb.append(c);\n            }\n        }\n\
  \        return sb.toString();"
- '        // Write your code here.'
- "        if (s.matches(\"[A-Za-z]+\")) {\n            StringBuilder sb = new StringBuilder();\n\
  \            for (char c : s.toCharArray()) {\n                if (Character.isLowerCase(c))\
  \ {\n                    sb.append(Character.toUpperCase(c));\n                }\
  \ else {\n                    sb.append(Character.toLowerCase(c));\n           \
  \     }\n            }\n            return sb.toString();\n        } else {\n  \
  \          return new StringBuilder(s).reverse().toString();\n        }"
- "        if (s.chars().anyMatch(Character::isLetter)) {\n            return s.chars()\n\
  \                    .mapToObj(e -> (char) e)\n                    .map(Character::toString)\n\
  \                    .map(c -> (char) (Character.isLowerCase(c.charAt(0)) ? Character.toUpperCase(c.charAt(0))\
  \ : Character.toLowerCase(c.charAt(0))))\n                    .collect(Collectors.joining());\n\
  \        } else {\n            return new StringBuilder(s).reverse().toString();\n\
  \        }"
- "        StringBuilder sb = new StringBuilder();\n        if (s.chars().allMatch(Character::isDigit))\
  \ {\n            sb.append(s);\n            sb.reverse();\n            return sb.toString();\n\
  \        }\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
  \ {\n                if (Character.isUpperCase(s.charAt(i))) {\n               \
  \     sb.append(Character.toLowerCase(s.charAt(i)));\n                } else {\n\
  \                    sb.append(Character.toUpperCase(s.charAt(i)));\n          \
  \      }\n            } else {\n                sb.append(s.charAt(i));\n      \
  \      }\n        }\n        return sb.toString();"
- "        return Stream.of(s.split(\"\"))\n            .map(x -> x.matches(\"[a-zA-Z]\"\
  ) ? new StringBuilder(x).reverse().toString() : x)\n            .collect(Collectors.joining());"
- "        if (s.length() == 0) {\n            return s;\n        }\n        StringBuilder\
  \ sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n  \
  \          char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n   \
  \             sb.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n\
  \            } else {\n                sb.append(c);\n            }\n        }\n\
  \        return sb.toString();"
- "        StringBuilder builder = new StringBuilder();\n        String swapCase =\
  \ s.toUpperCase();\n        boolean flag = false;\n        for (int i = 0; i < s.length();\
  \ i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                flag\
  \ = true;\n                builder.append(s.charAt(i) == swapCase.charAt(i) ? Character.toLowerCase(s.charAt(i))\
  \ : Character.toUpperCase(s.charAt(i)));\n            } else {\n               \
  \ builder.append(s.charAt(i));\n            }\n        }\n        return flag ?\
  \ builder.toString() : builder.reverse().toString();"
- "        StringBuilder sb = new StringBuilder();\n        if (s.matches(\"^[a-zA-Z]+$\"\
  )) {\n            for (int i = 0; i < s.length(); i++) {\n                if (Character.isUpperCase(s.charAt(i)))\
  \ {\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n      \
  \          } else {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n\
  \                }\n            }\n        } else {\n            for (int i = s.length()\
  \ - 1; i >= 0; i--) {\n                sb.append(s.charAt(i));\n            }\n\
  \        }\n        return sb.toString();"
- "        // write your code here\n        StringBuilder result = new StringBuilder();\n\
  \        String toCheck = s.toLowerCase();\n        boolean isUpperCase = false;\n\
  \        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLowerCase(s.charAt(i)))\
  \ {\n                result.append(s.substring(i, i + 1).toUpperCase());\n     \
  \           isUpperCase = true;\n            } else if (Character.isUpperCase(s.charAt(i)))\
  \ {\n                result.append(s.substring(i, i + 1).toLowerCase());\n     \
  \           isUpperCase = true;\n            } else {\n                result.append(s.substring(i,\
  \ i + 1));\n            }\n        }\n        if (isUpperCase) {\n            return\
  \ result.toString();\n        } else {\n            return result.reverse().toString();\n\
  \        }"
- "        int n = s.length();\n        char[] t = new char[n];\n        for (int\
  \ i = 0; i < n; i++) {\n            char c = s.charAt(i);\n            char d =\
  \ c;\n            if (c >= 'a' && c <= 'z') {\n                d = (char)(c - 'a'\
  \ + 'A');\n            } else if (c >= 'A' && c <= 'Z') {\n                d = (char)(c\
  \ - 'A' + 'a');\n            }\n            t[n - i - 1] = d;\n        }\n     \
  \   String ans = String.valueOf(t);\n        return ans;"
- "        String digits = \"0123456789\";\n        StringBuilder sb = new StringBuilder();\n\
  \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
  \            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n\
  \            } else if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n\
  \            }\n            sb.append(c);\n        }\n        if (s.chars().filter(Character::isLetter).count()\
  \ == 0) {\n            sb.reverse();\n        }\n        return sb.toString();"
- "        StringBuilder ans = new StringBuilder();\n        boolean hasChar = false;\n\
  \        for (int i = 0; i < s.length(); i++) {\n            char x = s.charAt(i);\n\
  \            if (x >= 'a' && x <= 'z') {\n                x = (char) (x - 'a' +\
  \ 'A');\n                hasChar = true;\n            } else if (x >= 'A' && x <=\
  \ 'Z') {\n                x = (char) (x - 'A' + 'a');\n                hasChar =\
  \ true;\n            }\n            ans.append(x);\n        }\n        if (!hasChar)\
  \ {\n            return ans.reverse().toString();\n        }\n        return ans.toString();"
- "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length();\
  \ i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                if\
  \ (Character.isUpperCase(s.charAt(i))) {\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n\
  \                } else {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n\
  \                }\n            } else {\n                sb.append(s.charAt(i));\n\
  \            }\n        }\n        return sb.toString();"
- "        return Arrays.stream(s.split(\"\"))\n            .map(e -> \n         \
  \       e.matches(\"[a-zA-Z]\") \n                ? e.equals(e.toLowerCase()) ?\
  \ e.toUpperCase() : e.toLowerCase()\n                : e\n            )\n      \
  \      .collect(Collectors.joining());"
- "        StringBuilder builder = new StringBuilder();\n        boolean found = false;\n\
  \        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n\
  \            if (Character.isLetter(ch)) {\n                found = true;\n    \
  \            builder.append(Character.isUpperCase(ch) ? Character.toLowerCase(ch)\
  \ : Character.toUpperCase(ch));\n            } else {\n                builder.append(ch);\n\
  \            }\n        }\n        if (!found) {\n            return builder.reverse().toString();\n\
  \        }\n        return builder.toString();"
- "        StringBuilder res = new StringBuilder();\n        if (s.equals(s.toUpperCase()))\
  \ {\n            s = s.toLowerCase();\n        } else if (s.equals(s.toLowerCase()))\
  \ {\n            s = s.toUpperCase();\n        } else {\n            for (int i\
  \ = 0; i < s.length(); i++) {\n                char c = s.charAt(i);\n         \
  \       res.append(Character.isLetter(c) ? Character.isUpperCase(c) ? Character.toLowerCase(c)\
  \ : Character.toUpperCase(c) : c);\n            }\n            s = res.toString();\n\
  \        }\n        return new StringBuilder(s).reverse().toString();"
- "        StringBuilder sb = new StringBuilder();\n        if(s.length() == 0) {\n\
  \            return s;\n        }\n        for(int i = 0; i < s.length(); i++) {\n\
  \            if(Character.isLetter(s.charAt(i))) {\n                if(Character.isUpperCase(s.charAt(i)))\
  \ {\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n      \
  \          } else {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n\
  \                }\n            } else {\n                sb.append(s.charAt(i));\n\
  \            }\n        }\n        if(sb.toString().matches(\"[a-zA-Z]+\")) {\n\
  \            return sb.reverse().toString();\n        }\n        return sb.toString();"
- "        if (s.chars().allMatch(Character::isDigit)) {\n            return new StringBuilder(s).reverse().toString();\n\
  \        } else {\n            return s.chars()\n                .map(c -> {\n \
  \                   if (Character.isLetter(c)) {\n                        return\
  \ Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n\
  \                    } else {\n                        return c;\n             \
  \       }\n                })\n                .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
  \ StringBuilder::append)\n                .toString();\n        }"
- "        StringBuilder sb = new StringBuilder();\n        boolean letters = false;\n\
  \        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
  \ {\n                letters = true;\n                if (Character.isUpperCase(s.charAt(i)))\
  \ {\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n      \
  \          } else {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n\
  \                }\n            } else {\n                sb.append(s.charAt(i));\n\
  \            }\n        }\n        if (!letters) {\n            return sb.reverse().toString();\n\
  \        }\n        return sb.toString();"
- '        return null;'
- '        return "";'
- "        if (s.matches(\"[a-zA-Z]*\"))\n            return s.toUpperCase();\n  \
  \      else if (s.matches(\"[^a-zA-Z]*\"))\n            return new StringBuilder(s).reverse().toString();\n\
  \        else \n            return s.chars().mapToObj(c -> {\n                if\
  \ (Character.isLetter(c))\n                    return Character.isUpperCase(c) ?\
  \ \n                        Character.toLowerCase(c) : \n                      \
  \  Character.toUpperCase(c);\n                else\n                    return (char)\
  \ c;\n            }).map(c -> c.toString()).collect(Collectors.joining());"
- "        // your code goes here.\n        return null;"
- "        char[] arr = s.toCharArray();\n        int n = arr.length;\n        boolean\
  \ hasAlpha = false;\n        for (int i = 0; i < n; i++) {\n            if (Character.isAlphabetic(arr[i]))\
  \ {\n                hasAlpha = true;\n                if (Character.isUpperCase(arr[i]))\
  \ {\n                    arr[i] = Character.toLowerCase(arr[i]);\n             \
  \   } else {\n                    arr[i] = Character.toUpperCase(arr[i]);\n    \
  \            }\n            }\n        }\n        if (!hasAlpha) {\n           \
  \ for (int i = 0; i < n/2; i++) {\n                char c = arr[i];\n          \
  \      arr[i] = arr[n-i-1];\n                arr[n-i-1] = c;\n            }\n  \
  \      }\n        return new String(arr);"
- "        StringBuilder sb = new StringBuilder();\n        int hasLetter = 0;\n \
  \       for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
  \ {\n                sb.append(Character.toLowerCase(s.charAt(i)));\n          \
  \      hasLetter = 1;\n            } else {\n                sb.append(s.charAt(i));\n\
  \            }\n        }\n        if (hasLetter == 0) {\n            return sb.reverse().toString();\n\
  \        }\n        return sb.toString();"
language: java
name: HumanEval_161_solve
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
  \    // If the string contains no letters, reverse the string.\n    // The function\
  \ should return the resulted string.\n    // Examples\n    // solve(\"1234\") =\
  \ \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n \
  \   public static String solve(String s) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\"\
  )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n   \
  \ assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
  #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
  #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n\
  \    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
