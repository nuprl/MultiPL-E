completions:
- "        // // Method 1:\n        // if (arr.size() == 0) {\n        //     return\
  \ new ArrayList<Integer>();\n        // }\n        // int minEven = Integer.MAX_VALUE;\n\
  \        // int minEvenIdx = 0;\n        // for (int i = 0; i < arr.size(); i++)\
  \ {\n        //     if (arr.get(i) % 2 == 0 && arr.get(i) < minEven) {\n       \
  \ //         minEven = arr.get(i);\n        //         minEvenIdx = i;\n       \
  \ //     }\n        // }\n        // if (minEven == Integer.MAX_VALUE) {\n     \
  \   //     return new ArrayList<Integer>();\n        // }\n        // ArrayList<Integer>\
  \ al = new ArrayList<Integer>();\n        // al.add(minEven);\n        // al.add(minEvenIdx);\n\
  \        // return al;\n        // Method 2:\n        return arr.stream()\n    \
  \        .mapToInt(i -> i)\n            .filter(i -> i % 2 == 0)\n            .sorted()\n\
  \            .findFirst()\n            .map(i -> {\n                ArrayList<Integer>\
  \ al = new ArrayList<Integer>();\n                al.add(i);\n                al.add(arr.indexOf(i));\n\
  \                return al;\n            })\n            .orElse(new ArrayList<Integer>());"
- "        ArrayList<Integer> ret = new ArrayList<Integer>();\n        if (arr.size()\
  \ == 0) {\n            return ret;\n        }\n        Integer smallest = Integer.MAX_VALUE;\n\
  \        int smallest_index = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
  \            if (arr.get(i) % 2 == 0 && arr.get(i) < smallest) {\n             \
  \   smallest = arr.get(i);\n                smallest_index = i;\n            }\n\
  \        }\n        if (smallest == Integer.MAX_VALUE) {\n            return ret;\n\
  \        }\n        ret.add(smallest);\n        ret.add(smallest_index);\n     \
  \   return ret;"
- "        ArrayList<Integer> ret = new ArrayList<Integer>();\n        // check if\
  \ array has at least one even number.\n        boolean hasEven = false;\n      \
  \  for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0)\
  \ {\n                hasEven = true;\n                break;\n            }\n  \
  \      }\n        if (!hasEven) {\n            // no even numbers, return empty\
  \ array.\n            return ret;\n        }\n        // we have at least one even\
  \ number.\n        // find the lowest index even number.\n        int lowest = Integer.MAX_VALUE;\n\
  \        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n     \
  \       if (arr.get(i) % 2 == 0 && arr.get(i) < lowest) {\n                lowest\
  \ = arr.get(i);\n                index = i;\n            }\n        }\n        ret.add(lowest);\n\
  \        ret.add(index);\n        return ret;"
- "        System.out.println(\"Problem.pluck(arr=\" + arr + \")\");\n        ArrayList<Integer>\
  \ solution = new ArrayList<Integer>();\n        if (arr.size() == 0) {\n       \
  \     return solution;\n        }\n        ArrayList<Integer> evenValues = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2\
  \ == 0) {\n                evenValues.add(arr.get(i));\n            }\n        }\n\
  \        if (evenValues.size() == 0) {\n            return solution;\n        }\n\
  \        int smallestEvenValue = Collections.min(evenValues);\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == smallestEvenValue)\
  \ {\n                solution.add(smallestEvenValue);\n                solution.add(i);\n\
  \                break;\n            }\n        }\n        return solution;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int[] evens\
  \ = arr.stream().filter(n -> n % 2 == 0).sorted().toArray();\n        if (evens.length\
  \ == 0) {\n            return result;\n        }\n        int smallestEven = evens[0];\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == smallestEven)\
  \ {\n                result.add(smallestEven);\n                result.add(i);\n\
  \                return result;\n            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // List<Integer>\
  \ result = new ArrayList<Integer>();\n        // ArrayList<Integer> result = new\
  \ ArrayList<Integer>();\n        int index = 0;\n        int value = Integer.MAX_VALUE;\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2\
  \ == 0 && arr.get(i) < value) {\n                value = arr.get(i);\n         \
  \       index = i;\n            }\n        }\n        if (value != Integer.MAX_VALUE)\
  \ {\n            result.add(value);\n            result.add(index);\n        }\n\
  \        return result;"
- "        //write your code here\n        if (arr.size() <= 0) {\n            return\
  \ new ArrayList<Integer>();\n        }\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> evens = new ArrayList<Integer>();\n        int min =\
  \ Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i)\
  \ < min) {\n                    min = arr.get(i);\n                    minIndex\
  \ = i;\n                }\n            }\n        }\n        if (minIndex == -1)\
  \ {\n            return new ArrayList<Integer>();\n        }\n        ans.add(min);\n\
  \        ans.add(minIndex);\n        return ans;"
- "        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n\
  \        } else {\n            ArrayList<Integer> ans = new ArrayList<Integer>();\n\
  \            ArrayList<Integer> evens = new ArrayList<Integer>();\n            int\
  \ min = Integer.MAX_VALUE;\n            for (int i = 0; i < arr.size(); i++) {\n\
  \                int val = arr.get(i);\n                if (val % 2 == 0) {\n  \
  \                  evens.add(val);\n                    if (val < min) {\n     \
  \                   min = val;\n                    }\n                }\n     \
  \       }\n            if (evens.size() == 0) {\n                return new ArrayList<Integer>();\n\
  \            } else {\n                for (int i = 0; i < arr.size(); i++) {\n\
  \                    if (arr.get(i) == min) {\n                        ans.add(min);\n\
  \                        ans.add(i);\n                        return ans;\n    \
  \                }\n                }\n            }\n        }\n        throw new\
  \ RuntimeException(\"Problem never thought you'd get here\");"
- "        // System.out.println(\"arr=\" + arr);\n        if (arr.size() <= 0) return\
  \ new ArrayList<Integer>();\n        int minEven = Integer.MAX_VALUE;\n        int\
  \ minEvenIdx = Integer.MAX_VALUE;\n        boolean atLeastOneEven = false;\n   \
  \     for (int i = 0; i < arr.size(); i++) {\n            // System.out.println(\"\
  i=\" + i + \" arr.get(i)=\" + arr.get(i));\n            if (arr.get(i) % 2 == 0)\
  \ {\n                atLeastOneEven = true;\n                if (arr.get(i) < minEven)\
  \ {\n                    minEven = arr.get(i);\n                    minEvenIdx =\
  \ i;\n                }\n            }\n        }\n        if (!atLeastOneEven)\
  \ return new ArrayList<Integer>();\n        ArrayList<Integer> answer = new ArrayList<Integer>();\n\
  \        answer.add(minEven);\n        answer.add(minEvenIdx);\n        return answer;"
- "        var res = new ArrayList<Integer>();\n        var min = Integer.MAX_VALUE;\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            var el = arr.get(i);\n\
  \            if (el % 2 == 0 && el < min) {\n                min = el;\n       \
  \         res.clear();\n                res.add(el);\n                res.add(i);\n\
  \            }\n        }\n        return res;"
- "        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n\
  \        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n    \
  \    int smallest = Integer.MAX_VALUE;\n        int index = 0;\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) != 0 && arr.get(i) %\
  \ 2 == 0 && arr.get(i) < smallest) {\n                smallest = arr.get(i);\n \
  \               index = i;\n            }\n        }\n        if (smallest == Integer.MAX_VALUE)\
  \ {\n            return new ArrayList<Integer>();\n        }\n        result.add(smallest);\n\
  \        result.add(index);\n        return result;"
- "        if (arr.size() == 0) return new ArrayList<Integer>();\n        int lowestEven\
  \ = Integer.MAX_VALUE;\n        int lowestEvenIndex = -1;\n        for (int i =\
  \ 0; i < arr.size(); i++) {\n            int val = arr.get(i);\n            if (val\
  \ % 2 == 0 && val < lowestEven) {\n                lowestEven = val;\n         \
  \       lowestEvenIndex = i;\n            }\n        }\n        ArrayList<Integer>\
  \ answer = new ArrayList<Integer>();\n        if (lowestEvenIndex != -1) {\n   \
  \         answer.add(lowestEven);\n            answer.add(lowestEvenIndex);\n  \
  \      }\n        return answer;"
- "        try {\n            int min = Integer.MAX_VALUE;\n            int index\
  \ = -1;\n            for (int i = 0; i < arr.size(); i++) {\n                if\
  \ (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                    min = arr.get(i);\n\
  \                    index = i;\n                }\n            }\n            if\
  \ (index == -1) {\n                return new ArrayList<Integer>();\n          \
  \  }\n            ArrayList<Integer> result = new ArrayList<Integer>();\n      \
  \      result.add(min);\n            result.add(index);\n            return result;\n\
  \        } catch (Exception e) {\n            e.printStackTrace();\n           \
  \ return new ArrayList<Integer>();\n        }"
- '        return null;'
- "        List<Integer> evens = new ArrayList<>();\n        if (arr.size() == 0)\
  \ return new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n  \
  \          int value = arr.get(i);\n            if (value % 2 == 0) {\n        \
  \        evens.add(value);\n            }\n        }\n        if (evens.size() ==\
  \ 0) return new ArrayList<>();\n        return new ArrayList<>(Arrays.asList(Collections.min(evens),\
  \ arr.indexOf(Collections.min(evens))));"
- "        ArrayList<Integer> ans = new ArrayList<Integer>();\n        ArrayList<Pair<Integer,\
  \ Integer>> evens = new ArrayList<Pair<Integer, Integer>>();\n        int min =\
  \ Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n         \
  \   int n = arr.get(i);\n            if (n % 2 == 0) {\n                if (n <\
  \ min) {\n                    min = n;\n                    evens.clear();\n   \
  \                 evens.add(new Pair<Integer, Integer>(n, i));\n               \
  \ } else if (n == min) {\n                    evens.add(new Pair<Integer, Integer>(n,\
  \ i));\n                }\n            }\n        }\n        // TODO:\n        if\
  \ (evens.size() > 0) {\n            int minIndex = Integer.MAX_VALUE;\n        \
  \    for (Pair<Integer, Integer> p : evens) {\n                if (p.getValue1()\
  \ < minIndex) {\n                    minIndex = p.getValue1();\n               \
  \ }\n            }\n            ans.add(min);\n            ans.add(minIndex);\n\
  \        }\n        return ans;"
- "        // your solution starts here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> temp = new ArrayList<Integer>();\n        int index\
  \ = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
  \ % 2 == 0) {\n                temp.add(arr.get(i));\n            }\n        }\n\
  \        if (temp.size() == 0) {\n            return result;\n        }\n      \
  \  int smallest = temp.get(0);\n        for (int i = 0; i < temp.size(); i++) {\n\
  \            if (temp.get(i) < smallest) {\n                smallest = temp.get(i);\n\
  \                index = i;\n            }\n        }\n        int count = 0;\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == smallest)\
  \ {\n                count++;\n                if (count == index + 1) {\n     \
  \               result.add(arr.get(i));\n                    result.add(i);\n  \
  \                  return result;\n                }\n            }\n        }\n\
  \        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int minEven\
  \ = Integer.MAX_VALUE;\n        int minEvenIndex = -1;\n        for (int i = 0;\
  \ i < arr.size(); i++) {\n            int curr = arr.get(i);\n            if (curr\
  \ % 2 == 0 && curr < minEven) {\n                minEven = curr;\n             \
  \   minEvenIndex = i;\n            }\n        }\n        if (minEvenIndex == -1)\
  \ {\n            return result;\n        }\n        result.add(minEven);\n     \
  \   result.add(minEvenIndex);\n        return result;"
- "        ArrayList<Integer> output = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n      \
  \          if (output.size() == 0) {\n                    output.add(arr.get(i));\n\
  \                    output.add(i);\n                } else {\n                \
  \    if (arr.get(i) < output.get(0)) {\n                        output.set(0, arr.get(i));\n\
  \                        output.set(1, i);\n                    }\n            \
  \    }\n            }\n        }\n        return output;"
- "        int minEven = Integer.MAX_VALUE;\n        int minEvenIndex = -1;\n    \
  \    for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0\
  \ && arr.get(i) < minEven) {\n                minEven = arr.get(i);\n          \
  \      minEvenIndex = i;\n            }\n        }\n        if (minEvenIndex ==\
  \ -1) {\n            return new ArrayList<Integer>();\n        }\n        return\
  \ new ArrayList<Integer>(Arrays.asList(minEven, minEvenIndex));"
- "        ArrayList<Integer> small = new ArrayList<Integer>();\n        small.add(arr.size());\n\
  \        small.add(Integer.MAX_VALUE);\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            int e = arr.get(i);\n            if (e % 2 == 0 && e < small.get(1))\
  \ {\n                small.set(0, i);\n                small.set(1, e);\n      \
  \      }\n        }\n        if (small.get(1) == Integer.MAX_VALUE) {\n        \
  \    return new ArrayList<Integer>();\n        }\n        else {\n            return\
  \ small;\n        }"
- '        return arr.stream().filter(x -> x % 2 == 0).sorted().findFirst().map(x
  -> new ArrayList<Integer>(Arrays.asList(x, arr.indexOf(x)))).orElse(new ArrayList<Integer>());'
- "        ArrayList<Integer> evens = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ evenIndexes = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            if (arr.get(i) % 2 == 0) {\n                evens.add(arr.get(i));\n\
  \                evenIndexes.add(i);\n            }\n        }\n        Collections.sort(evens);\n\
  \        ArrayList<Integer> output = new ArrayList<Integer>();\n        if (evens.size()\
  \ == 0) {\n            return output;\n        }\n        output.add(evens.get(0));\n\
  \        output.add(evenIndexes.get(0));\n        return output;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i\
  \ = 0; i < arr.size(); i++) {\n            int val = arr.get(i);\n            if\
  \ (val % 2 == 0) {\n                if (res.size() == 0) {\n                   \
  \ res.add(val);\n                    res.add(i);\n                } else {\n   \
  \                 if (val < res.get(0)) {\n                        res.set(0, val);\n\
  \                        res.set(1, i);\n                    }\n               \
  \ }\n            }\n        }\n        return res;"
- "        var index = 0;\n        var smallestValue = -1;\n        for (var i = 0;\
  \ i < arr.size(); i++) {\n            var value = arr.get(i);\n            if (value\
  \ != 0 && value % 2 == 0) {\n                if (smallestValue == -1 || value <\
  \ smallestValue) {\n                    smallestValue = value;\n               \
  \     index = i;\n                }\n            }\n        }\n        return smallestValue\
  \ == -1 ? new ArrayList<Integer>() : new ArrayList<Integer>(List.of(smallestValue,\
  \ index));"
- "        // // iterative solution\n        // int smallestEven = -1;\n        //\
  \ int smallestEvenIndex = -1;\n        // for (int i = 0; i < arr.size(); i++) {\n\
  \        //     if (arr.get(i) % 2 == 0) {\n        //         if (smallestEven\
  \ == -1 || arr.get(i) < smallestEven) {\n        //             smallestEven = arr.get(i);\n\
  \        //             smallestEvenIndex = i;\n        //         }\n        //\
  \     }\n        // }\n        // if (smallestEvenIndex != -1) {\n        //   \
  \  return new ArrayList<Integer>(Arrays.asList(smallestEven, smallestEvenIndex));\n\
  \        // } else {\n        //     return new ArrayList<Integer>();\n        //\
  \ }\n        // functional solution\n        List<Integer> ls = arr.stream().\n\
  \            filter(i -> i % 2 == 0).\n            collect(Collectors.toList());\n\
  \        if (ls.size() == 0) {\n            return new ArrayList<Integer>();\n \
  \       } else {\n            Integer smallestEven = ls.stream().min(Integer::compare).get();\n\
  \            return new ArrayList<Integer>(Arrays.asList(smallestEven, arr.indexOf(smallestEven)));\n\
  \        }"
- "        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n\
  \        }\n        HashMap<Integer,ArrayList<Integer>> dict = new HashMap<Integer,ArrayList<Integer>>();\n\
  \        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            int x = arr.get(i);\n            if (x%2 == 0) {\n            \
  \    if (x < min) {\n                    min = x;\n                }\n         \
  \       if (dict.containsKey(x)) {\n                    dict.get(x).add(i);\n  \
  \              } else {\n                    ArrayList<Integer> tmp = new ArrayList<Integer>();\n\
  \                    tmp.add(i);\n                    dict.put(x,tmp);\n       \
  \         }\n            }\n        }\n        if (min == Integer.MAX_VALUE) {\n\
  \            return new ArrayList<Integer>();\n        }\n        ArrayList<Integer>\
  \ res = new ArrayList<Integer>();\n        res.add(min);\n        res.add(dict.get(min).get(0));\n\
  \        return res;"
- "        ArrayList<Integer> ret = new ArrayList<Integer>();\n        if (arr.size()\
  \ == 0) return ret;\n        int min = Integer.MAX_VALUE;\n        int minI = 0;\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < min\
  \ && arr.get(i) % 2 == 0) {\n                min = arr.get(i);\n               \
  \ minI = i;\n            }\n        }\n        if (min == Integer.MAX_VALUE) return\
  \ ret;\n        ret.add(min);\n        ret.add(minI);\n        return ret;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        int minEven\
  \ = Integer.MAX_VALUE;\n        int idx = -1;\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            int node = arr.get(i);\n            if (node % 2 == 0 && node\
  \ < minEven) {\n                minEven = node;\n                idx = i;\n    \
  \        }\n        }\n        if (idx != -1) {\n            res.add(minEven);\n\
  \            res.add(idx);\n        }\n        return res;"
- "        ArrayList<Integer> soln = new ArrayList<Integer>();\n        int n = arr.size();\n\
  \        int i, j;\n        int smallest_value = -1;\n        int smallest_index\
  \ = -1;\n        if (n == 0) {\n            return soln;\n        }\n        for\
  \ (i = 0; i < n; i++) {\n            if (arr.get(i) % 2 == 0) {\n              \
  \  smallest_value = arr.get(i);\n                smallest_index = i;\n         \
  \       break;\n            }\n        }\n        if (smallest_value == -1) {\n\
  \            return soln;\n        }\n        for (i = i + 1; i < n; i++) {\n  \
  \          if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < smallest_value)\
  \ {\n                    smallest_value = arr.get(i);\n                    smallest_index\
  \ = i;\n                }\n            }\n        }\n        soln.add(smallest_value);\n\
  \        soln.add(smallest_index);\n        return soln;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        if (arr.size()\
  \ == 0) return res;\n        int minEven = Integer.MAX_VALUE;\n        int minIdx\
  \ = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n       \
  \     int elem = arr.get(i);\n            if (elem % 2 == 0 && elem < minEven) {\n\
  \                minEven = elem;\n                minIdx = i;\n            }\n \
  \       }\n        if (minEven == Integer.MAX_VALUE) return res;\n        res.add(minEven);\n\
  \        res.add(minIdx);\n        return res;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(0);\
  \ // smallest value\n        result.add(0); // node index\n        int currentSmallestEven\
  \ = 10001;\n        int currentSmallestEvenIndex = -1;\n        for (int i = 0;\
  \ i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value\
  \ % 2 == 0 && value < currentSmallestEven) {\n                currentSmallestEven\
  \ = value;\n                currentSmallestEvenIndex = i;\n            }\n     \
  \   }\n        if (currentSmallestEvenIndex != -1) {\n            result.set(0,\
  \ currentSmallestEven);\n            result.set(1, currentSmallestEvenIndex);\n\
  \        }\n        return result;"
- "        Integer min = Integer.MAX_VALUE;\n        ArrayList<Integer> ret = new\
  \ ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
  \                ret.clear();\n                ret.add(min);\n                ret.add(i);\n\
  \            }\n        }\n        return ret;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ evens = new ArrayList<Integer>();\n        ArrayList<Integer> odds = new ArrayList<Integer>();\n\
  \        if (arr.size() > 0) {\n            Integer smallest_even = arr.get(0);\n\
  \            Integer smallest_odd = arr.get(0);\n            for (int i = 0; i <\
  \ arr.size(); i++) {\n                if (arr.get(i) % 2 == 0) {\n             \
  \       evens.add(arr.get(i));\n                    if (arr.get(i) < smallest_even)\
  \ {\n                        smallest_even = arr.get(i);\n                    }\n\
  \                } else {\n                    odds.add(arr.get(i));\n         \
  \           if (arr.get(i) < smallest_odd) {\n                        smallest_odd\
  \ = arr.get(i);\n                    }\n                }\n            }\n     \
  \       if (evens.size() > 0) {\n                res.add(smallest_even);\n     \
  \           res.add(arr.indexOf(smallest_even));\n            } else {\n       \
  \         res.add(smallest_odd);\n                res.add(arr.indexOf(smallest_odd));\n\
  \            }\n        }\n        return res;"
- "        // Your code here.\n        return null;"
- '        return new ArrayList<Integer>();'
- "        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n\
  \        }\n        ArrayList<Integer> allEvens = new ArrayList<Integer>();\n  \
  \      for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 ==\
  \ 0) {\n                allEvens.add(arr.get(i));\n            }\n        }\n  \
  \      if (allEvens.size() == 0) {\n            return new ArrayList<Integer>();\n\
  \        }\n        int minEven = allEvens.get(0);\n        int minEvenIndex = 0;\n\
  \        for (int i = 0; i < allEvens.size(); i++) {\n            if (allEvens.get(i)\
  \ < minEven) {\n                minEven = allEvens.get(i);\n                minEvenIndex\
  \ = i;\n            }\n        }\n        ArrayList<Integer> toRet = new ArrayList<Integer>();\n\
  \        toRet.add(minEven);\n        toRet.add(minEvenIndex);\n        return toRet;"
- "        return arr.stream().filter(n -> n % 2 == 0).distinct().sorted().findFirst().map(n\
  \ -> {\n            int idx = arr.indexOf(n);\n            return new ArrayList<Integer>(Arrays.asList(n,\
  \ idx));\n        }).orElse(new ArrayList<Integer>());"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        int min = Integer.MAX_VALUE;\n\
  \        int minIdx = Integer.MAX_VALUE;\n        boolean found = false;\n     \
  \   for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0)\
  \ {\n                found = true;\n                if (arr.get(i) < min) {\n  \
  \                  min = arr.get(i);\n                    minIdx = i;\n        \
  \        }\n            }\n        }\n        if (found) {\n            res.add(min);\n\
  \            res.add(minIdx);\n        }\n        return res;"
- "        int minVal = Integer.MAX_VALUE;\n        int minValIndex = -1;\n      \
  \  for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 &&\
  \ arr.get(i) < minVal) {\n                minVal = arr.get(i);\n               \
  \ minValIndex = i;\n            }\n        }\n        if (minValIndex == -1) {\n\
  \            return new ArrayList<Integer>();\n        }\n        ArrayList<Integer>\
  \ res = new ArrayList<Integer>();\n        res.add(minVal);\n        res.add(minValIndex);\n\
  \        return res;"
- "        // Check if arr is empty\n        if (arr.size() == 0) {\n            return\
  \ new ArrayList<Integer>();\n        }\n        // Check if arr has any even values\n\
  \        ArrayList<Integer> evens = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n      \
  \          evens.add(arr.get(i));\n            }\n        }\n        if (evens.size()\
  \ == 0) {\n            return new ArrayList<Integer>();\n        }\n        // Find\
  \ min even\n        int minEven = Collections.min(evens);\n        // Find index\
  \ of min even\n        int minEvenIndex = arr.indexOf(minEven);\n        // Return\
  \ [ minEven, minEvenIndex ]\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n\
  \        ans.add(minEven);\n        ans.add(minEvenIndex);\n        return ans;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        int min = Integer.MAX_VALUE;\n\
  \        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n     \
  \       int v = arr.get(i);\n            if (v % 2 == 0 && v < min) {\n        \
  \        min = v;\n                index = i;\n            }\n        }\n      \
  \  if (index == -1) return res;\n        res.add(min);\n        res.add(index);\n\
  \        return res;"
- "        // Find the smallest even value\n        Integer smallestEvenVal = null;\n\
  \        Integer smallestEvenValIndex = null;\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            Integer elem = arr.get(i);\n            if (elem % 2 == 0)\
  \ {\n                if (smallestEvenVal == null || elem < smallestEvenVal) {\n\
  \                    smallestEvenVal = elem;\n                    smallestEvenValIndex\
  \ = i;\n                }\n            }\n        }\n        // Return our answer\n\
  \        if (smallestEvenVal != null) {\n            return new ArrayList<Integer>(Arrays.asList(smallestEvenVal,\
  \ smallestEvenValIndex));\n        } else {\n            return new ArrayList<Integer>();\n\
  \        }"
- "        // Create a stream for the list\n        Stream<Integer> stream = arr.stream();\n\
  \        // Only keep the even numbers and then sort them\n        // If the stream\
  \ contains no even numbers the list will be empty\n        List<Integer> evens =\
  \ stream.filter(n -> n % 2 == 0).sorted().collect(Collectors.toList());\n      \
  \  // If the list is empty return an empty list\n        if (evens.size() == 0)\
  \ {\n            return new ArrayList<Integer>();\n        }\n        // Otherwise\
  \ return a list containg the first element and the index of that element\n     \
  \   // in the original list\n        else {\n            ArrayList<Integer> res\
  \ = new ArrayList<Integer>();\n            res.add(evens.get(0));\n            res.add(arr.indexOf(evens.get(0)));\n\
  \            return res;\n        }"
- "        // Place your solution here\n        return new ArrayList<Integer>();"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ arr2 = new ArrayList<Integer>();\n        for (int i=0; i<arr.size(); i++) {\n\
  \            Integer x = arr.get(i);\n            if (x%2==0) {\n              \
  \  arr2.add(x);\n            }\n        }\n        if (arr2.size()==0) {\n     \
  \       return res;\n        }\n        Integer mn = Collections.min(arr2);\n  \
  \      res.add(mn);\n        res.add(arr.indexOf(mn));\n        return res;"
- "        // Algorithm:\n        // We can solve this problem by applying the \"\
  divide and conquer\" strategy.\n        // We know that a binary tree has an odd\
  \ number of elements,\n        // and that the left most element is the root,\n\
  \        // and that the left sub-tree will have 2x nodes as the right sub-tree.\n\
  \        // We can therefore recursively divide the array into left and right sub-trees,\n\
  \        // and return the minimum value from each sub-tree.\n        if (arr.size()\
  \ == 0) {\n            return new ArrayList<>();\n        }\n        if (arr.size()\
  \ == 1) {\n            if (arr.get(0) % 2 == 0) {\n                return new ArrayList<>(Arrays.asList(arr.get(0),\
  \ 0));\n            } else {\n                return new ArrayList<>();\n      \
  \      }\n        }\n        // Divide the array into left and right sub-trees,\n\
  \        // and sort them ascending.\n        ArrayList<Integer> left = new ArrayList<>(arr.subList(0,\
  \ arr.size() / 2));\n        ArrayList<Integer> right = new ArrayList<>(arr.subList(arr.size()\
  \ / 2, arr.size()));\n        Collections.sort(left);\n        Collections.sort(right);\n\
  \        // Recursively return the minimum value from each sub-tree.\n        ArrayList<Integer>\
  \ minValueLeft = pluck(left);\n        ArrayList<Integer> minValueRight = pluck(right);\n\
  \        if (minValueLeft.size() == 0 && minValueRight.size() == 0) {\n        \
  \    return new ArrayList<>();\n        } else if (minValueLeft.size() == 0) {\n\
  \            return minValueRight;\n        } else if (minValueRight.size() == 0)\
  \ {\n            return minValueLeft;\n        } else {\n            if (minValueLeft.get(0)\
  \ < minValueRight.get(0)) {\n                return minValueLeft;\n            }\
  \ else if (minValueLeft.get(0) > minValueRight.get(0)) {\n                return\
  \ minValueRight;\n            } else {\n                // Now we know that the\
  \ minimum values are equal,"
- "        // Your code here\n        ArrayList<Integer> output = new ArrayList<Integer>();\n\
  \        int min_even = -1;\n        int min_index = -1;\n        int index = 0;\n\
  \        for (int x : arr) {\n            if (x % 2 == 0) {\n                if\
  \ (min_even == -1) {\n                    min_even = x;\n                    min_index\
  \ = index;\n                } else if (x < min_even) {\n                    min_even\
  \ = x;\n                    min_index = index;\n                }\n            }\n\
  \            index++;\n        }\n        if (min_even > -1) {\n            output.add(min_even);\n\
  \            output.add(min_index);\n        }\n        return output;"
- "        ArrayList<Integer> ans = new ArrayList<Integer>();\n        if (arr.size()\
  \ > 0) {\n            int minEven = Integer.MAX_VALUE;\n            int minEvenIndex\
  \ = Integer.MAX_VALUE;\n            for (int i = 0; i < arr.size(); i++) {\n   \
  \             int n = arr.get(i);\n                if (n % 2 == 0 && n < minEven)\
  \ {\n                    minEven = n;\n                    minEvenIndex = i;\n \
  \               }\n            }\n            if (minEven != Integer.MAX_VALUE)\
  \ {\n                ans.add(minEven);\n                ans.add(minEvenIndex);\n\
  \            }\n        }\n        return ans;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int item = arr.get(i);\n          \
  \  if (item % 2 == 0) {\n                result.add(item);\n                result.add(i);\n\
  \                return result;\n            }\n        }\n        return result;"
- "        ArrayList<Integer> ans = new ArrayList<Integer>();\n        // Collect\
  \ the evens\n        ArrayList<Integer> evens = new ArrayList<Integer>();\n    \
  \    for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0)\
  \ evens.add(arr.get(i));\n        }\n        // Find the min even\n        if (evens.size()\
  \ == 0) return ans;\n        int min = evens.get(0);\n        for (int i = 1; i\
  \ < evens.size(); i++) {\n            min = Math.min(min, evens.get(i));\n     \
  \   }\n        // Find the index of the min even\n        int index = -1;\n    \
  \    for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == min)\
  \ {\n                index = i;\n                break;\n            }\n       \
  \ }\n        ans.add(min);\n        ans.add(index);\n        return ans;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        int min_index\
  \ = Integer.MAX_VALUE;\n        int min_even = Integer.MAX_VALUE;\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int node = arr.get(i);\n          \
  \  if (node % 2 == 0 && node < min_even) {\n                min_even = node;\n \
  \               min_index = i;\n            }\n        }\n        if (min_even ==\
  \ Integer.MAX_VALUE) {\n            return res;\n        }\n        res.add(min_even);\n\
  \        res.add(min_index);\n        return res;"
- "        // \n        ArrayList<Integer> result = new ArrayList<Integer>();\n  \
  \      // \n        if (arr.size() == 0) {\n            // \n            return\
  \ result;\n        }\n        // \n        ArrayList<Integer> even = new ArrayList<Integer>();\n\
  \        // \n        for (int i = 0; i < arr.size(); i++) {\n            // \n\
  \            if (arr.get(i) % 2 == 0) {\n                // \n                even.add(arr.get(i));\n\
  \            }\n        }\n        // \n        if (even.size() == 0) {\n      \
  \      // \n            return result;\n        }\n        // \n        int min\
  \ = Collections.min(even);\n        // \n        for (int i = 0; i < arr.size();\
  \ i++) {\n            // \n            if (arr.get(i) == min) {\n              \
  \  // \n                result.add(min);\n                // \n                result.add(i);\n\
  \                // \n                return result;\n            }\n        }\n\
  \        // \n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int v = arr.get(i);\n            if\
  \ (v % 2 == 0) {\n                if (result.size() == 0) {\n                  \
  \  result.add(v);\n                    result.add(i);\n                } else {\n\
  \                    if (v < result.get(0)) {\n                        result.set(0,\
  \ v);\n                        result.set(1, i);\n                    }\n      \
  \          }\n            }\n        }\n        return result;"
- "        // The key here is that the problem is so simple that we don't\n      \
  \  // actually need to create the tree in order to solve it.\n        // The way\
  \ I'd like to solve this is to use an ArrayList and\n        // fill it with a single\
  \ iteration.\n        ArrayList<Integer> result = new ArrayList<>();\n        int\
  \ smallestEvenValue = Integer.MAX_VALUE;\n        int indexOfSmallestEvenValue =\
  \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n\
  \            if (value == 0) {\n                indexOfSmallestEvenValue = i;\n\
  \                smallestEvenValue = 0;\n                break;\n            }\n\
  \            if (value % 2 == 0 && value < smallestEvenValue) {\n              \
  \  indexOfSmallestEvenValue = i;\n                smallestEvenValue = value;\n \
  \           }\n        }\n        if (indexOfSmallestEvenValue == -1) {\n      \
  \      // We got to the end of the array without finding any even values.\n    \
  \        return result;\n        }\n        result.add(smallestEvenValue);\n   \
  \     result.add(indexOfSmallestEvenValue);\n        return result;"
- "        ArrayList<Integer> ans = new ArrayList<Integer>();\n        int smallest_even\
  \ = Integer.MAX_VALUE;\n        int smallest_even_idx = Integer.MAX_VALUE;\n   \
  \     for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n\
  \            if (num % 2 == 0 && num < smallest_even) {\n                smallest_even\
  \ = num;\n                smallest_even_idx = i;\n            }\n        }\n   \
  \     if (smallest_even != Integer.MAX_VALUE) {\n            ans.add(smallest_even);\n\
  \            ans.add(smallest_even_idx);\n        }\n        return ans;"
- "        // local variable to track the smallest even value\n        int smallestEven\
  \ = Integer.MAX_VALUE;\n        // local variable to track the index of the smallest\
  \ even value\n        int indexOfSmallestEven = Integer.MAX_VALUE;\n        // loop\
  \ through the given array\n        for (int i = 0; i < arr.size(); i++) {\n    \
  \        // if the element at index i is even and it is smaller than the smallest\
  \ even value, then\n            if (arr.get(i) % 2 == 0 && arr.get(i) < smallestEven)\
  \ {\n                // set the smallest even value to the element at index i\n\
  \                smallestEven = arr.get(i);\n                // set the index of\
  \ the smallest even value to i\n                indexOfSmallestEven = i;\n     \
  \       }\n        }\n        // if the smallest even value is not equal to the\
  \ maximum value of an integer, then\n        if (smallestEven != Integer.MAX_VALUE)\
  \ {\n            // return a new list containing the smallest even value and the\
  \ index of the smallest even value\n            return new ArrayList<Integer>(Arrays.asList(smallestEven,\
  \ indexOfSmallestEven));\n        }\n        // otherwise, return an empty list\n\
  \        return new ArrayList<Integer>();"
- "        ArrayList<Integer> ret = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ candidates = new ArrayList<Integer>();\n        ArrayList<Integer> idx = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2\
  \ == 0) {\n                candidates.add(arr.get(i));\n                idx.add(i);\n\
  \            }\n        }\n        if (candidates.size() < 1) {\n            return\
  \ ret;\n        }\n        int min = candidates.get(0);\n        int first_idx =\
  \ 0;\n        for (int i = 1; i < candidates.size(); i++) {\n            if (candidates.get(i)\
  \ < min) {\n                min = candidates.get(i);\n                first_idx\
  \ = i;\n            }\n        }\n        ret.add(min);\n        ret.add(idx.get(first_idx));\n\
  \        return ret;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int smallestEvenValue\
  \ = Integer.MAX_VALUE;\n        int index = 0;\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            int val = arr.get(i);\n            if (val % 2 == 0 && val\
  \ < smallestEvenValue) {\n                smallestEvenValue = val;\n           \
  \     index = i;\n            }\n        }\n        if (smallestEvenValue != Integer.MAX_VALUE)\
  \ {\n            result.add(smallestEvenValue);\n            result.add(index);\n\
  \        }\n        return result;"
- "        try {\n            ArrayList<Integer> res = new ArrayList<Integer>();\n\
  \            // smallest even value\n            res.add(0);\n            // index\
  \ of the smallest even value\n            res.add(0);\n            int smallestEven\
  \ = Integer.MAX_VALUE;\n            for (int i = 0; i < arr.size(); i++) {\n   \
  \             if (arr.get(i) % 2 == 0 && arr.get(i) < smallestEven) {\n        \
  \            smallestEven = arr.get(i);\n                    res.set(0, smallestEven);\n\
  \                    res.set(1, i);\n                }\n            }\n        \
  \    if (smallestEven == Integer.MAX_VALUE) {\n                return new ArrayList<Integer>();\n\
  \            }\n            return res;\n        } catch (Exception e) {\n     \
  \       throw e;\n        }"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Integer\
  \ index = -1;\n        Integer smallest = -1;\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            Integer value = arr.get(i);\n            if (value % 2 ==\
  \ 0) {\n                if (smallest == -1) {\n                    smallest = value;\n\
  \                    index = i;\n                } else if (value < smallest) {\n\
  \                    smallest = value;\n                    index = i;\n       \
  \         }\n            }\n        }\n        if (index != -1) {\n            result.add(smallest);\n\
  \            result.add(index);\n        }\n        return result;"
- "        ArrayList<Integer> ans = new ArrayList<Integer>();\n        int min = Integer.MAX_VALUE;\n\
  \        int idx = -1;\n        for (int i = 0; i < arr.size(); i++) {\n       \
  \     int x = arr.get(i);\n            if (x % 2 == 0 && x < min) {\n          \
  \      min = x;\n                idx = i;\n            }\n        }\n        if\
  \ (idx == -1) return ans;\n        ans.add(min);\n        ans.add(idx);\n      \
  \  return ans;"
- "        // TODO: implement this method\n        // return a list of two ints that\
  \ is the smallest even value and its index\n        // return an empty list if no\
  \ even value is found.\n        ArrayList<Integer> res = new ArrayList<Integer>();\n\
  \        return res;"
- "        ArrayList<Integer> l = new ArrayList<Integer>();\n        int min = Integer.MAX_VALUE;\n\
  \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n  \
  \          if (arr.get(i) < min && arr.get(i) % 2 == 0) {\n                min =\
  \ arr.get(i);\n                minIndex = i;\n            }\n        }\n       \
  \ if (minIndex != -1) {\n            l.add(min);\n            l.add(minIndex);\n\
  \        }\n        return l;"
- "        // base cases\n        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n\
  \        }\n        if (arr.size() == 1) {\n            if (arr.get(0) % 2 == 0)\
  \ {\n                return new ArrayList<Integer>(\n                    Arrays.asList(arr.get(0),\
  \ 1)\n                );\n            } else {\n                return new ArrayList<Integer>();\n\
  \            }\n        }\n        // intialize first element as the smallest even\
  \ number\n        int smallestEvenNum = arr.get(0);\n        int index = 1;\n  \
  \      int i = 1;\n        while (i < arr.size()) {\n            if (arr.get(i)\
  \ % 2 == 0) {\n                if (arr.get(i) < smallestEvenNum) {\n           \
  \         smallestEvenNum = arr.get(i);\n                    index = i + 1;\n  \
  \              }\n            }\n            i += 1;\n        }\n        if (smallestEvenNum\
  \ % 2 == 0) {\n            return new ArrayList<Integer>(\n                Arrays.asList(smallestEvenNum,\
  \ index)\n            );\n        } else {\n            return new ArrayList<Integer>();\n\
  \        }"
- '        return new ArrayList<Integer>();'
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i\
  \ = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n        \
  \        if (res.size() == 0) {\n                    res.add(arr.get(i));\n    \
  \                res.add(i);\n                } else {\n                    if (arr.get(i)\
  \ < res.get(0)) {\n                        res.set(0, arr.get(i));\n           \
  \             res.set(1, i);\n                    }\n                }\n       \
  \     }\n        }\n        return res;"
- "        ArrayList<Integer> retval = new ArrayList<Integer>();\n        if (arr.size()\
  \ == 0) return retval;\n        int smallest = -1;\n        int idx = -1;\n    \
  \    int smallest_idx = -1;\n        for (int i = 0; i < arr.size(); i++) {\n  \
  \          int curr = arr.get(i);\n            if (curr % 2 == 0) {\n          \
  \      if (idx == -1) {\n                    smallest = curr;\n                \
  \    idx = i;\n                    smallest_idx = i;\n                } else {\n\
  \                    if (curr < smallest) {\n                        smallest =\
  \ curr;\n                        smallest_idx = i;\n                    }\n    \
  \            }\n            }\n        }\n        if (smallest_idx != -1) {\n  \
  \          retval.add(smallest);\n            retval.add(smallest_idx);\n      \
  \  }\n        return retval;"
- "        if (arr.size() <= 0) {\n            return new ArrayList<Integer>();\n\
  \        }\n        int min_index = -1;\n        int min_value = Integer.MAX_VALUE;\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2\
  \ == 0 && arr.get(i) < min_value) {\n                min_index = i;\n          \
  \      min_value = arr.get(i);\n            }\n        }\n        if (min_index\
  \ == -1) {\n            return new ArrayList<Integer>();\n        }\n        return\
  \ new ArrayList<Integer>(Arrays.asList(new Integer[]{min_value, min_index}));"
- "        // min heap using TreeSet to get O(log(n))\n        TreeSet<Integer> heap\
  \ = new TreeSet<>();\n        int i = 0;\n        while (i < arr.size()) {\n   \
  \         int v = arr.get(i);\n            if (v % 2 == 0) {\n                heap.add(v);\n\
  \            }\n            i += 1;\n        }\n        if (heap.size() == 0) {\n\
  \            return new ArrayList<Integer>();\n        }\n        int n = heap.first();\n\
  \        i = 0;\n        while (i < arr.size()) {\n            int v = arr.get(i);\n\
  \            if (v == n) {\n                ArrayList<Integer> result = new ArrayList<>();\n\
  \                result.add(v);\n                result.add(i);\n              \
  \  return result;\n            }\n            i += 1;\n        }\n        return\
  \ new ArrayList<Integer>();"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        // we must\
  \ first find the smallest even number\n        int smallestEven = Integer.MAX_VALUE;\n\
  \        int index = -1;\n        int i = 0;\n        for (int n : arr) {\n    \
  \        if (n % 2 == 0 && n < smallestEven) {\n                smallestEven = n;\n\
  \                index = i;\n            }\n            i++;\n        }\n      \
  \  // check if we found an even number\n        if (index == -1) {\n           \
  \ return res;\n        }\n        // add the smallest even number and the index\
  \ to our result\n        res.add(smallestEven);\n        res.add(index);\n     \
  \   return res;"
- "        int i, len = arr.size();\n        ArrayList<Integer> ret = new ArrayList<Integer>();\n\
  \        Integer[] arr2 = new Integer[len];\n        arr2 = arr.toArray(arr2);\n\
  \        // loop once to find the minimum even value,\n        // if it's not even\
  \ or if the array is empty return [].\n        int min = Integer.MAX_VALUE;\n  \
  \      boolean gotEven = false;\n        for (i = 0; i < len; i++) {\n         \
  \   if (arr2[i] % 2 == 0) {\n                if (arr2[i] < min) {\n            \
  \        min = arr2[i];\n                }\n                gotEven = true;\n  \
  \          }\n        }\n        if (!gotEven) {\n            return ret;\n    \
  \    }\n        // loop again to find the index of the minimum value\n        int\
  \ min_i = 0;\n        for (i = 0; i < len; i++) {\n            if (arr2[i] == min)\
  \ {\n                min_i = i;\n                break;\n            }\n       \
  \ }\n        ret.add(min);\n        ret.add(min_i);\n        return ret;"
- "        ArrayList<Integer> ret = new ArrayList<Integer>();\n        int minEven\
  \ = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i <\
  \ arr.size(); i++) {\n            int val = arr.get(i);\n            if (val % 2\
  \ == 0 && val < minEven) {\n                minEven = val;\n                minIndex\
  \ = i;\n            }\n        }\n        if (minIndex != -1) {\n            ret.add(minEven);\n\
  \            ret.add(minIndex);\n        }\n        return ret;"
- "        ArrayList<Integer> ret = new ArrayList<Integer>();\n        if (arr.size()\
  \ == 0) {\n            return ret;\n        }\n        int value = Integer.MAX_VALUE;\n\
  \        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n     \
  \       if (arr.get(i) < value && arr.get(i) % 2 == 0) {\n                value\
  \ = arr.get(i);\n                index = i;\n            }\n        }\n        if\
  \ (index < 0) {\n            return ret;\n        }\n        ret.add(value);\n \
  \       ret.add(index);\n        return ret;"
- "        ArrayList<Integer> retval = new ArrayList<Integer>();\n        if (arr.size()\
  \ == 0) {\n            return retval;\n        }\n        int smallest_even = Integer.MAX_VALUE;\n\
  \        int smallest_even_index = -1;\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i)\
  \ < smallest_even) {\n                    smallest_even = arr.get(i);\n        \
  \            smallest_even_index = i;\n                }\n            }\n      \
  \  }\n        if (smallest_even_index != -1) {\n            retval.add(smallest_even);\n\
  \            retval.add(smallest_even_index);\n        }\n        return retval;"
- "        // grab the index of the smallest even int in the array\n        if (arr.size()\
  \ == 0) return new ArrayList<Integer>();\n        int minIdx = -1;\n        for\
  \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n \
  \               if (minIdx == -1) {\n                    minIdx = i;\n         \
  \       } else {\n                    if (arr.get(i) < arr.get(minIdx)) {\n    \
  \                    minIdx = i;\n                    }\n                }\n   \
  \         }\n        }\n        if (minIdx == -1) return new ArrayList<Integer>();\n\
  \        ArrayList<Integer> ans = new ArrayList<Integer>();\n        ans.add(arr.get(minIdx));\n\
  \        ans.add(minIdx);\n        return ans;"
- "        // TODO: implement me!\n        return new ArrayList<Integer>();"
- "      // yay - recursion!\n      // scan the list looking for first even value\n\
  \      // compare with next value in list, if also even and less,\n      // store\
  \ it, and recurse down that branch of the tree\n      // if we run out of branches,\
  \ return stored value\n      // if we find an odd, just stop and return stored value\n\
  \      // (remembering to store the index for that value)\n      // if we run out\
  \ of values, return null\n      // after we've run through all branches, return\
  \ the stored value\n      // and its index\n      return pluckHelper(arr, 0, 0,\
  \ false, new Pair(0, 0));"
- "        // what's the time complexity if we scan through the array every time?\n\
  \        // O(N^2)\n        // can we just scan once? \n        // yes, but is there\
  \ a way to sort and then find the first even number?\n        // yeah, sure, we\
  \ can sort the numbers, but that's going to take a long time.\n        // we could\
  \ heapify, but that's going to be O(NlogN)\n        // what about a min heap? that's\
  \ O(NlogN), but it's better than heap sort.\n        // however, if we assume it's\
  \ a min heap, then we can just search through it, and just keep removing\n     \
  \   // it's going to cost O(N)\n        // so in total, it's O(N), which is better\
  \ than O(N^2)\n        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n\
  \        }\n        PriorityQueue<Pair<Integer, Integer>> minHeap = new PriorityQueue<>(new\
  \ Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public\
  \ int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n        \
  \        if (o1.getValue0() % 2 == 0 && o2.getValue0() % 2 == 0) {\n           \
  \         return Integer.compare(o1.getValue0(), o2.getValue0());\n            \
  \    } else if (o1.getValue0() % 2 == 0) {\n                    return -1;\n   \
  \             } else if (o2.getValue0() % 2 == 0) {\n                    return\
  \ 1;\n                } else {\n                    return 0;\n                }\n\
  \            }\n        });\n        for (int i = 0; i < arr.size(); i++) {\n  \
  \          minHeap.add(new Pair<Integer, Integer>(arr.get(i), i));\n        }\n\
  \        Pair<Integer, Integer> result = null;\n        while (!minHeap.isEmpty())\
  \ {\n            result = minHeap.poll();\n            if (result.getValue0() %\
  \ 2 == 0) {\n                break;\n            }\n        }\n        if (result\
  \ == null || result.getValue0() %"
- "        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n\
  \        } else {\n            int min = -1;\n            int minIndex = -1;\n \
  \           for (int i = 0; i < arr.size(); i++) {\n                if (arr.get(i)\
  \ % 2 == 0) {\n                    if (min == -1 || arr.get(i) < min) {\n      \
  \                  min = arr.get(i);\n                        minIndex = i;\n  \
  \                  }\n                }\n            }\n            if (min == -1)\
  \ {\n                return new ArrayList<Integer>();\n            } else {\n  \
  \              ArrayList<Integer> ret = new ArrayList<Integer>();\n            \
  \    ret.add(min);\n                ret.add(minIndex);\n                return ret;\n\
  \            }\n        }"
- "        // for each node, check if it's even and smaller than lowest even number.\n\
  \        int min = Integer.MAX_VALUE;\n        int min_index = -1;\n        for\
  \ (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n      \
  \      if (num % 2 == 0 && num < min) {\n                min = num;\n          \
  \      min_index = i;\n            }\n        }\n        if (min_index == -1) {\n\
  \            return new ArrayList<Integer>();\n        }\n        return new ArrayList<Integer>(Arrays.asList(min,\
  \ min_index));"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (arr.size()\
  \ < 1) {\n            return result;\n        }\n        int smallest = Integer.MAX_VALUE;\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2\
  \ == 0 && arr.get(i) < smallest) {\n                smallest = arr.get(i);\n   \
  \         }\n        }\n        if (smallest == Integer.MAX_VALUE) {\n         \
  \   return result;\n        }\n        for (int i = 0; i < arr.size(); i++) {\n\
  \            if (arr.get(i) == smallest) {\n                result.add(i);\n   \
  \             result.add(smallest);\n                return result;\n          \
  \  }\n        }\n        return result;"
- "        // our answer\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n\
  \        if (arr.size() < 1) return ans;\n        // iterate over array and find\
  \ evens\n        ArrayList<Integer> evens = new ArrayList<Integer>();\n        for\
  \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n \
  \               evens.add(arr.get(i));\n            }\n        }\n        // if\
  \ there are no evens\n        if (evens.size() < 1) return ans;\n        // now\
  \ iterate over evens and find smallest\n        int smallestEven = evens.get(0);\n\
  \        int smallestEvenIndex = -1;\n        for (int i = 0; i < evens.size();\
  \ i++) {\n            if (evens.get(i) < smallestEven) {\n                smallestEven\
  \ = evens.get(i);\n                smallestEvenIndex = i;\n            }\n     \
  \   }\n        if (smallestEvenIndex != -1) {\n            // now find the index\
  \ of that even in the original array\n            for (int i = 0; i < arr.size();\
  \ i++) {\n                if (arr.get(i) == smallestEven) {\n                  \
  \  ans.add(smallestEven);\n                    ans.add(i);\n                   \
  \ break;\n                }\n            }\n        }\n        return ans;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (arr.size()\
  \ > 0) {\n            int smallestEvenValue = Integer.MAX_VALUE;\n            int\
  \ smallestEvenValueIndex = -1;\n            for (int i = 0; i < arr.size(); i++)\
  \ {\n                int nodeValue = arr.get(i);\n                if (nodeValue\
  \ % 2 == 0 && nodeValue < smallestEvenValue) {\n                    smallestEvenValue\
  \ = nodeValue;\n                    smallestEvenValueIndex = i;\n              \
  \  }\n            }\n            if (smallestEvenValue != Integer.MAX_VALUE) {\n\
  \                result.add(smallestEvenValue);\n                result.add(smallestEvenValueIndex);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Integer\
  \ smallestEvenNumber = null;\n        Integer smallestEvenNumberIndex = null;\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2\
  \ == 0) {\n                if (smallestEvenNumber == null || smallestEvenNumber\
  \ > arr.get(i)) {\n                    smallestEvenNumber = arr.get(i);\n      \
  \              smallestEvenNumberIndex = i;\n                }\n            }\n\
  \        }\n        if (smallestEvenNumber != null) {\n            result.add(smallestEvenNumber);\n\
  \            result.add(smallestEvenNumberIndex);\n        }\n        return result;"
- "        // Store the list as a first element of the array, \n        // and the\
  \ index of the element in the original array as the second element.\n        ArrayList<ArrayList<Integer>>\
  \ filteredArr = new ArrayList<ArrayList<Integer>>();\n        // Filter out non-even\
  \ values, and save the even values with the index as an array.\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n      \
  \          ArrayList<Integer> temp = new ArrayList<Integer>();\n               \
  \ temp.add(arr.get(i));\n                temp.add(i);\n                filteredArr.add(temp);\n\
  \            }\n        }\n        // If no even values were found, return empty\
  \ list.\n        if (filteredArr.size() == 0) {\n            return new ArrayList<Integer>();\n\
  \        }\n        // Get the index of the smallest even value.\n        int min\
  \ = filteredArr.get(0).get(0);\n        int minIndex = 0;\n        for (int i =\
  \ 1; i < filteredArr.size(); i++) {\n            int value = filteredArr.get(i).get(0);\n\
  \            if (value < min) {\n                min = value;\n                minIndex\
  \ = i;\n            }\n        }\n        // Return the smallest even value with\
  \ the index.\n        return filteredArr.get(minIndex);"
- "        ArrayList<Integer> ret = new ArrayList<Integer>();\n        if (arr.size()\
  \ == 0) {\n            return ret;\n        }\n        Integer minEvenVal = null;\n\
  \        Integer minEvenValInd = null;\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            Integer val = arr.get(i);\n            if (val % 2 == 0) {\n\
  \                if (minEvenVal == null || val < minEvenVal) {\n               \
  \     minEvenVal = val;\n                    minEvenValInd = i;\n              \
  \  }\n            }\n        }\n        if (minEvenVal == null) {\n            return\
  \ ret;\n        }\n        ret.add(minEvenVal);\n        ret.add(minEvenValInd);\n\
  \        return ret;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Integer\
  \ minIndex = -1;\n        Integer minValue = 0;\n        Boolean minValueFound =\
  \ false;\n        for (int i = 0; i < arr.size(); i++) {\n            Integer value\
  \ = arr.get(i);\n            if (value % 2 == 0) {\n                if (!minValueFound)\
  \ {\n                    minValue = value;\n                    minIndex = i;\n\
  \                    minValueFound = true;\n                } else {\n         \
  \           if (value < minValue) {\n                        minValue = value;\n\
  \                        minIndex = i;\n                    }\n                }\n\
  \            }\n        }\n        if (minValueFound) {\n            result.add(minValue);\n\
  \            result.add(minIndex);\n        }\n        return result;"
- '        return arr.stream().filter(x -> x % 2 == 0).min(Comparator.comparing(Integer::valueOf)).map(x
  -> x == null ? new ArrayList<Integer>() : new ArrayList<Integer>(Arrays.asList(x,
  arr.indexOf(x)))).orElse(new ArrayList<Integer>());'
- "        ArrayList<Integer> list = new ArrayList<Integer>();\n        int min =\
  \ 9999999;\n        int min_i = -1;\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            int val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
  \ {\n                min = val;\n                min_i = i;\n            }\n   \
  \     }\n        if (min_i == -1) return list;\n        list.add(min);\n       \
  \ list.add(min_i);\n        return list;"
- "        //return val, index\n        ArrayList<Integer> ret = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> even = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ even_idx = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            if (arr.get(i) % 2 == 0) {\n                even.add(arr.get(i));\n\
  \                even_idx.add(i);\n            }\n        }\n        if (even.size()\
  \ == 0) return ret;\n        int min = even.get(0);\n        int min_idx = even_idx.get(0);\n\
  \        for (int i = 1; i < even.size(); i++) {\n            if (even.get(i) <\
  \ min) {\n                min = even.get(i);\n                min_idx = even_idx.get(i);\n\
  \            }\n        }\n        ret.add(min);\n        ret.add(min_idx);\n  \
  \      return ret;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        int index =\
  \ 0;\n        int even = 10000;\n        for (int i = 0; i < arr.size(); i++) {\n\
  \            if (arr.get(i) % 2 == 0 && arr.get(i) < even) {\n                even\
  \ = arr.get(i);\n                index = i;\n            }\n        }\n        if\
  \ (even != 10000) {\n            res.add(even);\n            res.add(index);\n \
  \       }\n        return res;"
- "        // this problem is trivial to solve with a for loop,\n        // but lets\
  \ make it unnecessarily complicated to try and improve performance.\n        //\
  \ we can create a map with an indexed entry for every value,\n        // and use\
  \ the values of the array as keys,\n        // so we can find the smallest index\
  \ for each value.\n        // finally, we need to sort the values by evenness,\n\
  \        // and return the first element, or return [] if the list is empty.\n \
  \       // The complexity of our solution is O(n log n)\n        // because we call\
  \ ArrayList.sort(),\n        // and then iterate over it with O(n) complexity,\n\
  \        // but we also need to build the hashmap, which will probably be O(n log\
  \ n) complexity\n        // because it uses a balanced tree as its underlying data\
  \ structure.\n        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n\
  \        }\n        HashMap<Integer, ArrayList<Integer>> map = new HashMap<Integer,\
  \ ArrayList<Integer>>();\n        for (int i = 0; i < arr.size(); i++) {\n     \
  \       Integer value = arr.get(i);\n            ArrayList<Integer> valMap = map.get(value);\n\
  \            if (valMap == null) {\n                valMap = new ArrayList<Integer>();\n\
  \                map.put(value, valMap);\n            }\n            valMap.add(i);\n\
  \        }\n        ArrayList<Triplet<Integer, Integer, Integer>> evens = new ArrayList<Triplet<Integer,\
  \ Integer, Integer>>();\n        // now we iterate over the map, and we sort our\
  \ evens list\n        // by the smallest index of each value in the map.\n     \
  \   // the smallest index is obtained by looking at the first element in the\n \
  \       // arrayList of indices, which is stored in valMap.\n        // if the first\
  \ element is even, we add the Triplet containing\n        // the value and its smallest\
  \ index,\n        // and the number of indices associated with that value,\n   \
  \     // to the evens arrayList.\n        for (Map.Entry<Integer, ArrayList<Integer>>\
  \ entry : map.entrySet()) {\n            Integer value = entry.getKey();\n     \
  \       ArrayList<Integer"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        if (arr.size()\
  \ == 0) {\n            return res;\n        }\n        int min = Integer.MAX_VALUE;\n\
  \        int minIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n   \
  \         if (arr.get(i) < min && arr.get(i) % 2 == 0) {\n                min =\
  \ arr.get(i);\n                minIndex = i;\n            }\n        }\n       \
  \ if (min == Integer.MAX_VALUE) {\n            return res;\n        }\n        res.add(min);\n\
  \        res.add(minIndex);\n        return res;"
- "        // I would like to use streams here, but I am not sure if\n        // it\
  \ would be considered a good solution, so I will try\n        // using the old-fashioned,\
  \ boring way of iterating through\n        // elements\n        int minEven = Integer.MAX_VALUE;\n\
  \        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n     \
  \       if (arr.get(i) % 2 == 0 && arr.get(i) < minEven) {\n                minEven\
  \ = arr.get(i);\n                index = i;\n            }\n        }\n        if\
  \ (index == -1) {\n            return new ArrayList<Integer>();\n        }\n   \
  \     ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(minEven);\n\
  \        result.add(index);\n        return result;"
- "        // Return the result.\n        int smallestEven = Integer.MAX_VALUE;\n\
  \        int smallestEvenIndex = Integer.MAX_VALUE;\n        int smallestEvenValue\
  \ = Integer.MAX_VALUE;\n        // Do not modify the following section.\n      \
  \  ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(smallestEvenValue);\n\
  \        result.add(smallestEvenIndex);\n        return result;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        int minEven\
  \ = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n       \
  \     int node = arr.get(i);\n            if (node % 2 == 0 && node < minEven) {\n\
  \                minEven = node;\n                res.clear();\n               \
  \ res.add(node);\n                res.add(i);\n            }\n        }\n      \
  \  return res;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ result_index = new ArrayList<Integer>();\n        int smallest_even = 10001;\n\
  \        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n     \
  \       if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < smallest_even)\
  \ {\n                    result.clear();\n                    result_index.clear();\n\
  \                    smallest_even = arr.get(i);\n                    result.add(smallest_even);\n\
  \                    result_index.add(i);\n                } else if (arr.get(i)\
  \ == smallest_even) {\n                    result.add(smallest_even);\n        \
  \            result_index.add(i);\n                }\n            }\n        }\n\
  \        if (result.size() == 0) {\n            return result;\n        } else {\n\
  \            index = result_index.get(0);\n            for (int i = 1; i < result_index.size();\
  \ i++) {\n                if (result_index.get(i) < index) {\n                 \
  \   index = result_index.get(i);\n                }\n            }\n           \
  \ result.add(index);\n            return result;\n        }"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // TODO:\n\
  \        // 1. Find the smallest even\n        // 2. Find the first index of the\
  \ smallest even\n        // 3. Return [smallest even, its index]\n        // BEGIN\
  \ (write your solution here)\n        if (arr.isEmpty()) {\n            return result;\n\
  \        }\n        int minEven = Integer.MAX_VALUE;\n        for (int i = 0; i\
  \ < arr.size(); i++) {\n            if (arr.get(i) < minEven && arr.get(i) % 2 ==\
  \ 0) {\n                minEven = arr.get(i);\n            }\n        }\n      \
  \  if (minEven == Integer.MAX_VALUE) {\n            return result;\n        }\n\
  \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n  \
  \          if (arr.get(i) == minEven) {\n                minIndex = i;\n       \
  \         break;\n            }\n        }\n        if (minIndex == -1) {\n    \
  \        return result;\n        }\n        result.add(minEven);\n        result.add(minIndex);\n\
  \        return result;\n        // END"
- "        Integer min = null;\n        int minIdx = -1;\n        for (int i = 0;\
  \ i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n             \
  \   if (min == null || arr.get(i) < min) {\n                    min = arr.get(i);\n\
  \                    minIdx = i;\n                }\n            }\n        }\n\
  \        ArrayList<Integer> ret = new ArrayList<Integer>();\n        if (min !=\
  \ null) {\n            ret.add(min);\n            ret.add(minIdx);\n        }\n\
  \        return ret;"
- "        // Assert.assertTrue(arr != null);\n        // Assert.assertTrue(arr.size()\
  \ <= 10000);\n        var result = new ArrayList<Integer>();\n        if (arr.size()\
  \ == 0) {\n            return result;\n        }\n        int min = Integer.MAX_VALUE;\n\
  \        int min_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n \
  \           // Assert.assertTrue(arr.get(i) >= 0);\n            int n = arr.get(i);\n\
  \            if (n % 2 == 0 && n < min) {\n                min = n;\n          \
  \      min_index = i;\n            }\n        }\n        if (min == Integer.MAX_VALUE)\
  \ {\n            return result;\n        }\n        result.add(min);\n        result.add(min_index);\n\
  \        return result;"
- "        return arr.stream().filter(i -> i % 2 == 0).distinct().sorted().findFirst().map(i\
  \ -> {\n            int index = arr.indexOf(i);\n            ArrayList<Integer>\
  \ list = new ArrayList<Integer>();\n            list.add(i);\n            list.add(index);\n\
  \            return list;\n        }).orElse(new ArrayList<Integer>());"
- "        int k = Integer.MAX_VALUE;\n        int v = -1;\n        for (int i = 0;\
  \ i < arr.size(); i++) {\n            int n = arr.get(i);\n            if (n % 2\
  \ == 0 && n < k) {\n                k = n;\n                v = i;\n           \
  \ }\n        }\n        if (v == -1) {\n            return new ArrayList<Integer>();\n\
  \        }\n        return new ArrayList<Integer>(Arrays.asList(k, v));"
- "        System.out.println(\"Called pluck(\" + arr + \")\");\n        ArrayList<Integer>\
  \ result = new ArrayList<Integer>();\n        int n = arr.size();\n        if (n\
  \ == 0) {\n            System.out.println(\"  Because empty, returning []\");\n\
  \            return result;\n        }\n        int min = Integer.MAX_VALUE;\n \
  \       for (int i = 0; i < n; i++) {\n            if (arr.get(i) < min && arr.get(i)\
  \ % 2 == 0) {\n                min = arr.get(i);\n            }\n        }\n   \
  \     if (min == Integer.MAX_VALUE) {\n            System.out.println(\"  Because\
  \ none are even, returning []\");\n            return result;\n        }\n     \
  \   result.add(min);\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i)\
  \ == min) {\n                result.add(i);\n                break;\n          \
  \  }\n        }\n        System.out.println(\"  Returning: \" + result);\n     \
  \   return result;"
- "        ArrayList<Integer> output = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ evens = new ArrayList<Integer>();\n        int pos = -1;\n        for (int i =\
  \ 0; i < arr.size(); i++) {\n            int n = arr.get(i);\n            if (n\
  \ % 2 == 0) {\n                evens.add(n);\n                if (n < pos || pos\
  \ == -1) {\n                    pos = i;\n                }\n            }\n   \
  \     }\n        if (evens.size() > 0) {\n            int smallest = evens.get(0);\n\
  \            for (int i = 1; i < evens.size(); i++) {\n                if (evens.get(i)\
  \ < smallest) {\n                    smallest = evens.get(i);\n                }\n\
  \            }\n            output.add(smallest);\n            output.add(pos);\n\
  \        }\n        return output;"
- "        // return arr.stream().filter(v -> v % 2 == 0).min(Comparator.comparing(v\
  \ -> v)).map(v -> new ArrayList<Integer>(Arrays.asList(v, arr.indexOf(v)))).orElse(new\
  \ ArrayList<Integer>());\n        // int min_value = arr.stream().filter(v -> v\
  \ % 2 == 0).min(Comparator.comparing(v -> v)).orElse(-1);\n        // return min_value\
  \ >= 0 ? new ArrayList<Integer>(Arrays.asList(min_value, arr.indexOf(min_value)))\
  \ : new ArrayList<Integer>();\n        // return arr.stream().filter(v -> v % 2\
  \ == 0).min(Comparator.comparing(v -> v)).map(v -> new ArrayList<Integer>(Arrays.asList(v,\
  \ arr.indexOf(v)))).orElse(new ArrayList<Integer>());\n        // return arr.stream().filter(v\
  \ -> v % 2 == 0).min(Comparator.comparing(v -> v)).map(v -> new ArrayList<Integer>(Arrays.asList(v,\
  \ arr.indexOf(v)))).orElse(new ArrayList<Integer>());\n        ArrayList<Integer>\
  \ out = new ArrayList<Integer>();\n        int min_value = arr.stream().filter(v\
  \ -> v % 2 == 0).min(Comparator.comparing(v -> v)).orElse(-1);\n        if (min_value\
  \ >= 0) {\n            out.add(min_value);\n            out.add(arr.indexOf(min_value));\n\
  \        }\n        return out;"
- '        return null;'
- "        ArrayList<Integer> r = new ArrayList<Integer>();\n        int best = -1;\n\
  \        int bestIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n \
  \           int e = arr.get(i);\n            if (e % 2 == 0) {\n               \
  \ if (best == -1 || e < best) {\n                    best = e;\n               \
  \     bestIndex = i;\n                }\n            }\n        }\n        if (best\
  \ == -1) {\n            return r;\n        }\n        r.add(best);\n        r.add(bestIndex);\n\
  \        return r;"
- "        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int curr = arr.get(i);\n          \
  \  if (curr < min && curr % 2 == 0) {\n                min = curr;\n           \
  \     minIndex = i;\n            }\n        }\n        ArrayList<Integer> ret =\
  \ new ArrayList<>();\n        if (minIndex != -1) {\n            ret.add(min);\n\
  \            ret.add(minIndex);\n        }\n        return ret;"
- "        if (arr.size() == 0) return new ArrayList<Integer>();\n        int min\
  \ = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i <\
  \ arr.size(); i++) {\n            int cur = arr.get(i);\n            if (cur % 2\
  \ == 0 && cur < min) {\n                min = cur;\n                minIndex = i;\n\
  \            }\n        }\n        if (minIndex == -1) return new ArrayList<Integer>();\n\
  \        return new ArrayList<Integer>(new Pair<Integer, Integer>(min, minIndex));"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        if (arr.size()\
  \ < 1) return res;\n        // find the smallest non-negative even integer in the\
  \ array\n        int min = arr.get(0);\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            int num = arr.get(i);\n            if (num % 2 == 0 && num\
  \ < min) min = num;\n        }\n        if (min % 2 != 0) return res;\n        res.add(min);\n\
  \        // find the first index of the minimum even\n        for (int i = 0; i\
  \ < arr.size(); i++) {\n            if (arr.get(i) == min) {\n                res.add(i);\n\
  \                break;\n            }\n        }\n        return res;"
- "        int min = -1;\n        int index = -1;\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            int e = arr.get(i);\n            if (e % 2 == 0) {\n     \
  \           if (min == -1 || e < min) {\n                    min = e;\n        \
  \            index = i;\n                }\n            }\n        }\n        ArrayList<Integer>\
  \ output = new ArrayList<Integer>();\n        if (min != -1) {\n            output.add(min);\n\
  \            output.add(index);\n        }\n        return output;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i\
  \ = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n        \
  \        if (res.size() == 0) {\n                    res.add(arr.get(i));\n    \
  \                res.add(i);\n                } else {\n                    if (arr.get(i)\
  \ < res.get(0)) {\n                        res.set(0, arr.get(i));\n           \
  \             res.set(1, i);\n                    }\n                }\n       \
  \     }\n        }\n        return res;"
- "        int val = Integer.MAX_VALUE;\n        int idx = -1;\n        for (int i\
  \ = 0; i < arr.size(); i++) {\n            int v = arr.get(i);\n            if (v\
  \ % 2 == 0 && v < val) {\n                val = v;\n                idx = i;\n \
  \           }\n        }\n        if (idx == -1) {\n            return new ArrayList<Integer>();\n\
  \        }\n        ArrayList<Integer> res = new ArrayList<Integer>();\n       \
  \ res.add(val);\n        res.add(idx);\n        return res;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int minIndex\
  \ = -1;\n        int minEvenValue = Integer.MAX_VALUE;\n        for (int i = 0;\
  \ i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value\
  \ < minEvenValue && value % 2 == 0) {\n                minEvenValue = value;\n \
  \               minIndex = i;\n            }\n        }\n        if (minIndex !=\
  \ -1) {\n            result.add(minEvenValue);\n            result.add(minIndex);\n\
  \        }\n        return result;"
- "        if (arr.size() == 0) return new ArrayList<Integer>();\n        int minIndex\
  \ = -1;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            int val = arr.get(i);\n            if (val % 2 == 0 && val\
  \ < min) {\n                min = val;\n                minIndex = i;\n        \
  \    }\n        }\n        if (minIndex == -1) return new ArrayList<Integer>();\n\
  \        ArrayList<Integer> res = new ArrayList<Integer>();\n        res.add(min);\n\
  \        res.add(minIndex);\n        return res;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        // TODO write\
  \ your code here.\n        return res;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        if (arr.size()\
  \ == 0) return res;\n        int minEven = Integer.MAX_VALUE;\n        int minEvenIdx\
  \ = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            int cur = arr.get(i);\n\
  \            if (cur > 0 && cur % 2 == 0) {\n                if (cur < minEven)\
  \ {\n                    minEven = cur;\n                    minEvenIdx = i;\n \
  \               }\n            }\n        }\n        if (minEvenIdx == -1) return\
  \ res;\n        res.add(minEven);\n        res.add(minEvenIdx);\n        return\
  \ res;"
- "        // We will use a simple approach;\n        // Check each item in turn,\
  \ if it is even, see if it is smaller than any previous even number seen.\n    \
  \    // If it is, store it as the smallest even number, and store its index.\n \
  \       // If there are no even numbers in the array, or the array is empty, return\
  \ [].\n        // Else return [ smallestEvenNumber, indexOfSmallestEvenNumber ]\n\
  \        // Observe that the given array is an array of positive integers,\n   \
  \     // and that if the array is empty, we return an empty array.\n        // We\
  \ will assume that the given array is not null.\n        // Observe that if the\
  \ given array is empty, we will return an empty array.\n        if (arr.size() ==\
  \ 0) {\n            return new ArrayList<Integer>();\n        }\n        // Initialize\
  \ the smallestEvenNumber and its index.\n        // Since we are looking for the\
  \ smallest even number,\n        // and we know that the array consists of positive\
  \ integers,\n        // we can initialize both to the largest positive integer,\n\
  \        // which is the maximum value of an integer.\n        // We will also initialize\
  \ the index to an invalid value, -1.\n        int smallestEvenNumber = Integer.MAX_VALUE;\n\
  \        int indexOfSmallestEvenNumber = -1;\n        // Check each value in the\
  \ array in turn.\n        for (int i = 0; i < arr.size(); i++) {\n            //\
  \ If the value is even, and if it is smaller than the current smallestEvenNumber,\n\
  \            // set smallestEvenNumber to the current value, and set the indexOfSmallestEvenNumber\
  \ to the current index.\n            if (arr.get(i) % 2 == 0 && arr.get(i) < smallestEvenNumber)\
  \ {\n                smallestEvenNumber = arr.get(i);\n                indexOfSmallestEvenNumber\
  \ = i;\n            }\n        }\n        // If we did not find an even number,\
  \ or the array was empty, we return an empty array.\n        if (indexOfSmallestEvenNumber\
  \ == -1) {\n            return new ArrayList<Integer>();\n        }\n        //\
  \ Otherwise, we create an array of size 2,\n        // and return it, with the smallestEvenNumber,\
  \ and its index.\n       "
- "        if (arr.size() == 0) return new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ evens = new ArrayList<Integer>();\n        for (int n : arr) {\n            if\
  \ (n % 2 == 0) evens.add(n);\n        }\n        if (evens.size() == 0) return new\
  \ ArrayList<Integer>();\n        Collections.sort(evens);\n        int min = evens.get(0);\n\
  \        int idx = arr.indexOf(min);\n        return new ArrayList<Integer>(Arrays.asList(min,\
  \ idx));"
- "        ArrayList<Integer> ret = new ArrayList<Integer>();\n        if (arr.size()\
  \ == 0) {\n            return ret;\n        }\n        if (arr.get(0) % 2 == 0)\
  \ {\n            ret.add(arr.get(0));\n            ret.add(0);\n            return\
  \ ret;\n        }\n        pluck(arr, 0, ret);\n        return ret;"
- "        ArrayList<Integer> r = new ArrayList<Integer>();\n        if (arr.size()\
  \ == 0) {\n            return r;\n        }\n        r.add(2);\n        r.add(1);\n\
  \        return r;"
- "        if (arr.size() == 0) return new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ evens = new ArrayList<Integer>();\n        for (int i=0; i<arr.size(); i++) {\n\
  \            if (arr.get(i) % 2 == 0) evens.add(arr.get(i));\n        }\n      \
  \  if (evens.size() == 0) return new ArrayList<Integer>();\n        int min = Collections.min(evens);\n\
  \        for (int i=0; i<arr.size(); i++) {\n            if (arr.get(i) == min)\
  \ return new ArrayList<Integer>(Arrays.asList(min, i));\n        }\n        return\
  \ new ArrayList<Integer>();"
- "        // strategy:\n        // find the first even and return it\n        //\
  \ if none, return []\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2\
  \ == 0) {\n                result.add(arr.get(i));\n                result.add(i);\n\
  \                return result;\n            }\n        }\n        return result;"
- "        //edge cases\n        if (arr.size() == 0) return new ArrayList<Integer>();\n\
  \        int min_value = Integer.MAX_VALUE;\n        int min_index = Integer.MAX_VALUE;\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n\
  \            if (value % 2 == 0 && value < min_value) {\n                min_value\
  \ = value;\n                min_index = i;\n            }\n        }\n        if\
  \ (min_value == Integer.MAX_VALUE) return new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ result = new ArrayList<Integer>();\n        result.add(min_value);\n        result.add(min_index);\n\
  \        return result;"
- "        ArrayList<Integer> ans = new ArrayList<Integer>();\n        int min = Integer.MAX_VALUE;\n\
  \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n  \
  \          int e = arr.get(i);\n            if (e % 2 == 0 && e < min) {\n     \
  \           min = e;\n                minIndex = i;\n            }\n        }\n\
  \        if (minIndex != -1) {\n            ans.add(min);\n            ans.add(minIndex);\n\
  \        }\n        return ans;"
- "        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n\
  \        } else {\n            // pluck the smallest even value\n            TreeMap<Integer,\
  \ Integer> map = new TreeMap<Integer, Integer>();\n            for (int i = 0; i\
  \ < arr.size(); i++) {\n                if (arr.get(i) % 2 == 0) {\n           \
  \         map.put(arr.get(i), i);\n                }\n            }\n          \
  \  if (map.size() == 0) {\n                return new ArrayList<Integer>();\n  \
  \          } else {\n                Integer first = map.firstKey();\n         \
  \       return new ArrayList<Integer>(Arrays.asList(first, map.get(first)));\n \
  \           }\n        }"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (arr.size()\
  \ == 0) {\n            return result;\n        }\n        int smallestEvenValue\
  \ = Integer.MAX_VALUE;\n        int smallestEvenValueIndex = -1;\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int number = arr.get(i);\n        \
  \    if (number == 0) {\n                result.add(0);\n                result.add(i);\n\
  \                return result;\n            }\n            if (number % 2 == 0\
  \ && number < smallestEvenValue) {\n                smallestEvenValue = number;\n\
  \                smallestEvenValueIndex = i;\n            }\n        }\n       \
  \ if (smallestEvenValueIndex != -1) {\n            result.add(smallestEvenValue);\n\
  \            result.add(smallestEvenValueIndex);\n        }\n        return result;"
- "        if (arr.size() == 0) return new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ plucked = new ArrayList<Integer>();\n        int minValue = Integer.MAX_VALUE;\n\
  \        for (int i=0; i<arr.size(); i++) {\n            int value = arr.get(i);\n\
  \            if (value % 2 == 0 && value < minValue) {\n                minValue\
  \ = value;\n                plucked.clear();\n                plucked.add(value);\n\
  \                plucked.add(i);\n            }\n        }\n        if (plucked.size()\
  \ == 0) return new ArrayList<Integer>();\n        return plucked;"
- "        // your code goes here\n        // For any given array, to pick the smallest\
  \ even value if it exists\n        // we will have to iterate over the array.\n\
  \        // The Java API Doc for the Collections.sort method:\n        // https://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#sort(java.util.List)\n\
  \        // specifies that it sorts a list in place in ascending order according\
  \ to its natural ordering.\n        // It makes sense that we use this method as\
  \ we need to find the smallest even value in the array.\n        // So we will sort\
  \ the array in place and then iterate over it.\n        // The API Doc for the ArrayList.sort\
  \ method:\n        // https://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html#sort(java.util.Comparator)\n\
  \        // specifies that it sorts the given list in place in ascending order according\
  \ to the specified comparator.\n        // We can use this method as well if we\
  \ can provide the specifier comparator as we need to find the\n        // smallest\
  \ even value in the array.\n        // The API Doc for the ArrayList.stream method:\n\
  \        // https://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html#stream()\n\
  \        // specifies that it returns a sequential Stream with this collection as\
  \ its source.\n        // We can use this method along with the Stream.sorted method\
  \ which takes a comparator as its input\n        // and returns a stream consisting\
  \ of the elements of this stream, sorted according to the natural order\n      \
  \  // of the keys extracted by provided function.\n        // The API Doc for the\
  \ Stream.sorted method:\n        // https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#sorted--\n\
  \        // https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#sorted-java.util.Comparator-\n\
  \        // specifies that it returns a stream consisting of the elements of this\
  \ stream, sorted according to natural order.\n        // We can use this method\
  \ along with the Stream.mapTo"
- "        if (arr.size() == 0) return new ArrayList<Integer>();\n        // find\
  \ the first nonzero and even element\n        ArrayList<Integer> indexOfFirstEvenVal\
  \ = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n\
  \            if (arr.get(i) % 2 == 0 && arr.get(i) != 0) {\n                indexOfFirstEvenVal.add(arr.get(i));\n\
  \                indexOfFirstEvenVal.add(i);\n                break;\n         \
  \   }\n        }\n        if (indexOfFirstEvenVal.size() == 0) return new ArrayList<Integer>();\n\
  \        // find the smallest even value and its index\n        ArrayList<Integer>\
  \ result = new ArrayList<Integer>();\n        result.add(indexOfFirstEvenVal.get(0));\n\
  \        result.add(indexOfFirstEvenVal.get(1));\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) != 0) {\n          \
  \      if (arr.get(i) < result.get(0)) {\n                    result.set(0, arr.get(i));\n\
  \                    result.set(1, i);\n                }\n            }\n     \
  \   }\n        return result;"
- "        ArrayList<Integer> out = new ArrayList<Integer>();\n        Integer min\
  \ = null;\n        Integer index = null;\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            Integer elem = arr.get(i);\n            if (elem % 2 == 0)\
  \ {\n                if (min == null || elem < min) {\n                    min =\
  \ elem;\n                    index = i;\n                }\n            }\n    \
  \    }\n        if (min != null) {\n            out.add(min);\n            out.add(index);\n\
  \        }\n        return out;"
- "        // version 1:\n        // ArrayList<Integer> result = new ArrayList<Integer>();\n\
  \        // // if the array is empty, return an empty array\n        // if (arr.size()\
  \ == 0) {\n        //     return result;\n        // }\n        // // find the first\
  \ even number\n        // int even;\n        // for (even = 0; even < arr.size();\
  \ even++) {\n        //     if (arr.get(even) % 2 == 0) {\n        //         break;\n\
  \        //     }\n        // }\n        // // if no even numbers were found, return\
  \ an empty array\n        // if (even == arr.size()) {\n        //     return result;\n\
  \        // }\n        // // set the smallest value to the first even found\n  \
  \      // int smallest = arr.get(even);\n        // int smallest_index = even;\n\
  \        // // search for a smaller even\n        // for (int i = even + 1; i <\
  \ arr.size(); i++) {\n        //     if (arr.get(i) % 2 == 0 && arr.get(i) < smallest)\
  \ {\n        //         smallest = arr.get(i);\n        //         smallest_index\
  \ = i;\n        //     }\n        // }\n        // // add the smallest even found\
  \ to the result\n        // result.add(smallest);\n        // result.add(smallest_index);\n\
  \        // return result;\n        // version 2:\n        ArrayList<Integer> result\
  \ = new ArrayList<Integer>();\n        // if the array is empty, return an empty\
  \ array\n        if (arr.size() == 0) {\n            return result;\n        }\n\
  \        // find the first even number\n        int smallest = Integer.MAX_VALUE;\n\
  \        int smallest_index = 0;\n        boolean evenFound = false;\n        for\
  \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n \
  \               if (arr.get(i) < smallest) {\n                    smallest = arr.get(i);\n\
  \                    smallest_index = i;\n                }\n                evenFound\
  \ = true;\n            }\n        }\n        // if no even numbers were found, return"
- "        ArrayList<Integer> ans = new ArrayList<Integer>();\n        ans.add(0);\n\
  \        ans.add(0);\n        for (int i = 0; i < arr.size(); i++) {\n         \
  \   if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < ans.get(0)) {\n\
  \                    ans.set(0, arr.get(i));\n                    ans.set(1, i);\n\
  \                }\n            }\n        }\n        if (ans.get(0) == 0) {\n \
  \           return new ArrayList<Integer>();\n        }\n        return ans;"
- "        int m = Integer.MAX_VALUE;\n        int idx = -1;\n        for (int i =\
  \ 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) <\
  \ m) {\n                m = arr.get(i);\n                idx = i;\n            }\n\
  \        }\n        if (idx < 0) {\n            return new ArrayList<Integer>();\n\
  \        }\n        ArrayList<Integer> ret = new ArrayList<Integer>();\n       \
  \ ret.add(m);\n        ret.add(idx);\n        return ret;"
- "        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n\
  \        }\n        ArrayList<Integer> answer = new ArrayList<Integer>();\n    \
  \    answer.add(0);\n        answer.add(0);\n        boolean first = true;\n   \
  \     for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n\
  \            if (value % 2 == 0) {\n                if (first) {\n             \
  \       answer.set(0, value);\n                    answer.set(1, i);\n         \
  \           first = false;\n                } else {\n                    if (value\
  \ < answer.get(0)) {\n                        answer.set(0, value);\n          \
  \              answer.set(1, i);\n                    }\n                }\n   \
  \         }\n        }\n        if (first) {\n            return new ArrayList<Integer>();\n\
  \        }\n        return answer;"
- "        // your code here...\n        return null;"
- "        // // If the array is null, return an empty array.\n        // if (arr\
  \ == null) return new ArrayList<Integer>();\n        // // Initialize a variable\
  \ to hold the lowest even number, and index of the lowest even number.\n       \
  \ // int smallestEvenNumber = Integer.MAX_VALUE;\n        // int indexOfSmallestEvenNumber\
  \ = -1;\n        // // Create a variable to hold the current index being processed.\n\
  \        // int i = 0;\n        // // Iterate through the array.\n        // for\
  \ (int n : arr) {\n        //     // If the current number is even, and the current\
  \ number is less than the current smallest even number,\n        //     // update\
  \ the smallest even number, and the index of the smallest even number.\n       \
  \ //     if (n % 2 == 0 && n < smallestEvenNumber) {\n        //         smallestEvenNumber\
  \ = n;\n        //         indexOfSmallestEvenNumber = i;\n        //     }\n  \
  \      //     // Increment the current index.\n        //     i++;\n        // }\n\
  \        // // Create a variable to hold the results.\n        // ArrayList<Integer>\
  \ results = new ArrayList<Integer>();\n        // // If a valid smallest even number\
  \ and index were found, add the smallest even number and the index to the results.\n\
  \        // if (indexOfSmallestEvenNumber != -1) {\n        //     results.add(smallestEvenNumber);\n\
  \        //     results.add(indexOfSmallestEvenNumber);\n        // }\n        //\
  \ // Return the results.\n        // return results;\n        if (arr == null) return\
  \ new ArrayList<Integer>();\n        return arr.stream()\n            .filter(n\
  \ -> n % 2 == 0)\n            .collect(Collectors.toList())\n            .stream()\n\
  \            .map(n -> new Pair<Integer, Integer>(n, arr.indexOf(n)))\n        \
  \    .min(Comparator.comparing(Pair::getValue0))\n            .map(n -> new ArrayList<Integer>(Arrays.asList(n.getValue0(),\
  \ n.getValue1())))\n            .orElse(new ArrayList<Integer>());"
- "        ArrayList<Integer> output = new ArrayList<Integer>();\n        Integer\
  \ index = 0;\n        Integer value = 0;\n        Integer smallestIndex = 0;\n \
  \       Integer smallestValue = 0;\n        // if (arr.size() == 0) {\n        //\
  \     return output;\n        // }\n        // smallestValue = arr.get(0);\n   \
  \     // smallestIndex = 0;\n        // for (int i = 0; i < arr.size(); i++) {\n\
  \        //     if (arr.get(i) < smallestValue) {\n        //         smallestValue\
  \ = arr.get(i);\n        //         smallestIndex = i;\n        //     }\n     \
  \   // }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
  \ % 2 == 0) {\n                if (smallestValue == 0) {\n                    smallestValue\
  \ = arr.get(i);\n                    smallestIndex = i;\n                } else\
  \ if (arr.get(i) < smallestValue) {\n                    smallestValue = arr.get(i);\n\
  \                    smallestIndex = i;\n                }\n            }\n    \
  \    }\n        output.add(smallestValue);\n        output.add(smallestIndex);\n\
  \        return output;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ odd = new ArrayList<Integer>();\n        ArrayList<Integer> even = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2\
  \ == 0) {\n                even.add(arr.get(i));\n            } else {\n       \
  \         odd.add(arr.get(i));\n            }\n        }\n        Collections.sort(even);\n\
  \        Collections.sort(odd);\n        if (even.size() == 0) {\n            return\
  \ res;\n        }\n        res.add(even.get(0));\n        res.add(arr.indexOf(even.get(0)));\n\
  \        return res;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        if (arr.size()\
  \ == 0) return res;\n        int smallest_value = Integer.MAX_VALUE;\n        int\
  \ smallest_index = 0;\n        for (int i = 0; i < arr.size(); i++) {\n        \
  \    if (arr.get(i) % 2 == 0 && arr.get(i) < smallest_value) {\n               \
  \ smallest_value = arr.get(i);\n                smallest_index = i;\n          \
  \  }\n        }\n        if (smallest_value != Integer.MAX_VALUE) {\n          \
  \  res.add(smallest_value);\n            res.add(smallest_index);\n        }\n \
  \       return res;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (arr.size()\
  \ == 0) return result;\n        // get min even value\n        int minEven = Integer.MAX_VALUE;\n\
  \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
  \            int value = arr.get(i);\n            if (value % 2 == 0 && value <\
  \ minEven) {\n                minEven = value;\n                minEvenIndex = i;\n\
  \            }\n        }\n        if (minEvenIndex != -1) {\n            result.add(minEven);\n\
  \            result.add(minEvenIndex);\n        }\n        return result;"
- "        int smallestIndex = -1;\n        int smallestValue = Integer.MAX_VALUE;\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int v = arr.get(i);\n\
  \            if (v != 0 && v % 2 == 0 && v < smallestValue) {\n                smallestIndex\
  \ = i;\n                smallestValue = v;\n            }\n        }\n        if\
  \ (smallestIndex == -1) {\n            return new ArrayList<Integer>();\n      \
  \  }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(smallestValue);\n\
  \        result.add(smallestIndex);\n        return result;"
- "        // YOUR CODE HERE\n        return null;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // return\
  \ [], if the array is empty\n        if (arr.size() == 0) return result;\n     \
  \   // initialize the smallest even value and its index\n        int smallestEven\
  \ = 0;\n        int smallestEvenIndex = 0;\n        // initialize the first even\
  \ value and its index\n        int firstEven = 0;\n        int firstEvenIndex =\
  \ 0;\n        boolean hasEvenValue = false;\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            // find the first even value and store it into firstEven\n\
  \            if (arr.get(i) % 2 == 0 && !hasEvenValue) {\n                firstEven\
  \ = arr.get(i);\n                firstEvenIndex = i;\n                smallestEven\
  \ = firstEven;\n                smallestEvenIndex = firstEvenIndex;\n          \
  \      hasEvenValue = true;\n            }\n            // find the smallest even\
  \ value and store it into smallestEven\n            if (arr.get(i) % 2 == 0 && hasEvenValue)\
  \ {\n                if (arr.get(i) < smallestEven) {\n                    smallestEven\
  \ = arr.get(i);\n                    smallestEvenIndex = i;\n                }\n\
  \            }\n        }\n        // if there is no even value, return []\n   \
  \     if (!hasEvenValue) return result;\n        // if there is only one even value,\
  \ return [ smallest_value, its index ]\n        if (firstEven == smallestEven) {\n\
  \            result.add(smallestEven);\n            result.add(smallestEvenIndex);\n\
  \            return result;\n        }\n        // otherwise, return [ smallest_value,\
  \ its index ]\n        result.add(smallestEven);\n        result.add(smallestEvenIndex);\n\
  \        return result;"
- "        ArrayList<Integer> plucked = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n      \
  \          if (plucked.size() == 0) {\n                    plucked.add(arr.get(i));\n\
  \                    plucked.add(i);\n                } else {\n               \
  \     if (arr.get(i) < plucked.get(0)) {\n                        plucked.set(0,\
  \ arr.get(i));\n                        plucked.set(1, i);\n                   \
  \ }\n                }\n            }\n        }\n        return plucked;"
- "        Optional<Integer> minEven = arr.stream().filter(x -> x % 2 == 0).min(Integer::compare);\n\
  \        if (!minEven.isPresent()) {\n            return new ArrayList<Integer>();\n\
  \        }\n        return new ArrayList<Integer>(Arrays.asList(minEven.get(), arr.indexOf(minEven.get())));"
- "        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n\
  \        }\n        int min = arr.get(0);\n        int idx = 0;\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int a = arr.get(i);\n            if\
  \ (a % 2 == 0 && a < min) {\n                min = a;\n                idx = i;\n\
  \            }\n        }\n        ArrayList<Integer> res = new ArrayList<Integer>();\n\
  \        res.add(min);\n        res.add(idx);\n        return res;"
- "        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n\
  \        }\n        ArrayList<Integer> smallest_even = arr.stream()\n          \
  \  .filter(x -> x % 2 == 0)\n            .sorted()\n            .distinct()\n  \
  \          .collect(Collectors.toCollection(ArrayList::new));\n        int index\
  \ = arr.indexOf(smallest_even.get(0));\n        ArrayList<Integer> ret = new ArrayList<Integer>();\n\
  \        ret.add(smallest_even.get(0));\n        ret.add(index);\n        return\
  \ ret;"
- "        // input: arraylist<int>\n        // output: arraylist<int>\n        ArrayList<Integer>\
  \ ans = new ArrayList<Integer>();\n        ArrayList<Integer> indexes = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> values = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n      \
  \          values.add(arr.get(i));\n                indexes.add(i);\n          \
  \  }\n        }\n        if (values.size() > 0) {\n            int smallest = Collections.min(values);\n\
  \            int idx = values.indexOf(smallest);\n            ans.add(smallest);\n\
  \            ans.add(indexes.get(idx));\n        }\n        return ans;"
- "        ArrayList<Integer> plucked = new ArrayList<>();\n        if (arr.size()\
  \ == 0) {\n            return plucked;\n        }\n        plucked.add(0);\n   \
  \     // change default answer to 0, since I care about evens and the default is\
  \ arr[0]\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
  \ % 2 == 0) {\n                if (arr.get(i) < arr.get(plucked.get(1))) {\n   \
  \                 plucked.set(0, arr.get(i));\n                    plucked.set(1,\
  \ i);\n                }\n            }\n        }\n        if (plucked.get(0) ==\
  \ 0) {\n            plucked.clear();\n        }\n        return plucked;"
- "        ArrayList<Integer> smallestEven = new ArrayList<>();\n        int min =\
  \ Integer.MAX_VALUE;\n        int index = -1;\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n         \
  \       min = arr.get(i);\n                index = i;\n            }\n        }\n\
  \        if (index != -1) {\n            smallestEven.add(min);\n            smallestEven.add(index);\n\
  \        }\n        return smallestEven;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Integer\
  \ small = null;\n        Integer k = 0;\n        int i = 0;\n        for (Integer\
  \ x : arr) {\n            if (x % 2 == 0) {\n                if (small == null)\
  \ {\n                    small = x;\n                    k = i;\n              \
  \  } else if (x < small) {\n                    small = x;\n                   \
  \ k = i;\n                }\n            }\n            i++;\n        }\n      \
  \  if (small != null) {\n            result.add(small);\n            result.add(k);\n\
  \        }\n        return result;"
- '        return null;'
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        Integer min\
  \ = null;\n        int minIdx = 0;\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            if (arr.get(i) % 2 == 0) {\n                if (min == null) {\n\
  \                    min = arr.get(i);\n                    minIdx = i;\n      \
  \          } else if (arr.get(i) < min) {\n                    min = arr.get(i);\n\
  \                    minIdx = i;\n                }\n            }\n        }\n\
  \        if (min != null) {\n            res.add(min);\n            res.add(minIdx);\n\
  \        }\n        return res;"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        int min = Integer.MAX_VALUE;\n\
  \        int idx = -1;\n        for (int i = 0; i < arr.size(); i++) {\n       \
  \     int node = arr.get(i);\n            if (node < min && node % 2 == 0) {\n \
  \               min = node;\n                idx = i;\n            }\n        }\n\
  \        if (idx > -1) {\n            res.add(min);\n            res.add(idx);\n\
  \        }\n        return res;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int minEvenValue\
  \ = Integer.MAX_VALUE;\n        int minEvenIndex = Integer.MAX_VALUE;\n        for\
  \ (int i = 0; i < arr.size(); i++) {\n            int val = arr.get(i);\n      \
  \      if (val % 2 == 0 && val < minEvenValue) {\n                minEvenValue =\
  \ val;\n                minEvenIndex = i;\n            }\n        }\n        if\
  \ (minEvenValue != Integer.MAX_VALUE) {\n            result.add(minEvenValue);\n\
  \            result.add(minEvenIndex);\n        }\n        return result;"
- "        // Use new ArrayList<>() because ArrayList<Integer> does not have a default\
  \ constructor.\n        ArrayList<Integer> ans = new ArrayList<>(Arrays.asList(Integer.MAX_VALUE,\
  \ -1));\n        for (int i = 0; i < arr.size(); i++) {\n            int val = arr.get(i);\n\
  \            if (val % 2 == 0 && val < ans.get(0)) {\n                ans.set(0,\
  \ val);\n                ans.set(1, i);\n            }\n        }\n        if (ans.get(1)\
  \ == -1) {\n            return new ArrayList<>();\n        }\n        return ans;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (arr.size()\
  \ == 0) return result;\n        ArrayList<Integer> evens = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2\
  \ == 0) evens.add(arr.get(i));\n        }\n        if (evens.size() == 0) return\
  \ result;\n        Collections.sort(evens);\n        int smalestEven = evens.get(0);\n\
  \        int index = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
  \      if (arr.get(i) == smalestEven) {\n                index = i;\n          \
  \      break;\n            }\n        }\n        result.add(smalestEven);\n    \
  \    result.add(index);\n        return result;"
- "        // Type your code here\n        if (arr.size() == 0) {\n            return\
  \ new ArrayList<Integer>();\n        }\n        int minEven = Integer.MAX_VALUE;\n\
  \        ArrayList<Integer> minEvens = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int val = arr.get(i);\n           \
  \ if (val % 2 == 0) {\n                if (val < minEven) {\n                  \
  \  minEven = val;\n                    minEvens.clear();\n                    minEvens.add(i);\n\
  \                } else if (val == minEven) {\n                    minEvens.add(i);\n\
  \                }\n            }\n        }\n        if (minEvens.size() == 0)\
  \ {\n            return new ArrayList<Integer>();\n        }\n        int min =\
  \ minEvens.get(0);\n        for (int i = 1; i < minEvens.size(); i++) {\n      \
  \      if (minEvens.get(i) < min) {\n                min = minEvens.get(i);\n  \
  \          }\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
  \        result.add(minEven);\n        result.add(min);\n        return result;"
- "        ArrayList<Integer> ans = new ArrayList<Integer>();\n        if (arr.size()\
  \ == 0) return ans;\n        int m = Integer.MAX_VALUE;\n        int idx = -1;\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            int e = arr.get(i);\n\
  \            if (e > 0 && e % 2 == 0 && e < m) {\n                m = e;\n     \
  \           idx = i;\n            }\n        }\n        if (idx != -1) {\n     \
  \       ans.add(m);\n            ans.add(idx);\n        }\n        return ans;"
- "        if (arr.size() == 0) return new ArrayList<Integer>();\n        int min\
  \ = Integer.MAX_VALUE;\n        int index = 0;\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n         \
  \       min = arr.get(i);\n                index = i;\n            }\n        }\n\
  \        if (min == Integer.MAX_VALUE) return new ArrayList<Integer>();\n      \
  \  ArrayList<Integer> ans = new ArrayList<Integer>();\n        ans.add(min);\n \
  \       ans.add(index);\n        return ans;"
- "        // Find the smallest even value and return it as the first element\n  \
  \      // of the output array. If there is no even number, return [].\n        //\
  \ Also put the index of that value in the second element of the output array.\n\
  \        // If there are multiple such numbers, return the one with the smallest\
  \ index.\n        // Write code here.\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
  \        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ evens = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
  \ {\n            if (arr.get(i) % 2 == 0) {\n                evens.add(arr.get(i));\n\
  \            }\n        }\n        if (evens.size() > 0) {\n            int smallest\
  \ = Collections.min(evens);\n            for (int i = 0; i < arr.size(); i++) {\n\
  \                if (arr.get(i) == smallest) {\n                    result.add(smallest);\n\
  \                    result.add(i);\n                    break;\n              \
  \  }\n            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // todo\n\
  \        return result;"
- "        ArrayList<Integer> ret = new ArrayList<Integer>();\n        int minEven\
  \ = Integer.MAX_VALUE;\n        int minEvenIndex = Integer.MAX_VALUE;\n        for\
  \ (int i = 0; i < arr.size(); i++) {\n            int curr = arr.get(i);\n     \
  \       if (curr % 2 == 0 && curr < minEven) {\n                minEven = curr;\n\
  \                minEvenIndex = i;\n            }\n        }\n        if (minEven\
  \ != Integer.MAX_VALUE) {\n            ret.add(minEven);\n            ret.add(minEvenIndex);\n\
  \        }\n        return ret;"
- "        int min = Integer.MAX_VALUE;\n        int min_index = -1;\n        for\
  \ (int i = 0; i < arr.size(); i++) {\n            int v = arr.get(i);\n        \
  \    if (v % 2 == 0 && v < min) {\n                min = v;\n                min_index\
  \ = i;\n            }\n        }\n        ArrayList<Integer> res = new ArrayList<>();\n\
  \        if (min_index >= 0) {\n            res.add(min);\n            res.add(min_index);\n\
  \        }\n        return res;"
- "        // \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n        // your task is to pluck one of the nodes and return it.\n\
  \        // The plucked node should be the node with the smallest even value.\n\
  \        // If multiple nodes with the same smallest even value are found return\
  \ the node that has smallest index.\n        // The plucked node should be returned\
  \ in a list, [ smalest_value, its index ],\n        // If there are no even values\
  \ or the given array is empty, return [].\n        // Example 1:\n        // Input:\
  \ [4,2,3]\n        // Output: [2, 1]\n        // Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n        // Example 2:\n        // Input:\
  \ [1,2,3]\n        // Output: [2, 1]\n        // Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index. \n        // Example 3:\n        //\
  \ Input: []\n        // Output: []\n        // Example 4:\n        // Input: [5,\
  \ 0, 3, 0, 4, 2]\n        // Output: [0, 1]\n        // Explanation: 0 is the smallest\
  \ value, but  there are two zeros,\n        // so we will choose the first zero,\
  \ which has the smallest index.\n        // Constraints:\n        // * 1 <= nodes.length\
  \ <= 10000\n        // * 0 <= node.value\n        ArrayList<Integer> result = new\
  \ ArrayList<Integer>();\n        ArrayList<Integer> evens = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> evensIndex = new ArrayList<Integer>();\n        for\
  \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n \
  \               evens.add(arr.get(i));\n                evensIndex.add(i);\n   \
  \         }\n        }\n        int smallestEven = Integer.MAX_VALUE;\n        int\
  \ smallestEvenIndex = Integer.MAX_VALUE;\n        for (int i = 0; i < evens.size();\
  \ i++) {\n            if (evens.get(i) < smallestEven) {\n                smallestEven\
  \ = even"
- "        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n\
  \        }\n        Integer smallest = null;\n        Integer index = null;\n  \
  \      for (int i = 0; i < arr.size(); i++) {\n            Integer n = arr.get(i);\n\
  \            if (n % 2 == 0) {\n                if (smallest == null || n < smallest)\
  \ {\n                    smallest = n;\n                    index = i;\n       \
  \         }\n            }\n        }\n        if (smallest == null) {\n       \
  \     return new ArrayList<Integer>();\n        }\n        ArrayList<Integer> res\
  \ = new ArrayList<Integer>();\n        res.add(smallest);\n        res.add(index);\n\
  \        return res;"
- "        ArrayList<Integer> evens = new ArrayList<Integer>();\n        int min =\
  \ Integer.MAX_VALUE;\n        int min_idx = -1;\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i)\
  \ < min) {\n                    min = arr.get(i);\n                    min_idx =\
  \ i;\n                }\n            }\n        }\n        if (min_idx == -1) return\
  \ new ArrayList<Integer>();\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n\
  \        ans.add(min);\n        ans.add(min_idx);\n        return ans;"
- "        ArrayList<Integer> r = new ArrayList<Integer>();\n        int s = arr.size();\n\
  \        int min = Integer.MAX_VALUE;\n        int minIndex = Integer.MAX_VALUE;\n\
  \        int c;\n        for (int i = 0; i < s; i++) {\n            c = arr.get(i);\n\
  \            if (c % 2 == 0 && c < min) {\n                min = c;\n          \
  \      minIndex = i;\n            }\n        }\n        if (min != Integer.MAX_VALUE)\
  \ {\n            r.add(min);\n            r.add(minIndex);\n        }\n        return\
  \ r;"
- "        if (arr.size() == 0) return new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ answer = new ArrayList<Integer>();\n        int first = -1;\n        int index\
  \ = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
  \ % 2 == 0) {\n                if (first == -1) {\n                    first = arr.get(i);\n\
  \                    index = i;\n                } else {\n                    if\
  \ (arr.get(i) < first) {\n                        first = arr.get(i);\n        \
  \                index = i;\n                    }\n                }\n        \
  \    }\n        }\n        if (first != -1) {\n            answer.add(first);\n\
  \            answer.add(index);\n        }\n        return answer;"
- "        ArrayList<Integer> ret = new ArrayList<Integer>();\n        if (arr.size()\
  \ == 0) {\n            return ret;\n        }\n        Optional<Integer> value =\
  \ arr.stream().filter(\n            (x) -> x % 2 == 0\n        ).min(\n        \
  \    (x, y) -> x - y\n        );\n        if (value.isPresent()) {\n           \
  \ ret.add(value.get());\n            ret.add(arr.indexOf(value.get()));\n      \
  \  }\n        return ret;"
- "        // Please implement your solution here.\n        // Minimum of 2 or more\
  \ is the same as the minimum of the first two elements\n        // and then the\
  \ minimum of the result and the next element.\n        // In Java, I do not believe\
  \ there is any functional way to do that\n        // So I will use a for loop and\
  \ a mutable variable.\n        // At the end, I will return the best value and its\
  \ index.\n        if (arr.size() <= 1) {\n            return new ArrayList<Integer>();\n\
  \        }\n        Integer bestValue = null;\n        Integer bestIndex = null;\n\
  \        Integer bestEvenValue = null;\n        Integer bestEvenIndex = null;\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            Integer value = arr.get(i);\n\
  \            if (bestValue == null || value < bestValue) {\n                bestValue\
  \ = value;\n                bestIndex = i;\n            }\n            if (value\
  \ % 2 == 0) {\n                if (bestEvenValue == null || value < bestEvenValue)\
  \ {\n                    bestEvenValue = value;\n                    bestEvenIndex\
  \ = i;\n                }\n            }\n        }\n        ArrayList<Integer>\
  \ ans = new ArrayList<Integer>();\n        if (bestEvenValue == null) {\n      \
  \      return ans;\n        }\n        ans.add(bestEvenValue);\n        ans.add(bestEvenIndex);\n\
  \        return ans;"
- "        //TODO\n        System.out.println(\"Input: \" + arr);\n        if (arr.size()\
  \ == 0) return new ArrayList<Integer>();\n        int min = Integer.MAX_VALUE;\n\
  \        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n     \
  \       if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
  \                index = i;\n            }\n        }\n        if (index == -1)\
  \ return new ArrayList<Integer>();\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
  \        result.add(min);\n        result.add(index);\n        System.out.println(\"\
  Output: \" + result);\n        return result;"
- "        int max = Integer.MAX_VALUE;\n        int index = -1;\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n         \
  \   if (value < max && value % 2 == 0) {\n                max = value;\n       \
  \         index = i;\n            }\n        }\n        if (index == -1) return\
  \ new ArrayList<Integer>();\n        ArrayList<Integer> plucked = new ArrayList<Integer>();\n\
  \        plucked.add(max);\n        plucked.add(index);\n        return plucked;"
- "        ArrayList<Integer> out = new ArrayList<Integer>();\n        out.add(0);\n\
  \        out.add(0);\n        boolean found = false;\n        for (int i = 0; i\
  \ < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
  \ if (!found) {\n                    out.set(0, arr.get(i));\n                 \
  \   out.set(1, i);\n                    found = true;\n                } else {\n\
  \                    if (arr.get(i) < out.get(0)) {\n                        out.set(0,\
  \ arr.get(i));\n                        out.set(1, i);\n                    }\n\
  \                }\n            }\n        }\n        if (!found) {\n          \
  \  out.clear();\n        }\n        return out;"
- '        // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
  20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
  40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
  60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
  80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
  116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
  132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,
  148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
  164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
  180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
  196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
  212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227,
  228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
  244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,'
- "        ArrayList<Integer> evens = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n      \
  \          evens.add(arr.get(i));\n            }\n        }\n        if (evens.size()\
  \ == 0) {\n            return new ArrayList<Integer>();\n        }\n        int\
  \ min = Collections.min(evens);\n        ArrayList<Integer> indexs = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == min)\
  \ {\n                indexs.add(i);\n            }\n        }\n        int min_index\
  \ = Collections.min(indexs);\n        ArrayList<Integer> ret = new ArrayList<Integer>();\n\
  \        ret.add(min);\n        ret.add(min_index);\n        return ret;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int elem = arr.get(i);\n          \
  \  if (elem % 2 == 0) {\n                result.add(elem);\n                result.add(i);\n\
  \                return result;\n            }\n        }\n        return result;"
- '        return new ArrayList<Integer>();'
- "        ArrayList<Integer> ret = new ArrayList<Integer>();\n        // smallest_value,\
  \ index\n        int smallest = Integer.MAX_VALUE;\n        int smallest_index =\
  \ Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n         \
  \   int x = arr.get(i);\n            if (x % 2 == 0 && x < smallest) {\n       \
  \         smallest = x;\n                smallest_index = i;\n            }\n  \
  \      }\n        if (smallest_index != Integer.MAX_VALUE) {\n            ret.add(smallest);\n\
  \            ret.add(smallest_index);\n        }\n        return ret;"
- "        // find the smallest even number\n        // find the index of the smallest\
  \ even number\n        // find the lowest index of the smallest even number\n  \
  \      // return new tuple of the smallest even number and the index of the smallest\
  \ even number\n        return arr.stream()\n            .filter(x -> x % 2 == 0)\n\
  \            .reduce(\n                new ArrayList<Integer>(List.of(Integer.MAX_VALUE,\
  \ arr.size())),\n                (tuple, next) -> next < tuple.get(0) ? new ArrayList<Integer>(List.of(next,\
  \ arr.indexOf(next))) : tuple,\n                (tuple1, tuple2) -> tuple1.get(1)\
  \ < tuple2.get(1) ? tuple1 : tuple2\n            );"
- "        Optional<Integer> firstEven = arr.stream().filter(e -> e % 2 == 0).min(Integer::compare);\n\
  \        if (!firstEven.isPresent()) return new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ res = new ArrayList<Integer>();\n        res.add(firstEven.get());\n        res.add(arr.indexOf(firstEven.get()));\n\
  \        return res;"
- "        int smallest = Integer.MAX_VALUE;\n        int smallestIndex = -1;\n  \
  \      for (int i = 0; i < arr.size(); i++) {\n            int a = arr.get(i);\n\
  \            if (a % 2 == 0 && a < smallest) {\n                smallest = a;\n\
  \                smallestIndex = i;\n            }\n        }\n        if (smallestIndex\
  \ == -1) {\n            return new ArrayList<Integer>();\n        }\n        ArrayList<Integer>\
  \ ans = new ArrayList<Integer>();\n        ans.add(smallest);\n        ans.add(smallestIndex);\n\
  \        return ans;"
- "        int min = -1;\n        int idx = -1;\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            int el = arr.get(i);\n            if (el % 2 == 0) {\n   \
  \             if (min == -1 || el < min) {\n                    min = el;\n    \
  \                idx = i;\n                }\n            }\n        }\n       \
  \ if (min == -1) {\n            return new ArrayList<Integer>();\n        }\n  \
  \      return new ArrayList<Integer>(Arrays.asList(min, idx));"
- "        // Your code here!\n        return null;"
- "        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n\
  \        }\n        ArrayList<Integer> ret = new ArrayList<Integer>();\n       \
  \ // index is the smallest index of the list\n        int index = 0;\n        int\
  \ smallest_value = Integer.MAX_VALUE;\n        // Loop through the array\n     \
  \   for (int i = 0; i < arr.size(); i++) {\n            // get the current value\n\
  \            int val = arr.get(i);\n            // If this is even and smaller than\
  \ the current smallest even value\n            if (val % 2 == 0 && val < smallest_value)\
  \ {\n                // mark it down as the smallest value\n                smallest_value\
  \ = val;\n                // and mark down the index\n                index = i;\n\
  \            }\n        }\n        // if smallest_value is still Integer.MAX_VALUE\
  \ then no even value found\n        if (smallest_value == Integer.MAX_VALUE) {\n\
  \            return new ArrayList<Integer>();\n        }\n        // return the\
  \ smallest value and its index\n        ret.add(smallest_value);\n        ret.add(index);\n\
  \        return ret;"
- "        final ArrayList<Integer> result = new ArrayList<Integer>();\n        final\
  \ ArrayList<Integer> evens = new ArrayList<Integer>();\n        for (int i = 0;\
  \ i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n             \
  \   evens.add(arr.get(i));\n            }\n        }\n        if (evens.size() ==\
  \ 0) {\n            return result;\n        }\n        int smallest = evens.get(0);\n\
  \        int index = 0;\n        for (int i = 0; i < evens.size(); i++) {\n    \
  \        if (evens.get(i) < smallest) {\n                smallest = evens.get(i);\n\
  \                index = i;\n            }\n        }\n        result.add(smallest);\n\
  \        result.add(index);\n        return result;"
- "        ArrayList<Integer> al = new ArrayList<Integer>();\n        Integer m =\
  \ null;\n        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
  \            Integer c = arr.get(i);\n            if (c % 2 == 0) {\n          \
  \      if (m == null) {\n                    m = c;\n                    index =\
  \ i;\n                } else if (c < m) {\n                    m = c;\n        \
  \            index = i;\n                }\n            }\n        }\n        if\
  \ (m != null) {\n            al.add(m);\n            al.add(index);\n        }\n\
  \        return al;"
- '        return new ArrayList<Integer>();'
- "        if (arr.size() <= 0) {\n            return new ArrayList<Integer>();\n\
  \        }\n        int n = arr.size();\n        int[] dp = new int[n];\n      \
  \  for (int i = 0; i < n; i++) {\n            dp[i] = arr.get(i);\n        }\n \
  \       for (int i = 1; i < n; i++) {\n            if (arr.get(i) % 2 == 0) {\n\
  \                if (arr.get(i - 1) % 2 == 0) {\n                    dp[i] = Math.min(dp[i\
  \ - 1], dp[i]);\n                } else {\n                    dp[i] = dp[i];\n\
  \                }\n            } else {\n                dp[i] = dp[i - 1];\n \
  \           }\n        }\n        int min = Arrays.stream(dp).min().getAsInt();\n\
  \        if (min % 2 == 0) {\n            int index = IntStream.range(0, n).filter(i\
  \ -> dp[i] == min).findFirst().getAsInt();\n            return new ArrayList<Integer>(Arrays.asList(min,\
  \ index));\n        } else {\n            return new ArrayList<Integer>();\n   \
  \     }"
- "        ArrayList<Integer> res = new ArrayList<Integer>();\n        Integer val\
  \ = null;\n        Integer idx = null;\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            Integer x = arr.get(i);\n            if (x % 2 == 0) {\n \
  \               if (val == null || x < val) {\n                    val = x;\n  \
  \                  idx = i;\n                }\n            }\n        }\n     \
  \   if (val != null) {\n            res.add(val);\n            res.add(idx);\n \
  \       }\n        return res;"
- "        int min = Integer.MAX_VALUE;\n        int index = -1;\n        for (int\
  \ i = 0; i < arr.size(); i++) {\n            int x = arr.get(i);\n            if\
  \ (x % 2 == 0 && x < min) {\n                min = x;\n                index = i;\n\
  \            }\n        }\n        ArrayList<Integer> result = new ArrayList<>();\n\
  \        if (index != -1) {\n            result.add(min);\n            result.add(index);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // your\
  \ code goes here\n        int minEvenValue = Integer.MAX_VALUE;\n        int minEvenIndex\
  \ = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
  \ % 2 == 0 && arr.get(i) < minEvenValue) {\n                minEvenValue = arr.get(i);\n\
  \                minEvenIndex = i;\n            }\n        }\n        if (minEvenIndex\
  \ != -1) {\n            result.add(minEvenValue);\n            result.add(minEvenIndex);\n\
  \        }\n        return result;"
- '        return arr.stream().filter(x -> x % 2 == 0).min(Comparator.comparing(a
  -> a)).map(x -> Arrays.asList(x, arr.indexOf(x))).orElse(new ArrayList<Integer>());'
- "        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n\
  \        }\n        ArrayList<Integer> evens = new ArrayList<Integer>();\n     \
  \   for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0)\
  \ {\n                evens.add(arr.get(i));\n            }\n        }\n        if\
  \ (evens.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n\
  \        int min = evens.get(0);\n        int idx = 0;\n        for (int i = 0;\
  \ i < evens.size(); i++) {\n            if (evens.get(i) < min) {\n            \
  \    min = evens.get(i);\n                idx = i;\n            }\n        }\n \
  \       idx = arr.indexOf(min);\n        return new ArrayList<Integer>(Arrays.asList(min,\
  \ idx));"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ copy = new ArrayList<Integer>(arr);\n        Collections.sort(copy);\n       \
  \ System.out.println(copy);\n        boolean even = false;\n        while(!copy.isEmpty())\
  \ {\n            int x = copy.get(0);\n            if(x % 2 == 0) {\n          \
  \      even = true;\n                result.add(x);\n                result.add(arr.indexOf(x));\n\
  \                break;\n            }\n            copy.remove(0);\n        }\n\
  \        if(!even) {\n            result.add(0);\n            result.add(0);\n \
  \       }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int[] smallest_value_index\
  \ = new int[2];\n        smallest_value_index[0] = 10001;\n        for (int i =\
  \ 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) <\
  \ smallest_value_index[0]) {\n                smallest_value_index[0] = arr.get(i);\n\
  \                smallest_value_index[1] = i;\n            }\n        }\n      \
  \  if (smallest_value_index[0] != 10001) {\n            result.add(smallest_value_index[0]);\n\
  \            result.add(smallest_value_index[1]);\n        }\n        return result;"
- "        ArrayList<Integer> answer = new ArrayList<Integer>();\n        Integer\
  \ min = null;\n        int index = -1;\n        for (int i = 0; i < arr.size();\
  \ i++) {\n            Integer value = arr.get(i);\n            if (value % 2 ==\
  \ 0) {\n                if (min == null || value < min) {\n                    min\
  \ = value;\n                    index = i;\n                }\n            }\n \
  \       }\n        if (min != null) {\n            answer.add(min);\n          \
  \  answer.add(index);\n        }\n        return answer;"
language: java
name: HumanEval_68_pluck
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // \"Given an array representing a branch of a tree that has\
  \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
  \ return it.\n    // The plucked node should be the node with the smallest even\
  \ value.\n    // If multiple nodes with the same smallest even value are found return\
  \ the node that has smallest index.\n    // The plucked node should be returned\
  \ in a list, [ smalest_value, its index ],\n    // If there are no even values or\
  \ the given array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n\
  \    // Output: [2, 1]\n    // Explanation: 2 has the smallest even value, and 2\
  \ has the smallest index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output:\
  \ [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index. \n    // Example 3:\n    // Input: []\n    // Output: []\n    // Example\
  \ 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation:\
  \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose the\
  \ first zero, which has the smallest index.\n    // Constraints:\n    // * 1 <=\
  \ nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Integer>\
  \ pluck(ArrayList<Integer> arr) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Integer>(Arrays.asList((int)4,\
  \ (int)2, (int)3)))).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)1)))));\n\
  \    assert(pluck((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3)))).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))));\n    assert(pluck((new ArrayList<Integer>(Arrays.asList()))).equals((new\
  \ ArrayList<Integer>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Integer>(Arrays.asList((int)5,\
  \ (int)0, (int)3, (int)0, (int)4, (int)2)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)1)))));\n    assert(pluck((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
  \ (int)3, (int)0, (int)5, (int)3)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)3)))));\n    assert(pluck((new ArrayList<Integer>(Arrays.asList((int)5, (int)4,\
  \ (int)8, (int)4, (int)8)))).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
  \ (int)1)))));\n    assert(pluck((new ArrayList<Integer>(Arrays.asList((int)7, (int)6,\
  \ (int)7, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)6, (int)1)))));\n\
  \    assert(pluck((new ArrayList<Integer>(Arrays.asList((int)7, (int)9, (int)7,\
  \ (int)1)))).equals((new ArrayList<Integer>(Arrays.asList()))));\n    }\n\n}\n"
