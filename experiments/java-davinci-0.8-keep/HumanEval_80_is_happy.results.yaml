language: java
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n\n        for\
    \ (int i = 2; i < s.length(); i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ - 1) && s.charAt(i) == s.charAt(i - 2)) {\n                return false;\n \
    \           }\n        }\n\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjy_zkz2p.java:36)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // TODO: Your code here.\n        // NOTE: you can use the same methods that\
    \ you used in problem 1.\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphd74teub.java:27)\n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return false;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6imzwfmt.java:25)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    for (int i = 0; i < s.length() - 2; i++) {\n            char c1 = s.charAt(i);\n\
    \            char c2 = s.charAt(i + 1);\n            char c3 = s.charAt(i + 2);\n\
    \            if (c1 == c2 || c1 == c3 || c2 == c3) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ywfss71.java:31)\n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Write your code here\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbfsa95k5.java:24)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        else\
    \ {\n            String[] letters = s.split(\"\");\n            if (letters[0].equals(letters[1])\
    \ || letters[0].equals(letters[2]) || letters[1].equals(letters[2])) {\n     \
    \           return false;\n            }\n            int i = 1;\n           \
    \ while (i < s.length() - 2) {\n                if (letters[i].equals(letters[i+1])\
    \ || letters[i].equals(letters[i+2]) || letters[i+1].equals(letters[i+2])) {\n\
    \                    return false;\n                }\n                i++;\n\
    \            }\n            return true;\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    boolean result = true;\n        if (s.length() >= 3) {\n            result\
    \ = IntStream.range(0, s.length() - 2).allMatch(i -> s.charAt(i) != s.charAt(i\
    \ + 1) && s.charAt(i) != s.charAt(i + 2) && s.charAt(i + 1) != s.charAt(i + 2));\n\
    \        } else {\n            result = false;\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 2; i < s.length(); i++) {\n            if (s.charAt(i - 2) == s.charAt(i\
    \ - 1) || s.charAt(i - 2) == s.charAt(i) || s.charAt(i - 1) == s.charAt(i)) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() >= 3) {\n            for (int i = 0; i < s.length() - 2; i++)\
    \ {\n                if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i\
    \ + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                    return false;\n\
    \                }\n            }\n            return true;\n        }\n     \
    \   return false;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Write your code here\n        if (s.length() < 3) {\n            return\
    \ false;\n        }\n        char[] charray = s.toCharArray();\n        for (int\
    \ i = 0; i < charray.length - 2; i++) {\n            if (charray[i] == charray[i\
    \ + 1] || charray[i] == charray[i + 2] || charray[i + 1] == charray[i + 2]) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008824
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) return false;\n        for (int i = 0; i < s.length()\
    \ - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) ==\
    \ s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) ==\
    \ s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i\
    \ + 2)) {\n                return false;\n            }\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg73cc083.java:28)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n \
    \           }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpss8_0bso.java:34)\n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return s.length() > 2 && s.substring(1).chars().distinct().count() == s.length()\
    \ - 1;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3wnz7itj.java:29)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            String x = s.substring(i,\
    \ i + 3);\n            if (x.charAt(0) == x.charAt(1) || x.charAt(0) == x.charAt(2)\
    \ || x.charAt(1) == x.charAt(2)) {\n                return false;\n          \
    \  }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // YOUR CODE HERE\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxl1bn_pa.java:24)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        int count = 1;\n        for (int i = 0; i < s.length()\
    \ - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i +\
    \ 1) == s.charAt(i + 2)) {\n                count = 0;\n                break;\n\
    \            }\n        }\n        if (count == 1) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnoyesxh3.java:37)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n \
    \           }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpss8_0bso.java:34)\n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Write your code here\n        for (int i = 0; i < s.length() - 2; i++)\
    \ {\n            char a = s.charAt(i);\n            char b = s.charAt(i + 1);\n\
    \            char c = s.charAt(i + 2);\n            if (a == b || b == c || a\
    \ == c) {\n                return false;\n            }\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj6w43uib.java:32)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    throw new RuntimeException(\"Not Implemented\");\n}\n    public static void\
    \ main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not Implemented\n\
    \tat Problem.isHappy(tmp0sy91f0s.java:20)\n\tat Problem.main(tmp0sy91f0s.java:23)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) return false;\n        for (int i = 0; i < s.length()\
    \ - 2; i++) {\n            for (int j = i + 1; j < s.length() - 1; j++) {\n  \
    \              for (int k = j + 1; k < s.length(); k++) {\n                  \
    \  if (s.charAt(i) == s.charAt(j) && s.charAt(j) == s.charAt(k)) {\n         \
    \               return false;\n                    }\n                }\n    \
    \        }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk0fepdwe.java:36)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return s.length() >= 3 &&\n               IntStream.range(0, s.length() -\
    \ 2)\n                        .mapToObj(i -> s.substring(i, i + 3))\n        \
    \                .map(String::toCharArray)\n                        .map(chars\
    \ -> Arrays.stream(chars).distinct().count())\n                        .allMatch(count\
    \ -> count == 3);\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsuslo3zp.java:24: error: no suitable method found for stream(char[])\n\
    \                        .map(chars -> Arrays.stream(chars).distinct().count())\n\
    \                                            ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (inference variable T#1 has incompatible bounds\n \
    \       equality constraints: char\n        lower bounds: Object)\n    method\
    \ Arrays.<T#2>stream(T#2[],int,int) is not applicable\n      (cannot infer type-variable(s)\
    \ T#2\n        (actual and formal argument lists differ in length))\n    method\
    \ Arrays.stream(int[]) is not applicable\n      (argument mismatch; char[] cannot\
    \ be converted to int[])\n    method Arrays.stream(long[]) is not applicable\n\
    \      (argument mismatch; char[] cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    /tmp/tmpsuslo3zp.java:25: error: bad operand types for binary operator '=='\n\
    \                        .allMatch(count -> count == 3);\n                   \
    \                              ^\n  first type:  Object\n  second type: int\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Write your code here\n        boolean b = true;\n        if(s.length()\
    \ < 3) {\n            b = false;\n        }\n        else{\n            for(int\
    \ i = 0; i < s.length() - 2; i++) {\n                if(s.charAt(i) == s.charAt(i\
    \ + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)){\n\
    \                    b = false;\n                    break;\n                }\n\
    \            }\n        }\n        return b;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return false;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6imzwfmt.java:25)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) return false;\n        else {\n            for (int i\
    \ = 0; i < s.length() - 2; i++) {\n                char a = s.charAt(i);\n   \
    \             char b = s.charAt(i + 1);\n                char c = s.charAt(i +\
    \ 2);\n                if (a == b || b == c || a == c) return false;\n       \
    \     }\n            return true;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    int n = s.length();\n        if (n < 3) {\n            return false;\n  \
    \      }\n        for (int i = 0; i < n - 2; i++) {\n            for (int j =\
    \ i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    if (s.charAt(i) == s.charAt(j) && s.charAt(j) == s.charAt(k))\
    \ {\n                        return false;\n                    }\n          \
    \      }\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkk7d8cg3.java:39)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Implement this function\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwpxq_oyg.java:26)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) return false;\n        for (int i = 0; i < s.length()\
    \ - 2; i++) {\n            char a = s.charAt(i);\n            char b = s.charAt(i\
    \ + 1);\n            char c = s.charAt(i + 2);\n            if (a == b || b ==\
    \ c || a == c) {\n                return false;\n            }\n        }\n  \
    \      return true;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) return false;\n        for (int i = 0; i < s.length()\
    \ - 2; i++) {\n            char current = s.charAt(i);\n            if (current\
    \ == s.charAt(i + 1) || current == s.charAt(i + 2)) return false;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp753sy_lo.java:33)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    boolean isHappy = true;\n        for (int i = 0; i < s.length() - 2; i++)\
    \ {\n            isHappy = isHappy && (s.charAt(i) != s.charAt(i + 1) && s.charAt(i)\
    \ != s.charAt(i + 2) && s.charAt(i + 1) != s.charAt(i + 2));\n        }\n    \
    \    return isHappy;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppzri2buz.java:27)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    for (int i = 0; i < s.length() - 2; i++) {\n            Set<Character> p\
    \ = new HashSet<>();\n            for (int j = i; j < i + 3; j++) {\n        \
    \        p.add(s.charAt(j));\n            }\n            if (p.size() != 3) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6fbdas6o.java:32)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    int cnt[] = new int[26];\n        char c[] = s.toCharArray();\n        for\
    \ (int i = 0; i < c.length; i++) {\n            cnt[c[i] - 'a']++;\n        }\n\
    \        for (int i = 0; i < 26; i++) {\n            if (cnt[i] >= 3) {\n    \
    \            return false;\n            }\n        }\n        for (int i = 0;\
    \ i < c.length - 2; i++) {\n            if (c[i] == c[i + 1] && c[i] == c[i +\
    \ 2]) {\n                return false;\n            }\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp2fr0pf6.java:38)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    for (int i = 0; i < s.length() - 2; i++) {\n            char c1 = s.charAt(i);\n\
    \            char c2 = s.charAt(i + 1);\n            char c3 = s.charAt(i + 2);\n\
    \            if (c1 == c2 || c1 == c3 || c2 == c3) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ywfss71.java:31)\n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i)\
    \ == s.charAt(i + 1) && s.charAt(i) == s.charAt(i + 2))\n                return\
    \ false;\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf6zlxkqk.java:27)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) ==\
    \ s.charAt(i + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return\
    \ false;\n            }\n        }\n        return s.length() >= 3;\n}\n    public\
    \ static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps0ic0w3o.java:31)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return false;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6imzwfmt.java:25)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    int i = 0;\n        int len = s.length();\n        if (len < 3) {\n     \
    \       return false;\n        }\n        for (; i < len - 2; i++) {\n       \
    \     if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) ||\
    \ s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n     \
    \       }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return false;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6imzwfmt.java:25)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n\n        if\
    \ (s.charAt(0) == s.charAt(1) || s.charAt(1) == s.charAt(2) || s.charAt(0) ==\
    \ s.charAt(2)) {\n            return false;\n        }\n\n        for (int i =\
    \ 3; i < s.length(); i++) {\n            if (s.charAt(i) == s.charAt(i - 1) ||\
    \ s.charAt(i) == s.charAt(i - 2) || s.charAt(i - 1) == s.charAt(i - 2)) {\n  \
    \              return false;\n            }\n        }\n\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Write your code here.\n        int n = s.length();\n        if (n < 3)\
    \ {\n            return false;\n        }\n        for (int i = 0; i < n - 2;\
    \ i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i\
    \ + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    throw new UnsupportedOperationException(\"Not supported yet.\");\n}\n   \
    \ public static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ supported yet.\n\tat Problem.isHappy(tmp6nmetbwz.java:20)\n\tat Problem.main(tmp6nmetbwz.java:23)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Your code here\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjqwax7e5.java:26)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Write your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpew01meje.java:26)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n\n        char\
    \ lastChar = s.charAt(0);\n        char middleChar = s.charAt(1);\n        for\
    \ (int i = 2; i < s.length(); i++) {\n            char currChar = s.charAt(i);\n\
    \            if (lastChar == middleChar && middleChar == currChar) {\n       \
    \         return false;\n            }\n            lastChar = middleChar;\n \
    \           middleChar = currChar;\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxemafu3p.java:40)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return (s.length() >= 3 &&\n                s.chars().allMatch(ch -> s.lastIndexOf(ch)\
    \ == s.indexOf(ch)) &&\n                IntStream.range(0, s.length() - 2).allMatch(i\
    \ -> s.charAt(i) != s.charAt(i + 1) && s.charAt(i) != s.charAt(i + 2) && s.charAt(i\
    \ + 1) != s.charAt(i + 2)));\n}\n    public static void main(String[] args) {\n\
    \    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphfbk5h7n.java:31)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Think: What is a happy string?\n        // Think: How do we know if a\
    \ string is happy?\n        // Think: What is a happy string made of?\n      \
    \  // Think: What is a non-happy string made of?\n        // Think: How can we\
    \ get every 3 consecutive letters?\n        // Think: How can we check if 3 consecutive\
    \ letters are distinct?\n        // Think: What is our final answer?\n\n     \
    \   // Think: Do you know how to get every 3 consecutive letters in a string?\n\
    \        // Think: Do you know how to check if 3 consecutive letters are distinct?\n\
    \        // Think: Do you know how to get the final answer?\n\n        // Think:\
    \ How long is a happy string?\n        // Think: What is a happy string made of?\n\
    \        // Think: How can we use loops to solve this problem?\n        for (int\
    \ i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n \
    \           }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppqadk_ib.java:43)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    throw new UnsupportedOperationException(\"Not implemented yet\");\n}\n  \
    \  public static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Not\
    \ implemented yet\n\tat Problem.isHappy(tmpbg7e_mk8.java:20)\n\tat Problem.main(tmpbg7e_mk8.java:23)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    boolean res = true;\n        // TODO: Implement your code here.\n       \
    \ return res;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwdjl8np0.java:25)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // your code here\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcikx6giw.java:26)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) return false;\n        for (int i = 0; i < s.length()\
    \ - 2; i++) {\n            char c1 = s.charAt(i);\n            char c2 = s.charAt(i\
    \ + 1);\n            char c3 = s.charAt(i + 2);\n            if (c1 == c2 || c1\
    \ == c3 || c2 == c3) return false;\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // WRITE YOUR CODE HERE\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0jtc9w2l.java:24)\n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Fill in the function here\n}\n    public static void main(String[] args)\
    \ {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) ==\
    \ (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpyyzyk_8p.java:21: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return false;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6imzwfmt.java:25)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    //Solution 1:\n        // int len = s.length();\n        // for (int i =\
    \ 0; i < len - 2; i++) {\n        //     if (s.charAt(i) == s.charAt(i + 1) ||\
    \ s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n  \
    \      //         return false;\n        //     }\n        // }\n        // return\
    \ true;\n        //Solution 2:\n        return !s.chars().boxed().collect(Collectors.groupingBy(x\
    \ -> x, Collectors.counting())).values().stream().anyMatch(x -> x > 1);\n}\n \
    \   public static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptlc7o8mx.java:32)\n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) return false;\n        for (int i = 0; i < s.length()\
    \ - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) ==\
    \ s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        char[]\
    \ chars = s.toCharArray();\n        int index = 0;\n        while (index < chars.length\
    \ - 3) {\n            if (chars[index] == chars[index + 1] && chars[index] ==\
    \ chars[index + 2]) {\n                return false;\n            }\n        \
    \    index += 1;\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpltafgjg2.java:37)\n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i)\
    \ == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i\
    \ + 2)) {\n                return false;\n            }\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqdpar8di.java:28)\n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    int l = s.length();\n        if (l < 3) return false;\n        for (int i\
    \ = 0; i < l - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i)\
    \ == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n              \
    \  return false;\n            }\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    for (int i = 0; i < s.length() - 2; i++) {\n            char a = s.charAt(i);\n\
    \            char b = s.charAt(i + 1);\n            char c = s.charAt(i + 2);\n\
    \            if (a == b || b == c || a == c) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf4o61651.java:31)\n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length()<3) return false;\n        for (int i=0; i<s.length()-2; i++)\
    \ {\n            if (s.charAt(i)==s.charAt(i+1) || s.charAt(i)==s.charAt(i+2)\
    \ || s.charAt(i+1)==s.charAt(i+2)) return false;\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return true;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqib57yue.java:23)\n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) return false;\n        for (int i = 0; i < s.length()\
    \ - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) ==\
    \ s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // TODO: Implement this method\n        return false;\n}\n    public static\
    \ void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjc3a4t2f.java:26)\n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // 1. Check length\n        if (s.length() < 3) return false;\n        //\
    \ 2. Check individual letters\n        boolean flag = true;\n        for (int\
    \ i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2))\
    \ {\n                flag = false;\n                break;\n            }\n  \
    \      }\n        return flag;\n}\n    public static void main(String[] args)\
    \ {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) ==\
    \ (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    boolean result = true;\n        // Your code here\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqi9bqidg.java:25)\n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) ==\
    \ s.charAt(i + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return\
    \ false;\n            }\n        }\n        return s.length() >= 3;\n}\n    public\
    \ static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps0ic0w3o.java:31)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) return false;\n        for (int i = 0; i < s.length()\
    \ - 2; i++) {\n            char c = s.charAt(i);\n            if (c == s.charAt(i\
    \ + 1) || c == s.charAt(i + 2)) return false;\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphdqlj869.java:33)\n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    int cnt = 0;\n        char c[] = s.toCharArray();\n        for (int i = 0;\
    \ i < c.length; i++) {\n            if (i == 0) {\n                if (c[i] ==\
    \ c[i + 1] || c[i] == c[i + 2]) {\n                    return false;\n       \
    \         }\n            } else if (i == c.length - 1) {\n                if (c[i]\
    \ == c[i - 1] || c[i] == c[i - 2]) {\n                    return false;\n    \
    \            }\n            } else {\n                if (c[i] == c[i - 1] ||\
    \ c[i] == c[i - 2] || c[i] == c[i + 1] || c[i] == c[i + 2]) {\n              \
    \      return false;\n                }\n            }\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.isHappy(tmpjau07nja.java:24)\n\
    \tat Problem.main(tmpjau07nja.java:40)\n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            char c1 = s.charAt(i);\n\
    \            char c2 = s.charAt(i + 1);\n            char c3 = s.charAt(i + 2);\n\
    \            if (c1 == c2 || c1 == c3 || c2 == c3) {\n                return false;\n\
    \            }\n        }\n\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // TODO: Implement your solution here\n        return false;\n}\n    public\
    \ static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn82o1yuz.java:26)\n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Your code here\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjqwax7e5.java:26)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // throw new UnsupportedOperationException(\"Not implemented yet\");\n  \
    \      if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n \
    \           }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqags4456.java:35)\n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return false;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6imzwfmt.java:25)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) return false;\n        for (int i = 0; i < s.length()\
    \ - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) ==\
    \ s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) return false;\n        for (int i = 0; i < s.length()\
    \ - 2; i++) {\n            char a = s.charAt(i);\n            char b = s.charAt(i\
    \ + 1);\n            char c = s.charAt(i + 2);\n            if (a == b || b ==\
    \ c || a == c) return false;\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n \
    \           }\n        }\n\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpowaj0t36.java:36)\n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length()<3)\n            return false;\n        for (int i=0;i<s.length()-2;i++)\n\
    \            if (s.charAt(i)==s.charAt(i+1)||s.charAt(i)==s.charAt(i+2)||s.charAt(i+1)==s.charAt(i+2))\n\
    \                return false;\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        char[]\
    \ chars = s.toCharArray();\n        for (int i = 0; i < chars.length - 2; i++)\
    \ {\n            if (chars[i] == chars[i + 1] || chars[i] == chars[i + 2] || chars[i\
    \ + 1] == chars[i + 2]) {\n                return false;\n            }\n    \
    \    }\n        return true;\n}\n    public static void main(String[] args) {\n\
    \    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Your code here.\n        int i = 0;\n        boolean o = false;\n    \
    \    while(i < s.length()-2){\n            if(s.charAt(i) == s.charAt(i+1) ||\
    \ s.charAt(i) == s.charAt(i+2) || s.charAt(i+1) == s.charAt(i+2)){\n         \
    \       o = false;\n                break;\n            }\n            else{\n\
    \                o = true;\n            }\n            i++;\n        }\n     \
    \   return o;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return s.length() >= 3\n            && IntStream.range(0, s.length() - 2)\n\
    \                .allMatch(i -> s.charAt(i) != s.charAt(i + 1)\n             \
    \       && s.charAt(i) != s.charAt(i + 2)\n                    && s.charAt(i +\
    \ 1) != s.charAt(i + 2));\n}\n    public static void main(String[] args) {\n \
    \   assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    //your code goes here\n}\n    public static void main(String[] args) {\n\
    \    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp1cp45z8o.java:21: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Write your code here.\n        for (int i = 2; i < s.length(); i++) {\n\
    \            if (s.charAt(i) == s.charAt(i - 1) && s.charAt(i) == s.charAt(i -\
    \ 2)) {\n                return false;\n            }\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe12xyql_.java:29)\n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n \
    \           }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpss8_0bso.java:34)\n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    //return true;\n        return !(s.length() < 3 || s.chars().allMatch(i ->\
    \ i == s.charAt(0)));\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy132xduz.java:27)\n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    throw new RuntimeException(\"Not implemented\");\n}\n    public static void\
    \ main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.isHappy(tmpjostikgs.java:20)\n\tat Problem.main(tmpjostikgs.java:23)\n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return s.length() < 3 ? false : IntStream.range(0, s.length() - 2).mapToObj(i\
    \ -> s.substring(i, i + 3)).distinct().count() == s.length() - 2;\n}\n    public\
    \ static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfjmhajz3.java:26)\n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Write your code here\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbfsa95k5.java:24)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Your solution here\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjkkfnztm.java:26)\n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return false;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6imzwfmt.java:25)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        char\
    \ firstChar = s.charAt(0);\n        char secondChar = s.charAt(1);\n        for\
    \ (int i = 2; i < s.length(); i++) {\n            char currentChar = s.charAt(i);\n\
    \            if (currentChar == firstChar || currentChar == secondChar) {\n  \
    \              return false;\n            }\n            firstChar = secondChar;\n\
    \            secondChar = currentChar;\n        }\n        return true;\n}\n \
    \   public static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return false;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6imzwfmt.java:25)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return (s.length() >= 3 && s.substring(0,3).chars().distinct().count() ==\
    \ 3);\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp652y2qe2.java:30)\n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    int len = s.length();\n        if (len < 3) return false;\n        for (int\
    \ i = 0; i < len - 2; i++) {\n            int cur = (int) s.charAt(i);\n     \
    \       int next = (int) s.charAt(i + 1);\n            int nextNext = (int) s.charAt(i\
    \ + 2);\n            if (cur == next || cur == nextNext || next == nextNext) return\
    \ false;\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Write your code here.\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8kh5ls2e.java:24)\n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Your code here\n        // You should return True or False\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmlb132de.java:25)\n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    String result = \"\";\n        String[] array = s.split(\"\");\n        if\
    \ (array.length < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < array.length; i++) {\n            if (i % 3 == 0) {\n           \
    \     if (i == 0) {\n                    result += array[i];\n               \
    \ } else {\n                    if (result.indexOf(array[i]) == -1) {\n      \
    \                  result += array[i];\n                    } else {\n       \
    \                 return false;\n                    }\n                }\n  \
    \          }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_lsmgb9h.java:44)\n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return false;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6imzwfmt.java:25)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return true;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqib57yue.java:23)\n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        char[]\
    \ chars = s.toCharArray();\n        Set<Character> set = new HashSet<>();\n  \
    \      for (int i = 0; i < chars.length - 2; i++) {\n            set.add(chars[i]);\n\
    \            set.add(chars[i + 1]);\n            set.add(chars[i + 2]);\n    \
    \        if (set.size() == 3) {\n                return true;\n            }\n\
    \            set.clear();\n        }\n        return false;\n}\n    public static\
    \ void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoeo98gd6.java:44)\n"
  stdout: ''
  timestamp: 1660008829
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        boolean\
    \ output = true;\n        for (int i = 0; i < s.length() - 2; i++) {\n       \
    \     if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) ||\
    \ s.charAt(i + 1) == s.charAt(i + 2)) {\n                output = false;\n   \
    \             break;\n            }\n        }\n        return output;\n}\n  \
    \  public static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008828
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return s.length() >= 3 &&\n                IntStream.range(0, s.length()\
    \ - 2)\n                        .mapToObj(i -> s.substring(i, i + 3))\n      \
    \                  .allMatch(t -> t.chars().distinct().count() == 3);\n}\n   \
    \ public static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // TODO: implement here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1l7bgwea.java:26)\n"
  stdout: ''
  timestamp: 1660008829
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    boolean isHappy = true;\n        if (s.length() < 3) {\n            isHappy\
    \ = false;\n        } else {\n            for (int i = 0; i < s.length() - 2;\
    \ i++) {\n                char a = s.charAt(i);\n                char b = s.charAt(i\
    \ + 1);\n                char c = s.charAt(i + 2);\n                if (a == b\
    \ || b == c || a == c) {\n                    isHappy = false;\n             \
    \       break;\n                }\n            }\n        }\n        return isHappy;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // First we separate out the substring into three char substring.\n     \
    \   // For example \"abcd\" becomes [\"abc\", \"bcd\"]\n        ArrayList<String>\
    \ substring = new ArrayList<>();\n        for (int i = 0; i < s.length() - 2;\
    \ i++) {\n            substring.add(s.substring(i, i + 3));\n        }\n     \
    \   // The ArrayList<String> is converted to ArrayList<char[]> using map.\n  \
    \      // For example [\"abc\", \"bcd\"] becomes [{'a', 'b', 'c'}, {'b', 'c',\
    \ 'd'}]\n        ArrayList<char[]> subs = substring.stream().map(String::toCharArray).collect(Collectors.toCollection(ArrayList::new));\n\
    \        // The ArrayList<char[]> is converted to ArrayList<ArrayList<Character>>\
    \ using map.\n        // For example [{'a', 'b', 'c'}, {'b', 'c', 'd'}] becomes\
    \ [['a', 'b', 'c'], ['b', 'c', 'd']]\n        ArrayList<ArrayList<Character>>\
    \ subList = subs.stream().map(x -> {\n            ArrayList<Character> a = new\
    \ ArrayList<>();\n            for (char c : x) {\n                a.add(c);\n\
    \            }\n            return a;\n        }).collect(Collectors.toCollection(ArrayList::new));\n\
    \        // Since we want to check for the existence of three consecutive duplicate\
    \ characters.\n        // We use groupBy with the return type being String.\n\
    \        // For example [['a', 'b', 'c'], ['b', 'c', 'd']] becomes [{\"a\": ['a',\
    \ 'b', 'c'], \"b\": ['b', 'c', 'd']}]\n        List<String> groupedSubList = subList.stream().map(x\
    \ -> {\n            HashMap<Character, ArrayList<Character>> grouped = x.stream().collect(Collectors.groupingBy(Function.identity(),\
    \ HashMap::new, Collectors.toCollection(ArrayList::new)));\n            return\
    \ grouped.toString();\n        }).collect(Collectors.\n}\n    public static void\
    \ main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe36pfvuz.java:44: error: <identifier> expected\n        }).collect(Collectors.\n\
    \                              ^\n1 error\n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) return false;\n        for (int i = 0; i < s.length()\
    \ - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) ==\
    \ s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return IntStream.range(0, s.length() - 2)\n            .allMatch(i -> s.charAt(i)\
    \ != s.charAt(i + 1) || s.charAt(i) != s.charAt(i + 2));\n}\n    public static\
    \ void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjbz68zrs.java:24)\n"
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return true;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqib57yue.java:23)\n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n \
    \           }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpss8_0bso.java:34)\n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // add your code here\n\n}\n    public static void main(String[] args) {\n\
    \    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp74j3jv2w.java:22: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) ==\
    \ s.charAt(i + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return\
    \ false;\n            }\n        }\n        return s.length() >= 3;\n}\n    public\
    \ static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps0ic0w3o.java:31)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // By sliding window of size 3, we can check to see if each 3 consecutive\
    \ letters are distinct.\n        // If not, then we know that the string is not\
    \ happy.\n        // Otherwise, we can check the next 3 consecutive letters to\
    \ see if they are distinct.\n        if (s.length() < 3) {\n            return\
    \ false;\n        }\n        for (int i = 0; i <= s.length() - 3; i++) {\n   \
    \         if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2)\
    \ || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n  \
    \          }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return (s.length() > 2) && s.chars().distinct().count() == s.length();\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp52iql147.java:29)\n"
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return false;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6imzwfmt.java:25)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Check for the basic case that s is at least 3 letters long\n        if\
    \ (s.length() < 3) {\n            return false;\n        }\n        // We need\
    \ to check 3 letters at a time:\n        // For each letter, move forward 3 letter\
    \ and make sure that we have not seen the next three letters before\n        //\
    \ Note: If we are close to the end of the string, then don't check\n        int\
    \ i = 0;\n        Set<String> seen = new HashSet<>();\n        while (i < s.length()\
    \ - 2) {\n            String three_letter = s.substring(i, i + 3);\n         \
    \   if (seen.contains(three_letter)) {\n                return false;\n      \
    \      }\n            seen.add(three_letter);\n            i += 1;\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgmwuourc.java:43)\n"
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return isHappy(s, 0);\n}\n    public static void main(String[] args) {\n\
    \    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplohfh16j.java:20: error: method isHappy in class Problem cannot\
    \ be applied to given types;\n        return isHappy(s, 0);\n               ^\n\
    \  required: String\n  found:    String,int\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return false;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6imzwfmt.java:25)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Iterate through the characters in the String and check if they are all\
    \ unique\n        for (int i = 0; i < s.length() - 2; i += 1) {\n            if\
    \ (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i\
    \ + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n \
    \       }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) ==\
    \ (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmzxn5kux.java:29)\n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return true;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqib57yue.java:23)\n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // TODO: Implement your solution here\n        return false;\n}\n    public\
    \ static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn82o1yuz.java:26)\n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // TODO: Your code here.\n        throw new UnsupportedOperationException(\"\
    Waiting to be implemented.\");\n}\n    public static void main(String[] args)\
    \ {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) ==\
    \ (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Waiting\
    \ to be implemented.\n\tat Problem.isHappy(tmpkm_uh347.java:21)\n\tat Problem.main(tmpkm_uh347.java:24)\n"
  stdout: ''
  timestamp: 1660008829
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            String test = s.substring(i,\
    \ i + 3);\n            char first = test.charAt(0);\n            char second =\
    \ test.charAt(1);\n            char third = test.charAt(2);\n            if (first\
    \ == second || second == third || first == third) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    throw new RuntimeException(\"Not implemented\");\n}\n    public static void\
    \ main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented\n\
    \tat Problem.isHappy(tmpjostikgs.java:20)\n\tat Problem.main(tmpjostikgs.java:23)\n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    int size = s.length();\n        if (size < 3) return false;\n        HashSet<Character>\
    \ seen = new HashSet<>();\n        for (int i = 0; i < size; i++) {\n        \
    \    if (i+2 < size) {\n                char first = s.charAt(i);\n          \
    \      char second = s.charAt(i+1);\n                char third = s.charAt(i+2);\n\
    \                if (first == second || second == third || first == third) return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Add your code here\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr50povy5.java:26)\n"
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Write your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpew01meje.java:26)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    boolean happy = false;\n        // char[] arr = s.toCharArray();\n      \
    \  for (int i = 0; i < s.length() - 3; i++) {\n            Set<Character> set\
    \ = new HashSet<>();\n            set.add(s.charAt(i));\n            set.add(s.charAt(i\
    \ + 1));\n            set.add(s.charAt(i + 2));\n            if (set.size() ==\
    \ 3) {\n                happy = true;\n            } else {\n                happy\
    \ = false;\n                break;\n            }\n        }\n        return happy;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0b14wx9d.java:41)\n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 2; i < s.length(); i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ - 1) && s.charAt(i) == s.charAt(i - 2)) {\n                return false;\n \
    \           }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjmgoqbyl.java:34)\n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // write your code in Java SE 8\n        if (s.length() < 3) {\n        \
    \    return false;\n        }\n        if (s.length() % 3 != 0) {\n          \
    \  return false;\n        }\n        for (int i = 0; i < s.length(); i += 3) {\n\
    \            String test = s.substring(i, i + 3);\n            Set<Character>\
    \ set = new HashSet<>();\n            for (int j = 0; j < test.length(); j++)\
    \ {\n                set.add(test.charAt(j));\n            }\n            if (set.size()\
    \ != 3) {\n                return false;\n            }\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8trag78e.java:42)\n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    int n = s.length();\n        for (int i = 2; i < n; i++) {\n            char\
    \ ch1 = s.charAt(i - 2);\n            char ch2 = s.charAt(i - 1);\n          \
    \  char ch3 = s.charAt(i);\n            if (ch1 == ch2 && ch2 == ch3) {\n    \
    \            return false;\n            }\n        }\n        return true;\n}\n\
    \    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprvo_sfy2.java:32)\n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    int l = s.length();\n        if (l < 3) return false;\n        for (int i\
    \ = 0; i < l - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i)\
    \ == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n              \
    \  return false;\n            }\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) return false;\n        for (int i = 0; i < s.length()\
    \ - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) ==\
    \ s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) ==\
    \ s.charAt(i + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return\
    \ false;\n            }\n        }\n        return s.length() >= 3;\n}\n    public\
    \ static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps0ic0w3o.java:31)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    boolean isHappy = true;\n        int i = 0;\n        while (i < s.length()\
    \ - 2) {\n            String s1 = s.substring(i, i + 1);\n            String s2\
    \ = s.substring(i + 1, i + 2);\n            String s3 = s.substring(i + 2, i +\
    \ 3);\n            if (s1.equals(s2) || s1.equals(s3) || s2.equals(s3)) {\n  \
    \              isHappy = false;\n                break;\n            }\n     \
    \       i++;\n        }\n        return isHappy;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpod74jg3l.java:35)\n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    throw new NotImplementedError();\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ps88s0c.java:20: error: cannot find symbol\n        throw new\
    \ NotImplementedError();\n                  ^\n  symbol:   class NotImplementedError\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // start your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpypfqwz65.java:26)\n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // YOUR CODE HERE\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8yjf_np8.java:26)\n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) return false;\n        else {\n            for (int i\
    \ = 0; i < s.length() - 2; i++) {\n                if (s.charAt(i) == s.charAt(i\
    \ + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2))\
    \ return false;\n            }\n            return true;\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) ==\
    \ s.charAt(i + 1) && s.charAt(i) == s.charAt(i + 2))\n                return false;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) ==\
    \ (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_wzd39kh.java:27)\n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Write your code here\n        int len = s.length();\n        for (int\
    \ i = 0; i <= len - 3; i++){\n            if (s.charAt(i) == s.charAt(i + 1) ||\
    \ s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)){\n   \
    \             return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnrn5186o.java:30)\n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Write your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpew01meje.java:26)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Your code here\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjqwax7e5.java:26)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return false;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6imzwfmt.java:25)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \  for (int i = 0; i < s.length() - 2; i++) {\n        char a = s.charAt(i);\n\
    \        char b = s.charAt(i + 1);\n        char c = s.charAt(i + 2);\n      \
    \  if (a == b || b == c || a == c) return false;\n      }\n      return true;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcmazq8f0.java:29)\n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return s.length() >= 3 &&\n               IntStream.range(0, s.length() -\
    \ 2)\n                        .allMatch(i -> s.charAt(i) != s.charAt(i + 1) &&\n\
    \                                       s.charAt(i) != s.charAt(i + 2) &&\n  \
    \                                     s.charAt(i + 1) != s.charAt(i + 2));\n}\n\
    \    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // TODO: Implement\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmnncegom.java:26)\n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            for (int j = i + 1; j <\
    \ s.length() - 1; j++) {\n                for (int k = j + 1; k < s.length();\
    \ k++) {\n                    if (s.charAt(i) == s.charAt(j) && s.charAt(j) ==\
    \ s.charAt(k)) {\n                        return false;\n                    }\n\
    \                }\n            }\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfpjd3456.java:38)\n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return false;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6imzwfmt.java:25)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n \
    \           }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpss8_0bso.java:34)\n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) return false;\n        for (int i = 0; i < s.length()\
    \ - 2; i++) {\n            String sub = s.substring(i, i + 3);\n            Set<Character>\
    \ set = new HashSet<>();\n            for (char c : sub.toCharArray()) {\n   \
    \             set.add(c);\n            }\n            if (set.size() < 3) return\
    \ false;\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n \
    \           }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpss8_0bso.java:34)\n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            char a = s.charAt(i);\n\
    \            char b = s.charAt(i + 1);\n            char c = s.charAt(i + 2);\n\
    \            if (a == b || b == c || a == c) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008830
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) return false;\n        for (int i = 0; i < s.length()\
    \ - 2; i++) {\n            String a = \"\" + s.charAt(i);\n            String\
    \ b = \"\" + s.charAt(i + 1);\n            String c = \"\" + s.charAt(i + 2);\n\
    \            if (a.equals(b) || a.equals(c) || b.equals(c)) {\n              \
    \  return false;\n            }\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008830
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return (s.length() < 3) ? false : IntStream.range(0, s.length() - 2).allMatch(i\
    \ -> s.charAt(i) != s.charAt(i + 1) && s.charAt(i) != s.charAt(i + 2) && s.charAt(i\
    \ + 1) != s.charAt(i + 2));\n}\n    public static void main(String[] args) {\n\
    \    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Write your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpew01meje.java:26)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    int i = 0;\n        while (i < s.length() - 2) {\n            if (s.charAt(i)\
    \ == s.charAt(i + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return\
    \ false;\n            }\n            i++;\n        }\n        return true;\n}\n\
    \    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprvzz_h3v.java:30)\n"
  stdout: ''
  timestamp: 1660008831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return false;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6imzwfmt.java:25)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // YOUR CODE HERE\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8yjf_np8.java:26)\n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // TODO: Write code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq6ec39rh.java:26)\n"
  stdout: ''
  timestamp: 1660008831
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // write your code here\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_tbygg97.java:26)\n"
  stdout: ''
  timestamp: 1660008831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n \
    \           }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpss8_0bso.java:34)\n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        char[]\
    \ cs = s.toCharArray();\n        for (int i = 0; i < cs.length - 2; i++) {\n \
    \           if (cs[i] == cs[i + 1] || cs[i] == cs[i + 2] || cs[i + 1] == cs[i\
    \ + 2]) {\n                return false;\n            }\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008831
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) return false;\n        for (int i = 0; i < s.length()\
    \ - 2; i++) {\n            char a = s.charAt(i);\n            char b = s.charAt(i\
    \ + 1);\n            char c = s.charAt(i + 2);\n            if (a == b || b ==\
    \ c || a == c) return false;\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n \
    \           }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpss8_0bso.java:34)\n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \  boolean flag = true;\n      for(int i = 0; i < s.length() - 2; i++) {\n   \
    \     String temp = s.substring(i, i + 3);\n        flag = temp.charAt(0) != temp.charAt(1)\
    \ && temp.charAt(1) != temp.charAt(2) && temp.charAt(0) != temp.charAt(2);\n \
    \       if(!flag) {\n          break;\n        }\n      }\n      return flag;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbgfd56dy.java:31)\n"
  stdout: ''
  timestamp: 1660008831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        int\
    \ length = s.length();\n        for (int i = 0; i < length; i++) {\n         \
    \   char l1 = s.charAt(i);\n            char l2 = s.charAt((i + 1) % length);\n\
    \            char l3 = s.charAt((i + 2) % length);\n            if (l1 == l2 ||\
    \ l1 == l3 || l2 == l3) {\n                return false;\n            }\n    \
    \    }\n        return true;\n}\n    public static void main(String[] args) {\n\
    \    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiju6t46d.java:41)\n"
  stdout: ''
  timestamp: 1660008831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n\t\t\
    // Write your code here\n\t\treturn true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnttayfmx.java:24)\n"
  stdout: ''
  timestamp: 1660008831
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    int len = s.length();\n        if (len < 3) {\n            return false;\n\
    \        }\n        for (int i = 0; i <= len - 3; i++) {\n            if (s.charAt(i)\
    \ == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i\
    \ + 2)) {\n                return false;\n            }\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008831
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // so we want to check if the string is at least 3 letters long, and then\
    \ we want to check if each 3 consecutive letters are different.\n        // we\
    \ can do this with a loop that goes through the string and checks the adjacent\
    \ elements.\n        // if the length is less than 3, we can just return false.\n\
    \        if (s.length() < 3) {\n            return false;\n        }\n       \
    \ // we're going to use a loop to go through each element and check the adjacent\
    \ ones.\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i)\
    \ == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i\
    \ + 2)) {\n                return false;\n            }\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008831
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return s.length() >= 3 && IntStream.range(0, s.length() - 2).allMatch(i ->\
    \ s.charAt(i) != s.charAt(i + 1) && s.charAt(i) != s.charAt(i + 2) && s.charAt(i\
    \ + 1) != s.charAt(i + 2));\n}\n    public static void main(String[] args) {\n\
    \    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008831
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    boolean result = false;\n        if (s.length() >= 3) {\n            // initialize\
    \ Boolean flag\n            boolean isHappy = true;\n            // iterate through\
    \ the letters in the string\n            for (int i = 0; i < s.length() - 2; i++)\
    \ {\n                // get the current letter\n                char curr = s.charAt(i);\n\
    \                // get the following two letters in the string\n            \
    \    char next = s.charAt(i + 1);\n                char next2 = s.charAt(i + 2);\n\
    \                // compare the current letter with the next two letters\n   \
    \             if (curr == next || curr == next2 || next == next2) {\n        \
    \            // if there are any matches, set the flag to false\n            \
    \        isHappy = false;\n                }\n            }\n            // if\
    \ the flag is true, return true\n            if (isHappy) {\n                result\
    \ = true;\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return s.length() >= 3 &&\n                s.chars().mapToObj(x -> (char)\
    \ x).collect(Collectors.toList())\n                        .stream().collect(Collectors.groupingBy(x\
    \ -> x, Collectors.counting()))\n                        .values().stream().noneMatch(x\
    \ -> x >= 3);\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpajpi3rjx.java:29)\n"
  stdout: ''
  timestamp: 1660008831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Implement me!\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpst2hdsk9.java:26)\n"
  stdout: ''
  timestamp: 1660008831
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // Solution : Given a string of length 3 or more,\n        //           \
    \  we check that every 3 consecutive letters are distinct\n        //        \
    \     by using an int[] array (a) and storing the characters' ASCII code.\n  \
    \      //             We check that a[0] != a[1] && a[1] != a[2] && a[0] != a[2].\n\
    \        //             We then shift the array, so that a[0] becomes a[1], and\
    \ a[1] becomes a[2],\n        //             and so on, and check the new shifted\
    \ array with the int array from the first 3 characters.\n        //          \
    \   We do this as long as we haven't reached the end of the string.\n        if\
    \ (s.length() < 3) return false;\n        int[] a = new int[3];\n        for (int\
    \ i = 0; i < 3; i++) {\n            a[i] = (int) s.charAt(i);\n        }\n   \
    \     if (a[0] != a[1] && a[1] != a[2] && a[0] != a[2]) {\n            for (int\
    \ i = 1; i < s.length() - 2; i++) {\n                a[0] = a[1];\n          \
    \      a[1] = a[2];\n                a[2] = (int) s.charAt(i + 2);\n         \
    \       if (a[0] == a[1] || a[1] == a[2] || a[0] == a[2]) return false;\n    \
    \        }\n            return true;\n        }\n        return false;\n}\n  \
    \  public static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        Set<Character>\
    \ seen = new HashSet<>();\n        for (int i = 0; i < s.length() - 2; i++) {\n\
    \            seen.add(s.charAt(i));\n            if (seen.contains(s.charAt(i\
    \ + 1)) || seen.contains(s.charAt(i + 2))) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0tb2zm3l.java:38)\n"
  stdout: ''
  timestamp: 1660008831
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) return false;\n        for (int i = 0; i <= s.length()\
    \ - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) ==\
    \ s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    //YOUR CODE HERE\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwavu9kyy.java:24)\n"
  stdout: ''
  timestamp: 1660008831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return (s.length() >= 3 && s.chars().distinct().count() == s.length());\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp08eksmte.java:29)\n"
  stdout: ''
  timestamp: 1660008831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) ==\
    \ s.charAt(i + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return\
    \ false;\n            }\n        }\n        return s.length() >= 3;\n}\n    public\
    \ static void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps0ic0w3o.java:31)\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    // put your code here\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb4xpae9r.java:26)\n"
  stdout: ''
  timestamp: 1660008831
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    int n = s.length();\n        if (n < 3) {\n            return false;\n  \
    \      }\n        for (int i = 0; i + 2 < n; i++) {\n            char c = s.charAt(i);\n\
    \            char d = s.charAt(i + 1);\n            char e = s.charAt(i + 2);\n\
    \            if (c == d || d == e || c == e) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008831
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < s.length() - 2; i++) {\n            char c = s.charAt(i);\n\
    \            char c1 = s.charAt(i + 1);\n            char c2 = s.charAt(i + 2);\n\
    \            if (c == c1 || c == c2 || c1 == c2) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008831
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) return false;\n        for (int i = 0; i < s.length()\
    \ - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) ==\
    \ s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) return false;\n        char[] chars = s.toCharArray();\n\
    \        for (int i = 0; i < chars.length - 2; i++) {\n            if (chars[i]\
    \ == chars[i + 1] || chars[i] == chars[i + 2] || chars[i + 1] == chars[i + 2])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    return false;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6imzwfmt.java:25)\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) return false;\n        for (int i = 0; i <= s.length()\
    \ - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) ==\
    \ s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008831
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        for\
    \ (int i = 2; i < s.length(); i++) {\n            if (s.charAt(i) == s.charAt(i\
    \ - 1) && s.charAt(i) == s.charAt(i - 2)) {\n                return false;\n \
    \           }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"\
    )) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjmgoqbyl.java:34)\n"
  stdout: ''
  timestamp: 1660008830
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    if (s.length() < 3) {\n            return false;\n        }\n        int\
    \ i = 0;\n        while (i < s.length() - 2) {\n            if (s.charAt(i) ==\
    \ s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i\
    \ + 2)) {\n                return false;\n            }\n            i++;\n  \
    \      }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) ==\
    \ (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008832
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // Your task is to check\
    \ if the string is happy or not.\n    // A string is happy if its length is at\
    \ least 3 and every 3 consecutive letters are distinct\n    // For example:\n\
    \    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd)\
    \ => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    //\
    \ is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n    \
    \    for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) ==\
    \ s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i\
    \ + 2)) {\n                return false;\n            }\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg73cc083.java:28)\n"
  stdout: ''
  timestamp: 1660008825
