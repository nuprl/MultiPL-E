language: java
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increase = true;\n        boolean decrease = true;\n        for (int i = 1;\
    \ i < l.size(); i++) {\n            increase = increase && (l.get(i - 1) <= l.get(i));\n\
    \            decrease = decrease && (l.get(i - 1) >= l.get(i));\n        }\n \
    \       return increase || decrease;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) {\n            return true;\n        }\n\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i\
    \ + 1)) {\n                    return false;\n                }\n            }\
    \ else {\n                if (l.get(i) < l.get(i + 1)) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int size = l.size();\n        if (size < 3) return true;\n        int d\
    \ = l.get(1) - l.get(0);\n        if (d == 0) return false;\n        for (int\
    \ i = 2; i < size; i++) {\n            int cur = l.get(i);\n            int prev\
    \ = l.get(i - 1);\n            if (prev == cur) return false;\n            if\
    \ (cur - prev != d) return false;\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2xgxzjw6.java:30)\n"
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i\
    \ + 1)) {\n                decreasing = false;\n            }\n            if\
    \ (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i\
    \ + 1)) {\n                decreasing = false;\n            }\n            if\
    \ (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int first = l.get(0);\n        boolean inc = true;\n        boolean dec\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i)\
    \ < first) {\n                inc = false;\n            }\n            if (l.get(i)\
    \ > first) {\n                dec = false;\n            }\n            first =\
    \ l.get(i);\n        }\n        return inc || dec;\n}\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i\
    \ + 1)) {\n                increasing = false;\n            }\n            if\
    \ (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      System.out.println(l);\n        boolean decreasing = false;\n        boolean\
    \ increasing = false;\n        for (int i = 0; i < l.size() - 1; i++) {\n    \
    \        if (l.get(i) > l.get(i + 1))\n                decreasing = true;\n  \
    \          if (l.get(i) < l.get(i + 1))\n                increasing = true;\n\
    \        }\n        return (decreasing && !increasing) || (!decreasing && increasing);\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnwn95y42.java:36)\n"
  stdout: '[1, 2, 4, 10]

    [1, 2, 4, 20]

    [1, 20, 4, 10]

    [4, 1, 0, -10]

    [4, 1, 1, 0]

    [1, 2, 3, 2, 5, 60]

    [1, 2, 3, 4, 5, 60]

    [9, 9, 9, 9]

    '
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      ArrayList<Integer> sorted = new ArrayList<Integer>(l);\n        Collections.sort(sorted);\n\
    \        if (sorted.equals(l)) {\n            return true;\n        }\n      \
    \  Collections.reverse(sorted);\n        if (sorted.equals(l)) {\n           \
    \ return true;\n        }\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return monotonic(l, 0, 0);\n}\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps6_v860e.java:17: error: method monotonic in class Problem cannot\
    \ be applied to given types;\n        return monotonic(l, 0, 0);\n           \
    \    ^\n  required: ArrayList<Integer>\n  found:    ArrayList<Integer>,int,int\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      // Determine if list is monotonically increasing or decreasing\n      \
    \  boolean increasing = true;\n        boolean decreasing = true;\n        if\
    \ (l.size() == 1) {\n            return true;\n        }\n        for (int i =\
    \ 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n  \
    \              increasing = false;\n            }\n            if (l.get(i) <\
    \ l.get(i + 1)) {\n                decreasing = false;\n            }\n      \
    \  }\n        return increasing || decreasing;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  int prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n      \
    \      if (prev < l.get(i)) {\n                decreasing = false;\n         \
    \   }\n            if (prev > l.get(i)) {\n                increasing = false;\n\
    \            }\n            prev = l.get(i);\n        }\n        return increasing\
    \ || decreasing;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() == 0) return true;\n        boolean inc = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n\
    \                inc = false;\n                break;\n            }\n       \
    \ }\n        if (inc) return true;\n        boolean dec = true;\n        for (int\
    \ i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n  \
    \              dec = false;\n                break;\n            }\n        }\n\
    \        return dec;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() == 0) {\n            return true;\n        }\n        Boolean\
    \ is_increasing = null;\n        for (int i = 1; i < l.size(); i++) {\n      \
    \      int prev = l.get(i - 1);\n            int curr = l.get(i);\n          \
    \  int difference = curr - prev;\n            if (difference != 0) {\n       \
    \         if (is_increasing == null) {\n                    is_increasing = difference\
    \ > 0;\n                } else {\n                    boolean diff_sign = difference\
    \ > 0;\n                    if (diff_sign != is_increasing) {\n              \
    \          return false;\n                    }\n                }\n         \
    \   }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n\t\
    return (l.stream().sorted().collect(Collectors.toList()).equals(l) ||\n\t\tl.stream().sorted(Collections.reverseOrder()).collect(Collectors.toList()).equals(l));\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      // ~~~~~~~ Solution ~~~~~~~\n        int c = 0;\n        if (l.size() <\
    \ 2) {\n            return true;\n        }\n        for (int i = 0; i < l.size()\
    \ - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                c +=\
    \ 1;\n            } else if (l.get(i) < l.get(i + 1)) {\n                c -=\
    \ 1;\n            }\n        }\n        return c <= 0;\n        // ~~~~~~~ Solution\
    \ ~~~~~~~\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphn_0rtd6.java:35)\n"
  stdout: ''
  timestamp: 1660011643
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean isMonotonic = true;\n        int direction = -2;\n        for (int\
    \ i = 0; i < l.size() - 1; i++) {\n            int dir = l.get(i).compareTo(l.get(i\
    \ + 1));\n            if (direction == -2) {\n                direction = dir;\n\
    \            } else if (direction != dir) {\n                isMonotonic = false;\n\
    \                break;\n            }\n        }\n        return isMonotonic;\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn5zt32yv.java:35)\n"
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      // Write your code here!\n        boolean increasing = true;\n        boolean\
    \ decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n     \
    \       if (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n\
    \            }\n            if (l.get(i) < l.get(i + 1)) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) return true;\n        int direction = 0;\n        int\
    \ prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n           \
    \ int curr = l.get(i);\n            if (direction == 0) {\n                if\
    \ (curr > prev) direction = 1;\n                else if (curr < prev) direction\
    \ = -1;\n            } else if (direction == 1) {\n                if (curr <\
    \ prev) return false;\n            } else if (direction == -1) {\n           \
    \     if (curr > prev) return false;\n            }\n            prev = curr;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      // FILL ME IN\n        boolean temp = true;\n        boolean temp2 = true;\n\
    \        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) >\
    \ l.get(i + 1)) {\n                temp = false;\n            }\n            if\
    \ (l.get(i) < l.get(i + 1)) {\n                temp2 = false;\n            }\n\
    \        }\n        return temp || temp2;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return l.stream().allMatch(it -> it.equals(l.get(0)))\n            || IntStream.range(0,\
    \ l.size() - 1).allMatch(i -> l.get(i) <= l.get(i + 1))\n            || IntStream.range(0,\
    \ l.size() - 1).allMatch(i -> l.get(i) >= l.get(i + 1));\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) {\n            return true;\n        }\n        int\
    \ first = l.get(0);\n        int second = l.get(1);\n        boolean ascending\
    \ = first < second;\n        boolean descending = first > second;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n\
    \                ascending = true;\n            }\n            if (l.get(i) <\
    \ l.get(i - 1)) {\n                descending = true;\n            }\n       \
    \ }\n        return ascending || descending;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpthcalhfk.java:37)\n"
  stdout: ''
  timestamp: 1660011643
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int last;\n        int diff;\n        int sign = 1;\n        if (l.size()\
    \ == 0) {\n            return true;\n        }\n        last = l.get(0);\n   \
    \     for (int i = 1; i < l.size(); i++) {\n            diff = l.get(i) - last;\n\
    \            if (diff == 0) {\n                continue;\n            }\n    \
    \        if (sign == 1) {\n                sign = Math.signum(diff);\n       \
    \     }\n            if (Math.signum(diff) != sign) {\n                return\
    \ false;\n            }\n            last = l.get(i);\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplk89wl2i.java:30: error: incompatible types: possible lossy conversion\
    \ from float to int\n                sign = Math.signum(diff);\n             \
    \                     ^\n1 error\n"
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean direction = true; // Initialized to true, meaning that if the function\
    \ is monotonic, it is increasing.\n        boolean wasDirectionChosen = false;\
    \ // Stores if the direction has already been defined.\n        int previous =\
    \ l.get(0); // Stores the previous element.\n        for (int i = 1; i < l.size();\
    \ i++) {\n            int current = l.get(i);\n            if (current == previous)\
    \ {\n                continue;\n            }\n            if (!wasDirectionChosen)\
    \ {\n                wasDirectionChosen = true;\n                direction = current\
    \ > previous;\n            }\n            if (direction && current < previous)\
    \ {\n                return false;\n            }\n            if (!direction\
    \ && current > previous) {\n                return false;\n            }\n   \
    \         previous = current;\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) return true;\n        int left = 0;\n        int right\
    \ = l.size() - 1;\n        while (left < right) {\n            if (l.get(left)\
    \ > l.get(left + 1)) {\n                // Decreasing\n                while (left\
    \ < right) {\n                    if (l.get(left) < l.get(left + 1)) return false;\n\
    \                    left += 1;\n                }\n            } else if (l.get(left)\
    \ < l.get(left + 1)) {\n                // Increasing\n                while (left\
    \ < right) {\n                    if (l.get(left) > l.get(left + 1)) return false;\n\
    \                    left += 1;\n                }\n            } else {\n   \
    \             // Equal\n                left += 1;\n            }\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011644
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int n = l.size();\n        int first = l.get(0);\n        boolean dec =\
    \ first > l.get(n - 1);\n        for (int i = 1; i < n; i++) {\n            int\
    \ current = l.get(i);\n            if (dec) {\n                if (current > first)\
    \ {\n                    return false;\n                }\n            } else\
    \ {\n                if (current < first) {\n                    return false;\n\
    \                }\n            }\n            first = current;\n        }\n \
    \       return true;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011644
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() < 3) return true;\n        return l.get(0) <= l.get(1) &&\
    \ l.get(l.size() - 1) <= l.get(l.size() - 2) || l.get(0) >= l.get(1) && l.get(l.size()\
    \ - 1) >= l.get(l.size() - 2);\n}\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxlmwn9ol.java:21)\n"
  stdout: ''
  timestamp: 1660011644
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() < 2) return true;\n        boolean increasing = l.get(0) <\
    \ l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if\
    \ (increasing) {\n                if (l.get(i) > l.get(i + 1)) {\n           \
    \         return false;\n                }\n            } else {\n           \
    \     if (l.get(i) < l.get(i + 1)) {\n                    return false;\n    \
    \            }\n            }\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011644
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return IntStream.range(0, l.size() - 1).allMatch(\n            (int i)\
    \ -> l.get(i) >= l.get(i + 1) || l.get(i) <= l.get(i + 1)\n        );\n}\n   \
    \ public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgjcmonh5.java:24)\n"
  stdout: ''
  timestamp: 1660011644
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) {\n            return true;\n        }\n        if (l.get(0)\
    \ < l.get(1)) {\n            for (int i = 1; i < l.size() - 1; i++) {\n      \
    \          if (l.get(i) > l.get(i + 1)) {\n                    return false;\n\
    \                }\n            }\n        } else if (l.get(0) > l.get(1)) {\n\
    \            for (int i = 1; i < l.size() - 1; i++) {\n                if (l.get(i)\
    \ < l.get(i + 1)) {\n                    return false;\n                }\n  \
    \          }\n        } else {\n            return monotonic(new ArrayList<Integer>(l.subList(1,\
    \ l.size())));\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011644
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) return true;\n        int d = l.get(1) - l.get(0);\n\
    \        if (d == 0) return monotonic(new ArrayList<Integer>(l.subList(1, l.size())));\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (d * (l.get(i) -\
    \ l.get(i - 1)) < 0) return false;\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011644
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) {\n            return true;\n        }\n        Integer\
    \ first = l.get(0);\n        Integer second = l.get(1);\n        if (first > second)\
    \ {\n            for (int i = 1; i < l.size(); i++) {\n                if (l.get(i)\
    \ > l.get(i - 1)) {\n                    return false;\n                }\n  \
    \          }\n        } else if (first < second) {\n            for (int i = 1;\
    \ i < l.size(); i++) {\n                if (l.get(i) < l.get(i - 1)) {\n     \
    \               return false;\n                }\n            }\n        } else\
    \ {\n            return false;\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp93t2p_mr.java:47)\n"
  stdout: ''
  timestamp: 1660011644
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n\t\t\
    // YOUR CODE HERE\n\t\treturn true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl_735wia.java:23)\n"
  stdout: ''
  timestamp: 1660011644
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      // TODO: Finish this method.\n        boolean increasing = true;\n    \
    \    boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++)\
    \ {\n            if (l.get(i) < l.get(i + 1))\n                decreasing = false;\n\
    \            if (l.get(i) > l.get(i + 1))\n                increasing = false;\n\
    \        }\n        return increasing || decreasing;\n}\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011644
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean incr = false;\n        boolean decr = false;\n        for (int\
    \ i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1)) {\n\
    \                incr = true;\n            }\n            if (l.get(i) > l.get(i\
    \ + 1)) {\n                decr = true;\n            }\n        }\n        return\
    \ incr ^ decr;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbzwmye5s.java:37)\n"
  stdout: ''
  timestamp: 1660011644
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() == 0) {\n            return true;\n        }\n        // At\
    \ this point l is non-empty. If the first element is the last element, there is\
    \ no\n        // monotonic property to check, but this is still monotonic.\n \
    \       if (l.get(0) == l.get(l.size() - 1)) {\n            return true;\n   \
    \     }\n        int sign = Integer.signum(l.get(0) - l.get(l.size() - 1));\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (Integer.signum(l.get(i\
    \ - 1) - l.get(i)) != sign) {\n                return false;\n            }\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd9ejj6pk.java:38)\n"
  stdout: ''
  timestamp: 1660011644
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return monotonic_(l,0,0);\n}\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9o7xdkl2.java:17: error: cannot find symbol\n        return monotonic_(l,0,0);\n\
    \               ^\n  symbol:   method monotonic_(ArrayList<Integer>,int,int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011644
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increase = true;\n        boolean decrease = true;\n        int\
    \ length = l.size();\n        for (int i = 0; i < length - 1; i++) {\n       \
    \     if (l.get(i) > l.get(i + 1)) {\n                increase = false;\n    \
    \        }\n            if (l.get(i) < l.get(i + 1)) {\n                decrease\
    \ = false;\n            }\n        }\n        return increase || decrease;\n}\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011644
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i\
    \ + 1)) {\n                increasing = false;\n            }\n            if\
    \ (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i\
    \ + 1)) {\n                increasing = false;\n            }\n            if\
    \ (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int i = 1;\n        while (i < l.size() && l.get(i - 1) <= l.get(i)) {\n\
    \            i++;\n        }\n        int j = i + 1;\n        while (j < l.size()\
    \ && l.get(j - 1) >= l.get(j)) {\n            j++;\n        }\n        return\
    \ j == l.size();\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz8hrzw3w.java:28)\n"
  stdout: ''
  timestamp: 1660011644
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return true;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp03ildil9.java:22)\n"
  stdout: ''
  timestamp: 1660011644
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i\
    \ + 1)) {\n                decreasing = false;\n            }\n            if\
    \ (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i\
    \ + 1)) {\n                decreasing = false;\n            }\n            if\
    \ (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n         \
    \   }\n        }\n        return (increasing || decreasing);\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011644
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean decreasing = true;\n        boolean increasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i + 1) < l.get(i))\n\
    \                increasing = false;\n            if (l.get(i + 1) > l.get(i))\n\
    \                decreasing = false;\n        }\n        return increasing ||\
    \ decreasing;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011644
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ incr = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++)\
    \ {\n            boolean incr2 = l.get(i) < l.get(i + 1);\n            if (incr\
    \ != incr2) {\n                return false;\n            }\n        }\n     \
    \   return true;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011644
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean monotonicIncrease = true;\n        boolean monotonicDecrease =\
    \ true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                monotonicIncrease = false;\n            }\n\
    \            if (l.get(i) < l.get(i + 1)) {\n                monotonicDecrease\
    \ = false;\n            }\n        }\n        return monotonicIncrease || monotonicDecrease;\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011644
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n\t\t\
    return false;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvxvlzawd.java:20)\n"
  stdout: ''
  timestamp: 1660011644
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() == 0) {\n            return true;\n        }\n        int\
    \ diff = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n           \
    \ if (diff > 0 && l.get(i) < l.get(i - 1)) {\n                return false;\n\
    \            }\n            if (diff < 0 && l.get(i) > l.get(i - 1)) {\n     \
    \           return false;\n            }\n        }\n        return true;\n}\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9to09lqh.java:35)\n"
  stdout: ''
  timestamp: 1660011645
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() == 0) {\n            return true;\n        }\n        boolean\
    \ ascending = true;\n        boolean descending = true;\n        int last = l.get(0);\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) >= last)\
    \ {\n                descending = false;\n            }\n            if (l.get(i)\
    \ <= last) {\n                ascending = false;\n            }\n            last\
    \ = l.get(i);\n        }\n        return ascending || descending;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6i89ll1m.java:39)\n"
  stdout: ''
  timestamp: 1660011645
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean inc = true;\n        boolean dec = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n      \
    \          inc = false;\n            }\n            if (l.get(i) > l.get(i - 1))\
    \ {\n                dec = false;\n            }\n        }\n        return inc\
    \ || dec;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011646
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) {\n            return true;\n        }\n\n        boolean\
    \ is_increasing = true;\n        boolean is_decreasing = true;\n\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i - 1) > l.get(i)) {\n\
    \                is_increasing = false;\n            }\n            if (l.get(i\
    \ - 1) < l.get(i)) {\n                is_decreasing = false;\n            }\n\
    \        }\n\n        return is_increasing || is_decreasing;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) {\n            return true;\n        }\n        int\
    \ change = l.get(1) - l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n\
    \            if (change != 0 && l.get(i) - l.get(i - 1) != change) {\n       \
    \         return false;\n            }\n        }\n        return true;\n}\n \
    \   public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1cv5i13e.java:29)\n"
  stdout: ''
  timestamp: 1660011646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return false;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjhur1vl4.java:20)\n"
  stdout: ''
  timestamp: 1660011646
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i\
    \ + 1)) {\n                decreasing = false;\n            }\n            if\
    \ (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  int i = 0;\n        while (i < l.size() - 1) {\n            if (l.get(i) >\
    \ l.get(i + 1)) {\n                increasing = false;\n            }\n      \
    \      if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n \
    \           }\n            i++;\n        }\n        return increasing || decreasing;\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n\t\
    if (l.size() < 2) return true;\n\tint counter = 0;\n\tfor (int i = 1; i < l.size();\
    \ i++) {\n\t    if (l.get(i) < l.get(i-1)) counter--;\n\t    else if (l.get(i)\
    \ > l.get(i-1)) counter++;\n\t}\n\treturn (counter == -l.size()+1 || counter ==\
    \ l.size()-1);\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdslnnyc7.java:30)\n"
  stdout: ''
  timestamp: 1660011646
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean is_increasing = true;\n        boolean is_decreasing = true;\n\
    \        int n = l.size();\n        for (int i = 0; i < n - 1; i++) {\n      \
    \      if (l.get(i) > l.get(i + 1)) {\n                is_increasing = false;\n\
    \            }\n            if (l.get(i) < l.get(i + 1)) {\n                is_decreasing\
    \ = false;\n            }\n        }\n        return is_increasing || is_decreasing;\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011646
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) return true;\n        int[] ar = l.stream().mapToInt(i\
    \ -> i).toArray();\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < ar.length; i++) {\n            if (ar[i]\
    \ < ar[i - 1]) {\n                increasing = false;\n            }\n       \
    \     if (ar[i] > ar[i - 1]) {\n                decreasing = false;\n        \
    \    }\n        }\n        return increasing || decreasing;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011646
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return IntStream.range(0, l.size() - 1).allMatch(i -> {\n            int\
    \ c = Integer.compare(l.get(i), l.get(i + 1));\n            return c == 0 || c\
    \ == -1;\n        }) || IntStream.range(0, l.size() - 1).allMatch(i -> {\n   \
    \         int c = Integer.compare(l.get(i), l.get(i + 1));\n            return\
    \ c == 0 || c == 1;\n        });\n}\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011646
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() == 0) return true;\n        boolean increasing = true;\n \
    \       boolean decreasing = true;\n        int last = l.get(0);\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            int x = l.get(i);\n          \
    \  if (x > last) decreasing = false;\n            if (x < last) increasing = false;\n\
    \            last = x;\n        }\n        return increasing || decreasing;\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() < 2) return true;\n        int dif = l.get(1) - l.get(0);\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) - l.get(i\
    \ - 1) * dif < 0) return false;\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgi8ung_k.java:28)\n"
  stdout: ''
  timestamp: 1660011646
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return l.stream().collect(Collectors.toList()).equals(\n            l.stream().sorted().collect(Collectors.toList())\n\
    \        ) ||\n        l.stream().collect(Collectors.toList()).equals(\n     \
    \       l.stream().sorted(Collections.reverseOrder()).collect(Collectors.toList())\n\
    \        );\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011646
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean decreasing = true;\n        boolean increasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i\
    \ + 1)) {\n                decreasing = false;\n            }\n            if\
    \ (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011646
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i\
    \ + 1))\n                decreasing = false;\n            if (l.get(i) > l.get(i\
    \ + 1))\n                increasing = false;\n        }\n        return increasing\
    \ || decreasing;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return l.stream().reduce(0, (a, b) -> {\n            if (a == 0) {\n  \
    \              return b;\n            } else if (a > 0 && b > a) {\n         \
    \       return b;\n            } else if (a < 0 && b < a) {\n                return\
    \ b;\n            } else {\n                return -1;\n            }\n      \
    \  }) > 0;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp932hgtyv.java:33)\n"
  stdout: ''
  timestamp: 1660011646
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i\
    \ + 1))\n                decreasing = false;\n            if (l.get(i) > l.get(i\
    \ + 1))\n                increasing = false;\n        }\n        return decreasing\
    \ || increasing;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      // Place your code here.\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphm7h6r1b.java:23)\n"
  stdout: ''
  timestamp: 1660011646
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() < 2) return true;\n        boolean p = false;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i - 1) < l.get(i)) {\n\
    \                if (p) {\n                    return false;\n               \
    \ }\n            } else if (l.get(i - 1) > l.get(i)) {\n                p = true;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return true;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp03ildil9.java:22)\n"
  stdout: ''
  timestamp: 1660011644
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean is_incr = false;\n        boolean is_decr = false;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1))\
    \ {\n                is_incr = true;\n            } else if (l.get(i) > l.get(i\
    \ + 1)) {\n                is_decr = true;\n            }\n        }\n       \
    \ return is_incr && !is_decr || !is_incr && is_decr;\n}\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplg8equpx.java:36)\n"
  stdout: ''
  timestamp: 1660011646
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i\
    \ + 1)) {\n                decreasing = false;\n            }\n            if\
    \ (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) {\n            return true;\n        }\n        int\
    \ last_val = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n       \
    \     if (l.get(i) != last_val) {\n                break;\n            }\n   \
    \     }\n        if (i == l.size()) {\n            return true;\n        }\n \
    \       int inc = l.get(i) > last_val ? 1 : -1;\n        for (; i < l.size();\
    \ i++) {\n            if (l.get(i) != last_val + inc) {\n                return\
    \ false;\n            }\n            last_val = l.get(i);\n        }\n       \
    \ return true;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpss6rerh5.java:26: error: cannot find symbol\n        if (i == l.size())\
    \ {\n            ^\n  symbol:   variable i\n  location: class Problem\n/tmp/tmpss6rerh5.java:29:\
    \ error: cannot find symbol\n        int inc = l.get(i) > last_val ? 1 : -1;\n\
    \                        ^\n  symbol:   variable i\n  location: class Problem\n\
    /tmp/tmpss6rerh5.java:30: error: cannot find symbol\n        for (; i < l.size();\
    \ i++) {\n               ^\n  symbol:   variable i\n  location: class Problem\n\
    /tmp/tmpss6rerh5.java:30: error: cannot find symbol\n        for (; i < l.size();\
    \ i++) {\n                             ^\n  symbol:   variable i\n  location:\
    \ class Problem\n/tmp/tmpss6rerh5.java:31: error: cannot find symbol\n       \
    \     if (l.get(i) != last_val + inc) {\n                      ^\n  symbol:  \
    \ variable i\n  location: class Problem\n/tmp/tmpss6rerh5.java:34: error: cannot\
    \ find symbol\n            last_val = l.get(i);\n                            \
    \ ^\n  symbol:   variable i\n  location: class Problem\n6 errors\n"
  stdout: ''
  timestamp: 1660011646
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean positive = true;\n        boolean negative = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1))\
    \ {\n                negative = false;\n            }\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                positive = false;\n            }\n      \
    \  }\n        return positive || negative;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = false;\n        boolean decreasing = false;\n    \
    \    for (int i = 0; i < l.size() - 1; i++) {\n            increasing = l.get(i)\
    \ <= l.get(i + 1);\n            decreasing = l.get(i) >= l.get(i + 1);\n     \
    \       if (!increasing && !decreasing) return false;\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpacplii8j.java:29)\n"
  stdout: ''
  timestamp: 1660011646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return l.stream().reduce(0, (a, b) -> {\n            if (a == 0) {\n  \
    \              return b;\n            } else if (a < 0 && b < a) {\n         \
    \       return b;\n            } else if (a > 0 && b > a) {\n                return\
    \ b;\n            } else {\n                return 0;\n            }\n       \
    \ }) != 0;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz2wxvpko.java:32)\n"
  stdout: ''
  timestamp: 1660011646
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      // Check if l is monotonically increasing or decreasing.\n        if (l.size()\
    \ < 2) {\n            return true;\n        }\n        int prev = l.get(0);\n\
    \        boolean isMonotonic = true;\n        boolean isMonotonicIncreasing =\
    \ l.get(1) > prev;\n        for (int i = 1; i < l.size(); i++) {\n           \
    \ int curr = l.get(i);\n            if (isMonotonicIncreasing) {\n           \
    \     if (curr < prev) {\n                    isMonotonic = false;\n         \
    \           break;\n                }\n            } else {\n                if\
    \ (curr > prev) {\n                    isMonotonic = false;\n                \
    \    break;\n                }\n            }\n            prev = curr;\n    \
    \    }\n        return isMonotonic;\n}\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011647
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) <= l.get(i\
    \ + 1))\n                continue;\n            else\n                return false;\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3b29ueh5.java:29)\n"
  stdout: ''
  timestamp: 1660011647
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int n = l.size();\n        int i;\n        // Compare each element with\
    \ it's neighbour to detect ascending or descending order.\n        for (i = 0;\
    \ i < n - 1; i++) {\n            if (l.get(i) != l.get(i + 1)) {\n           \
    \     break;\n            }\n        }\n        if (i == n - 1) {\n          \
    \  return true;\n        }\n        boolean is_ascending = l.get(i) < l.get(i\
    \ + 1);\n        for (i = 0; i < n - 1; i++) {\n            if (is_ascending &&\
    \ l.get(i) > l.get(i + 1)) {\n                return false;\n            }\n \
    \           if (!is_ascending && l.get(i) < l.get(i + 1)) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011647
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() < 3) {\n            return true;\n        }\n        int i\
    \ = 1;\n        int j = 0;\n        if (l.get(1) > l.get(0)) {\n            while\
    \ (i < l.size()) {\n                if (l.get(i) < l.get(j)) {\n             \
    \       return false;\n                }\n                j++;\n             \
    \   i++;\n            }\n        } else {\n            while (i < l.size()) {\n\
    \                if (l.get(i) > l.get(j)) {\n                    return false;\n\
    \                }\n                j++;\n                i++;\n            }\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011647
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i\
    \ + 1)) {\n                int j = i + 1;\n                while (j < l.size()\
    \ - 1) {\n                    if (l.get(j) > l.get(j + 1))\n                 \
    \       return false;\n                    j++;\n                }\n         \
    \       return true;\n            } else if (l.get(i) > l.get(i + 1)) {\n    \
    \            int j = i + 1;\n                while (j < l.size() - 1) {\n    \
    \                if (l.get(j) < l.get(j + 1))\n                        return\
    \ false;\n                    j++;\n                }\n                return\
    \ true;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011647
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int direction = 0;\n        for (int i = 0; i < l.size() - 1; i++) {\n\
    \            if (l.get(i) < l.get(i + 1)) {\n                if (direction ==\
    \ 0) {\n                    direction = 1;\n                } else if (direction\
    \ == -1) {\n                    return false;\n                }\n           \
    \ } else if (l.get(i) > l.get(i + 1)) {\n                if (direction == 0) {\n\
    \                    direction = -1;\n                } else if (direction ==\
    \ 1) {\n                    return false;\n                }\n            }\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011647
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      // Hint: \n        // Initialize two booleans to True. For each element,\
    \ check if the \n        // list is increasing or decreasing. If it decreases,\
    \ set incr to \n        // False. If it increases, set decr to False. At the end,\
    \ check if \n        // incr or decr is still True.\n        boolean incr = true;\n\
    \        boolean decr = true;\n        for (int i = 1; i < l.size(); i++) {\n\
    \            if (l.get(i - 1) > l.get(i)) {\n                incr = false;\n \
    \           }\n            if (l.get(i - 1) < l.get(i)) {\n                decr\
    \ = false;\n            }\n        }\n        return incr || decr;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011647
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return l.stream().reduce(0, (x, y) -> {\n            if (x < 0) {\n   \
    \             return x;\n            }\n            if (x == 0) {\n          \
    \      return y;\n            }\n            return y - x;\n        }) < 0 ||\
    \ l.stream().reduce(0, (x, y) -> {\n            if (x > 0) {\n               \
    \ return x;\n            }\n            if (x == 0) {\n                return\
    \ y;\n            }\n            return y - x;\n        }) > 0;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5lvj9dts.java:38)\n"
  stdout: ''
  timestamp: 1660011648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int[] a = l.stream().mapToInt(i -> i).toArray();\n        if (isInc(a)\
    \ || isDec(a))\n            return true;\n        return false;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_fe4s9q.java:18: error: cannot find symbol\n        if (isInc(a)\
    \ || isDec(a))\n            ^\n  symbol:   method isInc(int[])\n  location: class\
    \ Problem\n/tmp/tmp7_fe4s9q.java:18: error: cannot find symbol\n        if (isInc(a)\
    \ || isDec(a))\n                        ^\n  symbol:   method isDec(int[])\n \
    \ location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011647
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) return true;\n        int m = l.get(0) - l.get(1);\n\
    \        for (int i = 1; i < l.size() - 1; i++) {\n            int c = l.get(i)\
    \ - l.get(i + 1);\n            if (m * c < 0) return false;\n        }\n     \
    \   return true;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011647
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return monotonicUp(l) || monotonicDown(l);\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe_d3i7ln.java:17: error: cannot find symbol\n        return monotonicUp(l)\
    \ || monotonicDown(l);\n               ^\n  symbol:   method monotonicUp(ArrayList<Integer>)\n\
    \  location: class Problem\n/tmp/tmpe_d3i7ln.java:17: error: cannot find symbol\n\
    \        return monotonicUp(l) || monotonicDown(l);\n                        \
    \         ^\n  symbol:   method monotonicDown(ArrayList<Integer>)\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011647
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      Integer before = l.get(0);\n        boolean increasing = false;\n     \
    \   boolean decreasing = false;\n        for (Integer i : l) {\n            if\
    \ (i >= before) {\n                increasing = true;\n            }\n       \
    \     if (i <= before) {\n                decreasing = true;\n            }\n\
    \            before = i;\n        }\n        return increasing || decreasing;\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx76qj88r.java:34)\n"
  stdout: ''
  timestamp: 1660011648
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n\t\
    boolean increasing=true;\n\tboolean decreasing=true;\n\tfor (int i=1; i<l.size();\
    \ i++) {\n\t    if (l.get(i)<l.get(i-1)) {\n\t\tincreasing=false;\n\t    }\n\t\
    \    if (l.get(i)>l.get(i-1)) {\n\t\tdecreasing=false;\n\t    }\n\t}\n\treturn\
    \ increasing || decreasing;\n}\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011648
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int n = l.size();\n        if (n < 2) {\n            return true;\n   \
    \     }\n        boolean inc = false;\n        boolean dec = false;\n        if\
    \ (l.get(0) < l.get(1)) {\n            inc = true;\n        } else if (l.get(0)\
    \ > l.get(1)) {\n            dec = true;\n        }\n        for (int i = 1; i\
    \ < n - 1; i++) {\n            if (l.get(i) == l.get(i + 1)) {\n             \
    \   continue;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n   \
    \             if (dec) {\n                    return false;\n                }\n\
    \                inc = true;\n            } else {\n                if (inc) {\n\
    \                    return false;\n                }\n                dec = true;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011648
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i\
    \ + 1)) {\n                decreasing = false;\n            }\n            if\
    \ (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return l.equals(new ArrayList<Integer>(l).stream().sorted().collect(Collectors.toList()))\
    \ || l.equals(new ArrayList<Integer>(l).stream().sorted(Collections.reverseOrder()).collect(Collectors.toList()));\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011648
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int n = l.size();\n        // If list l is empty, by definition it is monotonic.\n\
    \        if (n == 0) {\n            return true;\n        }\n        // If list\
    \ is length 1, it is monotonic.\n        if (n == 1) {\n            return true;\n\
    \        }\n        // Initialize before and after index to first two elements.\n\
    \        int before = l.get(0);\n        int after = l.get(1);\n        // Initialize\
    \ before_is_greater to True if before > after,\n        // otherwise False.\n\
    \        boolean before_is_greater = before > after;\n        // Iterate through\
    \ list, comparing each element to the one before it.\n        for (int i = 1;\
    \ i < n; i++) {\n            int next = l.get(i);\n            // If the list\
    \ is monotonically increasing, if the next\n            // number is less than\
    \ the current number, return False.\n            if (!before_is_greater && next\
    \ < after) {\n                return false;\n            }\n            // If\
    \ the list is monotonically decreasing, if the next\n            // number is\
    \ greater than the current number, return False.\n            if (before_is_greater\
    \ && next > after) {\n                return false;\n            }\n         \
    \   // Update before and after elements.\n            before = after;\n      \
    \      after = next;\n        }\n        // If all elements are monotonically\
    \ increasing or decreasing,\n        // return True.\n        return true;\n}\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) {\n            return true;\n        }\n        int\
    \ cmp = Integer.compare(l.get(0), l.get(1));\n        for (int i = 1; i < l.size()\
    \ - 1; i++) {\n            int cmpNew = Integer.compare(l.get(i), l.get(i + 1));\n\
    \            if (cmp != cmpNew) {\n                return false;\n           \
    \ }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpauos2mht.java:34)\n"
  stdout: ''
  timestamp: 1660011648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = false;\n        boolean decreasing = false;\n    \
    \    for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i\
    \ + 1)) {\n                increasing = true;\n            }\n            if (l.get(i)\
    \ > l.get(i + 1)) {\n                decreasing = true;\n            }\n     \
    \   }\n        return increasing && !decreasing || !increasing && decreasing;\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgxd_9axn.java:37)\n"
  stdout: ''
  timestamp: 1660011648
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return IntStream.range(0, l.size() - 1).allMatch(i -> l.get(i) <= l.get(i\
    \ + 1)) || IntStream.range(0, l.size() - 1).allMatch(i -> l.get(i) >= l.get(i\
    \ + 1));\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011648
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i\
    \ + 1)) {\n                decreasing = false;\n            }\n            if\
    \ (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return (IntStream.range(0, l.size() - 1).allMatch(i -> l.get(i) <= l.get(i\
    \ + 1)))\n            || (IntStream.range(0, l.size() - 1).allMatch(i -> l.get(i)\
    \ >= l.get(i + 1)));\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011648
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) != l.get(i\
    \ + 1)) {\n                int sign = (l.get(i) - l.get(i + 1)) / Math.abs(l.get(i)\
    \ - l.get(i + 1));\n                for (int j = i + 1; j < l.size() - 1; j++)\
    \ {\n                    if (sign * (l.get(j) - l.get(j + 1)) < 0) {\n       \
    \                 return false;\n                    }\n                }\n  \
    \              return true;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean decreasing = false;\n        boolean increasing = false;\n    \
    \    for (int i = 0; i < l.size() - 1; i++) {\n            int first = l.get(i);\n\
    \            int second = l.get(i + 1);\n            if (first < second) {\n \
    \               increasing = true;\n            } else if (first > second) {\n\
    \                decreasing = true;\n            }\n        }\n        return\
    \ decreasing == increasing;\n}\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1v3nqg9_.java:31)\n"
  stdout: ''
  timestamp: 1660011648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return false;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjhur1vl4.java:20)\n"
  stdout: ''
  timestamp: 1660011646
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ isUp = true;\n        boolean isDown = true;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            if (l.get(i - 1) > l.get(i)) {\n                isUp = false;\n\
    \            }\n            if (l.get(i - 1) < l.get(i)) {\n                isDown\
    \ = false;\n            }\n        }\n        return isUp || isDown;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011648
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i\
    \ + 1)) {\n                decreasing = false;\n            }\n            if\
    \ (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  int i = 0;\n        while (i < l.size() - 1) {\n            if (l.get(i) >\
    \ l.get(i + 1)) {\n                increasing = false;\n            }\n      \
    \      if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n \
    \           }\n            i += 1;\n        }\n        return increasing || decreasing;\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011648
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return false;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjhur1vl4.java:20)\n"
  stdout: ''
  timestamp: 1660011646
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean isIncreasing = true;\n        for (int i = 0; i < l.size() - 1;\
    \ i++) {\n            if (l.get(i + 1) - l.get(i) < 0) {\n                isIncreasing\
    \ = false;\n                break;\n            }\n        }\n        if (isIncreasing)\
    \ return true;\n        boolean isDecreasing = true;\n        for (int i = 0;\
    \ i < l.size() - 1; i++) {\n            if (l.get(i + 1) - l.get(i) > 0) {\n \
    \               isDecreasing = false;\n                break;\n            }\n\
    \        }\n        return isDecreasing;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011649
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) {\n            return true;\n        }\n        int\
    \ res = 0;\n        for (int i = 1; i < l.size(); i++) {\n            int diff\
    \ = l.get(i) - l.get(i - 1);\n            if (diff == 0) {\n                continue;\n\
    \            }\n            diff = Integer.signum(diff);\n            if (res\
    \ == 0) {\n                res = diff;\n            } else if (res != diff) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011649
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      // The list is empty or has a single element.\n        if (l.size() < 2)\
    \ return true;\n        // The list is decreasing.\n        if (l.get(0) > l.get(1))\
    \ {\n            for (int i = 0; i < l.size() - 1; i++) {\n                if\
    \ (l.get(i) < l.get(i + 1)) {\n                    return false;\n           \
    \     }\n            }\n        }\n        // The list is increasing.\n      \
    \  else {\n            for (int i = 0; i < l.size() - 1; i++) {\n            \
    \    if (l.get(i) > l.get(i + 1)) {\n                    return false;\n     \
    \           }\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011649
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() < 2) {\n            return true;\n        }\n        int type\
    \ = 0;\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i)\
    \ > l.get(i - 1)) {\n                if (type == -1) {\n                    return\
    \ false;\n                }\n                type = 1;\n            } else if\
    \ (l.get(i) < l.get(i - 1)) {\n                if (type == 1) {\n            \
    \        return false;\n                }\n                type = -1;\n      \
    \      }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      // fill code here\n}\n    public static void main(String[] args) {\n  \
    \  assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpu02frr9d.java:18: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int direction = 0;\n        int pos_dir = 0;\n        int neg_dir = 0;\n\
    \        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) <\
    \ l.get(i + 1)) {\n                pos_dir += 1;\n            } else if (l.get(i)\
    \ > l.get(i + 1)) {\n                neg_dir += 1;\n            }\n        }\n\
    \        return pos_dir == l.size() - 1 || neg_dir == l.size() - 1;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzkwz7h0x.java:34)\n"
  stdout: ''
  timestamp: 1660011649
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i\
    \ + 1)) {\n                increasing = false;\n            }\n            if\
    \ (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean inc = true;\n        boolean dec = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            inc &= l.get(i - 1) <= l.get(i);\n    \
    \        dec &= l.get(i - 1) >= l.get(i);\n        }\n        return inc || dec;\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011649
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) {\n            return true;\n        }\n        int\
    \ c = l.get(0).compareTo(l.get(1));\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            int c1 = l.get(i).compareTo(l.get(i + 1));\n           \
    \ if (c1 == 0) {\n                continue;\n            }\n            if (c\
    \ != c1) {\n                return false;\n            }\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return l.stream().reduce(true, (acc, x) -> acc && (l.get(0) <= x), (acc1,\
    \ acc2) -> acc1 && acc2);\n}\n    public static void main(String[] args) {\n \
    \   assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8_1kkn5.java:22)\n"
  stdout: ''
  timestamp: 1660011649
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      // -> True if increasing\n        boolean increasing = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increasing = false;\n                break;\n           \
    \ }\n        }\n        // -> True if decreasing\n        boolean decreasing =\
    \ true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n                break;\n\
    \            }\n        }\n        return increasing || decreasing;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011649
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() == 0) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            increasing = increasing && (l.get(i - 1)\
    \ <= l.get(i));\n            decreasing = decreasing && (l.get(i - 1) >= l.get(i));\n\
    \        }\n        return increasing || decreasing;\n}\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011649
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return l.equals(new ArrayList<Integer>(l).stream().sorted().collect(Collectors.toList()))\n\
    \            || l.equals(new ArrayList<Integer>(l).stream().sorted(Collections.reverseOrder()).collect(Collectors.toList()));\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011649
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i\
    \ + 1))\n                decreasing = false;\n            if (l.get(i) > l.get(i\
    \ + 1))\n                increasing = false;\n        }\n        return increasing\
    \ || decreasing;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011646
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) {\n            return true;\n        }\n        int\
    \ i = 0;\n        int j = 1;\n        int inc = 0;\n        int dec = 0;\n   \
    \     while (j < l.size()) {\n            if (l.get(i) < l.get(j)) {\n       \
    \         inc++;\n            } else if (l.get(i) > l.get(j)) {\n            \
    \    dec++;\n            }\n            i++;\n            j++;\n        }\n  \
    \      if (inc == 0 || dec == 0) {\n            return true;\n        }\n    \
    \    return false;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return isIncreasing(l) || isDecreasing(l);\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm7qjb4np.java:17: error: cannot find symbol\n        return isIncreasing(l)\
    \ || isDecreasing(l);\n               ^\n  symbol:   method isIncreasing(ArrayList<Integer>)\n\
    \  location: class Problem\n/tmp/tmpm7qjb4np.java:17: error: cannot find symbol\n\
    \        return isIncreasing(l) || isDecreasing(l);\n                        \
    \          ^\n  symbol:   method isDecreasing(ArrayList<Integer>)\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011649
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) {\n            return true;\n        }\n        boolean\
    \ increasing = true;\n        for (int i = 1; i < l.size(); i++) {\n         \
    \   if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n    \
    \            break;\n            }\n        }\n        if (increasing) {\n   \
    \         return true;\n        }\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            if (l.get(i) > l.get(i - 1)) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int d = l.get(1) - l.get(0);\n        for (int i = 2; i < l.size(); i++)\
    \ {\n            if (l.get(i) - l.get(i - 1) * d < 0) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnxdn085j.java:29)\n"
  stdout: ''
  timestamp: 1660011649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() == 0) {\n            return true;\n        }\n\n        int\
    \ diff = l.get(0);\n        boolean direction = true;\n\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) != l.get(i - 1)) {\n     \
    \           if (diff == 0) {\n                    direction = l.get(i) - l.get(i\
    \ - 1) > 0;\n                } else {\n                    if (direction != (l.get(i)\
    \ - l.get(i - 1) > 0)) {\n                        return false;\n            \
    \        }\n                }\n                diff = l.get(i) - l.get(i - 1);\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9bri7nfy.java:42)\n"
  stdout: ''
  timestamp: 1660011649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return true;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp03ildil9.java:22)\n"
  stdout: ''
  timestamp: 1660011644
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return ((increasing(l) || decreasing(l)));\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmmy5g9l7.java:17: error: cannot find symbol\n        return ((increasing(l)\
    \ || decreasing(l)));\n                 ^\n  symbol:   method increasing(ArrayList<Integer>)\n\
    \  location: class Problem\n/tmp/tmpmmy5g9l7.java:17: error: cannot find symbol\n\
    \        return ((increasing(l) || decreasing(l)));\n                        \
    \          ^\n  symbol:   method decreasing(ArrayList<Integer>)\n  location: class\
    \ Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011649
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int direction = 0;\n        int n = l.size();\n        for (int i = 0;\
    \ i < n - 1; i++) {\n            if (l.get(i) != l.get(i + 1)) {\n           \
    \     if (direction == 0) {\n                    direction = (l.get(i) > l.get(i\
    \ + 1)) ? -1 : 1;\n                } else {\n                    if (direction\
    \ == -1 && l.get(i) < l.get(i + 1)) {\n                        return false;\n\
    \                    } else if (direction == 1 && l.get(i) > l.get(i + 1)) {\n\
    \                        return false;\n                    }\n              \
    \  }\n            }\n        }\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean isIncreasing = true;\n        boolean isDecreasing = true;\n  \
    \      for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) <= l.get(i\
    \ + 1)) {\n                isDecreasing = false;\n            }\n            if\
    \ (l.get(i) >= l.get(i + 1)) {\n                isIncreasing = false;\n      \
    \      }\n        }\n        return isIncreasing || isDecreasing;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq4y876hh.java:34)\n"
  stdout: ''
  timestamp: 1660011649
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      // Write code here.\n        int len = l.size();\n        if (len <= 1)\
    \ return true;\n        int current = l.get(0);\n        boolean is_increasing\
    \ = true;\n        boolean is_decreasing = true;\n        for (int i = 1; i <\
    \ len; i++) {\n            if (l.get(i) < current) is_increasing = false;\n  \
    \          if (l.get(i) > current) is_decreasing = false;\n            current\
    \ = l.get(i);\n        }\n        return is_increasing || is_decreasing;\n}\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011649
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      throw new UnsupportedOperationException(\"Remove this line and implement\
    \ your code here!\");\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Remove\
    \ this line and implement your code here!\n\tat Problem.monotonic(tmpukh1s73m.java:17)\n\
    \tat Problem.main(tmpukh1s73m.java:20)\n"
  stdout: ''
  timestamp: 1660011650
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) return true;\n        if (l.get(0) < l.get(1)) {\n \
    \           for (int i = 0; i < l.size() - 1; i++) {\n                if (l.get(i)\
    \ > l.get(i + 1)) {\n                    return false;\n                }\n  \
    \          }\n        } else if (l.get(0) > l.get(1)) {\n            for (int\
    \ i = 0; i < l.size() - 1; i++) {\n                if (l.get(i) < l.get(i + 1))\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n}\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011650
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return IntStream.range(0, l.size() - 1).allMatch(i -> l.get(i) <= l.get(i\
    \ + 1)) ||\n               IntStream.range(0, l.size() - 1).allMatch(i -> l.get(i)\
    \ >= l.get(i + 1));\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011650
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean inc = true;\n        boolean dec = true;\n        for (int i =\
    \ 0; i < l.size() - 1; i++) {\n            if (l.get(i + 1) < l.get(i)) {\n  \
    \              inc = false;\n            }\n            if (l.get(i + 1) > l.get(i))\
    \ {\n                dec = false;\n            }\n        }\n        return inc\
    \ || dec;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011650
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int[] array = new int[l.size()];\n        for (int i = 0; i < l.size();\
    \ i++) {\n            array[i] = l.get(i);\n        }\n        return problem.monotonic(array);\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7rrce1ft.java:21: error: cannot find symbol\n        return problem.monotonic(array);\n\
    \               ^\n  symbol:   variable problem\n  location: class Problem\n1\
    \ error\n"
  stdout: ''
  timestamp: 1660011650
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      // >>> Your code here <<<\n        int curr = l.get(0);\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) > curr) {\n              \
    \  decreasing = false;\n            } else if (l.get(i) < curr) {\n          \
    \      increasing = false;\n            }\n            curr = l.get(i);\n    \
    \    }\n        return increasing || decreasing;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      for (int i = 0; i < l.size() - 1; i++) {\n            if ((l.get(i) < l.get(i\
    \ + 1)) != (l.get(i + 1) < l.get(i + 2))) {\n                return false;\n \
    \           }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.monotonic(tmpnxuafw_b.java:18)\n\tat Problem.main(tmpnxuafw_b.java:25)\n"
  stdout: ''
  timestamp: 1660011651
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int m = l.get(0);\n        int s = 0;\n        for (int i=1; i<l.size();\
    \ i++) {\n            if (l.get(i) > m) {\n                if (s == -1) {\n  \
    \                  return false;\n                }\n                s = 1;\n\
    \            } else if (l.get(i) < m) {\n                if (s == 1) {\n     \
    \               return false;\n                }\n                s = -1;\n  \
    \          }\n            m = l.get(i);\n        }\n        return true;\n}\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011651
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n\t\
    if (l.size() == 0) return true;\n\tint s = l.get(0);\n\tint c = 0;\n\tboolean\
    \ inc = true;\n\tfor (int i=1; i<l.size(); i++) {\n\t    if (c==0) {\n\t\tif (l.get(i)\
    \ > s) {\n\t\t    c = 1;\n\t\t} else if (l.get(i) < s) {\n\t\t    c = -1;\n\t\t\
    \    inc = false;\n\t\t}\n\t    } else {\n\t\tif (c == 1 && l.get(i) < s) {\n\t\
    \t    return false;\n\t\t} else if (c == -1 && l.get(i) > s) {\n\t\t    return\
    \ false;\n\t\t}\n\t    }\n\t    s = l.get(i);\n\t}\n\treturn true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011651
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      // Fill in your code here\n        int old_val = l.get(0);\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            int new_val = l.get(i);\n            if\
    \ (new_val < old_val) {\n                increasing = false;\n            }\n\
    \            if (new_val > old_val) {\n                decreasing = false;\n \
    \           }\n            old_val = new_val;\n        }\n        return increasing\
    \ || decreasing;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011651
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int direction = 0;\n        for (int i = 0; i < l.size() - 1; i++) {\n\
    \            if (l.get(i) > l.get(i + 1)) {\n                if (direction ==\
    \ 1) {\n                    return false;\n                }\n               \
    \ direction = -1;\n            } else if (l.get(i) < l.get(i + 1)) {\n       \
    \         if (direction == -1) {\n                    return false;\n        \
    \        }\n                direction = 1;\n            }\n        }\n       \
    \ return true;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011651
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean inc = true;\n        boolean dec = true;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            inc &= l.get(i - 1) <= l.get(i);\n    \
    \        dec &= l.get(i - 1) >= l.get(i);\n        }\n        return inc || dec;\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011649
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() < 2) {\n            return true;\n        }\n        int i\
    \ = 0;\n        while (i < l.size() - 1) {\n            if (l.get(i) <= l.get(i\
    \ + 1)) {\n                i++;\n            } else {\n                break;\n\
    \            }\n        }\n        if (i >= l.size() - 1) {\n            return\
    \ true;\n        }\n        int j = 0;\n        while (j < l.size() - 1) {\n \
    \           if (l.get(j) >= l.get(j + 1)) {\n                j++;\n          \
    \  } else {\n                break;\n            }\n        }\n        if (j >=\
    \ l.size() - 1) {\n            return true;\n        }\n        return false;\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return true;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp03ildil9.java:22)\n"
  stdout: ''
  timestamp: 1660011644
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean isMonotonic = true;\n        int firstElement = l.get(0);\n   \
    \     int lastElement = l.get(l.size() - 1);\n        boolean increasing = firstElement\
    \ < lastElement;\n        boolean decreasing = firstElement > lastElement;\n \
    \       if (increasing) {\n            for (int i = 0; i < l.size() - 1; i++)\
    \ {\n                int n = l.get(i);\n                int next = l.get(i + 1);\n\
    \                if (n > next) {\n                    isMonotonic = false;\n \
    \                   break;\n                }\n            }\n        } else if\
    \ (decreasing) {\n            for (int i = 0; i < l.size() - 1; i++) {\n     \
    \           int n = l.get(i);\n                int next = l.get(i + 1);\n    \
    \            if (n < next) {\n                    isMonotonic = false;\n     \
    \               break;\n                }\n            }\n        }\n        return\
    \ isMonotonic;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011651
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int diff = l.get(1) - l.get(0);\n        for (int i = 1; i < l.size();\
    \ i++) {\n            if (diff * (l.get(i) - l.get(i - 1)) < 0) {\n          \
    \      return false;\n            }\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return true;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp03ildil9.java:22)\n"
  stdout: ''
  timestamp: 1660011644
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ inc = false;\n        boolean dec = false;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            int c = l.get(i - 1);\n            int d = l.get(i);\n \
    \           if (c < d) {\n                inc = true;\n            } else if (c\
    \ > d) {\n                dec = true;\n            }\n            if (inc && dec)\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return false;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjhur1vl4.java:20)\n"
  stdout: ''
  timestamp: 1660011646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int t = 0;\n        for (int i = 0; i < l.size() - 1; i++) {\n        \
    \    int a = Integer.compare(l.get(i), l.get(i + 1));\n            if (t == 0)\
    \ {\n                t = a;\n            } else if (t != a) {\n              \
    \  return false;\n            }\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpah8hvony.java:33)\n"
  stdout: ''
  timestamp: 1660011651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int n = l.size();\n        if (n == 1) return true;\n        int sign =\
    \ Math.signum(l.get(1) - l.get(0));\n        int i = 1;\n        while (i < n\
    \ && sign == Math.signum(l.get(i) - l.get(i - 1))) i++;\n        return i == n;\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgunxx8ur.java:19: error: incompatible types: possible lossy conversion\
    \ from float to int\n        int sign = Math.signum(l.get(1) - l.get(0));\n  \
    \                            ^\n1 error\n"
  stdout: ''
  timestamp: 1660011650
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n  \
    \      int acc = 0;\n        for (int i = 0; i < l.size(); i++) {\n          \
    \  int x = l.get(i);\n            if (x > max) max = x;\n            if (x < min)\
    \ min = x;\n            if (i > 0) {\n                int y = l.get(i - 1);\n\
    \                if (x > y) acc += 1;\n                if (x < y) acc -= 1;\n\
    \            }\n        }\n        return max == l.get(l.size() - 1) || min ==\
    \ l.get(l.size() - 1) || acc == 0;\n}\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbjzo5wzy.java:38)\n"
  stdout: ''
  timestamp: 1660011651
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) {\n            return true;\n        }\n\n        //\
    \ If list is decreasing, then the smallest element\n        // is the first and\
    \ the largest element is the last.\n        boolean is_decreasing = (l.get(0)\
    \ > l.get(l.size() - 1));\n\n        for (int i = 1; i < l.size(); i++) {\n  \
    \          int prev = l.get(i - 1);\n            int current = l.get(i);\n\n \
    \           if (is_decreasing) {\n                if (prev < current) {\n    \
    \                return false;\n                }\n            } else {\n    \
    \            if (prev > current) {\n                    return false;\n      \
    \          }\n            }\n        }\n\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int sign = Integer.signum(l.get(1) - l.get(0));\n        for (int i = 1;\
    \ i < l.size(); i++) {\n            if (sign != Integer.signum(l.get(i) - l.get(i\
    \ - 1))) {\n                return false;\n            }\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv_eu4ern.java:30)\n"
  stdout: ''
  timestamp: 1660011651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      assert l.size() >= 3;\n        // >>>\n        // Solution goes here\n\
    \        // <<<\n        return false;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8uea1bv8.java:24)\n"
  stdout: ''
  timestamp: 1660011651
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() < 2) {\n            return true;\n        }\n        else\
    \ {\n            int d = l.get(1) - l.get(0);\n            for (int i = 2; i <\
    \ l.size(); i++) {\n                if (Math.signum(d) * Math.signum(l.get(i)\
    \ - l.get(i - 1)) < 0) {\n                    return false;\n                }\n\
    \            }\n            return true;\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return isIncreasing(l) || isDecreasing(l);\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm7qjb4np.java:17: error: cannot find symbol\n        return isIncreasing(l)\
    \ || isDecreasing(l);\n               ^\n  symbol:   method isIncreasing(ArrayList<Integer>)\n\
    \  location: class Problem\n/tmp/tmpm7qjb4np.java:17: error: cannot find symbol\n\
    \        return isIncreasing(l) || isDecreasing(l);\n                        \
    \          ^\n  symbol:   method isDecreasing(ArrayList<Integer>)\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011649
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int size = l.size();\n        int j;\n        boolean inc = true;\n   \
    \     boolean dec = true;\n        if (size == 1) {\n            return true;\n\
    \        }\n        for (int i = 0; i < size - 1; i++) {\n            j = i +\
    \ 1;\n            if (l.get(i) < l.get(j)) {\n                dec = false;\n \
    \           }\n            if (l.get(i) > l.get(j)) {\n                inc = false;\n\
    \            }\n        }\n        return inc || dec;\n}\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011651
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int sign = 0;\n        for (int i = 0; i < l.size() - 1; i++) {\n     \
    \       int cmp = Integer.compare(l.get(i), l.get(i + 1));\n            if (cmp\
    \ != 0) {\n                if (sign == 0) {\n                    sign = cmp;\n\
    \                } else if (sign != cmp) {\n                    return false;\n\
    \                }\n            }\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011651
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      // TODO: Write your code here.\n        return false;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpplt1rhey.java:21)\n"
  stdout: ''
  timestamp: 1660011652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int n = l.size();\n        int k = 1;\n        int sign = l.get(1) - l.get(0);\n\
    \        for (; k < n; k++) {\n            int s = l.get(k) - l.get(k - 1);\n\
    \            if (s == 0) continue;\n            if (s * sign < 0) return false;\n\
    \            break;\n        }\n        sign = l.get(k) - l.get(k - 1);\n    \
    \    for (; k < n; k++) {\n            int s = l.get(k) - l.get(k - 1);\n    \
    \        if (s * sign < 0) return false;\n        }\n        return true;\n}\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.monotonic(tmp3pfomt2r.java:26)\n\tat Problem.main(tmp3pfomt2r.java:41)\n"
  stdout: ''
  timestamp: 1660011652
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return l.equals(new ArrayList<Integer>(l.stream().sorted().collect(Collectors.toList())))\
    \ ||\n               l.equals(new ArrayList<Integer>(l.stream().sorted(Collections.reverseOrder()).collect(Collectors.toList())));\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011652
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  int n = l.size();\n        for (int i = 0; i < n - 1; i++) {\n            if\
    \ (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n         \
    \   }\n            if (l.get(i) < l.get(i + 1)) {\n                decreasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return false;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjhur1vl4.java:20)\n"
  stdout: ''
  timestamp: 1660011646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return false;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjhur1vl4.java:20)\n"
  stdout: ''
  timestamp: 1660011646
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() == 0) {\n            return true;\n        }\n        int\
    \ delta = 0;\n        for (int i = 1; i < l.size(); i++) {\n            int d\
    \ = Integer.compare(l.get(i), l.get(i - 1));\n            if (delta == 0) {\n\
    \                delta = d;\n            } else if (delta != d) {\n          \
    \      return false;\n            }\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp02cu94_j.java:36)\n"
  stdout: ''
  timestamp: 1660011652
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean mntc = true;\n        if (l.size() == 1) return mntc;\n       \
    \ //\n        // monotonic up?\n        int prev = l.get(0);\n        for (int\
    \ i = 1; i < l.size(); i++) {\n            if (l.get(i) < prev) {\n          \
    \      mntc = false;\n                break;\n            }\n            prev\
    \ = l.get(i);\n        }\n        if (mntc) return mntc;\n        //\n       \
    \ // monotonic down?\n        mntc = true;\n        prev = l.get(0);\n       \
    \ for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > prev) {\n \
    \               mntc = false;\n                break;\n            }\n       \
    \     prev = l.get(i);\n        }\n        return mntc;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011652
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() == 0) {\n            return true;\n        }\n        int\
    \ prev = l.get(0);\n        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            int curr\
    \ = l.get(i);\n            if (curr > prev) {\n                decreasing = false;\n\
    \            }\n            if (curr < prev) {\n                increasing = false;\n\
    \            }\n            prev = curr;\n        }\n        return increasing\
    \ || decreasing;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      // TODO: Implement this\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpudjprbbz.java:21)\n"
  stdout: ''
  timestamp: 1660011652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n\t\t\
    \n}\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpldvtnya4.java:18: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int inc = 0;\n        int prev = l.get(0);\n        for (int i = 1; i <\
    \ l.size(); i++) {\n            int curr = l.get(i);\n            int diff = curr\
    \ - prev;\n            if (inc == 0) {\n                inc = diff;\n        \
    \    } else if (inc != diff) {\n                return false;\n            }\n\
    \            prev = curr;\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjidlx9ov.java:32)\n"
  stdout: ''
  timestamp: 1660011652
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  if (l.size() == 1) {\n            return true;\n        }\n        for (int\
    \ i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n\
    \                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decreasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011652
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return (\n            IntStream.range(0, l.size() - 1)\n              \
    \  .allMatch(i -> l.get(i) <= l.get(i + 1)) ||\n            IntStream.range(0,\
    \ l.size() - 1)\n                .allMatch(i -> l.get(i) >= l.get(i + 1))\n  \
    \      );\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean mono = true;\n        int i = 0;\n        if (l.size() > 0) {\n\
    \            int c = l.get(0);\n            for (i = 1; i < l.size(); i++) {\n\
    \                if (l.get(i) != c) {\n                    break;\n          \
    \      }\n            }\n            if (i == l.size()) {\n                return\
    \ true;\n            }\n            int s = Integer.signum(l.get(i) - c);\n  \
    \          for (; i < l.size(); i++) {\n                int t = Integer.signum(l.get(i)\
    \ - c);\n                if (t != s) {\n                    return false;\n  \
    \              }\n                c = l.get(i);\n            }\n        }\n  \
    \      return mono;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_nr6zf5j.java:45)\n"
  stdout: ''
  timestamp: 1660011652
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() == 0) {\n            return true;\n        }\n        int\
    \ direction = 0;\n        for (int i = 1; i < l.size(); i++) {\n            int\
    \ this_dir = Integer.signum(l.get(i) - l.get(i - 1));\n            if (this_dir\
    \ != 0) {\n                if (direction == 0) {\n                    direction\
    \ = this_dir;\n                } else if (direction != this_dir) {\n         \
    \           return false;\n                }\n            }\n        }\n     \
    \   return true;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011652
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int max = 0;\n        for (int i = 0; i < l.size() - 1; i++) {\n      \
    \      max = Math.max(max, Math.abs(l.get(i) - l.get(i + 1)));\n        }\n  \
    \      return max <= 1;\n}\n    public static void main(String[] args) {\n   \
    \ assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1jkf2wp.java:24)\n"
  stdout: ''
  timestamp: 1660011652
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean is_increasing = true;\n        boolean is_decreasing = true;\n\
    \        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) <\
    \ l.get(i + 1)) {\n                is_decreasing = false;\n            }\n   \
    \         if (l.get(i) > l.get(i + 1)) {\n                is_increasing = false;\n\
    \            }\n        }\n        return is_increasing || is_decreasing;\n}\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011652
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i\
    \ + 1)) {\n                decreasing = false;\n            }\n            if\
    \ (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) return true;\n        boolean inc = l.get(0) < l.get(1);\n\
    \        for (int i = 1; i < l.size() - 1; i++) {\n            if (inc) {\n  \
    \              if (l.get(i) > l.get(i + 1)) return false;\n            } else\
    \ {\n                if (l.get(i) < l.get(i + 1)) return false;\n            }\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
    \ (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011652
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i\
    \ + 1)) {\n                decreasing = false;\n            }\n            if\
    \ (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n         \
    \   }\n        }\n        return increasing || decreasing;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011643
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int n = l.size();\n        if (n <= 1) {\n            return true;\n  \
    \      }\n        boolean inc = l.get(0) < l.get(1);\n        boolean dec = l.get(0)\
    \ > l.get(1);\n        for (int i = 1; i < n - 1; i++) {\n            boolean\
    \ nextInc = l.get(i) < l.get(i + 1);\n            boolean nextDec = l.get(i) >\
    \ l.get(i + 1);\n            if (!(inc && nextInc || dec && nextDec)) {\n    \
    \            return false;\n            }\n        }\n        return true;\n}\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi8dycycu.java:37)\n"
  stdout: ''
  timestamp: 1660011653
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean non_decreasing = true;\n        boolean non_increasing = true;\n\
    \        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) >\
    \ l.get(i + 1)) {\n                non_decreasing = false;\n            }\n  \
    \          if (l.get(i) < l.get(i + 1)) {\n                non_increasing = false;\n\
    \            }\n        }\n        return non_decreasing || non_increasing;\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011653
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) {\n            return true;\n        }\n        Boolean\
    \ increasing = null;\n        for (int i = 1; i < l.size(); i++) {\n         \
    \   int p = l.get(i - 1);\n            int c = l.get(i);\n            if (p !=\
    \ c) {\n                if (increasing == null) {\n                    increasing\
    \ = p < c;\n                } else {\n                    if (increasing) {\n\
    \                        if (p > c) {\n                            return false;\n\
    \                        }\n                    } else {\n                   \
    \     if (p < c) {\n                            return false;\n              \
    \          }\n                    }\n                }\n            }\n      \
    \  }\n        return true;\n}\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011653
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean out = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n\
    \            if (l.get(i) != l.get(i + 1)) {\n                out = out && (l.get(i)\
    \ < l.get(i + 1));\n            }\n        }\n        return out;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsd_xxadn.java:29)\n"
  stdout: ''
  timestamp: 1660011653
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int first = l.get(0);\n        int dir = 0;\n        for (int i = 1; i\
    \ < l.size(); i++) {\n            int prev = l.get(i - 1);\n            int curr\
    \ = l.get(i);\n            if (dir == 0) {\n                if (curr > prev) {\n\
    \                    dir = 1;\n                } else if (curr < prev) {\n   \
    \                 dir = -1;\n                }\n            } else if (dir ==\
    \ 1) {\n                if (curr < prev) {\n                    return false;\n\
    \                }\n            } else if (dir == -1) {\n                if (curr\
    \ > prev) {\n                    return false;\n                }\n          \
    \  }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011653
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i\
    \ + 1))\n                increasing = false;\n            if (l.get(i) < l.get(i\
    \ + 1))\n                decreasing = false;\n        }\n        return increasing\
    \ || decreasing;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011653
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      int i = 0;\n        int j = 1;\n        while (j < l.size()) {\n      \
    \      if (l.get(i) > l.get(j)) {\n                while (j < l.size()) {\n  \
    \                  if (l.get(i) < l.get(j)) {\n                        return\
    \ false;\n                    }\n                    i++;\n                  \
    \  j++;\n                }\n            } else if (l.get(i) < l.get(j)) {\n  \
    \              while (j < l.size()) {\n                    if (l.get(i) > l.get(j))\
    \ {\n                        return false;\n                    }\n          \
    \          i++;\n                    j++;\n                }\n            } else\
    \ {\n                i++;\n                j++;\n            }\n        }\n  \
    \      return true;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011653
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() < 2) {\n            return true;\n        }\n        boolean\
    \ increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1;\
    \ i++) {\n            if (increasing && l.get(i) > l.get(i + 1)) {\n         \
    \       return false;\n            }\n            if (!increasing && l.get(i)\
    \ < l.get(i + 1)) {\n                return false;\n            }\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011653
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return l.stream().allMatch(i -> l.stream().allMatch(j -> i <= j)) ||\n\
    \               l.stream().allMatch(i -> l.stream().allMatch(j -> i >= j));\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp390zo_dc.java:21)\n"
  stdout: ''
  timestamp: 1660011653
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean incr = true;\n        boolean decr = true;\n        if (l.size()\
    \ <= 1) {\n            return true;\n        }\n        for (int i = 1; i < l.size();\
    \ i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                incr = false;\n\
    \            }\n            if (l.get(i) > l.get(i - 1)) {\n                decr\
    \ = false;\n            }\n        }\n        return incr || decr;\n}\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011653
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean ret = true;\n        if (l.size() <= 1) {\n            return ret;\n\
    \        }\n        int sign = l.get(1) - l.get(0);\n        for (int i = 1; i\
    \ < l.size(); i++) {\n            if (sign * (l.get(i) - l.get(i - 1)) < 0) {\n\
    \                ret = false;\n                break;\n            }\n       \
    \ }\n        return ret;\n}\n    public static void main(String[] args) {\n  \
    \  assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011653
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() < 2) {\n            return true;\n        }\n        int diff\
    \ = l.get(1) - l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n     \
    \       int currDiff = l.get(i) - l.get(i - 1);\n            if (diff != 0 &&\
    \ Math.signum(diff) != Math.signum(currDiff)) {\n                return false;\n\
    \            }\n            diff = currDiff;\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkdtzlk4y.java:35)\n"
  stdout: ''
  timestamp: 1660011653
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      // Hint: set isIncreasing to True if the list is increasing.\n        boolean\
    \ isIncreasing = false;\n        // TODO: complete method\n        return isIncreasing;\n\
    }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcwwf0ng1.java:23)\n"
  stdout: ''
  timestamp: 1660011653
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() == 0) return true;\n        if (l.size() == 1) return true;\n\
    \        int x = 0;\n        for (int i = 1; i < l.size(); i++) {\n          \
    \  if (l.get(i) - l.get(i-1) > 0) {\n                if (x == -1) return false;\n\
    \                x = 1;\n            } else if (l.get(i) - l.get(i-1) < 0) {\n\
    \                if (x == 1) return false;\n                x = -1;\n        \
    \    }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011654
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) {\n            return true;\n        }\n        int\
    \ order = 0;\n        for (int i = 1; i < l.size(); i++) {\n            int diff\
    \ = l.get(i) - l.get(i - 1);\n            if (diff == 0) {\n                continue;\n\
    \            }\n            if (order == 0) {\n                order = Integer.signum(diff);\n\
    \            } else if (Integer.signum(diff) != order) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011653
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      Integer first = l.get(0);\n        Integer last = l.get(l.size() - 1);\n\
    \        if (first.compareTo(last) > 0) {\n            return Problem.is_sorted(l);\n\
    \        } else if (first.compareTo(last) < 0) {\n            Problem.reverse(l);\n\
    \            return Problem.is_sorted(l);\n        } else {\n            return\
    \ true;\n        }\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2x7kcd9f.java:20: error: cannot find symbol\n            return\
    \ Problem.is_sorted(l);\n                          ^\n  symbol:   method is_sorted(ArrayList<Integer>)\n\
    \  location: class Problem\n/tmp/tmp2x7kcd9f.java:22: error: cannot find symbol\n\
    \            Problem.reverse(l);\n                   ^\n  symbol:   method reverse(ArrayList<Integer>)\n\
    \  location: class Problem\n/tmp/tmp2x7kcd9f.java:23: error: cannot find symbol\n\
    \            return Problem.is_sorted(l);\n                          ^\n  symbol:\
    \   method is_sorted(ArrayList<Integer>)\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011653
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      return l.stream().mapToInt(i -> i).allMatch(i -> i == l.get(0)) ||\n  \
    \             l.stream().mapToInt(i -> i).allMatch(i -> i == l.get(l.size() -\
    \ 1)) ||\n               l.stream().mapToInt(i -> i).allMatch(i -> i >= l.get(0))\
    \ ||\n               l.stream().mapToInt(i -> i).allMatch(i -> i <= l.get(l.size()\
    \ - 1));\n}\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4, (int)10)))) == (true));\n\
    \    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)4,\
    \ (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzp6uor06.java:25)\n"
  stdout: ''
  timestamp: 1660011654
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      // *** Your code here ***\n        return false;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpycniur8x.java:21)\n"
  stdout: ''
  timestamp: 1660011653
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean decreasing = true;\n        boolean increasing = true;\n      \
    \  for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i\
    \ + 1)) {\n                decreasing = false;\n            }\n            if\
    \ (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n         \
    \   }\n        }\n        return decreasing || increasing;\n}\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011654
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      boolean increase = true;\n        boolean decrease = true;\n        for\
    \ (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\
    \ {\n                increase = false;\n            }\n            if (l.get(i)\
    \ < l.get(i + 1)) {\n                decrease = false;\n            }\n      \
    \  }\n        return increase || decrease;\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011654
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>>\
    \ monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n\
    \    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n  \
    \      if (l.size() <= 1) return true;\n        int curr = l.get(0);\n       \
    \ boolean inc = true;\n        boolean dec = true;\n        for (int i = 1; i\
    \ < l.size(); i++) {\n            int curr_val = l.get(i);\n            if (curr_val\
    \ > curr) {\n                dec = false;\n            } else if (curr_val < curr)\
    \ {\n                inc = false;\n            }\n            curr = curr_val;\n\
    \        }\n        return (inc || dec);\n}\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)4, (int)20)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)20, (int)4, (int)10)))) == (false));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)0, (int)-10)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)1, (int)1, (int)0)))) == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)1,\
    \ (int)2, (int)3, (int)2, (int)5, (int)60)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)60))))\
    \ == (true));\n    assert(monotonic((new ArrayList<Integer>(Arrays.asList((int)9,\
    \ (int)9, (int)9, (int)9)))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011654
