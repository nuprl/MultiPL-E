completions:
- '        return strings.stream().max(Comparator.comparing(String::length));'
- "        Optional<String> ans = Optional.empty();\n        int n = 0;\n        for\
  \ (String s : strings) {\n            if (s.length() > n) {\n                ans\
  \ = Optional.of(s);\n                n = s.length();\n            }\n        }\n\
  \        return ans;"
- "        // TODO: Write your code here\n        return Optional.empty();"
- "        Optional<String> ret = Optional.empty();\n        if (strings.size() ==\
  \ 0) {\n            return ret;\n        }\n        int maxLength = strings.get(0).length();\n\
  \        for (String s : strings) {\n            if (s.length() > maxLength) {\n\
  \                maxLength = s.length();\n                ret = Optional.of(s);\n\
  \            }\n        }\n        return ret;"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        int max = strings.get(0).length();\n        String maxString = strings.get(0);\n\
  \        for (int i = 1; i < strings.size(); i++) {\n            if (strings.get(i).length()\
  \ > max) {\n                max = strings.get(i).length();\n                maxString\
  \ = strings.get(i);\n            }\n        }\n        return Optional.of(maxString);"
- "        //return strings.stream().max(Comparator.comparing(String::length)).get();\n\
  \        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    } else {\n            Collections.sort(strings, Comparator.comparing(String::length));\n\
  \            return Optional.of(strings.get(strings.size() - 1));\n        }"
- "        // FILL IN\n        //throw new UnsupportedOperationException(\"longest\"\
  );\n        return strings.stream().max(Comparator.comparing(String::length));"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        int maxLength = strings.get(0).length();\n        String longest\
  \ = strings.get(0);\n        for (int i = 1; i < strings.size(); i++) {\n      \
  \      String s = strings.get(i);\n            if (s.length() > maxLength) {\n \
  \               maxLength = s.length();\n                longest = s;\n        \
  \    }\n        }\n        return Optional.of(longest);"
- '        return strings.stream().reduce((left, right) -> left.length() >= right.length()
  ? left : right);'
- "      // implement the function\n      // write your code here\n      return Optional.empty();"
- "        if (strings.size() == 0) return Optional.empty();\n        if (strings.size()\
  \ == 1) return Optional.of(strings.get(0));\n        String longest = strings.get(0);\n\
  \        for (String string : strings) {\n            if (string.length() > longest.length())\
  \ {\n                longest = string;\n            }\n        }\n        return\
  \ Optional.of(longest);"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    } else {\n            int maxLength = 0;\n            String maxString = \"\
  \";\n            for (String s : strings) {\n                if (s.length() > maxLength)\
  \ {\n                    maxLength = s.length();\n                    maxString\
  \ = s;\n                }\n            }\n            return Optional.of(maxString);\n\
  \        }"
- "        //throw new UnsupportedOperationException(\"Solution not implemented yet\"\
  );\n        return strings.stream().max(Comparator.comparing(String::length));"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        else {\n            String longestString = strings.get(0);\n   \
  \         for (String str : strings) {\n                if (str.length() > longestString.length())\
  \ {\n                    longestString = str;\n                }\n            }\n\
  \            return Optional.of(longestString);\n        }"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    } else {\n            int maxLen = 0;\n            String longestString = \"\
  \";\n            for (String s : strings) {\n                if (s.length() > maxLen)\
  \ {\n                    maxLen = s.length();\n                    longestString\
  \ = s;\n                }\n            }\n            return Optional.of(longestString);\n\
  \        }"
- "        Optional<String> res = Optional.empty();\n        for (String str : strings)\
  \ {\n            if (!res.isPresent() || str.length() > res.get().length()) {\n\
  \                res = Optional.of(str);\n            }\n        }\n        return\
  \ res;"
- "      if (strings.size() == 0) {\n        return Optional.empty();\n      }\n \
  \     String l = strings.get(0);\n      for (String s : strings) {\n        if (s.length()\
  \ > l.length()) {\n          l = s;\n        }\n      }\n      return Optional.of(l);"
- '        return strings.stream().max(Comparator.comparing(String::length));'
- "        Optional<String> ans = Optional.empty();\n        for (String s : strings)\
  \ {\n            if (!ans.isPresent() || s.length() > ans.get().length()) {\n  \
  \              ans = Optional.of(s);\n            }\n        }\n        return ans;"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        Collections.sort(strings, new Comparator<String>() {\n         \
  \   @Override\n            public int compare(String o1, String o2) {\n        \
  \        return Integer.compare(o2.length(), o1.length());\n            }\n    \
  \    });\n        return Optional.of(strings.get(0));"
- "        int max = 0;\n        Optional<String> result = Optional.empty();\n   \
  \     for (String str : strings) {\n            if (str.length() > max) {\n    \
  \            max = str.length();\n                result = Optional.of(str);\n \
  \           }\n        }\n        return result;"
- "        Optional<String> result = Optional.empty();\n        int curMax = 0;\n\
  \        for (String string : strings) {\n            if (string.length() > curMax)\
  \ {\n                curMax = string.length();\n                result = Optional.of(string);\n\
  \            }\n        }\n        return result;"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        String longest_string = strings.get(0);\n        for (String str\
  \ : strings) {\n            if (str.length() > longest_string.length()) {\n    \
  \            longest_string = str;\n            }\n        }\n        return Optional.of(longest_string);"
- "        // Add code here\n        return Optional.empty();"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        ArrayList<Integer> lengths = new ArrayList<Integer>();\n       \
  \ for (String string : strings) {\n            lengths.add(string.length());\n \
  \       }\n        int maxLength = Collections.max(lengths);\n        int index\
  \ = lengths.indexOf(maxLength);\n        return Optional.of(strings.get(index));"
- '        return strings.stream().max(Comparator.comparing(String::length));'
- "        String longest = strings.stream().reduce((s1, s2) -> s1.length() >= s2.length()\
  \ ? s1 : s2).orElse(null);\n        return Optional.ofNullable(longest);"
- "        // your code here\n        return Optional.empty();"
- "        if (strings.size() == 0) return Optional.empty();\n        String res =\
  \ \"\";\n        for (String str : strings) {\n            if (str.length() > res.length())\
  \ res = str;\n        }\n        return Optional.of(res);"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        int len = strings.get(0).length();\n        int index = 0;\n   \
  \     for (int i = 1; i < strings.size(); i++) {\n            if (strings.get(i).length()\
  \ > len) {\n                len = strings.get(i).length();\n                index\
  \ = i;\n            }\n        }\n        return Optional.of(strings.get(index));"
- "        if (strings.size() > 0) {\n            strings.sort((s1, s2) -> Integer.compare(s2.length(),\
  \ s1.length()));\n            return Optional.of(strings.get(0));\n        } else\
  \ {\n            return Optional.empty();\n        }"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        int max_len = 0;\n        String result = null;\n        for (String\
  \ s : strings) {\n            if (s.length() > max_len) {\n                max_len\
  \ = s.length();\n                result = s;\n            }\n        }\n       \
  \ return Optional.of(result);"
- "        int n = strings.size();\n        if (n == 0) return Optional.empty();\n\
  \        Optional<String> max = Optional.of(strings.get(0));\n        for (int i\
  \ = 1; i < n; i++) {\n            if (strings.get(i).length() > max.get().length())\
  \ {\n                max = Optional.of(strings.get(i));\n            }\n       \
  \ }\n        return max;"
- '        return strings.stream().reduce((s1, s2) -> s1.length() >= s2.length() ?
  s1 : s2);'
- '        return strings.stream().max(Comparator.comparing(String::length));'
- '        throw new RuntimeException("Not implemented.");'
- "\t    // Your code here"
- "        return strings.stream().max(new Comparator<String>() {\n            @Override\n\
  \            public int compare(String s1, String s2) {\n                return\
  \ Integer.compare(s1.length(), s2.length());\n            }\n        });"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        Optional<String> maxStr = Optional.of(strings.get(0));\n       \
  \ for (String s : strings) {\n            if (s.length() > maxStr.get().length())\
  \ {\n                maxStr = Optional.of(s);\n            }\n        }\n      \
  \  return maxStr;"
- "        Optional<String> o = Optional.empty();\n        if (strings.size() != 0)\
  \ {\n            o = Optional.of(strings.get(0));\n            for (String s : strings)\
  \ {\n                if (s.length() > o.get().length()) {\n                    o\
  \ = Optional.of(s);\n                }\n            }\n        }\n        return\
  \ o;"
- "        Optional<String> result = Optional.empty();\n        int maxLength = 0;\n\
  \        for (String str : strings) {\n            if (str.length() > maxLength)\
  \ {\n                maxLength = str.length();\n                result = Optional.of(str);\n\
  \            }\n        }\n        return result;"
- "        /*\n        Optional<String> longest = Optional.empty();\n        for (String\
  \ string : strings) {\n            if (longest.isPresent()) {\n                if\
  \ (string.length() > longest.get().length()) {\n                    longest = Optional.of(string);\n\
  \                }\n            } else {\n                longest = Optional.of(string);\n\
  \            }\n        }\n        return longest;\n        */\n        return strings.stream().max(Comparator.comparing(String::length));"
- "        // Implement this placeholder.\n        return Optional.empty();"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        else {\n            int length = 0;\n            int index = 0;\n\
  \            for (int i = 0; i < strings.size(); i++) {\n                if (strings.get(i).length()\
  \ > length) {\n                    length = strings.get(i).length();\n         \
  \           index = i;\n                }\n            }\n            return Optional.of(strings.get(index));\n\
  \        }"
- '        throw new UnsupportedOperationException("Not implemented yet");'
- '        return Optional.empty();'
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        int max_length = 0;\n        String longest_string = null;\n   \
  \     for (String s : strings) {\n            if (s.length() > max_length) {\n \
  \               max_length = s.length();\n                longest_string = s;\n\
  \            }\n        }\n        return Optional.of(longest_string);"
- "        // no strings, return None\n        if (strings.size() == 0) return Optional.empty();\n\
  \        // start with the first string\n        String result = strings.get(0);\n\
  \        for (String s : strings) {\n            // keep the longest string\n  \
  \          if (s.length() > result.length()) result = s;\n        }\n        return\
  \ Optional.of(result);"
- "        Optional<String> result = Optional.empty();\n        int longest = 0;\n\
  \        for (String string : strings) {\n            if (string.length() > longest)\
  \ {\n                longest = string.length();\n                result = Optional.of(string);\n\
  \            }\n        }\n        return result;"
- '        return strings.stream().max(Comparator.comparing(String::length));'
- "        Optional<String> opt;\n        Optional<String> opt2;\n        String str\
  \ = \"\";\n        for (String s : strings) {\n            if (s.length() > str.length())\
  \ {\n                str = s;\n            }\n        }\n        if (str.equals(\"\
  \")) {\n            opt = Optional.empty();\n        } else {\n            opt =\
  \ Optional.of(str);\n        }\n        opt2 = strings.stream().max(Comparator.comparing(String::length));\n\
  \        return opt2;"
- "        Optional<String> result = Optional.empty();\n        if(strings.size()\
  \ == 0) {\n            return result;\n        }\n        result = Optional.of(strings.get(0));\n\
  \        for(String current: strings) {\n            if(current.length() > result.get().length())\
  \ {\n                result = Optional.of(current);\n            }\n        }\n\
  \        return result;"
- "        // your code goes here\n        Optional<String> longStr = Optional.empty();\n\
  \        // return the string with maximum length\n        for (String str : strings)\
  \ {\n            if (!longStr.isPresent() || str.length() > longStr.get().length())\
  \ {\n                longStr = Optional.of(str);\n            }\n        }\n   \
  \     return longStr;"
- '        return Optional.empty();'
- "\treturn strings.stream().max(Comparator.comparing(String::length));"
- "\tif (strings.size() == 0) {\n\t    return Optional.empty();\n\t}\n\telse {\n\t\
  \    String longestString = strings.get(0);\n\t    for (String str : strings) {\n\
  \t\tif (str.length() > longestString.length()) {\n\t\t    longestString = str;\n\
  \t\t}\n\t    }\n\t    return Optional.of(longestString);\n\t}"
- "        if (strings.size() == 0) return Optional.empty();\n        return strings.stream().reduce((s1,\
  \ s2) -> s1.length() >= s2.length() ? s1 : s2);"
- "        // TODO: write your code here\n        int maxLength = 0;\n        String\
  \ result = null;\n        for (String str : strings) {\n            if (str.length()\
  \ > maxLength) {\n                maxLength = str.length();\n                result\
  \ = str;\n            }\n        }\n        return Optional.ofNullable(result);"
- '        return Optional.empty();'
- "        Optional<String> longest = Optional.empty();\n        for (String s : strings)\
  \ {\n            if (longest.map(x -> x.length()).orElse(0) < s.length()) {\n  \
  \              longest = Optional.of(s);\n            }\n        }\n        return\
  \ longest;"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    } else {\n            int maxLength = 0;\n            String maxString = \"\
  \";\n            for (String string : strings) {\n                if (string.length()\
  \ > maxLength) {\n                    maxLength = string.length();\n           \
  \         maxString = string;\n                }\n            }\n            return\
  \ Optional.of(maxString);\n        }"
- "        // Write your code here\n        return Optional.empty();"
- "        if (strings.size() == 0) return Optional.empty();\n        String maxString\
  \ = \"\";\n        for (String s : strings) {\n            if (s.length() > maxString.length())\
  \ {\n                maxString = s;\n            }\n        }\n        return Optional.of(maxString);"
- '        return Optional.empty();'
- "        Optional<String> longest = Optional.empty();\n        if (strings.size()\
  \ > 0) {\n            longest = Optional.of(strings.get(0));\n            for (String\
  \ s : strings) {\n                if (s.length() > longest.get().length()) {\n \
  \                   longest = Optional.of(s);\n                }\n            }\n\
  \        }\n        return longest;"
- '        return Optional.empty();'
- '        return strings.stream().reduce((a, b) -> a.length() > b.length() ? a :
  b);'
- "        // Write your code here\n        return null;"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        else {\n            return Optional.of(strings.stream().max(Comparator.comparing(String::length)).get());\n\
  \        }"
- '        return null;'
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        int max_length = 0;\n        String max_string = null;\n       \
  \ for (String s : strings) {\n            if (s.length() > max_length) {\n     \
  \           max_length = s.length();\n                max_string = s;\n        \
  \    }\n        }\n        return Optional.of(max_string);"
- '        return Optional.empty();'
- "        Optional<String> longest = Optional.empty();\n        for (String s : strings)\
  \ {\n            if (longest.isEmpty() || longest.get().length() < s.length()) {\n\
  \                longest = Optional.of(s);\n            }\n        }\n        return\
  \ longest;"
- '        return Optional.empty();'
- "        if (strings.size() == 0) return Optional.empty();\n        String max_string\
  \ = strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
  \ > max_string.length()) max_string = s;\n        }\n        return Optional.of(max_string);"
- "        // your code goes here\n        Optional<String> result = Optional.empty();\n\
  \        int max = 0;\n        for (String string : strings) {\n            if (string.length()\
  \ > max) {\n                max = string.length();\n                result = Optional.of(string);\n\
  \            }\n        }\n        return result;"
- "        // TODO your code here\n        return null;"
- "        Optional<String> longest = Optional.empty();\n        int max_length =\
  \ 0;\n        for (String s : strings) {\n            if (s.length() > max_length)\
  \ {\n                max_length = s.length();\n                longest = Optional.of(s);\n\
  \            }\n        }\n        return longest;"
- "        // TODO\n        if (strings.size() == 0)\n            return Optional.empty();\n\
  \        Optional<String> longestString = Optional.of(strings.get(0));\n       \
  \ for (String str : strings) {\n            if (str.length() > longestString.get().length())\n\
  \                longestString = Optional.of(str);\n        }\n        return longestString;"
- "        int max = -1;\n        String longest = null;\n        for (String s :\
  \ strings) {\n            if (s.length() > max) {\n                max = s.length();\n\
  \                longest = s;\n            }\n        }\n        return Optional.ofNullable(longest);"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
  \ {\n            if (s.length() > longest.length()) {\n                longest =\
  \ s;\n            }\n        }\n        return Optional.of(longest);"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        String longestString = strings.get(0);\n        for (String s :\
  \ strings) {\n            if (s.length() > longestString.length()) {\n         \
  \       longestString = s;\n            }\n        }\n        return Optional.of(longestString);"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        else {\n            int index = 0;\n            int length = strings.get(0).length();\n\
  \            for (int i = 1; i < strings.size(); i++) {\n                if (strings.get(i).length()\
  \ > length) {\n                    index = i;\n                    length = strings.get(i).length();\n\
  \                }\n            }\n            return Optional.of(strings.get(index));\n\
  \        }"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        int maxLength = strings.get(0).length();\n        for (int i = 1;\
  \ i < strings.size(); i++) {\n            if (strings.get(i).length() > maxLength)\
  \ {\n                maxLength = strings.get(i).length();\n            }\n     \
  \   }\n        for (int i = 0; i < strings.size(); i++) {\n            if (strings.get(i).length()\
  \ == maxLength) {\n                return Optional.of(strings.get(i));\n       \
  \     }\n        }\n        return Optional.empty();"
- '        return strings.stream().max(Comparator.comparing(String::length));'
- "        int max_len = 0;\n        Optional<String> max_string = Optional.empty();\n\
  \        for (String s : strings) {\n            if (s.length() > max_len) {\n \
  \               max_len = s.length();\n                max_string = Optional.of(s);\n\
  \            }\n        }\n        return max_string;"
- "        int max_length = 0;\n        Optional<String> result = Optional.empty();\n\
  \        for (String s : strings) {\n            if (s.length() > max_length) {\n\
  \                max_length = s.length();\n                result = Optional.of(s);\n\
  \            }\n        }\n        return result;"
- "        // Write your code here\n        Optional<String> longest = Optional.empty();\n\
  \        int maxLength = 0;\n        for (String s : strings) {\n            if\
  \ (s.length() > maxLength) {\n                maxLength = s.length();\n        \
  \        longest = Optional.of(s);\n            }\n        }\n        return longest;"
- "        Optional<String> longest = Optional.empty();\n        for (String s : strings)\
  \ {\n            if (longest.isEmpty() || s.length() > longest.get().length()) {\n\
  \                longest = Optional.of(s);\n            }\n        }\n        return\
  \ longest;"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        int maxLen = 0;\n        String longestString = null;\n        for\
  \ (String s : strings) {\n            if (s.length() > maxLen) {\n             \
  \   maxLen = s.length();\n                longestString = s;\n            }\n  \
  \      }\n        return Optional.of(longestString);"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        String longestString = strings.get(0);\n        for (String s :\
  \ strings) {\n            if (s.length() > longestString.length()) {\n         \
  \       longestString = s;\n            }\n        }\n        return Optional.of(longestString);"
- '        return strings.stream().reduce((string1, string2) -> string1.length() >
  string2.length() ? string1 : string2);'
- "        Optional<String> longest;\n        if (strings.size()==0)\n           \
  \ longest = Optional.empty();\n        else {\n            int len = strings.get(0).length();\n\
  \            longest = Optional.of(strings.get(0));\n            for (int i=1; i<strings.size();\
  \ i++) {\n                if (strings.get(i).length() > len) {\n               \
  \     len = strings.get(i).length();\n                    longest = Optional.of(strings.get(i));\n\
  \                }\n            }\n        }\n        return longest;"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    } else {\n            return Optional.of(strings.stream().reduce((x, y) ->\
  \ x.length() >= y.length() ? x : y).get());\n        }"
- '        return Optional.empty();'
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        Collections.sort(strings, new Comparator<String>() {\n         \
  \   @Override\n            public int compare(String o1, String o2) {\n        \
  \        if (o1.length() == o2.length()) {\n                    return 0;\n    \
  \            }\n                if (o1.length() > o2.length()) {\n             \
  \       return -1;\n                }\n                return 1;\n            }\n\
  \        });\n        return Optional.of(strings.get(0));"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        int longestLength = -1;\n        String longestString = null;\n\
  \        for (String s : strings) {\n            if (s.length() > longestLength)\
  \ {\n                longestLength = s.length();\n                longestString\
  \ = s;\n            }\n        }\n        return Optional.of(longestString);"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        String max = \"\";\n        for (String string : strings) {\n  \
  \          if (string.length() > max.length()) {\n                max = string;\n\
  \            }\n        }\n        return Optional.of(max);"
- "        // TODO: implement using Java 8 Stream API.\n        return Optional.empty();"
- "        Optional<String> result = Optional.empty();\n        if (strings.size()\
  \ > 0) {\n            result = Optional.of(strings.get(0));\n            for (String\
  \ s : strings) {\n                if (s.length() > result.get().length()) {\n  \
  \                  result = Optional.of(s);\n                }\n            }\n\
  \        }\n        return result;"
- "        // Keep the longest string.\n        return strings.stream().max(Comparator.comparing(String::length));"
- "        Optional<String> longest = Optional.empty();\n        for (String s : strings)\
  \ {\n            if (longest.isEmpty() || s.length() > longest.get().length()) {\n\
  \                longest = Optional.of(s);\n            }\n        }\n        return\
  \ longest;"
- "        Optional<String> longest = Optional.empty();\n        Optional<Integer>\
  \ maxLen = Optional.empty();\n        for (String str : strings) {\n           \
  \ if (!maxLen.isPresent() || maxLen.get() < str.length()) {\n                maxLen\
  \ = Optional.of(str.length());\n                longest = Optional.of(str);\n  \
  \          }\n        }\n        return longest;"
- "        Optional<String> result = Optional.empty();\n        if (strings.size()\
  \ > 0) {\n            strings.sort((String a, String b) -> b.length() - a.length());\n\
  \            result = Optional.of(strings.get(0));\n        }\n        return result;"
- '        return strings.stream().reduce((s1, s2) -> s1.length() > s2.length() ?
  s1 : s2);'
- "        Optional<String> longest = Optional.empty();\n        if (strings.size()\
  \ > 0) {\n            longest = Optional.of(strings.get(0));\n            for (String\
  \ string : strings) {\n                if (string.length() > longest.get().length())\
  \ {\n                    longest = Optional.of(string);\n                }\n   \
  \         }\n        }\n        return longest;"
- "        Optional<String> max = Optional.empty();\n        for (String s : strings)\
  \ {\n            if (max.isEmpty() || s.length() > max.get().length()) {\n     \
  \           max = Optional.of(s);\n            }\n        }\n        return max;"
- '        return null;'
- '        return strings.stream().max(Comparator.comparing(String::length));'
- "        Optional<String> s = strings.stream().max(Comparator.comparing(String::length));\n\
  \        return s;"
- "        if (strings.size() == 0) return Optional.empty();\n        int n = strings.size();\n\
  \        int max_i = 0;\n        for (int i = 1; i < n; i++) {\n            if (strings.get(i).length()\
  \ > strings.get(max_i).length()) {\n                max_i = i;\n            }\n\
  \        }\n        return Optional.of(strings.get(max_i));"
- '        return Optional.empty();'
- "        Optional<String> longest = Optional.empty();\n        // WRITE YOUR CODE\
  \ HERE\n        return longest;"
- "        // replace with your code\n        Optional<String> result = Optional.empty();\n\
  \        if(strings.size() > 0) {\n            result = Optional.of(strings.get(0));\n\
  \            for(String s : strings) {\n                if(s.length() > result.get().length())\
  \ {\n                    result = Optional.of(s);\n                }\n         \
  \   }\n        }\n        return result;"
- "        //TODO\n        return Optional.empty();"
- "        int maxLength = 0;\n        String longest = null;\n        for (String\
  \ str : strings) {\n            if (str.length() > maxLength) {\n              \
  \  maxLength = str.length();\n                longest = str;\n            }\n  \
  \      }\n        return Optional.ofNullable(longest);"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    } else {\n            String longest = strings.get(0);\n            for (String\
  \ s : strings) {\n                if (s.length() > longest.length()) {\n       \
  \             longest = s;\n                }\n            }\n            return\
  \ Optional.of(longest);\n        }"
- "      if (strings.size() == 0) {\n        return Optional.empty();\n      }\n \
  \     return Optional.of(Collections.max(strings, Comparator.comparing(String::length)));"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    } else {\n            return Optional.of(strings.stream().reduce((x, y) ->\
  \ x.length() >= y.length() ? x : y).get());\n        }"
- "        // Write your solution here\n        String longest = \"\";\n        Optional<String>\
  \ result = Optional.empty();\n        if (strings.size() > 0) {\n            for\
  \ (String str : strings) {\n                if (str.length() > longest.length())\
  \ {\n                    longest = str;\n                }\n            }\n    \
  \        result = Optional.of(longest);\n        }\n        return result;"
- '        return Optional.empty();'
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        int max = 0;\n        String res = \"\";\n        for (String s\
  \ : strings) {\n            if (s.length() > max) {\n                max = s.length();\n\
  \                res = s;\n            }\n        }\n        return Optional.of(res);"
- "      Optional<String> ans = Optional.empty();\n      if (strings.size() > 0) {\n\
  \        ans = Optional.of(strings.get(0));\n        for (String s : strings) {\n\
  \          if (s.length() > ans.get().length())\n            ans = Optional.of(s);\n\
  \        }\n      }\n      return ans;"
- "      String longest = \"\";\n      for (String str : strings) {\n        if (str.length()\
  \ > longest.length()) {\n          longest = str;\n        }\n      }\n      return\
  \ Optional.of(longest);"
- '        return Optional.empty();'
- '        return Optional.empty();'
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        Optional<String> result = Optional.of(strings.get(0));\n       \
  \ for (String str : strings) {\n            if (str.length() > result.get().length())\
  \ {\n                result = Optional.of(str);\n            }\n        }\n    \
  \    return result;"
- "        return strings.stream().max(new Comparator<String>() {\n            @Override\n\
  \            public int compare(String s1, String s2) {\n                return\
  \ s1.length() - s2.length();\n            }\n        });"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        String longestString = strings.get(0);\n        for (String s :\
  \ strings) {\n            if (s.length() > longestString.length()) {\n         \
  \       longestString = s;\n            }\n        }\n        return Optional.of(longestString);"
- '        return strings.stream().reduce((x, y) -> x.length() >= y.length() ? x :
  y);'
- "        if (strings.size() == 0) return Optional.empty();\n        return strings.stream().reduce((a,\
  \ b) -> a.length() >= b.length() ? a : b);"
- "        if (strings.size() == 0) return Optional.empty();\n        String res =\
  \ strings.get(0);\n        for (String s : strings) {\n            if (s.length()\
  \ > res.length()) res = s;\n        }\n        return Optional.of(res);"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        String maxString = strings.get(0);\n        for (String string :\
  \ strings) {\n            if (string.length() > maxString.length()) {\n        \
  \        maxString = string;\n            }\n        }\n        return Optional.of(maxString);"
- '        return null;'
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        String longest = strings.get(0);\n        for (String s : strings)\
  \ {\n            if (s.length() > longest.length()) {\n                longest =\
  \ s;\n            }\n        }\n        return Optional.of(longest);"
- "        // TODO: your code here\n        return null;"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        Optional<String> longest_string = Optional.of(strings.get(0));\n\
  \        for (String string : strings) {\n            if (string.length() > longest_string.get().length())\
  \ {\n                longest_string = Optional.of(string);\n            }\n    \
  \    }\n        return longest_string;"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    } else {\n            int maxLength = 0;\n            String longestString\
  \ = \"\";\n            for (String s : strings) {\n                if (s.length()\
  \ > maxLength) {\n                    maxLength = s.length();\n                \
  \    longestString = s;\n                }\n            }\n            return Optional.of(longestString);\n\
  \        }"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        Optional<String> result = Optional.ofNullable(strings.get(0));\n\
  \        for (String s : strings) {\n            if (s.length() > result.get().length())\
  \ {\n                result = Optional.ofNullable(s);\n            }\n        }\n\
  \        return result;"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    } else {\n            String maxString = strings.get(0);\n            for (String\
  \ string : strings) {\n                if (string.length() > maxString.length())\
  \ {\n                    maxString = string;\n                }\n            }\n\
  \            return Optional.of(maxString);\n        }"
- '        return strings.stream().reduce((x, y) -> x.length() >= y.length() ? x :
  y);'
- "        // your code goes here\n        return Optional.empty();"
- '        return Optional.empty();'
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        Optional<String> maxStr = Optional.of(strings.get(0));\n       \
  \ for (String s : strings) {\n            if (s.length() > maxStr.get().length())\
  \ {\n                maxStr = Optional.of(s);\n            }\n        }\n      \
  \  return maxStr;"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        int maxLength = 0;\n        String longestString = \"\";\n     \
  \   for (String s : strings) {\n            if (s.length() > maxLength) {\n    \
  \            maxLength = s.length();\n                longestString = s;\n     \
  \       }\n        }\n        return Optional.of(longestString);"
- "        if (strings.size() == 0) return Optional.empty();\n        int maxLength\
  \ = 0;\n        String longest = null;\n        for (String str : strings) {\n \
  \           if (str.length() > maxLength) {\n                maxLength = str.length();\n\
  \                longest = str;\n            }\n        }\n        return Optional.of(longest);"
- '        return strings.stream().reduce((acc, item) -> item.length() > acc.length()
  ? item : acc);'
- "        // Your code goes here\n        return Optional.empty();"
- "        Optional<String> ret = Optional.empty();\n        for (String s : strings)\
  \ {\n            if (!ret.isPresent() || s.length() > ret.get().length()) {\n  \
  \              ret = Optional.of(s);\n            }\n        }\n        return ret;"
- "\treturn null;"
- '        return strings.stream().max(Comparator.comparing(String::length));'
- "        //return Optional.ofNullable(strings.stream().max(Comparator.comparing(String::length)).orElse(null));\n\
  \        Optional<String> longest = Optional.empty();\n        for (String s : strings)\
  \ {\n            if (longest.isEmpty() || s.length() > longest.get().length()) {\n\
  \                longest = Optional.of(s);\n            }\n        }\n        return\
  \ longest;"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        Optional<String> longest = Optional.of(strings.get(0));\n      \
  \  for (String s : strings) {\n            if (s.length() > longest.get().length())\
  \ {\n                longest = Optional.of(s);\n            }\n        }\n     \
  \   return longest;"
- '        return strings.stream().max(Comparator.comparing(String::length));'
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        int maxLength = strings.get(0).length();\n        int maxIndex =\
  \ 0;\n        for (int i = 1; i < strings.size(); i++) {\n            if (strings.get(i).length()\
  \ > maxLength) {\n                maxLength = strings.get(i).length();\n       \
  \         maxIndex = i;\n            }\n        }\n        return Optional.of(strings.get(maxIndex));"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        ArrayList<Pair<String, Integer>> a = new ArrayList<>();\n      \
  \  for (String x : strings) {\n            a.add(new Pair<>(x, x.length()));\n \
  \       }\n        Collections.sort(a, Comparator.comparing(x -> x.getValue1()));\n\
  \        return Optional.of(a.get(a.size() - 1).getValue0());"
- "        // Implement a function that takes a list of strings and returns the longest\
  \ one.\n        return null;"
- "        // List<String> ls = strings.stream().filter(s -> s.isEmpty()).collect(Collectors.toList());\n\
  \        // if (ls.size() != 0) {\n        //     return Optional.empty();\n   \
  \     // }\n        String out = \"\";\n        for (String s : strings) {\n   \
  \         if (s.length() > out.length()) {\n                out = s;\n         \
  \   }\n        }\n        return Optional.of(out);"
- "        // TODO: Write your code here\n        return Optional.empty();"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        else {\n            Optional<String> result = Optional.of(strings.get(0));\n\
  \            for (String s : strings) {\n                if (s.length() > result.get().length())\
  \ {\n                    result = Optional.of(s);\n                }\n         \
  \   }\n            return result;\n        }"
- "        Optional<String> longest = Optional.empty();\n        for (String str :\
  \ strings) {\n            if (longest.isEmpty() || longest.get().length() < str.length())\
  \ {\n                longest = Optional.of(str);\n            }\n        }\n   \
  \     return longest;"
- "        Optional<String> longest = Optional.empty();\n        if (strings.size()\
  \ > 0) {\n            Optional<String> maxLength = strings.stream().max(Comparator.comparing(String::length));\n\
  \            if (maxLength.isPresent()) {\n                for (String s : strings)\
  \ {\n                    if (s.length() == maxLength.get().length()) {\n       \
  \                 longest = Optional.of(s);\n                        break;\n  \
  \                  }\n                }\n            }\n        }\n        return\
  \ longest;"
- '        // your code goes here'
- "        //begin\n        Optional<String> max = strings.stream().max(Comparator.comparing(String::length));\n\
  \        return max;\n        //end"
- "\treturn Optional.empty();"
- '        return strings.stream().max(Comparator.comparing(String::length));'
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        String result = strings.get(0);\n        for (String s : strings)\
  \ {\n            if (s.length() > result.length()) {\n                result = s;\n\
  \            }\n        }\n        return Optional.of(result);"
- "        if (strings.size() == 0) return Optional.empty();\n        else {\n   \
  \         int max = strings.get(0).length();\n            int maxIndex = 0;\n  \
  \          for (int i = 1; i < strings.size(); i++) {\n                if (strings.get(i).length()\
  \ > max) {\n                    max = strings.get(i).length();\n               \
  \     maxIndex = i;\n                }\n            }\n            return Optional.of(strings.get(maxIndex));\n\
  \        }"
- '        return strings.stream().reduce((s1, s2) -> s1.length() > s2.length() ?
  s1 : s2);'
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        int maxLength = 0;\n        String s = \"\";\n        for (String\
  \ string : strings) {\n            if (string.length() > maxLength) {\n        \
  \        maxLength = string.length();\n                s = string;\n           \
  \ }\n        }\n        return Optional.of(s);"
- "\t\tif (strings.size() == 0)\n\t\t\treturn Optional.empty();\n\t\telse {\n\t\t\t\
  int max = 0;\n\t\t\tString maxString = \"\";\n\t\t\tfor (String s : strings) {\n\
  \t\t\t\tif (s.length() > max) {\n\t\t\t\t\tmax = s.length();\n\t\t\t\t\tmaxString\
  \ = s;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Optional.of(maxString);\n\t\t}"
- '        return strings.stream().max(Comparator.comparing(String::length));'
- "        int max_length = 0;\n        String longest_string = null;\n        for\
  \ (String s : strings) {\n            if (s.length() > max_length) {\n         \
  \       max_length = s.length();\n                longest_string = s;\n        \
  \    }\n        }\n        return Optional.ofNullable(longest_string);"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        return Optional.of(strings.stream().max(Comparator.comparing(String::length)).get());"
- '        throw new RuntimeException("not implemented");'
- "        // >>> ' '.join(f\"longest({strings})\".split())\n        // 'longest([]);\
  \ longest([a, b, c]); longest([a, bb, ccc])'\n        // >>> ' '.join(f\"longest({strings})\"\
  \ for strings in [ [], ['a', 'b', 'c'], ['a', 'bb', 'ccc'] ])\n        // 'longest([]);\
  \ longest([a, b, c]); longest([a, bb, ccc])'\n        // >>> def longest(strings):\n\
  \        // ...     return None if not strings else max(strings, key=len)\n    \
  \    // ...\n        // >>> longest([])\n        // >>> longest(['a', 'b', 'c'])\n\
  \        // 'a'\n        // >>> longest(['a', 'bb', 'ccc'])\n        // 'ccc'\n\
  \        // >>>\n        // >>> def longest(strings):\n        // ...     return\
  \ None if not strings else max(strings, key=len)\n        // ...\n        // >>>\
  \ longest([])\n        // >>> longest(['a', 'b', 'c'])\n        // 'a'\n       \
  \ // >>> longest(['a', 'bb', 'ccc'])\n        // 'ccc'\n        // >>>\n       \
  \ // >>> def longest(strings):\n        // ...     return None if not strings else\
  \ max(strings, key=len)\n        // ...\n        // >>> longest([])\n        //\
  \ >>> longest(['a', 'b', 'c'])\n        // 'a'\n        // >>> longest(['a', 'bb',\
  \ 'ccc'])\n        // 'ccc'\n        // >>>\n        // >>> def longest(strings):\n\
  \        // ...     return None if not strings else max(strings, key=len)\n    \
  \    // ...\n        // >>> longest([])\n        // >>> longest(['a', 'b', 'c'])\n\
  \        // 'a'\n        // >>> longest(['a', 'bb', 'ccc'])\n        // 'ccc'\n\
  \        // >>>\n        // >>> def longest(strings):\n        // ...     return\
  \ None if not strings else max(strings, key=len)\n        // ...\n        // >>>\
  \ longest([])"
- "        int maxLength = 0;\n        Optional<String> maxString = Optional.empty();\n\
  \        for (String s : strings) {\n            if (s.length() > maxLength) {\n\
  \                maxLength = s.length();\n                maxString = Optional.of(s);\n\
  \            }\n        }\n        return maxString;"
- "        Optional<String> result = Optional.empty();\n        if(strings.size()\
  \ == 0) {\n            return result;\n        }\n        result = Optional.of(strings.get(0));\n\
  \        for(String s : strings) {\n            if(s.length() > result.get().length())\
  \ {\n                result = Optional.of(s);\n            }\n        }\n      \
  \  return result;"
- "        Optional<String> output = Optional.empty();\n        int length = 0;\n\
  \        for (String s : strings) {\n            if (s.length() > length) {\n  \
  \              length = s.length();\n                output = Optional.of(s);\n\
  \            }\n        }\n        return output;"
- "        if (strings.size() > 0) {\n            int maxLength = 0;\n           \
  \ String longestString = \"\";\n            for (String string : strings) {\n  \
  \              if (string.length() > maxLength) {\n                    maxLength\
  \ = string.length();\n                    longestString = string;\n            \
  \    }\n            }\n            return Optional.of(longestString);\n        }\
  \ else {\n            return Optional.empty();\n        }"
- '        return null;'
- '        return Optional.empty();'
- "        // []\n        if (strings.size() == 0) return Optional.empty();\n    \
  \    String[] ret = { strings.get(0) };\n        strings.forEach(s -> {\n      \
  \      if (s.length() > ret[0].length()) {\n                ret[0] = s;\n      \
  \      }\n        });\n        return Optional.of(ret[0]);"
- '        return strings.stream().max(Comparator.comparing(str -> str.length()));'
- "        Optional<String> maxstr = strings.stream().max(Comparator.comparing(String::length));\n\
  \        return maxstr;"
- "        // BEGIN SOLUTION\n        Optional<String> longest = Optional.empty();\n\
  \        for (String string : strings) {\n            if (!longest.isPresent() ||\
  \ string.length() > longest.get().length()) {\n                longest = Optional.of(string);\n\
  \            }\n        }\n        return longest;\n        // END SOLUTION"
- "        Optional<String> res = Optional.empty();\n        int len = 0;\n      \
  \  for (String s : strings) {\n            if (s.length() > len) {\n           \
  \     res = Optional.of(s);\n                len = s.length();\n            }\n\
  \        }\n        return res;"
- '        return strings.stream().reduce((str1, str2) -> str1.length() > str2.length()
  ? str1 : str2);'
- "        if (strings.size() == 0) return Optional.empty();\n        return strings.stream().max(Comparator.comparing(String::length));"
- '        return Optional.empty();'
- "        if (strings.size() == 0) return Optional.empty();\n        int max = strings.get(0).length();\n\
  \        String output = \"\";\n        for (String item : strings) {\n        \
  \    if (item.length() > max) {\n                max = item.length();\n        \
  \        output = item;\n            }\n        }\n        return Optional.of(output);"
- "\tOptional<String> x = strings.stream().max(Comparator.comparing(String::length));\n\
  \treturn x;"
- "        String max = null;\n        for (String s : strings) {\n            if\
  \ (max == null || s.length() > max.length()) {\n                max = s;\n     \
  \       }\n        }\n        return Optional.ofNullable(max);"
- "        // throw new RuntimeException(\"Should be implemented\");\n        int\
  \ max = 0;\n        String longestString = \"\";\n        for (String s : strings)\
  \ {\n            if (s.length() > max) {\n                max = s.length();\n  \
  \              longestString = s;\n            }\n        }\n        return Optional.of(longestString);"
- '        return strings.stream().reduce((acc, next) -> next.length() > acc.length()
  ? next : acc);'
- "        Optional<String> longest = Optional.empty();\n        for (String string\
  \ : strings) {\n            if (longest.isEmpty() || string.length() > longest.get().length())\
  \ {\n                longest = Optional.of(string);\n            }\n        }\n\
  \        return longest;"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        Optional<String> string = Optional.ofNullable(strings.get(0));\n\
  \        int maxLength = string.get().length();\n        for (int i = 1; i < strings.size();\
  \ i++) {\n            if (strings.get(i).length() > maxLength) {\n             \
  \   string = Optional.ofNullable(strings.get(i));\n                maxLength = string.get().length();\n\
  \            }\n        }\n        return string;"
- "        Optional<String> longest = Optional.empty();\n        for (String s : strings)\
  \ {\n            if (longest.isEmpty() || longest.get().length() < s.length()) {\n\
  \                longest = Optional.of(s);\n            }\n        }\n        return\
  \ longest;"
- "        if (strings.size() == 0) {\n            return Optional.empty();\n    \
  \    }\n        // must use iterator, since foreach loop with index yields different\
  \ semantics\n        Iterator<String> it = strings.iterator();\n        String longestString\
  \ = it.next();\n        while (it.hasNext()) {\n            String currentString\
  \ = it.next();\n            if (currentString.length() > longestString.length())\
  \ {\n                longestString = currentString;\n            }\n        }\n\
  \        return Optional.of(longestString);"
- "      if (strings.size() == 0) return Optional.empty();\n      String longest =\
  \ strings.get(0);\n      for (String s : strings)\n        if (s.length() > longest.length())\n\
  \          longest = s;\n      return Optional.of(longest);"
language: java
name: HumanEval_12_longest
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Out of list of strings, return the longest one. Return the\
  \ first one in case of multiple\n    // strings of the same length. Return None\
  \ in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a',\
  \ 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n\
  \    public static Optional<String> longest(ArrayList<String> strings) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(longest((new ArrayList<String>(Arrays.asList()))).equals(Optional.empty()));\n\
  \    assert(longest((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"\
  y\", (String)\"z\")))).equals(\"x\"));\n    assert(longest((new ArrayList<String>(Arrays.asList((String)\"\
  x\", (String)\"yyy\", (String)\"zzzz\", (String)\"www\", (String)\"kkkk\", (String)\"\
  abc\")))).equals(\"zzzz\"));\n    }\n\n}\n"
