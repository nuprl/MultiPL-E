completions:
- "        ArrayList<String> ans = new ArrayList<String>();\n        for (String str\
  \ : strings) {\n            if (str.contains(substring)) {\n                ans.add(str);\n\
  \            }\n        }\n        return ans;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ string : strings) {\n            if (string.contains(substring)) {\n         \
  \       result.add(string);\n            }\n        }\n        return result;"
- "        ArrayList<String> results = new ArrayList<String>();\n        for (String\
  \ str : strings) {\n            if (str.contains(substring)) {\n               \
  \ results.add(str);\n            }\n        }\n        return results;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<String> list = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                list.add(s);\n\
  \            }\n        }\n        return list;"
- "        ArrayList<String> output = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                output.add(s);\n\
  \            }\n        }\n        return output;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring))\n                result.add(s);\n\
  \        }\n        return result;"
- "        ArrayList<String> strings_copy = new ArrayList<String>(strings);\n    \
  \    for (String str : strings) {\n            if (!str.contains(substring)) {\n\
  \                strings_copy.remove(str);\n            }\n        }\n        return\
  \ strings_copy;"
- '        return new ArrayList<>(strings.stream().filter(n -> n.contains(substring)).collect(Collectors.toList()));'
- "        ArrayList<String> filtered_strings = new ArrayList<String>();\n       \
  \ for (String string : strings) {\n            if (string.contains(substring)) {\n\
  \                filtered_strings.add(string);\n            }\n        }\n     \
  \   return filtered_strings;"
- "        // >>> filter_by_substring([], 'a')\n        // []\n        // >>> filter_by_substring(['abc',\
  \ 'bacd', 'cde', 'array'], 'a')\n        // ['abc', 'bacd', 'array']\n        ArrayList<String>\
  \ result = new ArrayList<String>();\n        for (String string : strings) {\n \
  \           for (int i = 0; i < string.length(); i++) {\n                if (string.charAt(i)\
  \ == substring.charAt(0)) {\n                    if (string.contains(substring))\
  \ {\n                        result.add(string);\n                    }\n      \
  \          }\n            }\n        }\n        return result;"
- "        ArrayList<String> ret = new ArrayList<String>();\n        for (String str\
  \ : strings) {\n            if (str.contains(substring)) {\n                ret.add(str);\n\
  \            }\n        }\n        return ret;"
- "        if (strings == null || strings.size() == 0) return strings;\n        ArrayList<String>\
  \ stringsWithSubstring = new ArrayList<String>();\n        for (String string :\
  \ strings) {\n            if (string.contains(substring)) {\n                stringsWithSubstring.add(string);\n\
  \            }\n        }\n        return stringsWithSubstring;"
- "        ArrayList<String> filteredStrings = new ArrayList<String>();\n        //\
  \ >>>>> Your code here.\n        int index = 0;\n        while (index < strings.size())\
  \ {\n            String string = strings.get(index);\n            int stringIndex\
  \ = 0;\n            while (stringIndex < string.length()) {\n                if\
  \ (string.charAt(stringIndex) == substring.charAt(0)) {\n                    if\
  \ (string.contains(substring)) {\n                        filteredStrings.add(string);\n\
  \                        break;\n                    }\n                }\n    \
  \            stringIndex++;\n            }\n            index++;\n        }\n  \
  \      // <<<<< End of your code.\n        return filteredStrings;"
- "        ArrayList<String> filteredStrings = new ArrayList<String>();\n        for\
  \ (String string : strings) {\n            if (string.contains(substring)) {\n \
  \               filteredStrings.add(string);\n            }\n        }\n       \
  \ return filteredStrings;"
- "        ArrayList<String> res = new ArrayList<String>();\n        for (String s\
  \ : strings) {\n            if (s.contains(substring)) {\n                res.add(s);\n\
  \            }\n        }\n        return res;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
  \            }\n        }\n        return result;"
- "        // System.out.println(strings);\n        ArrayList<String> results = new\
  \ ArrayList<String>();\n        for (String string : strings) {\n            if\
  \ (string.contains(substring)) {\n                results.add(string);\n       \
  \     }\n        }\n        return results;"
- "        ArrayList<String> ret = new ArrayList<String>();\n        for (String s\
  \ : strings) {\n            if (s.contains(substring)) {\n                ret.add(s);\n\
  \            }\n        }\n        return ret;"
- '        return (ArrayList<String>) strings.stream().filter(str -> str.contains(substring)).collect(Collectors.toList());'
- "        ArrayList<String> filtedStrings = new ArrayList<String>();\n        for\
  \ (String string : strings) {\n            if (string.contains(substring)) {\n \
  \               filtedStrings.add(string);\n            }\n        }\n        return\
  \ filtedStrings;"
- '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));'
- "        ArrayList<String> ret = new ArrayList<String>();\n        for (String s\
  \ : strings) {\n            if (s.contains(substring)) {\n                ret.add(s);\n\
  \            }\n        }\n        return ret;"
- "        ArrayList<String> r = new ArrayList<String>();\n        for (String str\
  \ : strings) {\n            if (str.contains(substring)) {\n                r.add(str);\n\
  \            }\n        }\n        return r;"
- '        return (ArrayList<String>)strings.stream().filter(el -> el.contains(substring)).collect(Collectors.toList());'
- '        return new ArrayList<String>(0);'
- "        // TODO: implement this\n        return new ArrayList<String>();"
- "        // TODO: implement filterBySubstring\n        return null;"
- '        return strings.stream().filter(x -> x.contains(substring)).collect(Collectors.toCollection(ArrayList::new));'
- "        ArrayList<String> output = new ArrayList<String>();\n        for (String\
  \ str : strings) {\n            if (str.contains(substring)) {\n               \
  \ output.add(str);\n            }\n        }\n        return output;"
- "        ArrayList<String> res = new ArrayList<String>();\n        for (String str\
  \ : strings) {\n            if (str.contains(substring)) {\n                res.add(str);\n\
  \            }\n        }\n        return res;"
- "        ArrayList<String> results = new ArrayList<String>();\n        // TODO:\
  \ Your code here\n        for (String s : strings) {\n            if (s.contains(substring))\
  \ {\n                results.add(s);\n            }\n        }\n        return results;"
- "        // TODO: Fill in\n        return null;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<String> ret = new ArrayList<String>();\n        for (String str\
  \ : strings) {\n            if (str.contains(substring)) {\n                ret.add(str);\n\
  \            }\n        }\n        return ret;"
- "        // Implement your solution here\n        ArrayList<String> ret = new ArrayList<String>();\n\
  \        for (String str : strings) {\n            if (str.contains(substring))\
  \ {\n                ret.add(str);\n            }\n        }\n        return ret;"
- '        return strings.stream().filter(x -> x.contains(substring)).collect(Collectors.toCollection(ArrayList::new));'
- "        ArrayList<String> filteredStrings = new ArrayList<String>();\n        for\
  \ (String string : strings) {\n            if (string.contains(substring)) {\n \
  \               filteredStrings.add(string);\n            }\n        }\n       \
  \ return filteredStrings;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ string : strings) {\n            if (string.contains(substring)) {\n         \
  \       result.add(string);\n            }\n        }\n        return result;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<String> results = new ArrayList<String>();\n        for (String\
  \ str : strings) {\n            if (str.contains(substring)) {\n               \
  \ results.add(str);\n            }\n        }\n        return results;"
- '        // Your code here'
- "        ArrayList<String> stringsWithSubstring = new ArrayList<String>();\n   \
  \     for (String string : strings) {\n            if (string.contains(substring))\
  \ {\n                stringsWithSubstring.add(string);\n            }\n        }\n\
  \        return stringsWithSubstring;"
- "        ArrayList<String> stringsWithSubstring = new ArrayList<String>();\n   \
  \     for (String string : strings) {\n            if (string.contains(substring))\
  \ {\n                stringsWithSubstring.add(string);\n            }\n        }\n\
  \        return stringsWithSubstring;"
- "        ArrayList<String> newList = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                newList.add(s);\n\
  \            }\n        }\n        return newList;"
- '        throw new UnsupportedOperationException("Not implemented");'
- "        ArrayList<String> res = new ArrayList<String>();\n        for (String s\
  \ : strings) {\n            if (s.contains(substring)) {\n                res.add(s);\n\
  \            }\n        }\n        return res;"
- "        ArrayList<String> filteredStrings = new ArrayList<String>();\n        for\
  \ (String string : strings) {\n            if (string.contains(substring)) {\n \
  \               filteredStrings.add(string);\n            }\n        }\n       \
  \ return filteredStrings;"
- "        // A bit overcomplicated, but makes use of Java 8 stream API\n        return\
  \ strings.stream()\n                .filter(s -> s.contains(substring))\n      \
  \          .collect(Collectors.toCollection(ArrayList::new));"
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ string : strings) {\n            if (string.contains(substring)) {\n         \
  \       filtered.add(string);\n            }\n        }\n        return filtered;"
- "        ArrayList<String> res = new ArrayList<String>();\n        for (String s\
  \ : strings) {\n            if (s.contains(substring)) {\n                res.add(s);\n\
  \            }\n        }\n        return res;"
- '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));'
- '        return new ArrayList<>(strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList()));'
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ string : strings) {\n            if (string.contains(substring))\n           \
  \     filtered.add(string);\n        }\n        return filtered;"
- "        return strings.stream().filter(\n                (string) -> string.contains(substring)\n\
  \        ).collect(Collectors.toCollection(ArrayList::new));"
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ string : strings) {\n            if (string.contains(substring)) {\n         \
  \       filtered.add(string);\n            }\n        }\n        return filtered;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring))\n                result.add(s);\n\
  \        }\n        return result;"
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                filtered.add(s);\n\
  \            }\n        }\n        return filtered;"
- "        ArrayList<String> res = new ArrayList<String>();\n        for (String string\
  \ : strings) {\n            if (string.contains(substring)) {\n                res.add(string);\n\
  \            }\n        }\n        return res;"
- "        ArrayList<String> output = new ArrayList<String>();\n        for (String\
  \ string : strings) {\n            if (string.contains(substring))\n           \
  \     output.add(string);\n        }\n        return output;"
- "        ArrayList<String> output = new ArrayList<String>();\n        for (String\
  \ string : strings) {\n            if (string.contains(substring)) {\n         \
  \       output.add(string);\n            }\n        }\n        return output;"
- "        ArrayList<String> ans = new ArrayList<String>();\n        for (String s\
  \ : strings) {\n            if (s.contains(substring)) {\n                ans.add(s);\n\
  \            }\n        }\n        return ans;"
- "        ArrayList<String> filtered_list = new ArrayList<String>();\n        for\
  \ (String str : strings) {\n            if (str.contains(substring)) {\n       \
  \         filtered_list.add(str);\n            }\n        }\n        return filtered_list;"
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ string : strings) {\n            if (string.contains(substring)) {\n         \
  \       filtered.add(string);\n            }\n        }\n        return filtered;"
- "        // write code here\n        ArrayList<String> ret = new ArrayList<String>();\n\
  \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
  \                ret.add(s);\n            }\n        }\n        return ret;"
- '        return strings.stream().filter(str -> str.contains(substring)).collect(Collectors.toCollection(ArrayList::new));'
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<String> ans = new ArrayList<String>();\n        for (String string\
  \ : strings) {\n            if (string.contains(substring)) {\n                ans.add(string);\n\
  \            }\n        }\n        return ans;"
- "        ArrayList<String> filtered_strings = new ArrayList<String>();\n       \
  \ for (String string : strings) {\n            if (string.contains(substring)) {\n\
  \                filtered_strings.add(string);\n            }\n        }\n     \
  \   return filtered_strings;"
- '        throw new UnsupportedOperationException("Waiting to be implemented.");'
- '        return (ArrayList<String>)strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());'
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring))\n                result.add(s);\n\
  \        }\n        return result;"
- "        ArrayList<String> res = new ArrayList<String>();\n        for (String string\
  \ : strings) {\n            if (string.contains(substring)) {\n                res.add(string);\n\
  \            }\n        }\n        return res;"
- "        // YOUR CODE HERE\n        ArrayList<String> filteredStrings = new ArrayList<String>();\n\
  \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
  \                filteredStrings.add(s);\n            }\n        }\n        return\
  \ filteredStrings;"
- "        ArrayList<String> results = new ArrayList<String>();\n        for (String\
  \ str : strings) {\n            if (str.contains(substring)) {\n               \
  \ results.add(str);\n            }\n        }\n        return results;"
- "        ArrayList<String> res = new ArrayList<String>();\n        for (String str\
  \ : strings) {\n            if (str.contains(substring))\n                res.add(str);\n\
  \        }\n        return res;"
- "        ArrayList<String> filteredStrings = new ArrayList<String>();\n        for\
  \ (String string : strings) {\n            if (string.contains(substring)) {\n \
  \               filteredStrings.add(string);\n            }\n        }\n       \
  \ return filteredStrings;"
- "        // SOLUTION\n        return new ArrayList<String>();"
- '        return new ArrayList<>(strings.stream().filter(x -> x.contains(substring)).collect(Collectors.toList()));'
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ str : strings) {\n            if (str.contains(substring)) {\n               \
  \ result.add(str);\n            }\n        }\n        return result;"
- '        return strings.stream().filter(x -> x.contains(substring)).collect(Collectors.toCollection(ArrayList::new));'
- "        // >>> Write your code here <<<\n        return strings;"
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ str : strings) {\n            if (str.contains(substring)) {\n               \
  \ filtered.add(str);\n            }\n        }\n        return filtered;"
- "\tArrayList<String> ret = new ArrayList<String>();\n\tfor (String s : strings)\
  \ {\n\t    if (s.contains(substring)) {\n\t\tret.add(s);\n\t    }\n\t}\n\treturn\
  \ ret;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ string : strings) {\n            if (string.contains(substring)) {\n         \
  \       result.add(string);\n            }\n        }\n        return result;"
- "        ArrayList<String> filteredStrings = new ArrayList<String>();\n        for\
  \ (String s : strings) {\n            if (s.contains(substring)) {\n           \
  \     filteredStrings.add(s);\n            }\n        }\n        return filteredStrings;"
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ item : strings) {\n            if (item.contains(substring)) {\n             \
  \   filtered.add(item);\n            }\n        }\n        return filtered;"
- '        return new ArrayList<String>(strings.stream().filter(string -> string.contains(substring)).collect(Collectors.toList()));'
- "        ArrayList<String> matches = new ArrayList<String>();\n        for (String\
  \ str : strings) {\n            if (str.contains(substring)) {\n               \
  \ matches.add(str);\n            }\n        }\n        return matches;"
- "        ArrayList<String> out = new ArrayList<String>();\n        for (String s\
  \ : strings) {\n            if (s.contains(substring)) {\n                out.add(s);\n\
  \            }\n        }\n        return out;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<String> output = new ArrayList<String>();\n        // Fill in\
  \ code to filter the strings\n        for (String s : strings) {\n            //if\
  \ (s.contains(substring)) {\n            if (s.indexOf(substring) != -1) {\n   \
  \             output.add(s);\n            }\n        }\n        return output;"
- "        ArrayList<String> stringz = new ArrayList<String>();\n        for (String\
  \ i : strings) {\n            if (i.contains(substring)) {\n                stringz.add(i);\n\
  \            }\n        }\n        return stringz;"
- "        // YOUR CODE HERE\n        return new ArrayList<String>();"
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ string : strings) {\n            if (string.contains(substring))\n           \
  \     filtered.add(string);\n        }\n        return filtered;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ item : strings) {\n            if (item.contains(substring)) {\n             \
  \   result.add(item);\n            }\n        }\n        return result;"
- "        // Use an arraylist to keep track of the results\n        ArrayList<String>\
  \ results = new ArrayList<String>();\n        // For each string in strings...\n\
  \        for (String str : strings) {\n            // If the string contains substring,\
  \ add it to results\n            if (str.contains(substring)) {\n              \
  \  results.add(str);\n            }\n        }\n        // Return the results\n\
  \        return results;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ string : strings) {\n            if (string.contains(substring)) {\n         \
  \       filtered.add(string);\n            }\n        }\n        return filtered;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ str : strings) {\n            if (str.contains(substring)) {\n               \
  \ result.add(str);\n            }\n        }\n        return result;"
- '        return new ArrayList<String>(strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList()));'
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ string : strings) {\n            if (string.contains(substring)) {\n         \
  \       filtered.add(string);\n            }\n        }\n        return filtered;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
  \            }\n        }\n        return result;"
- '        return strings;'
- '        // your code goes here'
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
  \            }\n        }\n        return result;"
- '        return null;'
- "        ArrayList<String> ret = new ArrayList<String>();\n        for (String s\
  \ : strings) {\n            if (s.contains(substring)) {\n                ret.add(s);\n\
  \            }\n        }\n        return ret;"
- '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));'
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ str : strings) {\n            if (str.contains(substring)) {\n               \
  \ result.add(str);\n            }\n        }\n        return result;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ string : strings) {\n            if (string.contains(substring)) {\n         \
  \       result.add(string);\n            }\n        }\n        return result;"
- "        ArrayList<String> output = new ArrayList<String>();\n        for (String\
  \ string : strings) {\n            if (string.contains(substring))\n           \
  \     output.add(string);\n        }\n        return output;"
- "        // YOUR CODE HERE\n        ArrayList<String> result = new ArrayList<String>();\n\
  \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
  \                result.add(s);\n            }\n        }\n        return result;"
- "        ArrayList<String> arr = new ArrayList<String>();\n        for (String string\
  \ : strings) {\n            if (string.contains(substring)) {\n                arr.add(string);\n\
  \            }\n        }\n        return arr;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            // Empty result if no match\n            if (s.contains(substring))\
  \ {\n                result.add(s);\n            }\n        }\n        return result;"
- "        ArrayList<String> ret = new ArrayList<String>();\n        for (String s\
  \ : strings) {\n            if (s.contains(substring)) {\n                ret.add(s);\n\
  \            }\n        }\n        return ret;"
- "        // TODO: Finish this function\n        ArrayList<String> filtered = new\
  \ ArrayList<String>();\n        for (String s : strings) {\n            if (s.contains(substring))\
  \ {\n                filtered.add(s);\n            }\n        }\n        return\
  \ filtered;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
  \            }\n        }\n        return result;"
- '        return strings;'
- '        return new ArrayList<String>(strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList()));'
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ str : strings) {\n            if (str.contains(substring)) {\n               \
  \ result.add(str);\n            }\n        }\n        return result;"
- '        throw new IllegalArgumentException("Not implemented");'
- "        ArrayList<String> res = new ArrayList<String>();\n        for (String str\
  \ : strings) {\n            if (str.contains(substring))\n                res.add(str);\n\
  \        }\n        return res;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<String> res = new ArrayList<String>();\n        for (String s\
  \ : strings) {\n            if (s.contains(substring)) {\n                res.add(s);\n\
  \            }\n        }\n        return res;"
- "        ArrayList<String> filtered_strings = new ArrayList<String>();\n       \
  \ for (String s : strings) {\n            if (s.contains(substring)) {\n       \
  \         filtered_strings.add(s);\n            }\n        }\n        return filtered_strings;"
- '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));'
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<String> results = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                results.add(s);\n\
  \            }\n        }\n        return results;"
- "        ArrayList<String> arr = new ArrayList<String>();\n        for (String s\
  \ : strings) {\n            if (s.contains(substring)) {\n                arr.add(s);\n\
  \            }\n        }\n        return arr;"
- '        return strings;'
- '        throw new RuntimeException("Not implemented yet");'
- '        return new ArrayList<String>(Stream.of(strings).filter(s -> s.contains(substring)).collect(Collectors.toList()));'
- "        // TODO: Implement me\n        return null;"
- "        ArrayList<String> subStrings = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                subStrings.add(s);\n\
  \            }\n        }\n        return subStrings;"
- '        return (ArrayList<String>)strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());'
- "        //BEGIN_SOLUTION\n        return strings.stream()\n                   \
  \   .filter(s -> s.contains(substring))\n                      .collect(Collectors.toCollection(ArrayList::new));\n\
  \        //END_SOLUTION"
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ i : strings) {\n            if (i.contains(substring)) {\n                filtered.add(i);\n\
  \            }\n        }\n        return filtered;"
- "        ArrayList<String> stringsFiltered = new ArrayList<String>();\n        for\
  \ (String string : strings) {\n            if (string.contains(substring)) {\n \
  \               stringsFiltered.add(string);\n            }\n        }\n       \
  \ return stringsFiltered;"
- "        ArrayList<String> arrayList = new ArrayList<String>();\n        for (String\
  \ str : strings) {\n            if (str.contains(substring)) {\n               \
  \ arrayList.add(str);\n            }\n        }\n        return arrayList;"
- "        ArrayList<String> res = new ArrayList<String>();\n        for (String str\
  \ : strings) {\n            if (str.contains(substring))\n                res.add(str);\n\
  \        }\n        return res;"
- "        ArrayList<String> results = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                results.add(s);\n\
  \            }\n        }\n        return results;"
- "\tArrayList<String> result = new ArrayList<String>();\n\tfor (String s : strings)\
  \ {\n\t    if (s.contains(substring)) {\n\t\tresult.add(s);\n\t    }\n\t}\n\treturn\
  \ result;"
- "        // Fill in your code here\n        return null;"
- "        ArrayList<String> res = new ArrayList<String>();\n        for (String string\
  \ : strings) {\n            if (string.contains(substring)) {\n                res.add(string);\n\
  \            }\n        }\n        return res;"
- '        return null;'
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ str : strings) {\n            if (str.contains(substring)) {\n               \
  \ filtered.add(str);\n            }\n        }\n        return filtered;"
- "        ArrayList<String> subset = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                subset.add(s);\n\
  \            }\n        }\n        return subset;"
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ string : strings) {\n            if (string.contains(substring)) {\n         \
  \       filtered.add(string);\n            }\n        }\n        return filtered;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ item : strings) {\n            if (item.contains(substring)) {\n             \
  \   result.add(item);\n            }\n        }\n        return result;"
- "        ArrayList<String> filtered_list = new ArrayList<String>();\n        for\
  \ (String string : strings) {\n            if (string.contains(substring))\n   \
  \             filtered_list.add(string);\n        }\n        return filtered_list;"
- "        ArrayList<String> res = new ArrayList<String>();\n        for (String str\
  \ : strings) {\n            if (str.contains(substring)) {\n                res.add(str);\n\
  \            }\n        }\n        return res;"
- "        // TODO: write your code here\n        ArrayList<String> result = new ArrayList<String>();\n\
  \        for (String word : strings) {\n            if (word.contains(substring))\
  \ {\n                result.add(word);\n            }\n        }\n        return\
  \ result;"
- "        ArrayList<String> answer = new ArrayList<String>();\n        for (String\
  \ str : strings) {\n            if (str.contains(substring)) {\n               \
  \ answer.add(str);\n            }\n        }\n        return answer;"
- "        // Fill this in.\n        ArrayList<String> filteredStrings = new ArrayList<String>();\n\
  \        for (String str : strings) {\n            if (str.contains(substring))\
  \ {\n                filteredStrings.add(str);\n            }\n        }\n     \
  \   return filteredStrings;"
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                filtered.add(s);\n\
  \            }\n        }\n        return filtered;"
- "        // Call lambda functions here\n        return strings.stream().filter(it\
  \ -> it.contains(substring)).collect(Collectors.toCollection(ArrayList::new));"
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                filtered.add(s);\n\
  \            }\n        }\n        return filtered;"
- '        return strings.stream().filter(x -> x.contains(substring)).collect(Collectors.toCollection(ArrayList::new));'
- "        ArrayList<String> ret = new ArrayList<String>();\n        for (String s\
  \ : strings) {\n            if (s.contains(substring)) {\n                ret.add(s);\n\
  \            }\n        }\n        return ret;"
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ string : strings) {\n            if (string.contains(substring)) {\n         \
  \       filtered.add(string);\n            }\n        }\n        return filtered;"
- '        return (ArrayList<String>)strings.stream().filter(x -> x.contains(substring)).collect(Collectors.toList());'
- '        return strings.stream().filter(i -> i.contains(substring)).collect(Collectors.toCollection(ArrayList::new));'
- '        return new ArrayList<String>(strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList()));'
- "        ArrayList<String> filteredStrings = new ArrayList<String>();\n        for\
  \ (String s : strings) {\n            if (s.contains(substring)) {\n           \
  \     filteredStrings.add(s);\n            }\n        }\n        return filteredStrings;"
- "        ArrayList<String> res = new ArrayList<String>();\n        for (String s\
  \ : strings) {\n            if (s.contains(substring)) {\n                res.add(s);\n\
  \            }\n        }\n        return res;"
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ str : strings) {\n            if (str.contains(substring)) {\n               \
  \ filtered.add(str);\n            }\n        }\n        return filtered;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ string : strings) {\n            if (string.contains(substring)) {\n         \
  \       result.add(string);\n            }\n        }\n        return result;"
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                filtered.add(s);\n\
  \            }\n        }\n        return filtered;"
- "        // TODO: implement this\n        return new ArrayList<String>();"
- "        ArrayList<String> ret = new ArrayList<String>();\n        for (String str\
  \ : strings) {\n            if (str.contains(substring)) {\n                ret.add(str);\n\
  \            }\n        }\n        return ret;"
- "        ArrayList<String> filteredStrings = new ArrayList<String>();\n        for\
  \ (String string : strings) {\n            if (string.contains(substring)) {\n \
  \               filteredStrings.add(string);\n            }\n        }\n       \
  \ return filteredStrings;"
- "        ArrayList<String> filtered_strings = new ArrayList<String>();\n       \
  \ for (String s : strings) {\n            if (s.contains(substring)) {\n       \
  \         filtered_strings.add(s);\n            }\n        }\n        return filtered_strings;"
- "        ArrayList<String> finalList = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                finalList.add(s);\n\
  \            }\n        }\n        return finalList;"
- "        ArrayList<String> newArray = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                newArray.add(s);\n\
  \            }\n        }\n        return newArray;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ string : strings) {\n            if (string.contains(substring)) {\n         \
  \       filtered.add(string);\n            }\n        }\n        return filtered;"
- '        return null;'
- "        // Your code here\n        return null;"
- '        return (ArrayList<String>) strings.stream().filter(string -> string.contains(substring)).collect(Collectors.toList());'
- "        ArrayList<String> res = new ArrayList<String>();\n        for (String str\
  \ : strings) {\n            if (str.contains(substring)) {\n                res.add(str);\n\
  \            }\n        }\n        return res;"
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ str : strings) {\n            if (str.contains(substring)) {\n               \
  \ filtered.add(str);\n            }\n        }\n        return filtered;"
- '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));'
- "        // iterate over array\n        // compare substring to string if it contains\
  \ it\n        // if it does, add it to new array\n        // return new array\n\
  \        ArrayList<String> filteredList = new ArrayList<String>();\n        for\
  \ (String s : strings) {\n            if (s.contains(substring)) {\n           \
  \     filteredList.add(s);\n            }\n        }\n        return filteredList;"
- "        ArrayList<String> a = new ArrayList<String>();\n        for (String s :\
  \ strings) {\n            if (s.contains(substring)) {\n                a.add(s);\n\
  \            }\n        }\n        return a;"
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ string : strings) {\n            if (string.contains(substring)) {\n         \
  \       filtered.add(string);\n            }\n        }\n        return filtered;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
  \ string : strings) {\n            if (string.contains(substring)) {\n         \
  \       filtered.add(string);\n            }\n        }\n        return filtered;"
- '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));'
- "        ArrayList<String> filteredStrings = new ArrayList<String>();\n        for\
  \ (String string : strings) {\n            if (string.contains(substring)) {\n \
  \               filteredStrings.add(string);\n            }\n        }\n       \
  \ return filteredStrings;"
- "        ArrayList<String> output = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                output.add(s);\n\
  \            }\n        }\n        return output;"
- "        ArrayList<String> res = new ArrayList<String>();\n        for (String string\
  \ : strings) {\n            if (string.contains(substring)) {\n                res.add(string);\n\
  \            }\n        }\n        return res;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
  \            }\n        }\n        return result;"
- "        // YOUR CODE HERE\n        return null;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
  \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
  \            }\n        }\n        return result;"
language: java
name: HumanEval_7_filter_by_substring
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Filter an input list of strings only for ones that contain\
  \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    // >>>\
  \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd',\
  \ 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
  \ strings, String substring) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
  \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
  , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"\
  xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
  , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
  xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
  , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
  xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
  \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
  prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
  grunt\", (String)\"prune\")))));\n    }\n\n}\n"
