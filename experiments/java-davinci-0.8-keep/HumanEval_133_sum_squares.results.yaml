language: java
name: HumanEval_133_sum_squares
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // 1. map the float to ceiling int\n        // 2. map the each item with\
    \ square\n        // 3. sum of all the items\n        // long sumOfSquares = lst.stream().map(Math::ceil).map(x\
    \ -> x * x).reduce(0, (sum, b) -> sum + b);\n        // long sumOfSquares = lst.stream().map(Math::ceil).map(x\
    \ -> x * x).reduce(0, Long::sum);\n        // return (int) sumOfSquares;\n   \
    \     // int sumOfSquares = lst.stream().map(x -> (int)Math.ceil(x)).map(x ->\
    \ x * x).reduce(0, (sum, b) -> sum + b);\n        int sumOfSquares = lst.stream().map(x\
    \ -> (int)Math.ceil(x)).map(x -> x * x).reduce(0, Integer::sum);\n        return\
    \ sumOfSquares;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().mapToInt(Float::intValue).map(i -> i * i).sum();\n}\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphc74ww4q.java:25)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \  return lst.stream().map(x -> Math.round(x)).map(x -> x*x).reduce(0, (a,b) ->\
    \ a+b);\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7flxoh04.java:25)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return sumSquares(lst,0);\n}\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmponnc4kz3.java:19: error: method sumSquares in class Problem cannot\
    \ be applied to given types;\n        return sumSquares(lst,0);\n            \
    \   ^\n  required: ArrayList<Float>\n  found:    ArrayList<Float>,int\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().map(n -> BigDecimal.valueOf(n)).map(n -> Math.ceil(n.doubleValue())).map(n\
    \ -> Math.pow(n, 2)).mapToInt(n -> (int) n).sum();\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7lnw7hk5.java:19: error: incompatible types: Double cannot be converted\
    \ to int\n        return lst.stream().map(n -> BigDecimal.valueOf(n)).map(n ->\
    \ Math.ceil(n.doubleValue())).map(n -> Math.pow(n, 2)).mapToInt(n -> (int) n).sum();\n\
    \                                                                            \
    \                                                                  ^\n1 error\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().map(Float::intValue).map(x -> x * x).reduce(0, Integer::sum);\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdspxorjp.java:25)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float num : lst) {\n            sum += Math.ceil(num)\
    \ * Math.ceil(num);\n        }\n        return sum;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        // code here\n        return sum;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq7demm9n.java:24)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (float num : lst) {\n            // int converted\
    \ = (int) Math.ceil(num);\n            int converted = (int) Math.round(num);\n\
    \            sum += converted * converted;\n        }\n        return sum;\n}\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvh8yim29.java:31)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i =\
    \ 0; i < lst.size(); i++) {\n            list.add((int) Math.ceil(lst.get(i)));\n\
    \        }\n        int sum = 0;\n        for (int i = 0; i < list.size(); i++)\
    \ {\n            sum += list.get(i) * list.get(i);\n        }\n        return\
    \ sum;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (float num : lst) {\n            sum += Math.round(num)\
    \ * Math.round(num);\n        }\n        return sum;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_iugbm43.java:29)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Write your code here\n        float sum = 0;\n        for (float f : lst)\
    \ {\n            sum += Math.pow(Math.ceil(f), 2);\n        }\n        return\
    \ (int) sum;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Consider using the following methods:\n        // Math.ceil(float): it\
    \ accepts a float and returns the next highest int\n        // Math.pow(float,\
    \ float): it accepts two floats and returns a float\n        int sum = 0;\n  \
    \      //TODO: Sum up the squared integers in the list\n        return sum;\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmr3ekl6_.java:27)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    ArrayList<Integer> intList = new ArrayList<Integer>();\n        int sum =\
    \ 0;\n        for (int i = 0; i < lst.size(); i++) {\n            intList.add(Math.round(lst.get(i)));\n\
    \        }\n        for (int j = 0; j < intList.size(); j++) {\n            sum\
    \ += intList.get(j) * intList.get(j);\n        }\n        return sum;\n}\n   \
    \ public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvn5wfwt1.java:33)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Write your code here\n        // Hint: Use for loop to iterate the list\n\
    \        //       Use Math.ceil(element) to round up the element\n        // \
    \      Use Math.pow(element, 2) to find the square of element\n        //    \
    \   Use sum += squaredElem to sum the squared element\n        //       Return\
    \ sum\n        return 0;\n}\n    public static void main(String[] args) {\n  \
    \  assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64syqzwm.java:28)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // your code\n        return lst.stream().mapToInt(Float::intValue).map(x\
    \ -> x * x).sum();\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpac4qhbdi.java:26)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // TODO: Code this method.\n        return 0;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfaounyvg.java:23)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().map(x -> (int)Math.ceil(x)).map(x -> x*x).reduce(0, (acc,\
    \ x) -> acc + x);\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    ArrayList<Integer> a = new ArrayList<Integer>();\n        for (Float x :\
    \ lst) {\n            a.add(Math.round(x));\n        }\n        int sum = 0;\n\
    \        for (Integer x : a) {\n            sum += x * x;\n        }\n       \
    \ return sum;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6lhoq274.java:33)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return (int)lst.stream().map(x -> Math.ceil(x)*Math.ceil(x)).mapToDouble(x\
    \ -> x).sum();\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003955
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return (int)lst.stream().mapToDouble(x -> Math.ceil(x) * Math.ceil(x)).sum();\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \  return lst.stream().mapToInt(Math::round).map(x -> x * x).sum();\n}\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj_swpqmp.java:25)\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // YOUR CODE HERE\n        int sum = 0;\n        for (Float f : lst) {\n\
    \            int fInt = (int) Math.ceil(f);\n            sum += fInt * fInt;\n\
    \        }\n        return sum;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Your code here\n        return -1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfc_nkqda.java:23)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    lst.replaceAll(e -> (float)Math.ceil(e));\n        lst.replaceAll(e -> e\
    \ * e);\n        return lst.stream().mapToInt(Float::intValue).sum();\n}\n   \
    \ public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003957
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    //declare new ArrayList for holding the data\n        ArrayList<Float> newLst\
    \ = new ArrayList<Float>();\n        //declare an integer for holding the answer\n\
    \        int answer = 0;\n        //Use the ceiling function to round each entry\
    \ of the input array to the next highest integer\n        for (int i = 0; i <\
    \ lst.size(); i++) {\n            newLst.add((float) Math.ceil(lst.get(i)));\n\
    \        }\n        //Square each entry in the new array and sum them up\n   \
    \     for (int i = 0; i < newLst.size(); i++) {\n            answer += Math.pow(newLst.get(i),\
    \ 2);\n        }\n        //return the answer\n        return answer;\n}\n   \
    \ public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Code here\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp958jt5i3.java:23)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().map(e->(int)Math.ceil(e)*(int)Math.ceil(e)).reduce(0,(a,b)->a+b);\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003957
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int result = 0;\n        for (Float i : lst) {\n            result += Math.ceil(i)\
    \ * Math.ceil(i);\n        }\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003957
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float f : lst) {\n            sum += Math.ceil(f)\
    \ * Math.ceil(f);\n        }\n        return sum;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return (int)lst.stream().map(f -> Math.ceil(f)).map(f -> f*f).reduce(0.0,\
    \ (a,b) -> a+b);\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxpi8hnfz.java:19: error: incompatible types: Double cannot be converted\
    \ to int\n        return (int)lst.stream().map(f -> Math.ceil(f)).map(f -> f*f).reduce(0.0,\
    \ (a,b) -> a+b);\n                                                           \
    \                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return (int) lst.stream().map(Math::ceil).map(n -> n * n).reduce(0F, (x,\
    \ y) -> x + y);\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1m5fgzgf.java:19: error: no suitable method found for reduce(float,(x,y)->x\
    \ + y)\n        return (int) lst.stream().map(Math::ceil).map(n -> n * n).reduce(0F,\
    \ (x, y) -> x + y);\n                                                        \
    \         ^\n    method Stream.reduce(Double,BinaryOperator<Double>) is not applicable\n\
    \      (argument mismatch; float cannot be converted to Double)\n    method Stream.<U>reduce(U,BiFunction<U,?\
    \ super Double,U>,BinaryOperator<U>) is not applicable\n      (cannot infer type-variable(s)\
    \ U\n        (actual and formal argument lists differ in length))\n  where U,T\
    \ are type-variables:\n    U extends Object declared in method <U>reduce(U,BiFunction<U,?\
    \ super T,U>,BinaryOperator<U>)\n    T extends Object declared in interface Stream\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Write your code here\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gas80hv.java:23)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Your code here\n        ArrayList<Integer> newList = new ArrayList<Integer>();\n\
    \        for (Float element : lst) {\n            newList.add(Math.round(element));\n\
    \        }\n        int sum = 0;\n        for (Integer element : newList) {\n\
    \            sum += element * element;\n        }\n        return sum;\n}\n  \
    \  public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz51f1gty.java:34)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (float num : lst) {\n            sum += Math.ceil(num)\
    \ * Math.ceil(num);\n        }\n        return sum;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003957
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Python:\n        // sum([i**2 for i in lst])\n        return lst.stream().mapToInt(i\
    \ -> (int) Math.ceil(i)).map(i -> i * i).sum();\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003957
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().map(x -> (int)Math.ceil(x)).map(x -> x*x).reduce(0, Integer::sum);\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int ans = 0;\n        for (Float x : lst) {\n            ans += Math.round(x)\
    \ * Math.round(x);\n        }\n        return ans;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3y8ev3h0.java:29)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().map(x -> new BigDecimal(x).setScale(0, RoundingMode.CEILING).pow(2).intValue()).reduce(0,\
    \ (a, b) -> a + b);\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().mapToInt(Float::intValue).map(v -> v * v).sum();\n}\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpepbm49m6.java:25)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // WRITE YOUR CODE HERE\n        return -1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpakk_2t0i.java:23)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // write code here\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3bqlk1qj.java:23)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float i : lst) {\n            sum += (int) Math.ceil(i)\
    \ * (int) Math.ceil(i);\n        }\n        return sum;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int total = 0;\n        for (Float num : lst) {\n            total += Math.round(num)\
    \ * Math.round(num);\n        }\n        return total;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4mb1ixpu.java:29)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float elem : lst) {\n            sum += Math.ceil(elem)\
    \ * Math.ceil(elem);\n        }\n        return sum;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Do this\n        // step 1: get the list of upper int(Ceiling)\n     \
    \   // step 2: get the sum of the square of each number in the list.\n       \
    \ return 0;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpobgp20k1.java:25)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Your code here...\n        int sum = 0;\n        for (Float f : lst) {\n\
    \            // Double sqrt = Math.sqrt(f);\n            int ceil = (int) Math.ceil(f);\n\
    \            int square = ceil * ceil;\n            sum += square;\n        }\n\
    \        return sum;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return 0;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvtagpdm.java:22)\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return 0;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvtagpdm.java:22)\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return 0;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvtagpdm.java:22)\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return 0;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvtagpdm.java:22)\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Finding a sum of array list elements\n        return lst.stream().mapToInt(x\
    \ -> Math.toIntExact(Math.round(x * x))).sum();\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp29k7rf95.java:26)\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return -1;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6yp2a8u3.java:22)\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (float i : lst) {\n            sum += (int)Math.ceil(i)\
    \ * (int)Math.ceil(i);\n        }\n        return sum;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return 0;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvtagpdm.java:22)\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float i : lst) {\n            sum += Math.ceil(i)\
    \ * Math.ceil(i);\n        }\n        return sum;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003959
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    ArrayList<Integer> intLst = new ArrayList<Integer>();\n        intLst = lst.stream().map(e\
    \ -> (int) Math.ceil(e)).collect(Collectors.toCollection(ArrayList::new));\n \
    \       return intLst.stream().map(x -> x * x).reduce(0, Integer::sum);\n}\n \
    \   public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003959
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float num : lst) {\n            sum += Math.ceil(num)\
    \ * Math.ceil(num);\n        }\n        return sum;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003955
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().mapToInt(i -> (int)Math.ceil(i)*(int)Math.ceil(i)).sum();\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003959
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (float f : lst) {\n            int n = (int)Math.ceil(f);\n\
    \            sum += n * n;\n        }\n        return sum;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return 0;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvtagpdm.java:22)\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().mapToInt(f -> (int) Math.ceil(f)).map(f -> f * f).sum();\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return (int) lst.stream().map(x -> Math.ceil(x)).map(x -> x * x).reduce(0.0,\
    \ (x, y) -> x + y);\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpihj4ddaw.java:19: error: incompatible types: Double cannot be converted\
    \ to int\n        return (int) lst.stream().map(x -> Math.ceil(x)).map(x -> x\
    \ * x).reduce(0.0, (x, y) -> x + y);\n                                       \
    \                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().map(x -> Math.round(x)).map(x -> (int) Math.pow(x, 2)).reduce(0,\
    \ (x, y) -> x + y);\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0zh4hsu5.java:25)\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int total = 0;\n        for (Float num : lst) {\n            total += Math.round(num)\
    \ * Math.round(num);\n        }\n        return total;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4mb1ixpu.java:29)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    lst.replaceAll(e -> (float)Math.ceil(e));\n        lst.replaceAll(e -> e\
    \ * e);\n        return lst.stream().mapToInt(Float::intValue).sum();\n}\n   \
    \ public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003957
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().map(i -> (int)Math.ceil(i)).map(i -> i*i).reduce(0, (a,b)\
    \ -> a+b);\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Your code here\n        return -1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfc_nkqda.java:23)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    ArrayList<Integer> squares = new ArrayList<Integer>();\n        for (Float\
    \ i : lst) {\n            squares.add((int) Math.ceil(i));\n        }\n      \
    \  return squares.stream().mapToInt(x -> x * x).sum();\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().map(f -> Math.round(f)).map(f -> f * f).reduce(0, (f1,\
    \ f2) -> f1 + f2);\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpou6w3urx.java:25)\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Write your code here\n        int result = 0;\n        for (float num\
    \ : lst) {\n            int numCeil = (int) Math.ceil(num);\n            result\
    \ += numCeil * numCeil;\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003959
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Write your code here\n        int sum = 0;\n        for (float i : lst)\
    \ {\n            int rounded = (int) Math.ceil(i);\n            sum += Math.pow(rounded,\
    \ 2);\n        }\n        return sum;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return 0;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvtagpdm.java:22)\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Write your code here\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gas80hv.java:23)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    //TODO\n        return lst.stream().map(a -> Math.round(a)).map(b -> b *\
    \ b).reduce(0, (acc, c) -> acc + c);\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7d2k1zeo.java:26)\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int n = lst.size();\n        int sum = 0;\n        for (int i = 0; i < n;\
    \ i++) {\n            int val = (int) Math.ceil(lst.get(i));\n            sum\
    \ += val * val;\n        }\n        return sum;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float num : lst) {\n            sum += Math.round(num\
    \ * num);\n        }\n        return sum;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsnod1bw5.java:29)\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    ArrayList<Integer> list = new ArrayList<Integer>();\n        for (Float f\
    \ : lst) {\n            list.add(Math.round(f));\n        }\n        int sum =\
    \ 0;\n        for (Integer i : list) {\n            sum += i * i;\n        }\n\
    \        return sum;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmlbv693v.java:33)\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // write your code here\n        return lst.stream().mapToInt(x -> (int)Math.ceil(x)).map(x\
    \ -> x*x).sum();\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float l : lst) {\n            l = Math.round(l);\n\
    \            sum += l * l;\n        }\n        return sum;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcx4j6oxt.java:21: error: incompatible types: int cannot be converted\
    \ to Float\n            l = Math.round(l);\n                          ^\n1 error\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float f : lst) {\n            sum += (int)Math.ceil(f*f);\n\
    \        }\n        return sum;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt091omqv.java:29)\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().mapToInt(value -> (int) Math.ceil(value) * (int) Math.ceil(value)).sum();\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    ArrayList<Integer> s = new ArrayList<Integer>();\n        for (Float f :\
    \ lst) {\n            int a = Math.round(f);\n            s.add(a);\n        }\n\
    \        int sum = 0;\n        for (Integer i : s) {\n            sum += i * i;\n\
    \        }\n        return sum;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfa68esa5.java:34)\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().map(e -> (int)Math.ceil(e)).map(e -> e*e).reduce(0, (e1,\
    \ e2) -> e1 + e2);\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003960
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().mapToInt(i -> (int) Math.ceil(i) * (int) Math.ceil(i)).sum();\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // # 1. Create a new list that holds the \"Ceiling\" rounded numbers.\n \
    \       // # 2. Return the sum of squared numbers.\n        return 0;\n}\n   \
    \ public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplve6n_1b.java:24)\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    float sum = 0;\n        for (Float f : lst) {\n            sum += (float)\
    \ Math.pow(Math.ceil(f), 2);\n        }\n        return (int) sum;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003960
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (float item : lst) {\n            int val = (int)\
    \ Math.ceil(item);\n            sum += val * val;\n        }\n        return sum;\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003960
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float i : lst) {\n            float floored =\
    \ (float)Math.ceil(i);\n            sum += floored * floored;\n        }\n   \
    \     return sum;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Write your code here\n        int sum = 0;\n        for (Float f : lst)\
    \ {\n            sum += Math.round(f)*Math.round(f);\n        }\n        return\
    \ sum;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpclr6yol2.java:30)\n"
  stdout: ''
  timestamp: 1660003961
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().mapToInt(i -> (int)Math.ceil(i)).map(i -> i*i).sum();\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003960
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float i : lst) {\n            sum += Math.ceil(i)\
    \ * Math.ceil(i);\n        }\n        return sum;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003959
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int res = 0;\n        for (float x : lst) {\n            res += Math.ceil(x)\
    \ * Math.ceil(x);\n        }\n        return res;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    //Type your code here\n        int sum = 0;\n        for (Float f : lst)\
    \ {\n            double square = Math.ceil(f * f);\n            int intSquare\
    \ = (int) square;\n            sum += intSquare;\n        }\n        return sum;\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnlrv6elg.java:32)\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float f : lst) {\n            if (f < 0) {\n \
    \               f *= -1;\n            }\n            sum += Math.ceil(f) * Math.ceil(f);\n\
    \        }\n        return sum;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3fbr2y44.java:33)\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return 1;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ubmfae_.java:22)\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return 0;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvtagpdm.java:22)\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Put your code here\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0o7xnj38.java:23)\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int s = 0;\n        for (float f : lst) {\n            int f1 = (int)Math.ceil(f);\n\
    \            s += f1 * f1;\n        }\n        return s;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003960
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (float num : lst) {\n            sum += Math.ceil(num)\
    \ * Math.ceil(num);\n        }\n        return sum;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003957
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int acc = 0;\n        for (float e : lst) {\n            acc += Math.ceil(e)\
    \ * Math.ceil(e);\n        }\n        return acc;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003960
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // // write your code here\n        return lst.stream().map(x -> (int)Math.ceil(x)).map(x\
    \ -> x*x).reduce(0, (x,y) -> x+y);\n}\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003961
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float num : lst) {\n            sum += Math.ceil(num)\
    \ * Math.ceil(num);\n        }\n        return sum;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return 0;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvtagpdm.java:22)\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int result = 0;\n        for (float element : lst) {\n            float rounded\
    \ = (float) Math.ceil(element);\n            int squared = (int) Math.pow(rounded,\
    \ 2);\n            result += squared;\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \  // Write your code here\n}\n    public static void main(String[] args) {\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpl4k9gype.java:20: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().map(x -> Math.round(x)).map(x -> (int) Math.pow(x, 2)).reduce(0,\
    \ (x, y) -> x + y);\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0zh4hsu5.java:25)\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \  return lst.stream().reduce(0, (a,b) -> (int) (a + Math.ceil(b) * Math.ceil(b)));\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgbgrr7qh.java:19: error: no suitable method found for reduce(int,(a,b)->(in[...]l(b)))\n\
    \      return lst.stream().reduce(0, (a,b) -> (int) (a + Math.ceil(b) * Math.ceil(b)));\n\
    \                         ^\n    method Stream.reduce(Float,BinaryOperator<Float>)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Float,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // your code goes here\n        // int sum = 0;\n        // for (int i =\
    \ 0; i < lst.size(); i++) {\n        //     sum += Math.pow(Math.ceil(lst.get(i)),\
    \ 2);\n        // }\n        // return sum;\n        return lst.stream().mapToInt(i\
    \ -> new Double(Math.pow(Math.ceil(i), 2)).intValue()).sum();\n}\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003961
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Your code here\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb7hmr9k4.java:23)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().map(i -> Math.round(i)).map(i -> i * i).reduce(0, (a,\
    \ b) -> a + b);\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptr4majc3.java:25)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return (int)lst.stream().map(i -> Math.ceil(i)).map(i -> i*i).reduce(0f,(a,b)\
    \ -> a+b);\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpssjhl7x7.java:19: error: no suitable method found for reduce(float,(a,b)->a\
    \ + b)\n        return (int)lst.stream().map(i -> Math.ceil(i)).map(i -> i*i).reduce(0f,(a,b)\
    \ -> a+b);\n                                                                 \
    \    ^\n    method Stream.reduce(Double,BinaryOperator<Double>) is not applicable\n\
    \      (argument mismatch; float cannot be converted to Double)\n    method Stream.<U>reduce(U,BiFunction<U,?\
    \ super Double,U>,BinaryOperator<U>) is not applicable\n      (cannot infer type-variable(s)\
    \ U\n        (actual and formal argument lists differ in length))\n  where U,T\
    \ are type-variables:\n    U extends Object declared in method <U>reduce(U,BiFunction<U,?\
    \ super T,U>,BinaryOperator<U>)\n    T extends Object declared in interface Stream\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int ret = 0;\n        for (Float f : lst) {\n            ret += Math.ceil(f)\
    \ * Math.ceil(f);\n        }\n        return ret;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Write your code here\n        return lst.stream().map(i -> i * i).reduce(0f,\
    \ (x, y) -> x + y).intValue();\n}\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd4kwhy8b.java:26)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    float sum = 0;\n        for (Float n : lst) {\n            n = Math.round(n);\n\
    \            n = (float) Math.pow(n, 2);\n            sum += n;\n        }\n \
    \       return (int) sum;\n}\n    public static void main(String[] args) {\n \
    \   assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqh5yco59.java:21: error: incompatible types: int cannot be converted\
    \ to Float\n            n = Math.round(n);\n                          ^\n1 error\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float f : lst) {\n            sum += (int)Math.ceil(f)\
    \ * (int)Math.ceil(f);\n        }\n        return sum;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Write your code here.\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzuxx3xg8.java:23)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // First way\n        // int sum = 0;\n        // for (Float f : lst) {\n\
    \        //     sum += Math.ceil(f) * Math.ceil(f);\n        // }\n        //\
    \ return sum;\n        // Second way\n        // return lst.stream().mapToInt(i\
    \ -> (int) Math.ceil(i) * (int) Math.ceil(i)).sum();\n        // Third way\n \
    \       return lst.stream().mapToInt(i -> (int) Math.ceil(i)).map(i -> i * i).sum();\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003962
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().mapToInt(e -> (int)Math.ceil(e)).map(e -> e * e).sum();\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    ArrayList<Float> intList = new ArrayList<Float>();\n        for (int i =\
    \ 0; i < lst.size(); i++) {\n            intList.add(Math.ceil(lst.get(i)));\n\
    \        }\n        int sum = 0;\n        for (int i = 0; i < intList.size();\
    \ i++) {\n            sum += intList.get(i) * intList.get(i);\n        }\n   \
    \     return sum;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprn6dl6a3.java:21: error: incompatible types: double cannot be converted\
    \ to Float\n            intList.add(Math.ceil(lst.get(i)));\n                \
    \                 ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Your code here\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb7hmr9k4.java:23)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().map(x -> (int)Math.ceil(x) * (int)Math.ceil(x)).reduce(0,\
    \ (a, b) -> a + b);\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003962
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float num : lst) {\n            sum += Math.ceil(num)\
    \ * Math.ceil(num);\n        }\n        return sum;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    if (lst == null) return 0;\n        int sum = 0;\n        for (float num\
    \ : lst) {\n            sum += Math.round(num);\n        }\n        return sum\
    \ * sum;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt_04rj9h.java:27)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().mapToInt(x -> (int)Math.ceil(x) * (int)Math.ceil(x)).sum();\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float i : lst) {\n            sum += Math.round(i)\
    \ * Math.round(i);\n        }\n        return sum;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6hnhod_l.java:29)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    ArrayList<Integer> intList = lst.stream().map(n -> (int) Math.ceil(n)).collect(Collectors.toCollection(ArrayList::new));\n\
    \        int sum = 0;\n        for (int i : intList) {\n            sum += i *\
    \ i;\n        }\n        return sum;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return 0;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvtagpdm.java:22)\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().map(x -> Math.round(x * x)).reduce(0, (x, y) -> x + y);\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6bt1b7p0.java:25)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // there is no need to use a for loop and\n        // you may use a lambda\
    \ expression in the following code.\n        // You should replace null with an\
    \ integer number\n        int sum = 0;\n        for (Float x : lst) {\n      \
    \      sum += Math.ceil(x) * Math.ceil(x);\n        }\n        return sum;\n}\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Write your code here\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gas80hv.java:23)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Code here\n        // To round a float number\n        // Math.round(number)\n\
    \        // int i = (int)Math.ceil(number);\n        // To square a number\n \
    \       // number * number\n        int sum = 0;\n        // Code here\n\n   \
    \     for (Float f : lst) {\n            sum += Math.round(f) * Math.round(f);\n\
    \        }\n\n        return sum;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3lzlhpjs.java:38)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().mapToInt(i -> (int) Math.ceil(i) * (int) Math.ceil(i)).sum();\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003960
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (float f : lst) {\n            int ceil = (int)\
    \ Math.ceil(f);\n            int square = ceil * ceil;\n            sum += square;\n\
    \        }\n        return sum;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Write your code here\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gas80hv.java:23)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Your code is here ... enjoy!\n        return -1;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp966vmd6f.java:23)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    ArrayList<Float> lstUpper = new ArrayList<Float>();\n        for (int i =\
    \ 0; i < lst.size(); i++) {\n            lstUpper.add(Math.ceil(lst.get(i)));\n\
    \        }\n        return (int) lstUpper.stream().map(i -> Math.pow(i, 2)).reduce(0,\
    \ (a, b) -> a + b);\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8j1s1tw.java:21: error: incompatible types: double cannot be converted\
    \ to Float\n            lstUpper.add(Math.ceil(lst.get(i)));\n               \
    \                   ^\n/tmp/tmpa8j1s1tw.java:23: error: no suitable method found\
    \ for reduce(int,(a,b)->a + b)\n        return (int) lstUpper.stream().map(i ->\
    \ Math.pow(i, 2)).reduce(0, (a, b) -> a + b);\n                              \
    \                                 ^\n    method Stream.reduce(Double,BinaryOperator<Double>)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Double)\n\
    \    method Stream.<U>reduce(U,BiFunction<U,? super Double,U>,BinaryOperator<U>)\
    \ is not applicable\n      (cannot infer type-variable(s) U\n        (actual and\
    \ formal argument lists differ in length))\n  where U,T are type-variables:\n\
    \    U extends Object declared in method <U>reduce(U,BiFunction<U,? super T,U>,BinaryOperator<U>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().mapToInt(Float::intValue).map(x -> x * x).sum();\n}\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw0w1p2yf.java:25)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float item : lst) {\n            item = (float)\
    \ Math.ceil(item);\n            sum += Math.round(item * item);\n        }\n \
    \       return sum;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003964
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float x : lst) {\n            sum += Math.ceil(x)\
    \ * Math.ceil(x);\n        }\n        return sum;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // type your solution here\n        return 0;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkoz_gjcx.java:23)\n"
  stdout: ''
  timestamp: 1660003963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().map(Math::ceil).map(i -> i*i).reduce(0, (a,b) -> a+b);\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsv8wahk8.java:19: error: no suitable method found for reduce(int,(a,b)->a\
    \ + b)\n        return lst.stream().map(Math::ceil).map(i -> i*i).reduce(0, (a,b)\
    \ -> a+b);\n                                                         ^\n    method\
    \ Stream.reduce(Double,BinaryOperator<Double>) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Double)\n    method Stream.<U>reduce(U,BiFunction<U,?\
    \ super Double,U>,BinaryOperator<U>) is not applicable\n      (cannot infer type-variable(s)\
    \ U\n        (actual and formal argument lists differ in length))\n  where U,T\
    \ are type-variables:\n    U extends Object declared in method <U>reduce(U,BiFunction<U,?\
    \ super T,U>,BinaryOperator<U>)\n    T extends Object declared in interface Stream\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660003963
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    ArrayList<Integer> integers = new ArrayList<Integer>();\n        for (Float\
    \ f : lst) {\n            integers.add(Math.round(f));\n        }\n        int\
    \ total = 0;\n        for (Integer i : integers) {\n            total += i * i;\n\
    \        }\n        return total;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpda3fdt_9.java:33)\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    ArrayList<Integer> sqred = new ArrayList<Integer>();\n        for (Float\
    \ i : lst) {\n            sqred.add((int) Math.ceil(i));\n        }\n        return\
    \ (int) sqred.stream().mapToDouble(i -> Math.pow(i, 2)).sum();\n}\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003964
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float i : lst) {\n            sum += Math.ceil(i)\
    \ * Math.ceil(i);\n        }\n        return sum;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    lst.replaceAll(x -> Math.round(x));\n        lst.replaceAll(x -> x * x);\n\
    \        return lst.stream().mapToInt(Integer::intValue).sum();\n}\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnce_x1go.java:19: error: incompatible types: bad return type in\
    \ lambda expression\n        lst.replaceAll(x -> Math.round(x));\n           \
    \                           ^\n    int cannot be converted to Float\n/tmp/tmpnce_x1go.java:21:\
    \ error: incompatible types: invalid method reference\n        return lst.stream().mapToInt(Integer::intValue).sum();\n\
    \                                     ^\n    method intValue in class Integer\
    \ cannot be applied to given types\n      required: no arguments\n      found:\
    \    Float\n      reason: actual and formal argument lists differ in length\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().map(Float::intValue).map(x -> x * x).reduce(0, (x, y)\
    \ -> x + y);\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgn46hepy.java:25)\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (float x : lst) {\n            sum += (int) Math.ceil(x\
    \ * x);\n        }\n        return sum;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt3txvpgs.java:29)\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().mapToInt(Float::intValue).map(x -> x * x).sum();\n}\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw0w1p2yf.java:25)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Your code here\n        return lst.stream().mapToInt(s -> (int)Math.ceil(s)).map(s\
    \ -> s*s).sum();\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Write your code here\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gas80hv.java:23)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Write your code here.\n        return -1;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30afu1qt.java:23)\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float i : lst) {\n            sum += Math.round(i\
    \ * i);\n        }\n        return sum;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp77n0rjwq.java:29)\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().mapToInt(i -> (int) Math.ceil(i)).map(i -> i * i).sum();\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (float num : lst) {\n            num = Math.ceil(num);\n\
    \            sum += (int)Math.pow(num, 2);\n        }\n        return sum;\n}\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy1a_rbm3.java:21: error: incompatible types: possible lossy conversion\
    \ from double to float\n            num = Math.ceil(num);\n                  \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // write your code here\n        // List<Float> squared = new ArrayList<Float>();\n\
    \        // for (int i = 0; i < lst.size(); i++) {\n        // squared.add(new\
    \ Float(Math.ceil(lst.get(i))));\n        // }\n        // return squared.stream().mapToInt(a\
    \ -> a.intValue()).map(a -> a * a).sum();\n        return lst.stream().mapToInt(a\
    \ -> (int) Math.ceil(a)).map(a -> a * a).sum();\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003964
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    ArrayList<Integer> lst_ = new ArrayList<Integer>();\n        int j = 0;\n\
    \        while (j < lst.size()) {\n            lst_.add((int)Math.ceil(lst.get(j)));\n\
    \            j = j + 1;\n        }\n        return lst_.stream().map(i -> i *\
    \ i).reduce(0, (a, b) -> a + b);\n}\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    ArrayList<Integer> newLst = new ArrayList<Integer>();\n        lst.forEach(x\
    \ -> newLst.add(Math.round(x)));\n        return newLst.stream().mapToInt(i ->\
    \ i*i).sum();\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdc4uz0yg.java:27)\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int s = 0;\n        for (float e : lst) {\n            float sq = (float)\
    \ Math.pow(Math.ceil(e), 2);\n            s += sq;\n        }\n        return\
    \ s;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Your Code Here!\n}\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpe3o08iq0.java:20: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return 0;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvtagpdm.java:22)\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    ArrayList<Integer> newLst = new ArrayList<Integer>();\n        for (int i\
    \ = 0; i < lst.size(); i++) {\n            if (lst.get(i) < 0) {\n           \
    \     int element = (int) Math.floor(lst.get(i));\n                newLst.add(element);\n\
    \            } else {\n                int element = (int) Math.ceil(lst.get(i));\n\
    \                newLst.add(element);\n            }\n        }\n        int sum\
    \ = 0;\n        for (int i = 0; i < newLst.size(); i++) {\n            sum +=\
    \ Math.pow(newLst.get(i), 2);\n        }\n        return sum;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7x1hayg6.java:40)\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    lst.replaceAll(x -> (float)Math.ceil(x));\n        lst.replaceAll(x -> x*x);\n\
    \        int res = lst.stream().mapToInt(Number::intValue).sum();\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Write code here\n        int res = 0;\n        for (Float f : lst) {\n\
    \            int tmp = Math.round(f);\n            res += tmp * tmp;\n       \
    \ }\n        return res;\n}\n    public static void main(String[] args) {\n  \
    \  assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpykgrsj_y.java:31)\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    lst.replaceAll(x -> (float)Math.ceil(x));\n        return lst.stream().mapToInt(e\
    \ -> (int)Math.pow(e, 2)).sum();\n}\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int result = 0;\n        // Write your code here\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsa56fm3c.java:24)\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return 0;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvtagpdm.java:22)\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().map(i -> (int)Math.ceil(i)).map(i -> i*i).reduce(0,(total,i)\
    \ -> total+i);\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Write your code here.\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzuxx3xg8.java:23)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Your code here...\n        float sum = 0;\n        for (float e : lst)\
    \ {\n            float tmp = Math.ceil(e);\n            sum += tmp * tmp;\n  \
    \      }\n        return (int) sum;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo4qfqn_f.java:22: error: incompatible types: possible lossy conversion\
    \ from double to float\n            float tmp = Math.ceil(e);\n              \
    \                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float f : lst) {\n            sum += (Math.ceil(f)\
    \ * Math.ceil(f));\n        }\n        return sum;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003965
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        int n = lst.size();\n        for (int i = 0; i < n;\
    \ i++) {\n            // int tmp = Math.round(lst.get(i));\n            int tmp\
    \ = (int) Math.ceil(lst.get(i));\n            // int tmp = (int) Math.ceil(lst.get(i));\n\
    \            sum += tmp * tmp;\n        }\n        return sum;\n}\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Write your code here\n        // Use lst.size() to get number of elements\
    \ in the list\n        // Use lst.get(i) to get the i-th element in the list\n\
    \        // You can use Math.ceil(x) to round x to the upper integer\n       \
    \ // You can use Math.pow(x,y) to get x^y\n        // You can use ArrayList.add(e)\
    \ to add e to ArrayList\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1gaclkpg.java:28)\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return (int)lst.stream().map(a -> Math.round(a)).map(b -> b*b).reduce(0,(c,d)\
    \ -> c+d);\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe0v3nmmo.java:25)\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Write your code here\n        int sum = 0;\n        for (float number\
    \ : lst) {\n            int i = (int) Math.ceil(number);\n            sum += i\
    \ * i;\n        }\n        return sum;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003965
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    float sum = 0;\n        for (float f : lst) {\n            // Java's Math.ceil\
    \ function will return a double\n            sum += Math.ceil(f) * Math.ceil(f);\n\
    \        }\n        return (int) sum;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003965
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i =\
    \ 0; i < lst.size(); i++) {\n            list.add((int) Math.ceil(lst.get(i)));\n\
    \        }\n        int sum = 0;\n        for (int i = 0; i < list.size(); i++)\
    \ {\n            sum += list.get(i) * list.get(i);\n        }\n        return\
    \ sum;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return 0;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvtagpdm.java:22)\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // HashMap<Integer,Integer> map = new HashMap<>();\n        // lst.forEach(e\
    \ -> map.put(e.intValue(),e.intValue()));\n        // int res = 0;\n        //\
    \ for(int i : map.keySet())\n        //     res += i*i;\n        // return res;\n\
    \        return lst.stream().map(e -> Math.round(e))\n            .reduce(0,(x,y)\
    \ -> x+y*y);\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb621vv3k.java:32)\n"
  stdout: ''
  timestamp: 1660003966
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().mapToInt(n -> (int)Math.ceil(n) * (int)Math.ceil(n)).sum();\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // use List.stream()\n        // use .map()\n        // use .reduce()\n \
    \       return (int)lst.stream().map(num -> Math.ceil(num)).map(num -> num * num).reduce(0.0,\
    \ (num1, num2) -> num1 + num2);\n}\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprb74mduj.java:22: error: incompatible types: Double cannot be converted\
    \ to int\n        return (int)lst.stream().map(num -> Math.ceil(num)).map(num\
    \ -> num * num).reduce(0.0, (num1, num2) -> num1 + num2);\n                  \
    \                                                                      ^\n1 error\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().map(x -> (int)Math.ceil(x) * (int)Math.ceil(x)).reduce(0,\
    \ (a, b) -> a + b);\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float x : lst) {\n            sum += Math.ceil(x\
    \ * x);\n        }\n        return sum;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq7m76eoo.java:29)\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (float number : lst) {\n            sum += Math.round(number)\
    \ * Math.round(number);\n        }\n        return sum;\n}\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphrn4rod3.java:29)\n"
  stdout: ''
  timestamp: 1660003966
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Your code here\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb7hmr9k4.java:23)\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().mapToInt(Math::round).map(i -> i * i).sum();\n}\n   \
    \ public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0_f9229c.java:25)\n"
  stdout: ''
  timestamp: 1660003966
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float element : lst) {\n            sum += (int)\
    \ Math.ceil(element) * (int) Math.ceil(element);\n        }\n        return sum;\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003966
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().map(n -> (int)Math.ceil(n))\n                .map(n ->\
    \ n * n)\n                .reduce(0, (a,b) -> a + b);\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003966
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return 0;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgvtagpdm.java:22)\n"
  stdout: ''
  timestamp: 1660003958
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    ArrayList<Float> squared = new ArrayList<Float>();\n        for (Float i\
    \ : lst) {\n            squared.add((float) Math.ceil(i) * (float) Math.ceil(i));\n\
    \        }\n        int sum = 0;\n        for (Float i : squared) {\n        \
    \    sum += i;\n        }\n        return sum;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003966
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float num : lst) {\n            sum += Math.ceil(num)\
    \ * Math.ceil(num);\n        }\n        return sum;\n}\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    for (int i = 0; i < lst.size(); i++) {\n            Float val = lst.get(i);\n\
    \            if (val < 0) {\n                val = (float)Math.floor(val);\n \
    \           } else {\n                val = (float)Math.ceil(val);\n         \
    \   }\n            lst.set(i, val);\n        }\n        return lst.stream().mapToInt(i\
    \ -> i.intValue()).map(i -> i * i).sum();\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz3w0usdx.java:35)\n"
  stdout: ''
  timestamp: 1660003966
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // ToDo:\n        // replace the random value with your code\n        ArrayList<Float>\
    \ list=new ArrayList<Float>();\n        int sum=0;\n        for(int i=0;i<lst.size();i++){\n\
    \            list.add(Math.round(lst.get(i)));\n        }\n        for(int i=0;i<list.size();i++){\n\
    \            sum+=Math.pow(list.get(i),2);\n        }\n        return sum;\n}\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm2q0kema.java:24: error: incompatible types: int cannot be converted\
    \ to Float\n            list.add(Math.round(lst.get(i)));\n                  \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660003966
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float i : lst) {\n            sum += (int)Math.ceil(i)*(int)Math.ceil(i);\n\
    \        }\n        return sum;\n}\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003966
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Write your code here\n        int ret = 0;\n        for (Float a : lst)\
    \ {\n            ret += (int) Math.ceil(a) * (int) Math.ceil(a);\n        }\n\
    \        return ret;\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003966
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return lst.stream().mapToInt(x -> (int)Math.ceil(x)*(int)Math.ceil(x)).sum();\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003966
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    // Write your code here\n        return 0;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gas80hv.java:23)\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    int sum = 0;\n        for (Float f : lst) {\n            sum += Math.ceil(f)\
    \ * Math.ceil(f);\n        }\n        return sum;\n}\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003957
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    ArrayList<Float> lst_sq = new ArrayList<Float>();\n        for (Float i :\
    \ lst) {\n            lst_sq.add((float) Math.ceil(i) * (float) Math.ceil(i));\n\
    \        }\n        return lst_sq.stream().mapToInt(Float::intValue).sum();\n\
    }\n    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003966
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n    \
    \    return (int)lst.stream().map(e -> Math.ceil(e)).map(e -> e*e).reduce(0.0,\
    \ (a,b) -> a+b);\n}\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjy0dbvqn.java:19: error: incompatible types: Double cannot be converted\
    \ to int\n        return (int)lst.stream().map(e -> Math.ceil(e)).map(e -> e*e).reduce(0.0,\
    \ (a,b) -> a+b);\n                                                           \
    \                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660003966
