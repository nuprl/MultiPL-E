completions:
- "        int len = word.length();\n        if (len <= 2) {\n            return \"\
  \";\n        }\n        int prevPos = len - 1;\n        while (prevPos >= 0 && isVowel(word.charAt(prevPos)))\
  \ {\n            prevPos--;\n        }\n        if (prevPos == 0) {\n          \
  \  return \"\";\n        }\n        int nextPos = prevPos - 1;\n        while (nextPos\
  \ >= 0 && !isVowel(word.charAt(nextPos))) {\n            nextPos--;\n        }\n\
  \        if (nextPos == -1) {\n            return \"\";\n        }\n        return\
  \ word.substring(nextPos, nextPos + 1);"
- '        // Write your code here.'
- "        String vowels = \"aeiou\";\n        String closest = \"\";\n        for\
  \ (int i = word.length() - 1; i >= 0; i--) {\n            String currentLetter =\
  \ word.substring(i, i + 1);\n            if (vowels.contains(currentLetter)) {\n\
  \                if (i + 1 == word.length()) {\n                    return \"\"\
  ;\n                }\n                String letterBefore = word.substring(i + 1,\
  \ i + 2);\n                if (!vowels.contains(letterBefore)) {\n             \
  \       return currentLetter;\n                }\n            }\n        }\n   \
  \     return \"\";"
- "        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n\
  \        int lastVowelIndex = -1;\n        for (int i = word.length() - 1; i >=\
  \ 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n         \
  \       lastVowelIndex = i;\n                break;\n            }\n        }\n\
  \        if (lastVowelIndex == -1) {\n            return \"\";\n        }\n    \
  \    for (int i = word.length() - 1; i >= 0; i--) {\n            if (vowels.indexOf(word.charAt(i))\
  \ == -1) {\n                sb.append(word.charAt(i));\n            } else {\n \
  \               if (sb.length() == 0) {\n                    continue;\n       \
  \         }\n                if (i > lastVowelIndex) {\n                    return\
  \ \"\";\n                }\n                if (i == lastVowelIndex) {\n       \
  \             return word.substring(i, i + 1);\n                }\n            \
  \    // lastvowelIndex > i\n                if (lastVowelIndex - i <= sb.length())\
  \ {\n                    // get the rightmost vowel\n                    return\
  \ word.substring(i, i + 1);\n                }\n                return \"\";\n \
  \           }\n        }\n        return \"\";"
- "        int len = word.length();\n        String vowels = \"AEIOUaeiou\";\n   \
  \     int j = len-1;\n        while(j >= 0 && vowels.indexOf(word.charAt(j)) ==\
  \ -1)\n            j--;\n        if(j >= 0) {\n            int i = j-1;\n      \
  \      while(i >= 0 && vowels.indexOf(word.charAt(i)) == -1)\n                i--;\n\
  \            if(i >= 0)\n                return \"\";\n            else\n      \
  \          return word.substring(j, j+1);\n        }\n        else\n           \
  \ return \"\";"
- "        String vowels = \"aeiouAEIOU\";\n        List<String> cVowels = new ArrayList<>();\n\
  \        for (int i = 0; i < word.length(); i++) {\n            if (vowels.contains(String.valueOf(word.charAt(i))))\
  \ {\n                cVowels.add(String.valueOf(word.charAt(i)));\n            }\n\
  \        }\n        if (cVowels.size() == 0) {\n            return \"\";\n     \
  \   }\n        int min = Integer.MAX_VALUE;\n        String result = \"\";\n   \
  \     for (int i = 0; i < cVowels.size(); i++) {\n            int curr = word.lastIndexOf(cVowels.get(i));\n\
  \            if (curr != -1 && min > curr) {\n                min = curr;\n    \
  \            result = cVowels.get(i);\n            }\n        }\n        return\
  \ result;"
- "        // code here\n        return \"\";"
- '        return "";'
- "        // Solution 1: Return an empty string if the word is empty.\n        if\
  \ (word.length() == 0) {\n            return \"\";\n        }\n        // Solution\
  \ 2: Convert the word to upper case.\n        word = word.toUpperCase();\n     \
  \   // Solution 3: Return an empty string if the word is length is 1.\n        if\
  \ (word.length() == 1) {\n            return \"\";\n        }\n        // Solution\
  \ 4: Create an array with the vowels.\n        char[] vowels = {'A', 'E', 'I', 'O',\
  \ 'U'};\n        // Solution 5: Create a variable to hold the closest vowel and\
  \ initialize it with\n        // an empty string.\n        String closestVowel =\
  \ \"\";\n        // Solution 6: Create a variable to hold the closest distance.\n\
  \        int closestDistance = Integer.MAX_VALUE;\n        // Solution 7: Loop over\
  \ the word backwards.\n        for (int i = word.length() - 1; i >= 0; i--) {\n\
  \            // Solution 8: If the character is a vowel.\n            if (vowels.equals(word.charAt(i)))\
  \ {\n                // Solution 9: Get the distance.\n                int distance\
  \ = word.length() - i;\n                // Solution 10: If the distance is less\
  \ than the closest distance.\n                if (distance < closestDistance) {\n\
  \                    // Solution 11: Set the closest distance.\n               \
  \     closestDistance = distance;\n                    // Solution 12: Set the closest\
  \ vowel.\n                    closestVowel = String.valueOf(word.charAt(i));\n \
  \               }\n            }\n        }\n        // Solution 13: Return the\
  \ closest vowel.\n        return closestVowel;"
- "        char[] vowels = new char[]{'a', 'e', 'i', 'o', 'u'};\n        char[] chars\
  \ = word.toCharArray();\n        char currentChar = chars[chars.length - 1];\n \
  \       // to flag the first vowel\n        boolean isFirstVowel = true;\n     \
  \   char currentVowel = '\\0';\n        int numOfVowels = 0;\n        // to flag\
  \ the last vowel\n        boolean isLastVowel = false;\n        char lastVowel =\
  \ '\\0';\n        for (int i = chars.length - 1; i >= 0; i--) {\n            //\
  \ is vowel\n            if (Arrays.binarySearch(vowels, chars[i]) >= 0) {\n    \
  \            // set the first vowel\n                if (isFirstVowel) {\n     \
  \               currentVowel = chars[i];\n                    numOfVowels = 0;\n\
  \                    isFirstVowel = false;\n                }\n                numOfVowels++;\n\
  \                // set the last vowel\n                lastVowel = chars[i];\n\
  \                isLastVowel = true;\n            } else {\n                // is\
  \ consonant\n                if (isLastVowel) {\n                    break;\n  \
  \              }\n            }\n        }\n        return isLastVowel ? String.valueOf(currentVowel)\
  \ : \"\";"
- "        String vowels = \"aeiou\";\n        if (word.length() < 3) return \"\"\
  ;\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (vowels.contains(word.substring(i,\
  \ i + 1))) {\n                if (i == word.length() - 1) return \"\";\n       \
  \         String prev = word.substring(i - 1, i);\n                String prev2\
  \ = word.substring(i - 2, i - 1);\n                if (!vowels.contains(prev) &&\
  \ !vowels.contains(prev2)) {\n                    return word.substring(i, i + 1);\n\
  \                }\n            }\n        }\n        return \"\";"
- "        if (word.length() == 0) {\n            return \"\";\n        }\n      \
  \  if (word.length() == 1) {\n            return word.charAt(0) == 'a' ? \"a\" :\
  \ \"\";\n        }\n        String vowel = \"\";\n        String consonant = \"\"\
  ;\n        ArrayList<String> wordParts = new ArrayList<String>();\n        int i\
  \ = word.length() - 1;\n        while (i >= 0) {\n            String letter = word.substring(i,\
  \ i + 1);\n            if (letter.matches(\"[AEIOUaeiou]\")) {\n               \
  \ vowel = letter;\n                wordParts.add(vowel);\n                if (consonant.length()\
  \ > 0) {\n                    wordParts.add(consonant);\n                    consonant\
  \ = \"\";\n                }\n            } else {\n                consonant =\
  \ letter + consonant;\n            }\n            i--;\n        }\n        int index\
  \ = -1;\n        for (int j = 0; j < wordParts.size(); j++) {\n            if (wordParts.get(j).matches(\"\
  [AEIOUaeiou]\")) {\n                index = j;\n                break;\n       \
  \     }\n        }\n        if (index == -1) {\n            return \"\";\n     \
  \   }\n        return wordParts.get(index);"
- "        boolean vowelMatch = false;\n        boolean vowelFound = false;\n    \
  \    char lastVowel = '\\0';\n        char lastConsonant = '\\0';\n        for (int\
  \ i = word.length() - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n\
  \            if (\"aeiouAEIOU\".indexOf(c) != -1) {\n                vowelFound\
  \ = true;\n                lastVowel = c;\n                if (vowelMatch) {\n \
  \                   break;\n                }\n            } else {\n          \
  \      if (vowelFound) {\n                    vowelMatch = true;\n             \
  \   }\n                lastConsonant = c;\n            }\n        }\n        return\
  \ vowelMatch ? String.valueOf(lastVowel) : \"\";"
- '        return "";'
- "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] wordChars =\
  \ word.toCharArray();\n        char prev = 'z';\n        for (int i = wordChars.length\
  \ - 1; i >= 0; i--) {\n            char c = wordChars[i];\n            if (c ==\
  \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                return\
  \ prev == 'z' ? \"\" : String.valueOf(c);\n            }\n            prev = c;\n\
  \        }\n        return \"\";"
- "        String vowels = \"aeiou\";\n        StringBuilder sb = new StringBuilder();\n\
  \        for (int i = word.length() - 1; i >= 0; i--) {\n            String c =\
  \ Character.toString(word.charAt(i));\n            if (vowels.contains(c)) {\n \
  \               sb.append(c);\n            } else {\n                break;\n  \
  \          }\n        }\n        return sb.reverse().toString();"
- "        if (word.isEmpty()) return \"\";\n        char[] vowels = {'a', 'e', 'i',\
  \ 'o', 'u'};\n        char[] consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
  \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n        List<Character>\
  \ vowelsList = new ArrayList<>();\n        List<Character> consonantsList = new\
  \ ArrayList<>();\n        for (char c : vowels) vowelsList.add(c);\n        for\
  \ (char c : consonants) consonantsList.add(c);\n        // find the first vowel\
  \ from right that stands between two consonants\n        int maxRange = word.length()\
  \ - 1;\n        int startIndex = maxRange;\n        int endIndex = 0;\n        for\
  \ (int i = maxRange; i >= 1; i--) {\n            char c = word.charAt(i);\n    \
  \        if (vowelsList.contains(c)) {\n                char next = word.charAt(i\
  \ - 1);\n                if (consonantsList.contains(next)) {\n                \
  \    startIndex = i;\n                    endIndex = i - 1;\n                  \
  \  break;\n                }\n            }\n        }\n        // if no vowel found,\
  \ return empty string\n        if (startIndex == maxRange) return \"\";\n      \
  \  // find the closest vowel from right to the current vowel\n        // if no vowel\
  \ found, return the vowel found in previous search\n        int minIndex = startIndex;\n\
  \        for (int i = maxRange; i >= 1; i--) {\n            char c = word.charAt(i);\n\
  \            if (vowelsList.contains(c)) {\n                if (i > endIndex &&\
  \ i < startIndex) {\n                    minIndex = i;\n                    break;\n\
  \                }\n            }\n        }\n        return Character.toString(word.charAt(minIndex));"
- "        String result = \"\";\n        String regex = \"^([^aeiou])*([aeiou])*(\\\
  \\1)([aeiou]?)(\\\\3)([aeiou]?)\";\n        if (word.matches(regex)) {\n       \
  \     String[] arr = word.split(\"[aeiou]\");\n            int n = arr.length;\n\
  \            result = arr[n - 1].length() < arr[n - 2].length() ? arr[n - 1] : arr[n\
  \ - 2];\n        }\n        return result;"
- "        String vowels = \"AEIOUaeiou\";\n        int c = word.length() - 1;\n \
  \       while (c > 0) {\n            if (vowels.indexOf(word.charAt(c)) != -1) {\n\
  \                if (vowels.indexOf(word.charAt(c - 1)) == -1) {\n             \
  \       return Character.toString(word.charAt(c));\n                }\n        \
  \    }\n            c--;\n        }\n        return \"\";"
- "        //TODO: Implement getClosestVowel\n        return \"\";"
- "        boolean firstVowel = false;\n        int index = 0;\n        for (int i\
  \ = word.length() - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n  \
  \          if (isVowel(c)) {\n                if (firstVowel) return String.valueOf(c);\n\
  \                index = i;\n                firstVowel = true;\n            } else\
  \ {\n                if (firstVowel) return String.valueOf(word.charAt(index));\n\
  \            }\n        }\n        return \"\";"
- "        // This is the brute force approach.\n        // Initialize the minimum\
  \ distance to 0.\n        int minDistance = 0;\n        // Initialize the character\
  \ to return to null.\n        Character minChar = null;\n        // Initialize the\
  \ index of the first consonant to 0.\n        int firstConsonantIndex = 0;\n   \
  \     // Loop over the string.\n        for (int i = 0; i < word.length(); i++)\
  \ {\n            // Get the character at the index.\n            char ch = word.charAt(i);\n\
  \            // Check if the character is vowel or not.\n            if (isVowel(ch))\
  \ {\n                // Check if we have seen a consonant first.\n             \
  \   if (firstConsonantIndex != 0) {\n                    // Get the distance from\
  \ the character to the first consonant.\n                    int distance = Math.abs(i\
  \ - firstConsonantIndex);\n                    // Check if the distance is less\
  \ than the previous minimum distance.\n                    if (distance < minDistance\
  \ || minDistance == 0) {\n                        // Set the minimum distance to\
  \ the distance.\n                        minDistance = distance;\n             \
  \           // Set the minimum character to the character.\n                   \
  \     minChar = ch;\n                    }\n                }\n            } else\
  \ {\n                // Set the first consonant index to the current index.\n  \
  \              firstConsonantIndex = i;\n            }\n        }\n        // Check\
  \ if we have a valid character.\n        if (minChar != null) {\n            //\
  \ Return the character as a string.\n            return Character.toString(minChar);\n\
  \        }\n        // Return an empty string.\n        return \"\";"
- "        String vowels = \"aeiou\";\n        for (int i = word.length() - 1; i >=\
  \ 0; i--) {\n            char c = word.charAt(i);\n            if (vowels.indexOf(c)\
  \ >= 0) {\n                if (i - 1 >= 0 && vowels.indexOf(word.charAt(i - 1))\
  \ < 0) {\n                    return Character.toString(c);\n                }\n\
  \                if (i + 1 < word.length() && vowels.indexOf(word.charAt(i + 1))\
  \ < 0) {\n                    return Character.toString(c);\n                }\n\
  \            }\n        }\n        return \"\";"
- "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        String word_lower =\
  \ word.toLowerCase();\n        StringBuilder ret = new StringBuilder();\n      \
  \  for (int i = word_lower.length() - 1; i >= 0; i--) {\n            char c = word_lower.charAt(i);\n\
  \            if (Arrays.asList(vowels).contains(c)) {\n                ret.append(c);\n\
  \                break;\n            }\n        }\n        return ret.reverse().toString();"
- "        String s = word.toLowerCase();\n        int currentDistance = Integer.MAX_VALUE;\n\
  \        String closestVowel = \"\";\n        int size = s.length();\n        for\
  \ (int i = size - 1; i >= 0; i--) {\n            if (s.charAt(i) == 'a' || s.charAt(i)\
  \ == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n\
  \                for (int j = size - 1; j >= 0; j--) {\n                    if (j\
  \ == i) {\n                        break;\n                    }\n             \
  \       if (s.charAt(j) != 'a' && s.charAt(j) != 'e' && s.charAt(j) != 'i' && s.charAt(j)\
  \ != 'o' && s.charAt(j) != 'u') {\n                        int distance = i - j;\n\
  \                        if (distance < currentDistance) {\n                   \
  \         currentDistance = distance;\n                            closestVowel\
  \ = String.valueOf(s.charAt(i));\n                        }\n                  \
  \      break;\n                    }\n                }\n            }\n       \
  \ }\n        return closestVowel;"
- "        // Keep in mind that some implementations are not needed.\n        // Some\
  \ implementations might be better than others.\n        // https://www.codewars.com/kata/closest-vowel/java\n\
  \        // https://www.codewars.com/kata/closest-vowel/javascript\n        // https://www.codewars.com/kata/closest-vowel/ruby\n\
  \        // https://www.codewars.com/kata/closest-vowel/python\n        // https://www.codewars.com/kata/closest-vowel/php\n\
  \        // https://www.codewars.com/kata/closest-vowel/csharp\n        // https://www.codewars.com/kata/closest-vowel/cpp\n\
  \        // https://www.codewars.com/kata/closest-vowel/dart\n        // https://www.codewars.com/kata/closest-vowel/elixir\n\
  \        // https://www.codewars.com/kata/closest-vowel/c\n        // https://www.codewars.com/kata/closest-vowel/go\n\
  \        // https://www.codewars.com/kata/closest-vowel/haskell\n        // https://www.codewars.com/kata/closest-vowel/rust\n\
  \        // https://www.codewars.com/kata/closest-vowel/swift\n        // https://www.codewars.com/kata/closest-vowel/typescript\n\
  \        // https://www.codewars.com/kata/closest-vowel/lua\n        // https://www.codewars.com/kata/closest-vowel/crystal\n\
  \        // https://www.codewars.com/kata/closest-vowel/r\n        // https://www.codewars.com/kata/closest-vowel/brainfuck\n\
  \        // https"
- "        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o',\
  \ 'u'));\n        int index = word.length() - 1;\n        while (index >= 0) {\n\
  \            char c = word.charAt(index);\n            if (vowels.contains(c)) {\n\
  \                index--;\n                if (index >= 0 && vowels.contains(word.charAt(index)))\
  \ {\n                    continue;\n                }\n                if (index\
  \ == -1 || !vowels.contains(word.charAt(index))) {\n                    return String.valueOf(c);\n\
  \                }\n            }\n            index--;\n        }\n        return\
  \ \"\";"
- "        String empty = \"\";\n        String[] vowels = {\"a\", \"e\", \"i\", \"\
  o\", \"u\"};\n        String[] consonants = {\"b\", \"c\", \"d\", \"f\", \"g\",\
  \ \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
  v\", \"w\", \"x\", \"y\", \"z\"};\n        HashSet<String> vowelSet = new HashSet<String>(Arrays.asList(vowels));\n\
  \        HashSet<String> consonantSet = new HashSet<String>(Arrays.asList(consonants));\n\
  \        int min = word.length();\n        String result = empty;\n        int wordLength\
  \ = word.length();\n        if (wordLength <= 2) return empty;\n        int index\
  \ = wordLength - 1;\n        while (index >= 0) {\n            String letter = word.substring(index,\
  \ index + 1);\n            int distance = wordLength - index;\n            if (vowelSet.contains(letter))\
  \ {\n                if (distance < min) {\n                    min = distance;\n\
  \                    result = letter;\n                }\n            }\n      \
  \      index--;\n        }\n        return result;"
- "        String vowels = \"aeiou\";\n        String word_vowels = word.chars().mapToObj(c\
  \ -> String.valueOf((char)c)).filter(vowels::contains).collect(Collectors.joining());\n\
  \        String s = word_vowels.chars().boxed().map(i -> Pair.with(i, word.indexOf(vowels.charAt(i),\
  \ word.indexOf(vowels.charAt(i)) + 1))).filter(i -> i.getValue1() != -1).sorted(Comparator.comparing(Pair::getValue1)).map(i\
  \ -> String.valueOf(vowels.charAt(i.getValue0()))).collect(Collectors.joining());\n\
  \        return s.length() > 0 ? s.substring(s.length() - 1) : \"\";"
- "        String vowel = \"AEIOUaeiou\";\n        String res = \"\";\n        int\
  \ ix = word.length() - 1;\n        while (ix >= 0) {\n            if (vowel.indexOf(word.charAt(ix))\
  \ >= 0)\n                res = Character.toString(word.charAt(ix));\n          \
  \  else if (res.length() > 0)\n                return res;\n            ix--;\n\
  \        }\n        return res;"
- "        List<Character> vowels = Arrays.asList('a', 'e', 'i', 'o', 'u');\n    \
  \    for (int i = word.length() - 1; i >= 0; i--) {\n            if (vowels.contains(word.charAt(i)))\
  \ {\n                return \"\" + word.charAt(i);\n            }\n        }\n \
  \       return \"\";"
- "        // your code here\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n\
  \        char[] consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
  \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n        String result\
  \ = \"\";\n        int minDistance = Integer.MAX_VALUE;\n        for (int i = 0;\
  \ i < word.length(); i++) {\n            for (int j = 0; j < word.length(); j++)\
  \ {\n                if (i == j) continue;\n                if (!Arrays.stream(vowels).anyMatch(c\
  \ -> c == word.charAt(i)) &&\n                    !Arrays.stream(consonants).anyMatch(c\
  \ -> c == word.charAt(i)))\n                        continue;\n                if\
  \ (!Arrays.stream(vowels).anyMatch(c -> c == word.charAt(j)) &&\n              \
  \      !Arrays.stream(consonants).anyMatch(c -> c == word.charAt(j)))\n        \
  \                continue;\n                if (Arrays.stream(vowels).anyMatch(c\
  \ -> c == word.charAt(i)) &&\n                    Arrays.stream(vowels).anyMatch(c\
  \ -> c == word.charAt(j)))\n                        continue;\n                if\
  \ (Arrays.stream(consonants).anyMatch(c -> c == word.charAt(i)) &&\n           \
  \         Arrays.stream(consonants).anyMatch(c -> c == word.charAt(j)))\n      \
  \                  continue;\n                if (i > j) {\n                   \
  \ int tmp = i;\n                    i = j;\n                    j = tmp;\n     \
  \           }\n                if (j - i < minDistance) {\n                    minDistance\
  \ = j - i;\n                    result = word.substring(i, i + 1);\n           \
  \     }\n            }\n        }\n        return result;"
- "        // 0. get the last char\n        // 1. if it's a vowel, is it still close\
  \ enough?\n        // 1.1 if yes, return it\n        // 1.2 else return empty string\n\
  \        // 2. if it's a consonant\n        // 2.1 find the first vowel before it\n\
  \        // 2.2 find the first vowel after it\n        // 2.3 return the one that\
  \ is closer\n        if (word.length() < 2) return \"\";\n        char lastChar\
  \ = word.charAt(word.length() - 1);\n        if (isVowel(lastChar)) {\n        \
  \    // check if it's close enough\n            int lastVowelIndex = word.lastIndexOf(lastChar);\n\
  \            int firstConsonantIndex = word.indexOf(word.charAt(lastVowelIndex -\
  \ 1));\n            if (lastVowelIndex - firstConsonantIndex > 1) return lastChar\
  \ + \"\";\n            else return \"\";\n        } else {\n            // find\
  \ closest vowel to the right\n            char[] vowels = new char[] {'a', 'e',\
  \ 'i', 'o', 'u'};\n            char closestVowel = 'z';\n            int bestDistance\
  \ = word.length();\n            for (char c : vowels) {\n                int vowelIndex\
  \ = word.lastIndexOf(c);\n                if (vowelIndex > -1) {\n             \
  \       int consonantIndex = word.indexOf(word.charAt(vowelIndex - 1));\n      \
  \              int distance = vowelIndex - consonantIndex;\n                   \
  \ if (distance < bestDistance) {\n                        bestDistance = distance;\n\
  \                        closestVowel = c;\n                    }\n            \
  \    }\n            }\n            if (bestDistance > 1) return closestVowel + \"\
  \";\n            else return \"\";\n        }"
- "        // Your code goes here:\n        return word;"
- "        String[] vowels = { \"a\", \"e\", \"i\", \"o\", \"u\" };\n        String[]\
  \ cons = { \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
  , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\" };\n\
  \        List<String> list = Arrays.asList(word.split(\"\"));\n        Collections.reverse(list);\n\
  \        List<String> vowels_list = Arrays.asList(vowels);\n        List<String>\
  \ cons_list = Arrays.asList(cons);\n        int counter = 0;\n        int last_index\
  \ = 0;\n        int index = 0;\n        int index_of_closest_vowel = 0;\n      \
  \  boolean first_cons = false;\n        boolean second_cons = false;\n        for\
  \ (String s : list) {\n            if (counter == 0) {\n                last_index\
  \ = index;\n                if (cons_list.contains(s)) {\n                    counter\
  \ = 1;\n                    first_cons = true;\n                }\n            }\
  \ else if (counter == 1) {\n                if (vowels_list.contains(s)) {\n   \
  \                 counter = 2;\n                    index_of_closest_vowel = index;\n\
  \                } else if (cons_list.contains(s)) {\n                    last_index\
  \ = index;\n                    second_cons = true;\n                }\n       \
  \     } else if (counter == 2) {\n                if (cons_list.contains(s)) {\n\
  \                    counter = 3;\n                    second_cons = true;\n   \
  \             }\n            }\n            index++;\n        }\n        if (counter\
  \ == 3 && first_cons && second_cons) {\n            return list.get(index_of_closest_vowel);\n\
  \        } else {\n            return \"\";\n        }"
- "        if (word.length() < 3) return \"\";\n        int closest = -1;\n      \
  \  for (int i = word.length() - 1; i >= 1; i--) {\n            char l = word.charAt(i\
  \ - 1);\n            char r = word.charAt(i);\n            if (!isVowel(l) && isVowel(r))\
  \ {\n                closest = i;\n                break;\n            }\n     \
  \   }\n        return closest == -1 ? \"\" : word.substring(closest, closest + 1);"
- "        String vowels = \"aeiou\";\n        StringBuilder result = new StringBuilder();\n\
  \        for (int i = word.length() - 1; i >= 0; i--) {\n            if (vowels.contains(String.valueOf(word.charAt(i))))\
  \ {\n                if (i + 1 < word.length() && !vowels.contains(String.valueOf(word.charAt(i\
  \ + 1)))) {\n                    result.append(word.charAt(i));\n              \
  \      break;\n                }\n            }\n        }\n        return result.toString();"
- "        if (word.length() < 3) return \"\";\n        // System.out.println(word);\n\
  \        for (int i = word.length() - 2; i > 0; i--) {\n            char cur = word.charAt(i);\n\
  \            char next = word.charAt(i + 1);\n            char prev = word.charAt(i\
  \ - 1);\n            if (isVowel(cur) && !isVowel(next) && !isVowel(prev)) {\n \
  \               return Character.toString(cur);\n            }\n        }\n    \
  \    return \"\";"
- "        String vowels = \"AEIOUaeiou\";\n        String[] arr = word.split(\"\"\
  );\n        String first = \"\";\n        String second = \"\";\n        for (int\
  \ i = arr.length - 1; i >= 0; i--) {\n            if (vowels.contains(arr[i])) {\n\
  \                first = arr[i];\n                break;\n            }\n      \
  \  }\n        for (int i = arr.length - 1; i >= 0; i--) {\n            if (vowels.contains(arr[i]))\
  \ {\n                first = arr[i];\n                break;\n            }\n  \
  \      }\n        return word;"
- "        if (word.length() < 3) return \"\";\n        String[] vowels = {\"a\",\
  \ \"e\", \"i\", \"o\", \"u\"};\n        String[] a = word.split(\"\");\n       \
  \ for (int i = a.length - 1; i > 1; i--) {\n            for (String v : vowels)\
  \ {\n                if (a[i].equals(v) && !a[i - 1].equals(v) && !a[i - 2].equals(v))\
  \ return v;\n            }\n        }\n        return \"\";"
- "        // NOTE: could be done in one pass, but since I don't feel like doing two\
  \ passes, I'll let it be.\n        var consonants = word.chars().mapToObj(c -> (char)\
  \ c).filter(c -> !isVowel(c)).collect(Collectors.toList());\n        var vowels\
  \ = word.chars().mapToObj(c -> (char) c).filter(c -> isVowel(c)).collect(Collectors.toList());\n\
  \        var minDistance = Integer.MAX_VALUE;\n        var closestVowel = \"\";\n\
  \        for (var vowel : vowels) {\n            var leftConsonant = findConsonantBefore(consonants,\
  \ word.indexOf(vowel));\n            var rightConsonant = findConsonantAfter(consonants,\
  \ word.indexOf(vowel));\n            if (leftConsonant == -1 || rightConsonant ==\
  \ -1) {\n                continue;\n            }\n            var distance = rightConsonant\
  \ - leftConsonant;\n            if (distance < minDistance) {\n                minDistance\
  \ = distance;\n                closestVowel = Character.toString(vowel);\n     \
  \       }\n        }\n        return closestVowel;"
- "        List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
  \        int index = -1;\n        for (int i = word.length() - 1; i >= 0; i--) {\n\
  \            if (vowels.contains(word.substring(i, i + 1))) {\n                index\
  \ = i;\n                break;\n            }\n        }\n        if (index == -1)\
  \ {\n            return \"\";\n        }\n        for (int i = index; i >= 0; i--)\
  \ {\n            if (!vowels.contains(word.substring(i, i + 1))) {\n           \
  \     return word.substring(index, index + 1);\n            }\n        }\n     \
  \   return \"\";"
- "        String[] vowels = new String[]{\"a\", \"e\", \"i\", \"o\", \"u\"};\n  \
  \      List<String> result = new ArrayList<>();\n        for (int i = 0; i < word.length();\
  \ i++) {\n            String letter = word.substring(i, i + 1);\n            for\
  \ (String vowel : vowels) {\n                if (letter.equals(vowel)) {\n     \
  \               result.add(letter);\n                }\n            }\n        }\n\
  \        for (int i = 0; i < result.size(); i++) {\n            if (i < result.size()\
  \ - 1) {\n                if (result.get(i + 1).equals(result.get(i))) {\n     \
  \               result.remove(i);\n                }\n            }\n        }\n\
  \        if (result.size() > 0) {\n            return result.get(result.size() -\
  \ 1);\n        }\n        return \"\";"
- "        // YOUR CODE HERE\n        boolean wordHasVowel = word.matches(\".*[aeiouyAEIOUY].*\"\
  );\n        if(!wordHasVowel) return \"\";\n        int indexOfFirstVowel = 0;\n\
  \        for(int i = 0; i < word.length(); i++) {\n            if(isVowel(word.charAt(i)))\
  \ {\n                indexOfFirstVowel = i;\n                break;\n          \
  \  }\n        }\n        int closestIndex = word.length() - 1;\n        int closestDistance\
  \ = Integer.MAX_VALUE;\n        for(int i = word.length() - 1; i > indexOfFirstVowel;\
  \ i--) {\n            char currentChar = word.charAt(i);\n            if(isVowel(currentChar))\
  \ {\n                int distance = word.length() - i;\n                if(distance\
  \ < closestDistance) {\n                    closestDistance = distance;\n      \
  \              closestIndex = i;\n                }\n            }\n        }\n\
  \        return word.charAt(closestIndex) + \"\";"
- "        String vowels = \"aeiou\";\n        String result = \"\";\n        int\
  \ curr_min = -1;\n        for (int i = 0; i < word.length(); i++) {\n          \
  \  String curr = word.substring(i, i + 1);\n            if (vowels.contains(curr))\
  \ {\n                if (curr_min == -1) {\n                    curr_min = i;\n\
  \                    result = curr;\n                } else {\n                \
  \    if (i - curr_min > 1) {\n                        curr_min = i;\n          \
  \              result = curr;\n                    }\n                }\n      \
  \      }\n        }\n        return result;"
- "        String vowels = \"aeiouAEIOU\";\n        String consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
  ;\n        char[] wordChars = word.toCharArray();\n        for (int i = wordChars.length\
  \ - 1; i >= 0; i--) {\n            if (consonants.indexOf(wordChars[i]) != -1) {\n\
  \                if (i > 0 && vowels.indexOf(wordChars[i - 1]) != -1) {\n      \
  \              return String.valueOf(wordChars[i - 1]);\n                }\n   \
  \             if (i < wordChars.length - 1 && vowels.indexOf(wordChars[i + 1]) !=\
  \ -1) {\n                    return String.valueOf(wordChars[i + 1]);\n        \
  \        }\n            }\n        }\n        return \"\";"
- "        for (int i = word.length() - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n\
  \            if (!isVowel(c)) {\n                for (int j = i - 1; j >= 0; j--)\
  \ {\n                    char c2 = word.charAt(j);\n                    if (isVowel(c2))\
  \ {\n                        return String.valueOf(c2);\n                    }\n\
  \                }\n            }\n        }\n        return \"\";"
- "        for (int i = word.length() - 1; i >= 0; i--) {\n            if (isVowel(word.charAt(i)))\
  \ {\n                return word.substring(i, i + 1);\n            }\n        }\n\
  \        return \"\";"
- "        String vowels = \"aeiou\";\n        String closestVowel = \"\";\n     \
  \   int rightVowelIndex = -1;\n        boolean hasSeenVowel = false;\n        for\
  \ (int i = word.length() - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n\
  \            if (vowels.indexOf(c) > -1) {\n                if (hasSeenVowel) {\n\
  \                    if (i > rightVowelIndex) {\n                        closestVowel\
  \ = c + \"\";\n                        rightVowelIndex = i;\n                  \
  \  }\n                } else {\n                    hasSeenVowel = true;\n     \
  \               closestVowel = c + \"\";\n                    rightVowelIndex =\
  \ i;\n                }\n            } else {\n                if (hasSeenVowel)\
  \ {\n                    break;\n                }\n            }\n        }\n \
  \       return closestVowel;"
- "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] wordChars =\
  \ word.toCharArray();\n        for (int i = wordChars.length - 1; i >= 0; i--) {\n\
  \            boolean isRightVowel = false;\n            for (char vowel : vowels)\
  \ {\n                if (wordChars[i] == vowel) {\n                    isRightVowel\
  \ = true;\n                    break;\n                }\n            }\n      \
  \      if (isRightVowel) {\n                for (int j = i - 1; j >= 0; j--) {\n\
  \                    boolean isLeftVowel = false;\n                    for (char\
  \ vowel : vowels) {\n                        if (wordChars[j] == vowel) {\n    \
  \                        isLeftVowel = true;\n                            break;\n\
  \                        }\n                    }\n                    if (!isLeftVowel)\
  \ {\n                        return String.valueOf(wordChars[i]);\n            \
  \        }\n                }\n            }\n        }\n        return \"\";"
- "        int len = word.length();\n        if (len < 3) {\n            return \"\
  \";\n        }\n        int minDistance = len;\n        String result = \"\";\n\
  \        for (int i = 0; i < len; i++) {\n            if (isVowel(word.charAt(i)))\
  \ {\n                int j = i - 1;\n                int k = i + 1;\n          \
  \      while (j >= 0 && k < len) {\n                    if (isVowel(word.charAt(j))\
  \ || isVowel(word.charAt(k))) {\n                        if (isVowel(word.charAt(j)))\
  \ {\n                            k++;\n                        } else {\n      \
  \                      j--;\n                        }\n                    } else\
  \ {\n                        if (k - j - 1 < minDistance) {\n                  \
  \          minDistance = k - j - 1;\n                            result = String.valueOf(word.charAt(i));\n\
  \                        }\n                        break;\n                   \
  \ }\n                }\n            }\n        }\n        return result;"
- "        // implement code here\n        // code goes here\n        String str=\"\
  \";\n        int l=0;\n        List<Character> vowels = Arrays.asList('a','e','i','o','u','A','E','I','O','U');\n\
  \        for(int i=word.length()-1;i>=0;i--)\n        {\n            if(vowels.contains(word.charAt(i)))\n\
  \            {\n                if(l==0)\n                {\n                  \
  \  str=str+word.charAt(i);\n                    break;\n                }\n    \
  \            else\n                {\n                    str=str+word.charAt(i);\n\
  \                    l=0;\n                }\n            }\n            else\n\
  \            {\n                l++;\n            }\n        }\n        if(str.length()>1)\n\
  \        {\n            return Character.toString(str.charAt(str.length()-1));\n\
  \        }\n        else\n        {\n            return \"\";\n        }"
- "        String vowels = \"aeiou\";\n        String consonants = \"bcdfghjklmnpqrstvwxyz\"\
  ;\n        String result = \"\";\n        int minDistance = word.length();\n   \
  \     int distance = 0;\n        for (int i = word.length() - 1; i >= 0; i--) {\n\
  \            char letter = word.charAt(i);\n            if (vowels.indexOf(letter)\
  \ > -1) {\n                distance = word.length() - i;\n                if (distance\
  \ < minDistance) {\n                    minDistance = distance;\n              \
  \      result = String.valueOf(letter);\n                }\n            }\n    \
  \    }\n        return result;"
- "        // Your code goes here\n        int length = word.length();\n        boolean\
  \ foundOne = false;\n        boolean isVowel = false;\n        if (length == 0)\
  \ {\n            return \"\";\n        }\n        else if (length == 1) {\n    \
  \        return \"\";\n        }\n        else {\n            char currentChar =\
  \ word.charAt(length - 1);\n            for (int index = length - 2; index >= 0;\
  \ index--) {\n                char currentCharLeft = word.charAt(index);\n     \
  \           if (!isVowel(currentCharLeft)) {\n                    currentChar =\
  \ currentCharLeft;\n                    isVowel = false;\n                }\n  \
  \              else {\n                    if (!isVowel(currentChar)) {\n      \
  \                  return \"\" + currentCharLeft;\n                    }\n     \
  \               else {\n                        foundOne = true;\n             \
  \           currentChar = currentCharLeft;\n                        isVowel = true;\n\
  \                    }\n                }\n            }\n            if (foundOne)\
  \ {\n                return \"\" + currentChar;\n            }\n            else\
  \ {\n                return \"\";\n            }\n        }"
- "        String vowels = \"aeiouAEIOU\";\n        boolean consonantNext = false;\n\
  \        int closestVowelIndex = word.length();\n        for (int i = word.length()\
  \ - 1; i >= 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) >= 0) {\n\
  \                if (consonantNext) {\n                    return Character.toString(word.charAt(i));\n\
  \                }\n            } else {\n                consonantNext = true;\n\
  \            }\n        }\n        return \"\";"
- "        String vowels = \"aeiou\";\n        StringBuilder closestVowel = new StringBuilder();\n\
  \        for (int i = word.length() - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n\
  \            if (vowels.indexOf(c) >= 0) {\n                if (i == word.length()\
  \ - 1) {\n                    closestVowel.append(c);\n                } else {\n\
  \                    char nextChar = word.charAt(i + 1);\n                    if\
  \ (vowels.indexOf(nextChar) >= 0) {\n                        continue;\n       \
  \             } else {\n                        closestVowel.append(c);\n      \
  \                  break;\n                    }\n                }\n          \
  \  }\n        }\n        return closestVowel.reverse().toString();"
- "        // Your code here\n        return \"\";"
- "        String ret = \"\";\n        String vowels = \"aeiouAEIOU\";\n        for\
  \ (int i = word.length() - 1; i >= 0; i--) {\n            if (vowels.contains(word.substring(i,\
  \ i + 1))) {\n                if (i > 0 && !vowels.contains(word.substring(i - 1,\
  \ i))) {\n                    ret = word.substring(i, i + 1);\n                \
  \    break;\n                }\n            }\n        }\n        return ret;"
- "        final String VOWELS = \"aeiouAEIOU\";\n        final String CONSONANTS\
  \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n        var res = \"\";\n \
  \       for (int i = word.length() - 1; i >= 0; i--) {\n            char cur = word.charAt(i);\n\
  \            if (VOWELS.indexOf(cur) != -1) {\n                if (i + 1 < word.length()\
  \ && CONSONANTS.indexOf(word.charAt(i + 1)) != -1)\n                    res = String.valueOf(cur);\n\
  \                else if (i - 1 >= 0 && CONSONANTS.indexOf(word.charAt(i - 1)) !=\
  \ -1)\n                    res = String.valueOf(cur);\n            }\n        }\n\
  \        return res;"
- "        // Write your code here.\n        String vowels = \"aeiou\";\n        StringBuilder\
  \ sb = new StringBuilder();\n        String result = \"\";\n        int lastIndex\
  \ = -1;\n        for (int i = word.length() - 1; i >= 0; i--) {\n            String\
  \ s = word.substring(i, i + 1);\n            if (vowels.contains(s)) {\n       \
  \         sb.append(s);\n                result = s;\n                lastIndex\
  \ = i;\n            } else {\n                break;\n            }\n        }\n\
  \        if (lastIndex == -1) {\n            return \"\";\n        }\n        for\
  \ (int i = lastIndex - 1; i >= 0; i--) {\n            String s = word.substring(i,\
  \ i + 1);\n            if (!vowels.contains(s)) {\n                return result;\n\
  \            }\n        }\n        return \"\";"
- "        if (word.length() < 3) {\n            return \"\";\n        }\n       \
  \ word = word.substring(1, word.length() - 1);\n        for (int i = 0; i < word.length();\
  \ i++) {\n            if (isVowel(word.charAt(i))) {\n                if (isConsonant(word.charAt(i\
  \ - 1)) && isConsonant(word.charAt(i + 1))) {\n                    return Character.toString(word.charAt(i));\n\
  \                }\n            }\n        }\n        return \"\";"
- "        int vowels = \"AEIOUaeiou\".length();\n        int consonants = 26 - vowels;\n\
  \        int total = vowels + consonants;\n        int[][] letterCounts = new int[26][total];\n\
  \n        int j = 0;\n        for (int i = 0; i < vowels; i++) {\n            char\
  \ curr = \"AEIOUaeiou\".charAt(i);\n            letterCounts[curr - 'A'][j]++;\n\
  \            j++;\n        }\n        for (int i = 0; i < consonants; i++) {\n \
  \           char curr = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\".charAt(i);\n\
  \            letterCounts[curr - 'A'][j]++;\n            j++;\n        }\n\n   \
  \     return \"\";"
- "        // your code here\n        return \"\";"
- "        String vowels = \"aeiouAEIOU\";\n        String cons = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
  ;\n        String candidates = \"\";\n        int right_cons = 0;\n        // int\
  \ left_cons = 0;\n        for (int i = word.length() - 1; i >= 0; i--) {\n     \
  \       char c = word.charAt(i);\n            if (cons.indexOf(c) > -1) right_cons++;\n\
  \            else if (vowels.indexOf(c) > -1) {\n                if (right_cons\
  \ == 1) candidates += c;\n                else right_cons = 0;\n            }\n\
  \        }\n        if (candidates.length() == 0) return \"\";\n        return \"\
  \" + candidates.charAt(candidates.length() - 1);"
- "        // Your Code Here\n        boolean hasVowel = false;\n        int pos =\
  \ -1;\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (vowel(word.charAt(i)))\
  \ {\n                hasVowel = true;\n                pos = i;\n              \
  \  break;\n            }\n        }\n        if (!hasVowel) {\n            return\
  \ \"\";\n        }\n        for (int i = pos - 1; i >= 0; i--) {\n            if\
  \ (!vowel(word.charAt(i))) {\n                return String.valueOf(word.charAt(pos));\n\
  \            }\n        }\n        return \"\";"
- "        if (word.length() < 3) return \"\";\n        // Your code goes here\n \
  \       return \"\";"
- "        String[] vowels = new String[]{\"a\", \"e\", \"i\", \"o\", \"u\"};\n  \
  \      String[] consonants = new String[]{\"b\", \"c\", \"d\", \"f\", \"g\", \"\
  h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
  , \"w\", \"x\", \"y\", \"z\"};\n        int min = 9999999;\n        String v = \"\
  \";\n        for (int i = 0; i < vowels.length; i++) {\n            for (int j =\
  \ 0; j < consonants.length; j++) {\n                int index = word.lastIndexOf(consonants[j]);\n\
  \                if (index >= 0) {\n                    for (int k = 0; k < consonants.length;\
  \ k++) {\n                        int index2 = word.lastIndexOf(consonants[k], index\
  \ - 1);\n                        if (index2 >= 0) {\n                          \
  \  int index3 = word.lastIndexOf(vowels[i], index - 1);\n                      \
  \      if (index3 >= 0) {\n                                if (index - index3 <\
  \ min) {\n                                    min = index - index3;\n          \
  \                          v = vowels[i];\n                                }\n \
  \                           }\n                        }\n                    }\n\
  \                }\n            }\n        }\n        return v;"
- "        String vowels = \"AEIOUaeiou\";\n        String closest = \"\";\n     \
  \   int minDistance = 0;\n        for (int i = 0; i < word.length(); i++) {\n  \
  \          if (vowels.indexOf(word.charAt(i)) == -1) {\n                for (int\
  \ j = i; j < word.length(); j++) {\n                    if (vowels.indexOf(word.charAt(j))\
  \ == -1) {\n                        continue;\n                    } else {\n  \
  \                      int distance = j - i;\n                        if (closest.equals(\"\
  \")) {\n                            closest = Character.toString(word.charAt(j));\n\
  \                            minDistance = distance;\n                        }\
  \ else if (distance < minDistance) {\n                            closest = Character.toString(word.charAt(j));\n\
  \                            minDistance = distance;\n                        }\n\
  \                    }\n                }\n            }\n        }\n        return\
  \ closest;"
- '        return "";'
- "        final String vowels = \"aeiou\";\n        final int n = word.length();\n\
  \        for (int i = n - 1; i >= 0; i--) {\n            char cur = word.charAt(i);\n\
  \            if (vowels.indexOf(cur) >= 0) {\n                char next = (i + 1)\
  \ < n ? word.charAt(i + 1) : '\\0';\n                if (next != '\\0' && vowels.indexOf(next)\
  \ < 0) {\n                    return cur + \"\";\n                }\n          \
  \  }\n        }\n        return \"\";"
- "        int vowelIndex = -1;\n        for (int i = word.length() - 1; i >= 0; i--)\
  \ {\n            if (isVowel(word.charAt(i))) {\n                vowelIndex = i;\n\
  \                break;\n            }\n        }\n        if (vowelIndex == -1)\
  \ {\n            return \"\";\n        }\n        if (vowelIndex == 0) {\n     \
  \       return \"\";\n        }\n        if (vowelIndex == word.length() - 1) {\n\
  \            return \"\";\n        }\n        return word.substring(vowelIndex,\
  \ vowelIndex + 1);"
- "        List<Character> vowels = Arrays.asList('a', 'e', 'i', 'o', 'u');\n    \
  \    int len = word.length();\n        if (len < 3) {\n            return \"\";\n\
  \        }\n        int ans = -1;\n        char[] chs = word.toCharArray();\n  \
  \      for (int i = 0; i < len; i++) {\n            if (vowels.contains(chs[i]))\
  \ {\n                if (ans == -1) {\n                    ans = i;\n          \
  \      } else {\n                    ans = Math.max(ans, i);\n                }\n\
  \            }\n        }\n        for (int i = ans; i < len; i++) {\n         \
  \   if (!vowels.contains(chs[i])) {\n                return String.valueOf(chs[ans]);\n\
  \            }\n        }\n        return \"\";"
- "        // TODO: write your code here\n        return \"\";"
- "        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        ArrayList<String>\
  \ vowelList = new ArrayList<String>(Arrays.asList(vowels));\n        String closestVowel\
  \ = \"\";\n        int closestDistance = word.length();\n        for (int i = 0;\
  \ i < word.length(); i++) {\n            String currentLetter = word.substring(i,\
  \ i + 1);\n            if (vowelList.contains(currentLetter)) {\n              \
  \  for (int j = word.length() - 1; j > i; j--) {\n                    String letterFromTheEnd\
  \ = word.substring(j, j + 1);\n                    if (!vowelList.contains(letterFromTheEnd))\
  \ {\n                        int distance = j - i;\n                        if (distance\
  \ < closestDistance) {\n                            closestDistance = distance;\n\
  \                            closestVowel = currentLetter;\n                   \
  \     }\n                        break;\n                    }\n               \
  \ }\n            }\n        }\n        return closestVowel;"
- "        String vowels = \"aeiouAEIOU\";\n        String[] consonants = word.split(\"\
  [aeiouAEIOU]\");\n        String[] vowel_groups = word.split(\"[^aeiouAEIOU]\");\n\
  \        for (int i = vowel_groups.length - 1; i >= 0; i--) {\n            if (vowel_groups[i].length()\
  \ > 0) {\n                return vowel_groups[i];\n            }\n        }\n  \
  \      return \"\";"
- "        if (word.length() < 3) return \"\";\n        int closest = -1;\n      \
  \  for (int i = word.length() - 1; i >= 1; i--) {\n            if (isVowel(word.charAt(i)))\
  \ {\n                closest = i;\n                break;\n            }\n     \
  \   }\n        if (closest == -1) return \"\";\n        for (int i = closest - 1;\
  \ i >= 1; i--) {\n            if (!isVowel(word.charAt(i))) {\n                return\
  \ String.valueOf(word.charAt(closest));\n            }\n        }\n        return\
  \ \"\";"
- "        // Your code goes here.\n        String res = \"\";\n        String v=\"\
  \";\n        String c=\"\";\n        int idx=-1;\n        for(int i=0;i<word.length();i++){\n\
  \            if(word.charAt(i)=='a'||word.charAt(i)=='e'||word.charAt(i)=='i'||word.charAt(i)=='o'||word.charAt(i)=='u')\n\
  \            v+=word.charAt(i);\n            else c+=word.charAt(i);\n        }\n\
  \        for(int i=c.length()-1;i>=0;i--){\n            if(v.contains(c.charAt(i)+\"\
  \")){\n                idx=v.indexOf(c.charAt(i));\n                res+=v.charAt(idx);\n\
  \                break;\n            }\n        }\n        return res;"
- "        String vowels = \"aeiou\";\n        String result = \"\";\n        int\
  \ min = Integer.MAX_VALUE;\n        for (int i = word.length() - 1; i >= 0; i--)\
  \ {\n            char c = word.charAt(i);\n            if (vowels.indexOf(c) >=\
  \ 0) {\n                int left = 0;\n                int right = 0;\n        \
  \        for (int j = i - 1; j >= 0; j--) {\n                    if (vowels.indexOf(word.charAt(j))\
  \ < 0) {\n                        left++;\n                    } else {\n      \
  \                  break;\n                    }\n                }\n          \
  \      for (int j = i + 1; j < word.length(); j++) {\n                    if (vowels.indexOf(word.charAt(j))\
  \ < 0) {\n                        right++;\n                    } else {\n     \
  \                   break;\n                    }\n                }\n         \
  \       if (left > 0 && right > 0) {\n                    if (min > left + right)\
  \ {\n                        min = left + right;\n                        result\
  \ = c + \"\";\n                    }\n                }\n            }\n       \
  \ }\n        return result;"
- "        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        List<String>\
  \ vowelList = Arrays.asList(vowels);\n        List<String> wordList = Arrays.asList(word.split(\"\
  \"));\n        String answer = \"\";\n        String vowel = \"\";\n        int\
  \ i;\n        for (i = wordList.size() - 1; i > 0; i--) {\n            if (vowelList.contains(wordList.get(i)))\
  \ {\n                vowel = wordList.get(i);\n                if (!vowelList.contains(wordList.get(i\
  \ - 1))) {\n                    answer = vowel;\n                    break;\n  \
  \              }\n            }\n        }\n        return answer;"
- "        // TODO\n        return \"\";"
- '        return null;'
- "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] cons = {'b',\
  \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
  \ 'w', 'x', 'y', 'z'};\n        String result = \"\";\n        boolean isVowel =\
  \ false;\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if\
  \ (isVowel && (Arrays.binarySearch(cons, word.charAt(i)) >= 0)) {\n            \
  \    return result;\n            }\n            if ((Arrays.binarySearch(vowels,\
  \ word.charAt(i)) >= 0)) {\n                result = Character.toString(word.charAt(i));\n\
  \                isVowel = true;\n            }\n        }\n        return \"\";"
- "        if (word.equals(\"\")) return \"\";\n        char[] vowels = {'a', 'e',\
  \ 'i', 'o', 'u'};\n        char[] consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j',\
  \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n     \
  \   boolean[] vowels_found = new boolean[vowels.length];\n        boolean[] consonants_found\
  \ = new boolean[consonants.length];\n        int closest_vowel_index = -1;\n   \
  \     int closest_consonant_index = -1;\n        int min_distance = Integer.MAX_VALUE;\n\
  \        for (int i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n\
  \            for (int j = 0; j < vowels.length; j++) {\n                if (c ==\
  \ vowels[j]) {\n                    vowels_found[j] = true;\n                }\n\
  \            }\n            for (int j = 0; j < consonants.length; j++) {\n    \
  \            if (c == consonants[j]) {\n                    consonants_found[j]\
  \ = true;\n                }\n            }\n        }\n        for (int i = 0;\
  \ i < vowels_found.length; i++) {\n            if (vowels_found[i]) {\n        \
  \        for (int j = 0; j < consonants_found.length; j++) {\n                 \
  \   if (consonants_found[j]) {\n                        int distance = Math.abs(i\
  \ - j);\n                        if (distance < min_distance) {\n              \
  \              min_distance = distance;\n                            closest_vowel_index\
  \ = i;\n                            closest_consonant_index = j;\n             \
  \           }\n                    }\n                }\n            }\n       \
  \ }\n        if (closest_vowel_index == -1 || closest_consonant_index == -1) return\
  \ \"\";\n        int vowel_index = -1;\n        int consonant_index = -1;\n"
- "        String[] vowels = new String[]{\"a\", \"e\", \"i\", \"o\", \"u\"};\n  \
  \      if (word.length() < 3) return \"\";\n        List<String> list = Arrays.asList(vowels);\n\
  \        int index = 0;\n        for (int i = word.length() - 1; i >= 1; i--) {\n\
  \            String first = String.valueOf(word.charAt(i - 1));\n            String\
  \ second = String.valueOf(word.charAt(i));\n            if (list.contains(first)\
  \ && list.contains(second)) {\n                index = i;\n                break;\n\
  \            }\n        }\n        for (int i = index - 1; i >= 0; i--) {\n    \
  \        String letter = String.valueOf(word.charAt(i));\n            if (list.contains(letter))\
  \ return letter;\n        }\n        return \"\";"
- "        int firstConsonantIndex = word.length() - 1;\n        int secondConsonantIndex\
  \ = word.length() - 1;\n        for (int i = word.length() - 1; i >= 0; i--) {\n\
  \            if (word.charAt(i) == 'a' || word.charAt(i) == 'e' || word.charAt(i)\
  \ == 'i' ||\n                word.charAt(i) == 'o' || word.charAt(i) == 'u') {\n\
  \                firstConsonantIndex = i;\n                break;\n            }\n\
  \        }\n        for (int i = firstConsonantIndex - 1; i >= 0; i--) {\n     \
  \       if (word.charAt(i) != 'a' && word.charAt(i) != 'e' && word.charAt(i) !=\
  \ 'i' &&\n                word.charAt(i) != 'o' && word.charAt(i) != 'u') {\n  \
  \              secondConsonantIndex = i;\n                break;\n            }\n\
  \        }\n        if (firstConsonantIndex == word.length() - 1 || secondConsonantIndex\
  \ == word.length() - 1) {\n            return \"\";\n        }\n        return Character.toString(word.charAt(firstConsonantIndex));"
- "        if (word.length() < 3) return \"\";\n        char c = word.charAt(word.length()\
  \ - 1);\n        if (!isConsonant(c)) return \"\";\n        c = word.charAt(word.length()\
  \ - 2);\n        if (!isConsonant(c)) return \"\";\n        int minI = word.length()\
  \ - 1;\n        for (int i = word.length() - 3; i >= 0; i--) {\n            c =\
  \ word.charAt(i);\n            if (isVowel(c)) {\n                minI = i;\n  \
  \              break;\n            }\n        }\n        return minI == word.length()\
  \ - 1 ? \"\" : String.valueOf(word.charAt(minI));"
- "        var vowels = new HashSet<Character>(List.of('a', 'e', 'i', 'o', 'u'));\n\
  \        var consonants = new HashSet<Character>(List.of('b', 'c', 'd', 'f', 'g',\
  \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'));\n\
  \        var wordLength = word.length();\n        if (wordLength < 3) {\n      \
  \      return \"\";\n        }\n\n        var wordCharArray = word.toCharArray();\n\
  \        var lastIndex = wordLength - 1;\n        var newLastIndex = lastIndex -\
  \ 1;\n        while (newLastIndex > 0) {\n            if (consonants.contains(wordCharArray[newLastIndex]))\
  \ {\n                if (consonants.contains(wordCharArray[lastIndex])) {\n    \
  \                if (vowels.contains(wordCharArray[newLastIndex + 1])) {\n     \
  \                   return String.valueOf(wordCharArray[newLastIndex + 1]);\n  \
  \                  }\n                }\n            }\n            lastIndex =\
  \ newLastIndex;\n            newLastIndex--;\n        }\n        return \"\";"
- "        var vowels = new HashSet<Character>(List.of('a', 'e', 'i', 'o', 'u'));\n\
  \        var result = \"\";\n        var foundVowel = false;\n        var indexOfFirstVowel\
  \ = -1;\n        for (var i = word.length() - 1; i >= 0; i--) {\n            var\
  \ c = word.charAt(i);\n            if (vowels.contains(c)) {\n                if\
  \ (foundVowel) {\n                    return result;\n                }\n      \
  \          else {\n                    result = Character.toString(c);\n       \
  \             foundVowel = true;\n                    indexOfFirstVowel = i;\n \
  \               }\n            }\n            else {\n                if (foundVowel)\
  \ {\n                    var tmpResult = \"\";\n                    for (var j =\
  \ indexOfFirstVowel; j <= i; j++) {\n                        tmpResult += word.charAt(j);\n\
  \                    }\n                    result = tmpResult;\n              \
  \  }\n            }\n        }\n        return result;"
- '        return "";'
- "        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[]\
  \ letters = word.split(\"\");\n        String result = \"\";\n        int closest\
  \ = word.length();\n        if (word.length() > 1) {\n            for (int i = word.length()\
  \ - 1; i > 0; i--) {\n                for (String vowel : vowels) {\n          \
  \          if (vowel.equals(letters[i]) && !vowel.equals(letters[i - 1])) {\n  \
  \                      int count = (word.length() - 1) - i;\n                  \
  \      if (count < closest) {\n                            closest = count;\n  \
  \                          result = vowel;\n                        }\n        \
  \            }\n                }\n            }\n        }\n        return result;"
- "        List<Integer> vowelIndices = new ArrayList<>();\n        for (int i = 0;\
  \ i < word.length(); i++) {\n            if (Arrays.asList('a', 'e', 'i', 'o', 'u').contains(word.charAt(i)))\
  \ {\n                vowelIndices.add(i);\n            }\n        }\n        if\
  \ (vowelIndices.size() == 0) {\n            return \"\";\n        }\n        int[]\
  \ distances = new int[vowelIndices.size()];\n        for (int i = 0; i < vowelIndices.size();\
  \ i++) {\n            distances[i] = word.length() - vowelIndices.get(i);\n    \
  \    }\n        int distance = Integer.MAX_VALUE;\n        int index = 0;\n    \
  \    for (int i = 0; i < distances.length; i++) {\n            if (distances[i]\
  \ < distance) {\n                distance = distances[i];\n                index\
  \ = i;\n            }\n        }\n        return String.valueOf(word.charAt(vowelIndices.get(index)));"
- "        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        char[]\
  \ chars = word.toCharArray();\n        int i = word.length() - 1;\n        while\
  \ (i >= 0) {\n            if (Arrays.asList(vowels).contains(chars[i] + \"\")) {\n\
  \                if (i != word.length() - 1 && !Arrays.asList(vowels).contains(chars[i\
  \ + 1] + \"\")) {\n                    return chars[i] + \"\";\n               \
  \ }\n            }\n            i--;\n        }\n        return \"\";"
- "        String[] vowels = new String[]{\"a\", \"e\", \"i\", \"o\", \"u\"};\n  \
  \      String[] consonants = new String[]{\"b\", \"c\", \"d\", \"f\", \"g\", \"\
  h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
  , \"w\", \"x\", \"y\", \"z\"};\n        List<String> vowelsList = Arrays.asList(vowels);\n\
  \        List<String> consonantsList = Arrays.asList(consonants);\n        for (int\
  \ i = word.length() - 1; i >= 0; i--) {\n            String character = Character.toString(word.charAt(i));\n\
  \            if (consonantsList.contains(character) && i != 0) {\n             \
  \   String nextCharacter = Character.toString(word.charAt(i - 1));\n           \
  \     if (vowelsList.contains(nextCharacter)) {\n                    return nextCharacter;\n\
  \                }\n            }\n        }\n        return \"\";"
- '        return new String();'
- '        return "";'
- "        String vowels = \"aeiou\";\n        int closestVowelIndex = -1;\n     \
  \   int closestDistance = word.length();\n        int distance = word.length();\n\
  \        char previousChar = 'a';\n        for (int i = word.length() - 1; i >=\
  \ 0; i--) {\n            char currentChar = word.charAt(i);\n            if (vowels.indexOf(currentChar)\
  \ > -1) {\n                distance = word.length() - i;\n                if (distance\
  \ >= 2 && distance < closestDistance && previousChar != currentChar) {\n       \
  \             closestVowelIndex = i;\n                    closestDistance = distance;\n\
  \                }\n            }\n            previousChar = currentChar;\n   \
  \     }\n        return closestVowelIndex >= 0 ? Character.toString(word.charAt(closestVowelIndex))\
  \ : \"\";"
- '        return null;'
- "        word = word.toLowerCase();\n        int cn = word.length() - 1;\n     \
  \   String a = \"aeiou\";\n        String x = \"\";\n        int ai = 0;\n     \
  \   int start = 0;\n        for (int i = cn; i >= 0; i--) {\n            String\
  \ y = word.substring(i, i + 1);\n            if (a.contains(y)) {\n            \
  \    ai = a.indexOf(y);\n                start = i;\n                break;\n  \
  \          }\n        }\n        for (int i = start - 1; i >= 0; i--) {\n      \
  \      String y = word.substring(i, i + 1);\n            if (!a.contains(y)) {\n\
  \                return word.substring(start, start + 1);\n            }\n     \
  \   }\n        return \"\";"
- "        StringBuilder vowels = new StringBuilder(\"aeiou\");\n        StringBuilder\
  \ ys = new StringBuilder(\"y\");\n        StringBuilder consonants = new StringBuilder(\"\
  bcdfghjklmnpqrstvwxyz\");\n        StringBuilder res = new StringBuilder();\n  \
  \      for (int i = word.length() - 1; i >= 0; i--) {\n            StringBuilder\
  \ c = new StringBuilder(word.substring(i, i + 1));\n            if (consonants.indexOf(c.toString())\
  \ >= 0) {\n                if (vowels.indexOf(c.toString()) >= 0) {\n          \
  \          res.append(c);\n                } else if (ys.indexOf(c.toString()) >=\
  \ 0) {\n                    if (i - 1 >= 0) {\n                        StringBuilder\
  \ b = new StringBuilder(word.substring(i - 1, i));\n                        if (consonants.indexOf(b.toString())\
  \ >= 0) {\n                            res.append(c);\n                        }\n\
  \                    }\n                }\n            }\n        }\n        return\
  \ res.toString();"
- "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] cons = {'b',\
  \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
  \ 'w', 'x', 'y', 'z'};\n        Set<Character> vowelSet = new HashSet<Character>();\n\
  \        Set<Character> consSet = new HashSet<Character>();\n        vowelSet.addAll(Arrays.asList(vowels));\n\
  \        consSet.addAll(Arrays.asList(cons));\n        char[] letters = word.toCharArray();\n\
  \        int last_letter = letters.length - 1;\n        int last_vowel = 0;\n  \
  \      for (int i = last_letter; i >= 0; i--) {\n            if (vowelSet.contains(letters[i]))\
  \ {\n                last_vowel = i;\n                break;\n            }\n  \
  \      }\n        String res = \"\";\n        for (int i = last_vowel; i >= 0; i--)\
  \ {\n            if (consSet.contains(letters[i])) {\n                res = \"\"\
  \ + letters[i];\n                break;\n            }\n        }\n        return\
  \ res;"
- "        String vowels = \"aeiou\";\n        for (int i = word.length() - 1; i >=\
  \ 0; i--) {\n            String curr = word.substring(i, i + 1);\n            if\
  \ (vowels.contains(curr)) {\n                for (int j = i - 1; j >= 0; j--) {\n\
  \                    String prev = word.substring(j, j + 1);\n                 \
  \   if (!vowels.contains(prev)) {\n                        return curr;\n      \
  \              }\n                }\n            }\n        }\n        return \"\
  \";"
- "        if (word.length() <= 2) return \"\";\n        String vowels = \"aeiouAEIOU\"\
  ;\n        String cons = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n     \
  \   String s = \"\";\n        for (int i = word.length() - 1; i >= 0; i--) {\n \
  \           if (cons.contains(String.valueOf(word.charAt(i)))) s += word.charAt(i);\n\
  \            else if (vowels.contains(String.valueOf(word.charAt(i)))) {\n     \
  \           if (s.length() > 0) {\n                    s = s.charAt(s.length() -\
  \ 1) + s;\n                    return s;\n                }\n            }\n   \
  \     }\n        return \"\";"
- "        int i = word.length() - 1;\n        for (; i >= 0; i--) {\n           \
  \ if (!isVowel(word.charAt(i))) {\n                break;\n            }\n     \
  \   }\n        for (; i >= 0; i--) {\n            if (isVowel(word.charAt(i))) {\n\
  \                break;\n            }\n        }\n        return i >= 0 ? String.valueOf(word.charAt(i))\
  \ : \"\";"
- "        // Note: 'consonants' are defined as the set: {'b', 'c', 'd', 'f', 'g',\
  \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n\
  \        // and 'vowels' are defined as the set: {'a', 'e', 'i', 'o', 'u'}\n   \
  \     // TODO: Implement getClosestVowel here\n        return null;"
- "        String vowels = \"aeiouAEIOU\";\n        int index = word.length() - 1;\n\
  \        while (index > 0) {\n            if (vowels.indexOf(word.charAt(index))\
  \ >= 0) {\n                // we found a vowel\n                if (vowels.indexOf(word.charAt(index\
  \ - 1)) < 0) {\n                    // and the character just before it is not a\
  \ vowel\n                    return String.valueOf(word.charAt(index));\n      \
  \          }\n            }\n            index--;\n        }\n        return \"\"\
  ;"
- "        // Write your code here.\n        return \"\";"
- "        // TODO\n        return null;"
- "        // your code\n        return \"\";"
- "        int len = word.length();\n        int i;\n        boolean found = false;\n\
  \        if (len <= 2) return \"\";\n        for (i = len - 1; i >= 1; i--) {\n\
  \            char ch = word.charAt(i);\n            if (ch == 'a' || ch == 'e' ||\
  \ ch == 'i' || ch == 'o' || ch == 'u') {\n                char c = word.charAt(i\
  \ - 1);\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
  \ 'u') continue;\n                found = true;\n                break;\n      \
  \      }\n        }\n        if (found) {\n            return Character.toString(word.charAt(i));\n\
  \        }\n        return \"\";"
- "        if (word.length() < 3) {\n            return \"\";\n        }\n       \
  \ String vowel = \"aeiou\";\n        char[] chars = word.toCharArray();\n      \
  \  char prevChar = ' ';\n        char nextChar = ' ';\n        int idx = -1;\n \
  \       for (int i = chars.length - 1; i >= 0; i--) {\n            if (vowel.indexOf(chars[i])\
  \ != -1) {\n                idx = i;\n                break;\n            }\n  \
  \      }\n        if (idx == -1) {\n            return \"\";\n        }\n      \
  \  prevChar = chars[idx - 1];\n        nextChar = chars[idx + 1];\n        if (vowel.indexOf(prevChar)\
  \ == -1 && vowel.indexOf(nextChar) == -1) {\n            return String.valueOf(chars[idx]);\n\
  \        }\n        return \"\";"
- "        int n = word.length();\n        if (n < 3) return \"\";\n        char[]\
  \ c = word.toCharArray();\n        List<Integer> vowels = new ArrayList<>();\n \
  \       for (int i = 0; i < n; i++) {\n            if (isVowel(c[i])) vowels.add(i);\n\
  \        }\n        for (int i = n - 2; i >= 0; i--) {\n            if (!isVowel(c[i])\
  \ && !isVowel(c[i + 1])) {\n                int res = -1;\n                for (int\
  \ v : vowels) {\n                    if (v < i) {\n                        if (res\
  \ == -1) res = v;\n                        else if (i - v < i - res) res = v;\n\
  \                    }\n                }\n                if (res == -1) return\
  \ \"\";\n                return Character.toString(c[res]);\n            }\n   \
  \     }\n        return \"\";"
- "        String vowels = \"aeiou\";\n        int n = word.length();\n        for\
  \ (int i = n - 1; i >= 1; i--) {\n            char ch = word.charAt(i);\n      \
  \      if (vowels.indexOf(ch) != -1) {\n                if (vowels.indexOf(word.charAt(i\
  \ - 1)) == -1) {\n                    return ch + \"\";\n                }\n   \
  \         }\n        }\n        return \"\";"
- "        word = word.toLowerCase();\n        char[] wordCharArray = word.toCharArray();\n\
  \        int previousVowelIndex = -1;\n        int vowelIndex = -1;\n        int\
  \ closestVowelIndex = -1;\n        for (int i = wordCharArray.length - 1; i >= 0;\
  \ i--) {\n            char currentChar = wordCharArray[i];\n            if (currentChar\
  \ == 'a' || currentChar == 'e' || currentChar == 'i' || currentChar == 'o' || currentChar\
  \ == 'u') {\n                vowelIndex = i;\n                if (vowelIndex - previousVowelIndex\
  \ == 2) {\n                    closestVowelIndex = vowelIndex;\n               \
  \     break;\n                }\n                previousVowelIndex = vowelIndex;\n\
  \            }\n        }\n        if (closestVowelIndex != -1) {\n            return\
  \ String.valueOf(wordCharArray[closestVowelIndex]);\n        }\n        return \"\
  \";"
- "        word = word.toLowerCase();\n        int vowelPos = -1;\n        int minDist\
  \ = Integer.MAX_VALUE;\n        for (int i = word.length() - 1; i >= 0; i--) {\n\
  \            if (\"aeiou\".indexOf(word.charAt(i)) >= 0) {\n                if (i\
  \ < word.length() - 1 && \"aeiou\".indexOf(word.charAt(i + 1)) >= 0) {\n       \
  \             continue;\n                }\n                if (i > 0 && \"aeiou\"\
  .indexOf(word.charAt(i - 1)) >= 0) {\n                    continue;\n          \
  \      }\n                int dist = word.length() - i;\n                if (dist\
  \ < minDist) {\n                    minDist = dist;\n                    vowelPos\
  \ = i;\n                }\n            }\n        }\n        if (vowelPos == -1)\
  \ {\n            return \"\";\n        }\n        return String.valueOf(word.charAt(vowelPos));"
- "        if (word.length() > 0) {\n            char[] chars = word.toCharArray();\n\
  \            char lastC = '\\0';\n            int index = -1;\n            int distance\
  \ = chars.length;\n            for (int i = chars.length - 1; i >= 0; i--) {\n \
  \               if (isVowel(chars[i])) {\n                    if (lastC != '\\0')\
  \ {\n                        int d = chars.length - i - 1;\n                   \
  \     if (d < distance) {\n                            distance = d;\n         \
  \                   index = i;\n                        }\n                    }\n\
  \                } else {\n                    lastC = chars[i];\n             \
  \   }\n            }\n            if (index != -1) {\n                return new\
  \ String(new char[] { chars[index] });\n            }\n        }\n        return\
  \ \"\";"
- "        int numVowels = 0;\n        int closestConsonant = 0;\n        ArrayList<String>\
  \ result = new ArrayList<String>();\n        for (int i = word.length() - 1; i >=\
  \ 0; i--) {\n            String c = word.substring(i, i + 1);\n            boolean\
  \ isVowel = c.equals(\"a\") || c.equals(\"e\") || c.equals(\"i\") || c.equals(\"\
  o\") || c.equals(\"u\");\n            if (isVowel) {\n                if (numVowels\
  \ >= 2) {\n                    result.add(c);\n                    break;\n    \
  \            }\n                numVowels++;\n            } else {\n           \
  \     if (numVowels == 1) {\n                    closestConsonant = i;\n       \
  \         }\n            }\n        }\n        if (result.size() > 0) {\n      \
  \      return result.get(0);\n        }\n        return \"\";"
- "        String vowels = \"aeiouAEIOU\";\n        int length = word.length();\n\
  \        int index = 0;\n        int bestIndex = -1;\n        for (int i = length\
  \ - 1; i >= 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n\
  \                index = i;\n                continue;\n            }\n        \
  \    if (index != 0) {\n                break;\n            }\n        }\n     \
  \   for (int i = index - 1; i >= 0; i--) {\n            if (vowels.indexOf(word.charAt(i))\
  \ != -1) {\n                bestIndex = i;\n                break;\n           \
  \ }\n        }\n        if (bestIndex == -1) {\n            return \"\";\n     \
  \   }\n        return word.substring(bestIndex, bestIndex + 1);"
- "        int maxDist = Integer.MAX_VALUE;\n        String closest = \"\";\n    \
  \    for (int i = 0; i < word.length(); i++) {\n            char ch = word.charAt(i);\n\
  \            if (isVowel(ch)) {\n                int left = i - 1;\n           \
  \     while (left >= 0 && isVowel(word.charAt(left))) left--;\n                int\
  \ right = i + 1;\n                while (right < word.length() && isVowel(word.charAt(right)))\
  \ right++;\n                if (right - left <= maxDist) {\n                   \
  \ maxDist = right - left;\n                    closest = String.valueOf(ch);\n \
  \               }\n            }\n        }\n        return closest;"
- "        // Write your code here\n        // Return the closest vowel from the right\n\
  \        return \"\";"
- "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        int closest = -1;\n\
  \        int current = -1;\n        int charIndex = word.length() - 1;\n       \
  \ while (charIndex >= 0) {\n            char letter = word.charAt(charIndex);\n\
  \            //if the current letter is a vowel and the previous letter was not\
  \ a vowel\n            if (Arrays.binarySearch(vowels, letter) >= 0 && closest ==\
  \ -1) {\n                current = charIndex;\n            }\n            //if the\
  \ current letter is not a vowel and the previous letter was a vowel\n          \
  \  else if (Arrays.binarySearch(vowels, letter) < 0 && current != -1) {\n      \
  \          closest = current;\n                break;\n            }\n         \
  \   charIndex--;\n        }\n        if (closest == -1) {\n            return \"\
  \";\n        }\n        return String.valueOf(word.charAt(closest));"
- "        List<String> vowels = Arrays.asList(\"aeiouAEIOU\".split(\"\"));\n    \
  \    int vowelPos = -1;\n        for (int i = word.length() - 1; i >= 0; i--) {\n\
  \            String curr = word.substring(i, i + 1);\n            if (vowels.contains(curr))\
  \ {\n                vowelPos = i;\n                break;\n            }\n    \
  \    }\n        if (vowelPos == -1) {\n            return \"\";\n        }\n   \
  \     //find the closest consonant from the left side\n        int consonantPos\
  \ = -1;\n        for (int i = vowelPos - 1; i >= 0; i--) {\n            String curr\
  \ = word.substring(i, i + 1);\n            if (!vowels.contains(curr)) {\n     \
  \           consonantPos = i;\n                break;\n            }\n        }\n\
  \        if (consonantPos == -1) {\n            return \"\";\n        }\n      \
  \  return word.substring(vowelPos, vowelPos + 1);"
- "        // Your code here\n        return \"\";"
- "        //+BEGIN_SOLUTION\n        Pattern p = Pattern.compile(\"(?<=[^aeiou])([aeiou])(?=[^aeiou])\"\
  );\n        Matcher m = p.matcher(word);\n        return m.find() ? m.group(1) :\
  \ \"\";\n        //+END_SOLUTION"
- "        if (word.length() == 0) return \"\";\n        int i = word.length() - 1;\n\
  \        while (i >= 0) {\n            if (!isVowel(word.charAt(i))) break;\n  \
  \          i--;\n        }\n        if (i == -1) return \"\";\n        if (i ==\
  \ 0) return \"\";\n        while (i >= 0) {\n            if (isVowel(word.charAt(i)))\
  \ break;\n            i--;\n        }\n        if (i == -1) return \"\";\n     \
  \   return word.substring(i, i + 1);"
- "        // Fill your code here\n        String[] vowels = {\"a\", \"e\", \"i\"\
  , \"o\", \"u\"};\n        List<String> arrayListVowels = Arrays.asList(vowels);\n\
  \        word = word.toLowerCase();\n        List<Integer> arrayListVowelIndex =\
  \ new ArrayList<>();\n        Map<Integer, String> arrayListVowelPosition = new\
  \ HashMap<>();\n        for (int i = 0; i < word.length(); i++) {\n            if\
  \ (arrayListVowels.contains(word.substring(i, i + 1))) {\n                arrayListVowelIndex.add(i);\n\
  \                arrayListVowelPosition.put(i, word.substring(i, i + 1));\n    \
  \        }\n        }\n        String result = \"\";\n        int close = word.length();\n\
  \        for (int i = 0; i < arrayListVowelIndex.size(); i++) {\n            int\
  \ index = arrayListVowelIndex.get(i);\n            if (index > 0 && index < word.length()\
  \ - 1) {\n                boolean left = false;\n                boolean right =\
  \ false;\n                for (int j = index - 1; j >= 0; j--) {\n             \
  \       if (!arrayListVowels.contains(word.substring(j, j + 1))) {\n           \
  \             left = true;\n                        break;\n                   \
  \ }\n                }\n                for (int j = index + 1; j < word.length();\
  \ j++) {\n                    if (!arrayListVowels.contains(word.substring(j, j\
  \ + 1))) {\n                        right = true;\n                        break;\n\
  \                    }\n                }\n                if (left && right) {\n\
  \                    int temp = index;\n                    if (temp < close) {\n\
  \                        close = temp;\n                        result = arrayListVowelPosition.get(temp);\n\
  \                    }\n                }\n            }\n        }\n        return\
  \ result;"
- "        String vowelToConsonant = \"\";\n        String[] vowels = {\"a\", \"e\"\
  , \"i\", \"o\", \"u\"};\n        String[] consonants = {\"b\", \"c\", \"d\", \"\
  f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
  , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n        for (int i = word.length()\
  \ - 1; i >= 0; i--) {\n            for (int j = 0; j < vowels.length; j++) {\n \
  \               if (word.charAt(i) == vowels[j].charAt(0)) {\n                 \
  \   vowelToConsonant = vowels[j];\n                    break;\n                }\n\
  \            }\n            if (vowelToConsonant.length() > 0) {\n             \
  \   break;\n            }\n        }\n        for (int i = word.length() - 1; i\
  \ >= 0; i--) {\n            for (int j = 0; j < consonants.length; j++) {\n    \
  \            if (word.charAt(i) == consonants[j].charAt(0)) {\n                \
  \    return vowelToConsonant;\n                }\n            }\n        }\n   \
  \     return \"\";"
- "        char[] vowels = new char[]{'a', 'e', 'i', 'o', 'u'};\n        char[] chars\
  \ = word.toCharArray();\n        char prev = 0;\n        char next = 0;\n      \
  \  for (int i = chars.length - 1; i >= 0; i--) {\n            if (Arrays.binarySearch(vowels,\
  \ chars[i]) >= 0) {\n                if (prev == 0) {\n                    return\
  \ \"\" + chars[i];\n                }\n                if (next == 0) {\n      \
  \              return \"\" + chars[i];\n                }\n                if (Math.abs(chars[i]\
  \ - prev) > Math.abs(chars[i] - next)) {\n                    return \"\" + chars[i];\n\
  \                }\n            } else {\n                if (prev == 0) {\n   \
  \                 prev = chars[i];\n                } else {\n                 \
  \   next = chars[i];\n                }\n            }\n        }\n        return\
  \ \"\";"
- '        return "";'
- "        String result = \"\";\n        boolean is_vowel = false;\n        for (int\
  \ i = word.length() - 1; i >= 0; i--) {\n            String ch = word.substring(i,\
  \ i + 1);\n            if (ch.matches(\"[aeiou]\")) {\n                if (is_vowel)\
  \ {\n                    result = \"\";\n                    break;\n          \
  \      }\n                is_vowel = true;\n                result = ch;\n     \
  \       } else {\n                if (is_vowel) {\n                    break;\n\
  \                }\n            }\n        }\n        return result;"
- '        return "";'
- "        final List<Character> vowels = Arrays.asList('a', 'e', 'i', 'o', 'u');\n\
  \        int vowelIndex = -1;\n        int closestVowelIndex = -1;\n        for\
  \ (int i = word.length() - 1; i >= 0; i--) {\n            final char currChar =\
  \ word.charAt(i);\n            if (vowels.contains(currChar)) {\n              \
  \  vowelIndex = i;\n            } else {\n                if (vowelIndex == -1)\
  \ {\n                    continue;\n                }\n                closestVowelIndex\
  \ = vowelIndex;\n                break;\n            }\n        }\n        if (closestVowelIndex\
  \ == -1) {\n            return \"\";\n        }\n        return Character.toString(word.charAt(closestVowelIndex));"
- "        if (word.length() < 3) {\n            return \"\";\n        }\n       \
  \ List<Character> vowels = List.of('a', 'e', 'i', 'o', 'u');\n        List<Character>\
  \ consonants = List.of('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
  \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z');\n        int closestVowelIndex =\
  \ -1;\n        for (int i = word.length() - 2; i > 0; i--) {\n            char c\
  \ = word.charAt(i);\n            if (vowels.contains(c)) {\n                if (consonants.contains(word.charAt(i\
  \ - 1)) && consonants.contains(word.charAt(i + 1))) {\n                    closestVowelIndex\
  \ = i;\n                    break;\n                }\n            }\n        }\n\
  \        if (closestVowelIndex == -1) {\n            return \"\";\n        }\n \
  \       return String.valueOf(word.charAt(closestVowelIndex));"
- "        String vowels = \"aeiou\";\n        String[] letters = word.split(\"\"\
  );\n        boolean found = false;\n        int i = letters.length - 1;\n      \
  \  while (i > 0 && !found) {\n            if (vowels.contains(letters[i])) {\n \
  \               found = true;\n            } else {\n                i--;\n    \
  \        }\n        }\n        // System.out.println(letters[i]);\n        if (i\
  \ == 0) {\n            return \"\";\n        }\n        boolean allRight = true;\n\
  \        while (i > 0 && allRight) {\n            if (vowels.contains(letters[i\
  \ - 1])) {\n                allRight = false;\n            } else {\n          \
  \      i--;\n            }\n        }\n        if (i == 0) {\n            return\
  \ \"\";\n        }\n        return letters[i];"
- "      // write your code here.\n      return \"\";"
- "        String vowels = \"aeiou\";\n        for (int i = word.length() - 1; i >=\
  \ 0; i--) {\n            if (i > 0 && vowels.indexOf(word.charAt(i)) >= 0 &&\n \
  \                   vowels.indexOf(word.charAt(i - 1)) < 0) {\n                return\
  \ String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\"\
  ;"
- "        char[] vowels = new char[]{'a', 'e', 'i', 'o', 'u'};\n        int min =\
  \ -1;\n        String result = \"\";\n        for (int i = word.length() - 1; i\
  \ >= 0; i--) {\n            char c = word.charAt(i);\n            if (c == 'a' ||\
  \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                if (min > -1)\
  \ {\n                    int distance = i - min;\n                    if (distance\
  \ > 0) {\n                        result = new StringBuilder().append(c).toString();\n\
  \                        break;\n                    }\n                }\n    \
  \        } else {\n                if (min < 0) {\n                    min = i;\n\
  \                }\n            }\n        }\n        return result;"
- "        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String\
  \ res = \"\";\n        int[] charIndex = new int[word.length()];\n        int index\
  \ = 0;\n        for (int i = 0; i < word.length(); i++) {\n            charIndex[i]\
  \ = word.charAt(i);\n        }\n        for (int i = charIndex.length - 1; i > 0;\
  \ i--) {\n            if (Arrays.asList(vowels).contains(Character.toString((char)\
  \ charIndex[i]).toLowerCase())) {\n                if (!Arrays.asList(vowels).contains(Character.toString((char)\
  \ charIndex[i - 1]).toLowerCase())) {\n                    index = i;\n        \
  \            break;\n                }\n            }\n        }\n        if (index\
  \ != 0) {\n            res = Character.toString((char) charIndex[index]);\n    \
  \    }\n        return res;"
- "        String vowels = \"aeiouAEIOU\";\n        String consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
  ;\n        int wordLength = word.length();\n        if (wordLength < 3) {\n    \
  \        return \"\";\n        }\n        for (int i = wordLength - 1; i > 0; i--)\
  \ {\n            if (consonants.contains(String.valueOf(word.charAt(i)))\n     \
  \       && consonants.contains(String.valueOf(word.charAt(i - 1)))\n           \
  \ && vowels.contains(String.valueOf(word.charAt(i - 2)))) {\n                return\
  \ String.valueOf(word.charAt(i - 2));\n            }\n        }\n        return\
  \ \"\";"
- "        word = word.toLowerCase();\n        char[] word_array = word.toCharArray();\n\
  \        char closest_vowel = ' ';\n        int min_distance = Integer.MAX_VALUE;\n\
  \        int prev_cons_index = -1;\n        int next_cons_index = -1;\n        for\
  \ (int i = 0; i < word_array.length; i++) {\n            char current_letter = word_array[i];\n\
  \            if (current_letter == 'a' || current_letter == 'e' ||\n           \
  \     current_letter == 'i' || current_letter == 'o' ||\n                current_letter\
  \ == 'u') {\n                if (prev_cons_index != -1) {\n                    next_cons_index\
  \ = find_next_consonant(word_array, i);\n                    if (next_cons_index\
  \ != -1) {\n                        int current_distance = next_cons_index - prev_cons_index;\n\
  \                        if (current_distance < min_distance) {\n              \
  \              min_distance = current_distance;\n                            closest_vowel\
  \ = current_letter;\n                        }\n                    }\n        \
  \        }\n            } else {\n                prev_cons_index = i;\n       \
  \     }\n        }\n        if (closest_vowel == ' ') {\n            return \"\"\
  ;\n        } else {\n            return \"\" + closest_vowel;\n        }"
- "        // write your code here\n        if (word.length() < 2) {\n           \
  \ return \"\";\n        }\n        int vowelPosition = -1;\n        boolean vowelFirst\
  \ = false;\n        char[] vowel = {'a', 'e', 'i', 'o', 'u'};\n        for (int\
  \ i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n     \
  \       if (Arrays.binarySearch(vowel, c) >= 0) {\n                vowelFirst =\
  \ true;\n                break;\n            }\n        }\n        if (!vowelFirst)\
  \ {\n            return \"\";\n        }\n        for (int i = word.length() - 1;\
  \ i >= 0; i--) {\n            char c = word.charAt(i);\n            if (Arrays.binarySearch(vowel,\
  \ c) >= 0) {\n                vowelPosition = i;\n                break;\n     \
  \       }\n        }\n        if (vowelPosition == -1) {\n            return \"\"\
  ;\n        }\n        char prevChar = word.charAt(vowelPosition - 1);\n        while\
  \ (vowelPosition >= 0) {\n            char c = word.charAt(vowelPosition);\n   \
  \         char nextChar = vowelPosition + 1 >= word.length() ? '_' : word.charAt(vowelPosition\
  \ + 1);\n            if (prevChar != '_' && nextChar != '_' && Arrays.binarySearch(vowel,\
  \ prevChar) < 0 && Arrays.binarySearch(vowel, nextChar) < 0) {\n               \
  \ return Character.toString(c);\n            }\n            vowelPosition--;\n \
  \           prevChar = c;\n        }\n        return \"\";"
- "        int position = -1;\n        for (int i = word.length() - 1; i >= 0; i--)\
  \ {\n            if (isVowel(word.charAt(i))) {\n                if (i == word.length()\
  \ - 1) {\n                    continue;\n                }\n                if (isConsonant(word.charAt(i\
  \ + 1))) {\n                    position = i;\n                    break;\n    \
  \            }\n            }\n        }\n        if (position == -1) {\n      \
  \      return \"\";\n        }\n        int distance = 0;\n        int closest =\
  \ -1;\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (isVowel(word.charAt(i)))\
  \ {\n                if (i != position) {\n                    if (isConsonant(word.charAt(i\
  \ + 1))) {\n                        distance = position - i;\n                 \
  \       if (closest == -1) {\n                            closest = distance;\n\
  \                        } else {\n                            if (distance < closest)\
  \ {\n                                closest = distance;\n                     \
  \       }\n                        }\n                    }\n                }\n\
  \            }\n        }\n        if (closest == -1) {\n            return \"\"\
  ;\n        }\n        for (int i = word.length() - 1; i >= 0; i--) {\n         \
  \   if (isVowel(word.charAt(i))) {\n                if (i != position) {\n     \
  \               if (isConsonant(word.charAt(i + 1))) {\n                       \
  \ distance = position - i;\n                        if (distance == closest) {\n\
  \                            return Character.toString(word.charAt(i));\n      \
  \                  }\n                    }\n                }\n            }\n\
  \        }\n        return \"\";"
- "        String vowels = \"aeiou\";\n        // check if the word is 2 or less letters\n\
  \        if (word.length() <= 2) return \"\";\n        // check if the word starts\
  \ with a vowel\n        if (vowels.contains(word.substring(0, 1))) {\n         \
  \   // if the word has a consonant after it, return the consonant\n            if\
  \ (!vowels.contains(word.substring(1, 2))) return word.substring(1, 2);\n      \
  \      else return \"\";\n        }\n        // check the rest of the word\n   \
  \     for (int i = word.length() - 1; i > 0; i--) {\n            // if the current\
  \ character is a vowel\n            if (vowels.contains(word.substring(i, i + 1)))\
  \ {\n                // if the char to the left is a consonant\n               \
  \ if (!vowels.contains(word.substring(i - 1, i))) {\n                    // if there\
  \ are at least two chars to the right\n                    if (i < word.length()\
  \ - 2) {\n                        // if the char to the right is a consonant\n \
  \                       if (!vowels.contains(word.substring(i + 1, i + 2))) {\n\
  \                            return word.substring(i, i + 1);\n                \
  \        }\n                    }\n                    // if there is only one char\
  \ to the right, return the vowel\n                    else return word.substring(i,\
  \ i + 1);\n                }\n            }\n        }\n        return \"\";"
- "        StringBuilder b = new StringBuilder(word);\n        String allVowels =\
  \ \"aeiou\";\n        while (b.length() >= 2) {\n            if (allVowels.indexOf(b.charAt(b.length()\
  \ - 1)) >= 0 && allVowels.indexOf(b.charAt(b.length() - 2)) < 0) {\n           \
  \     return b.substring(b.length() - 1);\n            }\n            b.deleteCharAt(b.length()\
  \ - 1);\n        }\n        return \"\";"
- "        char[] vowels = new char[]{'a', 'e', 'i', 'o', 'u'};\n        char[] letters\
  \ = word.toCharArray();\n        int left_idx = -1;\n        int right_idx = -1;\n\
  \        int min_dist = Integer.MAX_VALUE;\n        for (int i = 0; i < letters.length;\
  \ i++) {\n            char c = letters[i];\n            if (isVowel(c)) {\n    \
  \            for (int j = letters.length - 1; j > i; j--) {\n                  \
  \  char c1 = letters[j];\n                    if (!isVowel(c1)) {\n            \
  \            int diff = j - i;\n                        if (diff < min_dist) {\n\
  \                            min_dist = diff;\n                            left_idx\
  \ = i;\n                            right_idx = j;\n                        }\n\
  \                        break;\n                    }\n                }\n    \
  \        }\n        }\n        return left_idx >= 0 ? Character.toString(letters[left_idx])\
  \ : \"\";"
- "        String vowels = \"aeiou\";\n        String result = \"\";\n        List<String>\
  \ chars = new ArrayList<String>();\n        for (int i = 0; i < word.length(); i++)\
  \ {\n            chars.add(word.substring(i, i + 1));\n        }\n        Collections.reverse(chars);\n\
  \        for (int i = 0; i < chars.size(); i++) {\n            String curr = chars.get(i);\n\
  \            if (vowels.contains(curr)) {\n                if (i > 0 && !vowels.contains(chars.get(i\
  \ - 1))) {\n                    result = curr;\n                    break;\n   \
  \             }\n            }\n        }\n        return result;"
- "        // Good luck!\n        return null;"
- "        String vowels = \"aeiou\";\n        // your code here.\n        if (word.length()\
  \ < 3) {\n            return \"\";\n        }\n        for (int i = word.length()\
  \ - 1; i >= 1; i--) {\n            if (vowels.contains(word.substring(i, i + 1))\
  \ && \n                    !vowels.contains(word.substring(i - 1, i))) {\n     \
  \           return word.substring(i, i + 1);\n            }\n        }\n       \
  \ return \"\";"
- "        // TODO: write your code here\n        String result = \"\";\n        for\
  \ (int i = word.length() - 1; i >= 0; i--) {\n            char letter = word.charAt(i);\n\
  \            if (letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
  \ || letter == 'u') {\n                if (i == word.length() - 1) {\n         \
  \           continue;\n                }\n                char previous = word.charAt(i\
  \ - 1);\n                if (previous == 'a' || previous == 'e' || previous == 'i'\
  \ || previous == 'o' || previous == 'u') {\n                    continue;\n    \
  \            }\n                result = Character.toString(letter);\n         \
  \       break;\n            }\n        }\n        return result;"
- '        // Your code goes here'
- "        String result = \"\";\n        List<Character> vowels = Arrays.asList('a',\
  \ 'e', 'i', 'o', 'u');\n        for (int i = word.length() - 1; i >= 0; i--) {\n\
  \            if (vowels.contains(word.charAt(i))) {\n                if (i < word.length()\
  \ - 1 && vowels.contains(word.charAt(i + 1))) {\n                    break;\n  \
  \              }\n                result = word.charAt(i) + \"\";\n            \
  \    break;\n            }\n        }\n        return result;"
- "        if (word.length() == 0) return \"\";\n        if (word.length() == 1) return\
  \ \"\";\n        for (int i = word.length() - 1; i >= 1; i--) {\n            if\
  \ (isVowel(word.charAt(i)) && !isVowel(word.charAt(i - 1))) {\n                return\
  \ Character.toString(word.charAt(i));\n            }\n        }\n        return\
  \ \"\";"
- "        if (word.length() <= 2) {\n            return \"\";\n        }\n      \
  \  String vowel = \"\";\n        for (int i = 0; i < word.length(); i++) {\n   \
  \         if (vowel.length() > 0) {\n                return vowel;\n           \
  \ }\n            switch (word.charAt(i)) {\n                case 'a':\n        \
  \        case 'e':\n                case 'i':\n                case 'o':\n     \
  \           case 'u':\n                    if (i == word.length() - 1) {\n     \
  \                   vowel = \"\";\n                    } else {\n              \
  \          switch (word.charAt(i + 1)) {\n                            case 'a':\n\
  \                            case 'e':\n                            case 'i':\n\
  \                            case 'o':\n                            case 'u':\n\
  \                                vowel = \"\";\n                               \
  \ break;\n                            default:\n                               \
  \ vowel = word.substring(i, i + 1);\n                                break;\n  \
  \                      }\n                    }\n                    break;\n  \
  \              default:\n                    vowel = \"\";\n                   \
  \ break;\n            }\n        }\n        return vowel;"
- "        // your code here\n        return \"\";"
- '        return "";'
- "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        List<Character> vowelsList\
  \ = new ArrayList<Character>();\n        for (char vowel : vowels) {\n         \
  \   vowelsList.add(vowel);\n        }\n        if (word.length() < 3) {\n      \
  \      return \"\";\n        }\n        char[] wordChars = word.toCharArray();\n\
  \        char closestVowel = '\\0';\n        int closestVowelDistance = word.length();\n\
  \        for (int i = word.length() - 1; i >= 0; i--) {\n            if (vowelsList.contains(wordChars[i]))\
  \ {\n                if (closestVowel == '\\0') {\n                    closestVowel\
  \ = wordChars[i];\n                    closestVowelDistance = i;\n             \
  \   } else {\n                    if (i > closestVowelDistance) {\n            \
  \            return Character.toString(closestVowel);\n                    } else\
  \ {\n                        closestVowel = wordChars[i];\n                    \
  \    closestVowelDistance = i;\n                    }\n                }\n     \
  \       }\n        }\n        return Character.toString(closestVowel);"
- "        Map<Character, Integer> vowelMap = new HashMap<>();\n        vowelMap.put('a',\
  \ 0);\n        vowelMap.put('e', 0);\n        vowelMap.put('i', 0);\n        vowelMap.put('o',\
  \ 0);\n        vowelMap.put('u', 0);\n        vowelMap.put('A', 0);\n        vowelMap.put('E',\
  \ 0);\n        vowelMap.put('I', 0);\n        vowelMap.put('O', 0);\n        vowelMap.put('U',\
  \ 0);\n        int minDistance = 0;\n        int vowelIndex = 0;\n        boolean\
  \ search = false;\n        for (int i = word.length() - 1; i >= 0; i--) {\n    \
  \        if (vowelMap.containsKey(word.charAt(i))) {\n                if (minDistance\
  \ != 0) {\n                    if (i + minDistance < word.length()) {\n        \
  \                if (!vowelMap.containsKey(word.charAt(i + minDistance))) {\n  \
  \                          return String.valueOf(word.charAt(vowelIndex));\n   \
  \                     }\n                    }\n                }\n            \
  \    search = true;\n                vowelIndex = i;\n                minDistance\
  \ = 0;\n            } else {\n                if (search) {\n                  \
  \  minDistance++;\n                }\n            }\n        }\n        return \"\
  \";"
- "        if (word.length() <= 2) return \"\";\n        String vowels = \"aeiou\"\
  ;\n        int last = word.length() - 1;\n        char lastChar = word.charAt(last);\n\
  \        while (last > 0) {\n            lastChar = word.charAt(last);\n       \
  \     if (vowels.indexOf(lastChar) >= 0) {\n                if (vowels.indexOf(word.charAt(last\
  \ - 1)) < 0) return \"\" + lastChar;\n            }\n            last--;\n     \
  \   }\n        return \"\";"
- "        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        for (int\
  \ i = word.length() - 1; i >= 0; i--) {\n            for (String vowel : vowels)\
  \ {\n                if (word.charAt(i) == vowel.charAt(0)) {\n                \
  \    if (i == word.length() - 1) {\n                        return \"\";\n     \
  \               }\n                    if (i == 0) {\n                        return\
  \ \"\";\n                    }\n                    if (!isVowel(word.charAt(i -\
  \ 1)) && !isVowel(word.charAt(i + 1))) {\n                        return vowel;\n\
  \                    }\n                }\n            }\n        }\n        return\
  \ \"\";"
- "        if (word.length() < 3) return \"\";\n        String[] vowels = new String[]{\"\
  a\", \"e\", \"i\", \"o\", \"u\"};\n        String closestVowel = \"\";\n       \
  \ int distance = word.length();\n        for (int i = word.length() - 1; i > 0;\
  \ i--) {\n            for (String vowel : vowels) {\n                if (word.charAt(i)\
  \ == vowel.charAt(0)) {\n                    if (i - 1 > 0 && !vowels.contains(String.valueOf(word.charAt(i\
  \ - 1)))) {\n                        if (word.length() - i < distance) {\n     \
  \                       distance = word.length() - i;\n                        \
  \    closestVowel = vowel;\n                        }\n                    }\n \
  \               }\n            }\n        }\n        return closestVowel;"
- "        Map<Integer, Character> vowels = new HashMap<>();\n        String vowelsStr\
  \ = \"aeiou\";\n        int wordSize = word.length();\n        String closestVowel\
  \ = \"\";\n        boolean foundVowel = false;\n        // Store all the vowels\
  \ in a map, with the index as key\n        for (int i = 0; i < wordSize; i++) {\n\
  \            if (vowelsStr.contains(String.valueOf(word.charAt(i)))) {\n       \
  \         vowels.put(i, word.charAt(i));\n            }\n        }\n        for\
  \ (int i = 0; i < wordSize; i++) {\n            if (!vowelsStr.contains(String.valueOf(word.charAt(i))))\
  \ {\n                if (vowels.containsKey(i + 1)) {\n                    foundVowel\
  \ = true;\n                    closestVowel = String.valueOf(vowels.get(i + 1));\n\
  \                    break;\n                }\n            }\n        }\n     \
  \   if (!foundVowel) {\n            return \"\";\n        }\n        return closestVowel;"
- "        // 1. Declare final variables.\n        final String VOWELS = \"aeiou\"\
  ;\n        final String CONSONANTS = \"bcdfghjklmnpqrstvwxyz\";\n        final String\
  \ CLOSEST_VOWEL = \"\";\n        // 2. Iterate backwards over the word.\n      \
  \  for (int i = word.length() - 1; i >= 0; i--) {\n            if (VOWELS.contains(String.valueOf(word.charAt(i))))\
  \ {\n                if (CONSONANTS.contains(String.valueOf(word.charAt(i - 1))))\
  \ {\n                    return String.valueOf(word.charAt(i));\n              \
  \  }\n            }\n        }\n        return CLOSEST_VOWEL;"
- "      int L = word.length();\n      int[] d = new int[L];\n      int n = 0;\n \
  \     for (int i = 0; i < L; i++) {\n        char c = word.charAt(i);\n        if\
  \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c ==\
  \ 'E' || c == 'I' || c == 'O' || c == 'U') {\n          d[n++] = i;\n        }\n\
  \      }\n      if (n == 0) {\n        return \"\";\n      }\n      for (int i =\
  \ L - 1; i >= 0; i--) {\n        char c = word.charAt(i);\n        if (c != 'a'\
  \ && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c !=\
  \ 'I' && c != 'O' && c != 'U') {\n          int x = Math.abs(d[n - 1] - i);\n  \
  \        for (int j = n - 2; j >= 0; j--) {\n            int y = Math.abs(d[j] -\
  \ i);\n            if (y > x) {\n              break;\n            }\n         \
  \   x = y;\n          }\n          return Character.toString(word.charAt(d[n - 1\
  \ - x]));\n        }\n      }\n      return \"\";"
- "        String result = \"\";\n        int diff = Integer.MAX_VALUE;\n        int\
  \ start = 0;\n        for (int i = word.length() - 1; i >= 0; i--) {\n         \
  \   char ch = word.charAt(i);\n            if (ch == 'a' || ch == 'e' || ch == 'i'\
  \ || ch == 'o' || ch == 'u') {\n                int temp = word.length() - i;\n\
  \                if (temp - start < diff && start != 0) {\n                    diff\
  \ = temp - start;\n                    result = Character.toString(ch);\n      \
  \          }\n            } else {\n                start = word.length() - i;\n\
  \            }\n        }\n        return result;"
- "        // write your solution here\n        if (word.length() < 2) {\n       \
  \     return \"\";\n        }\n        word = word.toLowerCase();\n        HashSet<Character>\
  \ vowels = new HashSet<>();\n        vowels.add('a');\n        vowels.add('e');\n\
  \        vowels.add('i');\n        vowels.add('o');\n        vowels.add('u');\n\
  \        int prev_consonant = -1;\n        for (int i = word.length() - 1; i >=\
  \ 0; i--) {\n            if (!vowels.contains(word.charAt(i))) {\n             \
  \   prev_consonant = i;\n                break;\n            }\n        }\n    \
  \    if (prev_consonant == -1) {\n            return \"\";\n        }\n        int\
  \ next_consonant = -1;\n        for (int i = prev_consonant - 1; i >= 0; i--) {\n\
  \            if (!vowels.contains(word.charAt(i))) {\n                next_consonant\
  \ = i;\n                break;\n            }\n        }\n        if (next_consonant\
  \ == -1) {\n            return \"\";\n        }\n        return Character.toString(word.charAt(next_consonant\
  \ + 1));"
- "        if (word.length() <= 2) {\n            return \"\";\n        }\n      \
  \  char vowel = 'a';\n        for (int i = word.length() - 1; i >= 0; i--) {\n \
  \           char c = word.charAt(i);\n            if (c == 'a' || c == 'e' || c\
  \ == 'i' || c == 'o' || c == 'u') {\n                vowel = c;\n              \
  \  break;\n            }\n        }\n        for (int i = word.length() - 1; i >=\
  \ 0; i--) {\n            char c = word.charAt(i);\n            if (c == 'a' || c\
  \ == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                if (i + 1 < word.length()\
  \ && i - 1 >= 0) {\n                    if (word.charAt(i + 1) != 'a' && word.charAt(i\
  \ + 1) != 'e' && word.charAt(i + 1) != 'i'\n                            && word.charAt(i\
  \ + 1) != 'o' && word.charAt(i + 1) != 'u'\n                            && word.charAt(i\
  \ - 1) != 'a' && word.charAt(i - 1) != 'e' && word.charAt(i - 1) != 'i'\n      \
  \                      && word.charAt(i - 1) != 'o' && word.charAt(i - 1) != 'u')\
  \ {\n                        vowel = c;\n                        break;\n      \
  \              }\n                }\n            }\n        }\n        if (vowel\
  \ == 'a') {\n            return \"\";\n        }\n        return Character.toString(vowel);"
- "        if (word.length() <= 1) return \"\";\n        StringBuilder wordBuilder\
  \ = new StringBuilder(word);\n        String closest = \"\";\n        int minDistance\
  \ = Integer.MAX_VALUE;\n        StringBuilder temp = new StringBuilder();\n    \
  \    char c;\n        String vowel = \"\";\n        String consonant = \"\";\n \
  \       for (int i = 0; i < wordBuilder.length(); i++) {\n            temp.setLength(0);\n\
  \            c = wordBuilder.charAt(i);\n            temp.append(c);\n         \
  \   if (temp.toString().matches(\"[aeiou]\")) {\n                vowel = temp.toString();\n\
  \                if (consonant.equals(\"\")) {\n                    wordBuilder.deleteCharAt(i);\n\
  \                    i--;\n                    continue;\n                }\n  \
  \              int distance = Math.abs(wordBuilder.indexOf(vowel) - wordBuilder.indexOf(consonant));\n\
  \                if (distance < minDistance) {\n                    minDistance\
  \ = distance;\n                    closest = vowel;\n                }\n       \
  \         wordBuilder.deleteCharAt(i);\n                i--;\n            } else\
  \ {\n                consonant = temp.toString();\n                wordBuilder.deleteCharAt(i);\n\
  \                i--;\n            }\n        }\n        return closest;"
- "        String[] vowels = new String[] {\"a\", \"e\", \"i\", \"o\", \"u\"};\n \
  \       String[] consonants = new String[] {\"b\", \"c\", \"d\", \"f\", \"g\", \"\
  h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
  , \"w\", \"x\", \"y\", \"z\"};\n        if (word.length() < 3) return \"\";\n  \
  \      else {\n            // Start from right side and ignore the first and last\n\
  \            for (int i = word.length() - 2; i > 0; i--) {\n                // Check\
  \ if it is a consonant\n                if (Arrays.asList(consonants).contains(word.substring(i,\
  \ i + 1))) {\n                    // Check if it is a vowel from left side\n   \
  \                 if (Arrays.asList(vowels).contains(word.substring(i - 1, i)))\
  \ {\n                        // Check if it is a consonant from right side\n   \
  \                     if (Arrays.asList(consonants).contains(word.substring(i +\
  \ 1, i + 2))) {\n                            return word.substring(i - 1, i);\n\
  \                        }\n                    }\n                }\n         \
  \   }\n            return \"\";\n        }"
- "        String[] arr = word.split(\"\");\n        String result = \"\";\n     \
  \   for (int i = arr.length - 1; i > 0; i--) {\n            String temp = arr[i];\n\
  \            String temp2 = arr[i - 1];\n            if (temp.matches(\"[aeiou]\"\
  )) {\n                if (temp2.matches(\"[aeiou]\")) {\n                    continue;\n\
  \                } else {\n                    if (i == arr.length - 1) {\n    \
  \                    result = temp;\n                        break;\n          \
  \          } else {\n                        String temp3 = arr[i + 1];\n      \
  \                  if (temp3.matches(\"[aeiou]\")) {\n                         \
  \   continue;\n                        } else {\n                            result\
  \ = temp;\n                            break;\n                        }\n     \
  \               }\n                }\n            }\n        }\n        return result;"
- "        if (word.length() == 0) {\n            return \"\";\n        }\n      \
  \  char[] w = word.toCharArray();\n        if (vowel(w[w.length - 1])) {\n     \
  \       return \"\";\n        }\n        for (int i = w.length - 2; i >= 0; i--)\
  \ {\n            if (vowel(w[i])) {\n                if (i == 0 || !vowel(w[i -\
  \ 1])) {\n                    return \"\" + w[i];\n                }\n         \
  \   }\n        }\n        return \"\";"
- '        throw new RuntimeException("Not implemented yet");'
- "      char vowels[] = {'a', 'e', 'i', 'o', 'u'};\n      char consonants[] = {'b',\
  \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
  \ 'w', 'x', 'y', 'z'};\n      HashSet<Character> vowelSet = new HashSet<>();\n \
  \     HashSet<Character> consonantSet = new HashSet<>();\n      for (char vowel\
  \ : vowels) {\n        vowelSet.add(vowel);\n      }\n      for (char consonant\
  \ : consonants) {\n        consonantSet.add(consonant);\n      }\n      for (int\
  \ i = word.length() - 1; i >= 0; i--) {\n        if (vowelSet.contains(word.charAt(i)))\
  \ {\n          if (i != word.length() - 1 && consonantSet.contains(word.charAt(i\
  \ + 1))) {\n            return String.valueOf(word.charAt(i));\n          }\n  \
  \      }\n      }\n      return \"\";"
- "        String vowels = \"aeiouAEIOU\";\n        char last = word.charAt(word.length()\
  \ - 1);\n        // System.out.println(last);\n        if (word.length() <= 1 ||\
  \ !vowels.contains(last + \"\")) {\n            return \"\";\n        }\n      \
  \  for (int i = word.length() - 2; i >= 0; i--) {\n            char c = word.charAt(i);\n\
  \            if (vowels.contains(c + \"\")) {\n                return c + \"\";\n\
  \            }\n        }\n        return \"\";"
- "        char[] chars = word.toCharArray();\n        String vowels = \"aeiou\";\n\
  \        int index = -1;\n        boolean isFirstVowel = false;\n        for (int\
  \ i = 0; i < chars.length; i++) {\n            if (vowels.indexOf(chars[i]) >= 0)\
  \ {\n                isFirstVowel = true;\n                continue;\n         \
  \   }\n            if (i > 0 && isFirstVowel && vowels.indexOf(chars[i - 1]) >=\
  \ 0) {\n                index = i - 1;\n                break;\n            }\n\
  \        }\n        return index >= 0 ? word.substring(index, index + 1) : \"\";"
- "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] strChars = word.toCharArray();\n\
  \        int len = strChars.length;\n        for (int i = len - 1; i >= 0; i--)\
  \ {\n            if (Arrays.binarySearch(vowels, strChars[i]) >= 0) {\n        \
  \        if (i < len - 1 && Arrays.binarySearch(vowels, strChars[i + 1]) < 0) {\n\
  \                    return Character.toString(strChars[i]);\n                }\n\
  \            }\n        }\n        return \"\";"
- "        List<Character> vowels = new ArrayList<Character>();\n        vowels.add('a');\n\
  \        vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n\
  \        vowels.add('u');\n        vowels.add('A');\n        vowels.add('E');\n\
  \        vowels.add('I');\n        vowels.add('O');\n        vowels.add('U');\n\
  \        boolean consonant = false;\n        boolean vowel = false;\n        Character\
  \ closestVowel = null;\n        for (int i = word.length() - 1; i >= 0; i--) {\n\
  \            if (vowels.contains(word.charAt(i))) {\n                vowel = true;\n\
  \                if (consonant) {\n                    closestVowel = word.charAt(i);\n\
  \                    break;\n                }\n            } else {\n         \
  \       consonant = true;\n            }\n        }\n        if (closestVowel ==\
  \ null) {\n            return \"\";\n        } else {\n            return closestVowel.toString();\n\
  \        }"
- "      // get a list of vowels in the word\n      char[] vowels = {'a', 'e', 'i',\
  \ 'o', 'u'};\n      List<Character> listOfVowels = new ArrayList<Character>();\n\
  \      for (int i = 0; i < word.length(); i++) {\n        char c = word.charAt(i);\n\
  \        for (int j = 0; j < vowels.length; j++) {\n          if (c == vowels[j])\
  \ {\n            listOfVowels.add(vowels[j]);\n          }\n        }\n      }\n\
  \      // find the consonants between two vowels and return\n      if (listOfVowels.size()\
  \ < 2) {\n        return \"\";\n      }\n      StringBuilder sb = new StringBuilder();\n\
  \      for (int i = listOfVowels.size() - 2; i >= 0; i--) {\n        int index =\
  \ word.indexOf(listOfVowels.get(i), listOfVowels.get(i + 1));\n        if (index\
  \ != -1) {\n          for (int j = index + 1; j < word.length(); j++) {\n      \
  \      if (listOfVowels.indexOf(word.charAt(j)) == -1) {\n              sb.append(word.charAt(j));\n\
  \            } else {\n              return sb.toString();\n            }\n    \
  \      }\n        }\n      }\n      return \"\";"
- "        // Write your code here.\n        return \"\";"
- "        if (word.length() < 3) {\n            return \"\";\n        }\n       \
  \ List<Character> vowels = Arrays.asList('a', 'e', 'i', 'o', 'u');\n        int\
  \ resultIndex = -1;\n        int lastConsonantIndex = -1;\n        char[] wordArray\
  \ = word.toCharArray();\n        for (int i = wordArray.length - 1; i >= 0; i--)\
  \ {\n            char c = wordArray[i];\n            if (vowels.contains(c)) {\n\
  \                if (lastConsonantIndex > -1) {\n                    resultIndex\
  \ = i;\n                    break;\n                }\n            } else {\n  \
  \              lastConsonantIndex = i;\n            }\n        }\n        if (resultIndex\
  \ > -1) {\n            return word.substring(resultIndex, resultIndex + 1);\n  \
  \      }\n        return \"\";"
- "        if (word.length() < 3) return \"\";\n        if (!word.matches(\".*[aeiouAEIOU].*\"\
  )) return \"\";\n        String vowels = \"aeiouAEIOU\";\n        String closestVowel\
  \ = \"\";\n        String closestVowelSoFar = \"\";\n        int closestIndex =\
  \ 0;\n        int closestIndexSoFar = 0;\n        for (int i = word.length() - 1;\
  \ i >= 0; i--) {\n            if (vowels.contains(word.substring(i, i + 1))) {\n\
  \                closestVowel = word.substring(i, i + 1);\n                closestIndex\
  \ = i;\n                if (i == word.length() - 1) {\n                    return\
  \ \"\";\n                }\n                if (i == 0) {\n                    return\
  \ \"\";\n                }\n                if (!vowels.contains(word.substring(i\
  \ - 1, i)) && !vowels.contains(word.substring(i + 1, i + 2))) {\n              \
  \      if (closestIndex > closestIndexSoFar) {\n                        closestVowelSoFar\
  \ = closestVowel;\n                        closestIndexSoFar = closestIndex;\n \
  \                   }\n                }\n            }\n        }\n        return\
  \ closestVowelSoFar;"
- "      char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n      char[] consonants = {'b',\
  \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
  \ 'w', 'x', 'y', 'z'};\n      String s = word.toLowerCase();\n      if (s.length()\
  \ < 3) return \"\";\n      if (s.length() == 3) {\n        if (IntStream.range(0,\
  \ 5).anyMatch(i -> s.charAt(0) == vowels[i])) return \"\";\n        if (IntStream.range(0,\
  \ 21).anyMatch(i -> s.charAt(1) == consonants[i])) return \"\";\n        if (IntStream.range(0,\
  \ 5).anyMatch(i -> s.charAt(2) == vowels[i])) return \"\" + s.charAt(2);\n     \
  \   return \"\";\n      }\n      StringBuilder sb = new StringBuilder();\n     \
  \ for (int i = 1; i < s.length() - 1; i++) {\n        if (IntStream.range(0, 21).anyMatch(j\
  \ -> s.charAt(i - 1) == consonants[j])\n        && IntStream.range(0, 21).anyMatch(j\
  \ -> s.charAt(i + 1) == consonants[j])\n        && IntStream.range(0, 5).anyMatch(j\
  \ -> s.charAt(i) == vowels[j])) {\n          sb.append(s.charAt(i));\n        }\n\
  \      }\n      if (sb.length() == 0) return \"\";\n      if (sb.length() == 1)\
  \ return \"\" + sb.charAt(0);\n      return \"\" + sb.charAt(sb.length() - 1);"
- "        int vowelDistance = word.length();\n        int vowelIndex = -1;\n    \
  \    for (int i = word.length() - 1; i >= 0; i--) {\n            char current =\
  \ word.charAt(i);\n            if (current == 'a' || current == 'e' || current ==\
  \ 'i' || current == 'o' || current == 'u') {\n                int distance = word.length()\
  \ - i;\n                if (distance < vowelDistance) {\n                    vowelDistance\
  \ = distance;\n                    vowelIndex = i;\n                }\n        \
  \    }\n        }\n        if (vowelIndex == -1) {\n            return \"\";\n \
  \       }\n        return String.valueOf(word.charAt(vowelIndex));"
- "        String result = \"\";\n        for (int i = 0; i < word.length(); i++)\
  \ {\n            for (int j = i + 1; j < word.length(); j++) {\n               \
  \ if (word.charAt(i) == 'a' || word.charAt(i) == 'e' || word.charAt(i) == 'i' ||\
  \ word.charAt(i) == 'o' || word.charAt(i) == 'u') {\n                    if (word.charAt(j)\
  \ == 'a' || word.charAt(j) == 'e' || word.charAt(j) == 'i' || word.charAt(j) ==\
  \ 'o' || word.charAt(j) == 'u') {\n                        continue;\n         \
  \           } else {\n                        if (result.length() == 0) {\n    \
  \                        result = Character.toString(word.charAt(i));\n        \
  \                } else {\n                            int distance = j - i;\n \
  \                           int last = result.length() - 1;\n                  \
  \          int lastDistance = word.length() - result.charAt(last);\n           \
  \                 if (distance <= lastDistance) {\n                            \
  \    result = Character.toString(word.charAt(i));\n                            }\n\
  \                        }\n                    }\n                }\n         \
  \   }\n        }\n        return result;"
- '        return null;'
- "        String closestVowel = \"\";\n        String vowels = \"aeiouAEIOU\";\n\
  \        for (int i = word.length() - 1; i >= 0; i--) {\n            String c =\
  \ word.substring(i, i + 1);\n            if (vowels.contains(c)) {\n           \
  \     closestVowel = c;\n                break;\n            }\n        }\n    \
  \    return closestVowel;"
- "        String vowels = \"aeiouAEIOU\";\n        String closest = \"\";\n     \
  \   int minDistance = Integer.MAX_VALUE;\n        for (int i = word.length() - 1;\
  \ i >= 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n    \
  \            for (int j = i - 1; j >= 0; j--) {\n                    if (vowels.indexOf(word.charAt(j))\
  \ == -1) {\n                        int distance = i - j;\n                    \
  \    if (distance < minDistance) {\n                            minDistance = distance;\n\
  \                            closest = word.substring(i, i + 1);\n             \
  \           }\n                        break;\n                    }\n         \
  \       }\n            }\n        }\n        return closest;"
- "        final int idx = word.length() - 1;\n        for (int i = 0; i < idx; i++)\
  \ {\n            final char c0 = word.charAt(i);\n            final char c1 = word.charAt(i\
  \ + 1);\n            if (isVowel(c0) && isVowel(c1)) {\n                return c0\
  \ == 'u' || c0 == 'U' ? \"\" + c0 : \"\" + c1;\n            }\n        }\n     \
  \   return \"\";"
- "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] consonants =\
  \ {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't',\
  \ 'v', 'w', 'x', 'y', 'z'};\n        int index = -1;\n        for (int i = word.length()\
  \ - 1; i >= 0; i--) {\n            for (int j = 0; j < vowels.length; j++) {\n \
  \               if (word.charAt(i) == vowels[j]) {\n                    index =\
  \ i;\n                    break;\n                }\n            }\n           \
  \ if (index != -1) {\n                for (int j = 0; j < consonants.length; j++)\
  \ {\n                    if (word.charAt(i) == consonants[j]) {\n              \
  \          if (i + 1 == word.length()) {\n                            return Character.toString(word.charAt(index));\n\
  \                        }\n                        if (i + 1 < word.length()) {\n\
  \                            for (int k = 0; k < consonants.length; k++) {\n   \
  \                             if (word.charAt(i + 1) == consonants[k]) {\n     \
  \                               return Character.toString(word.charAt(index));\n\
  \                                }\n                            }\n            \
  \            }\n                    }\n                }\n            }\n      \
  \  }\n        return \"\";"
- "        String vowels = \"aeiouAEIOU\";\n        int firstVowelPosition = word.length();\n\
  \        for (int i = 0; i < word.length(); i++) {\n            if (vowels.indexOf(word.charAt(i))\
  \ >= 0) {\n                firstVowelPosition = i;\n                break;\n   \
  \         }\n        }\n        if (firstVowelPosition < word.length()) {\n    \
  \        String lettersBeforeVowel = word.substring(0, firstVowelPosition + 1);\n\
  \            String lettersAfterVowel = word.substring(firstVowelPosition + 1);\n\
  \            StringBuilder wordReversed = new StringBuilder(lettersAfterVowel).reverse();\n\
  \            StringBuilder lettersBeforeVowelReversed = new StringBuilder(lettersBeforeVowel).reverse();\n\
  \            for (int i = 0; i < wordReversed.length(); i++) {\n               \
  \ if (vowels.indexOf(wordReversed.charAt(i)) >= 0) {\n                    if (lettersBeforeVowelReversed.length()\
  \ > 1) {\n                        return wordReversed.charAt(i) + \"\";\n      \
  \              }\n                }\n            }\n        }\n        return \"\
  \";"
- "        // coder's paradise\n        int n = word.length();\n        for (int i\
  \ = n - 1; i >= 1; i--) {\n            char cur = word.charAt(i);\n            char\
  \ prev = word.charAt(i - 1);\n            if (isVowel(cur) && !isVowel(prev)) {\n\
  \                return String.valueOf(cur);\n            }\n        }\n       \
  \ return \"\";"
- "        int maxDistance = 0;\n        char closestVowel = '\\0';\n        char[]\
  \ wordArr = word.toCharArray();\n        for (int i = wordArr.length - 1; i >= 0;\
  \ i--) {\n            char c = wordArr[i];\n            if (\"AEIOUaeiou\".indexOf(c)\
  \ == -1) {\n                continue;\n            }\n            int distance =\
  \ 0;\n            int j = i;\n            while (j >= 0 && \"AEIOUaeiou\".indexOf(wordArr[j])\
  \ == -1) {\n                distance++;\n                j--;\n            }\n \
  \           if (distance > maxDistance) {\n                maxDistance = distance;\n\
  \                closestVowel = c;\n            }\n        }\n        return (maxDistance\
  \ == 0) ? \"\" : String.valueOf(closestVowel);"
- "        String vowels = \"aeiou\";\n        int closestVowelIndex = -1;\n     \
  \   for (int i = word.length() - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n\
  \            if (vowels.indexOf(c) != -1) {\n                closestVowelIndex =\
  \ i;\n                break;\n            }\n        }\n        if (closestVowelIndex\
  \ != -1) {\n            if (closestVowelIndex == 0) {\n                return \"\
  \";\n            }\n            if (closestVowelIndex == word.length() - 1) {\n\
  \                return \"\";\n            }\n            if (vowels.indexOf(word.charAt(closestVowelIndex\
  \ - 1)) != -1) {\n                return \"\";\n            }\n            if (vowels.indexOf(word.charAt(closestVowelIndex\
  \ + 1)) != -1) {\n                return \"\";\n            }\n            return\
  \ Character.toString(word.charAt(closestVowelIndex));\n        }\n        return\
  \ \"\";"
- '        throw new UnsupportedOperationException("Missing implementation");'
- '        // Your Code Here'
- "        String allVowels = \"AEIOUaeiou\";\n        String allConsonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
  ;\n        char[] wordArr = word.toCharArray();\n        int[] leftVowelDistance\
  \ = new int[wordArr.length];\n        Arrays.fill(leftVowelDistance, -1);\n    \
  \    int[] rightVowelDistance = new int[wordArr.length];\n        Arrays.fill(rightVowelDistance,\
  \ -1);\n        String vowelClosestToLeft = \"\";\n        String vowelClosestToRight\
  \ = \"\";\n        int closestVowelLeftIndex = -1;\n        int closestVowelRightIndex\
  \ = -1;\n        for (int i = 0; i < wordArr.length; i++) {\n            char ch\
  \ = wordArr[i];\n            if (allVowels.indexOf(ch) >= 0) {\n               \
  \ if (closestVowelLeftIndex < 0) {\n                    closestVowelLeftIndex =\
  \ i;\n                    vowelClosestToLeft = ch + \"\";\n                }\n \
  \               else {\n                    int oldDistance = i - closestVowelLeftIndex;\n\
  \                    int newDistance = i - closestVowelLeftIndex;\n            \
  \        if (newDistance > oldDistance) {\n                        closestVowelLeftIndex\
  \ = i;\n                        vowelClosestToLeft = ch + \"\";\n              \
  \      }\n                }\n            }\n        }\n        for (int i = wordArr.length\
  \ - 1; i >= 0; i--) {\n            char ch = wordArr[i];\n            if (allVowels.indexOf(ch)\
  \ >= 0) {\n                if (closestVowelRightIndex < 0) {\n                 \
  \   closestVowelRightIndex = i;\n                    vowelClosestToRight = ch +\
  \ \"\";\n                }\n                else {\n                    int oldDistance\
  \ = closestVowelRightIndex - i;\n                    int newDistance = closestVowelRightIndex\
  \ - i;\n                    if (newDistance > oldDistance) {\n                 \
  \       closestVowelRightIndex = i;\n"
- "        StringBuilder vowels = new StringBuilder(\"aeiou\");\n        StringBuilder\
  \ closest = new StringBuilder();\n        for (int i = word.length() - 1; i >= 0;\
  \ i--) {\n            if (vowels.indexOf(String.valueOf(word.charAt(i))) != -1)\
  \ {\n                closest.append(word.charAt(i));\n                if (i == 0)\
  \ {\n                    return \"\";\n                }\n                break;\n\
  \            }\n        }\n        for (int i = closest.length(); i < word.length();\
  \ i++) {\n            if (vowels.indexOf(String.valueOf(word.charAt(i))) != -1)\
  \ {\n                closest.append(word.charAt(i));\n                break;\n \
  \           }\n        }\n        if (closest.length() > 1) {\n            return\
  \ closest.substring(closest.length() - 1);\n        }\n        return \"\";"
- "        String vowels = \"AEIOUaeiou\";\n        int len = word.length();\n   \
  \     for (int i = len - 1; i >= 1; i--) {\n            if (vowels.indexOf(word.charAt(i))\
  \ > -1 && vowels.indexOf(word.charAt(i - 1)) == -1)\n                return word.substring(i,\
  \ i + 1);\n        }\n        return \"\";"
- "        if (word.length() == 0) return \"\";\n        String target = \"aeiou\"\
  ;\n        if (!word.contains(\"a\") && !word.contains(\"e\") && !word.contains(\"\
  i\") && !word.contains(\"o\") && !word.contains(\"u\")) return \"\";\n        if\
  \ (word.length() == 1) return \"\";\n        int index = 0;\n        int length\
  \ = word.length();\n        int i = 0;\n        while (i < length && index == 0)\
  \ {\n            if (target.contains(word.substring(i, i + 1))) index = i;\n   \
  \         else i++;\n        }\n        if (index == 0) return \"\";\n        if\
  \ (index == length - 1) return \"\";\n        int j = 0;\n        int n = 0;\n \
  \       while (j < index) {\n            if (!target.contains(word.substring(j,\
  \ j + 1))) n++;\n            j++;\n        }\n        if (n < 2) return \"\";\n\
  \        return word.substring(index, index + 1);"
- "        int L = word.length();\n        for (int i = L - 1; i >= 0; i--) {\n  \
  \          char c = word.charAt(i);\n            if (isVowel(c)) {\n           \
  \     boolean left_is_consonant = (i - 1 >= 0) && isConsonant(word.charAt(i - 1));\n\
  \                boolean right_is_consonant = (i + 1 < L) && isConsonant(word.charAt(i\
  \ + 1));\n                if (left_is_consonant && right_is_consonant)\n       \
  \             return String.valueOf(c);\n            }\n        }\n        return\
  \ \"\";"
- "        String vowels = \"aeiouAEIOU\";\n        String consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
  ;\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (consonants.indexOf(word.charAt(i))\
  \ >= 0) {\n                for (int j = i - 1; j >= 0; j--) {\n                \
  \    if (vowels.indexOf(word.charAt(j)) >= 0) {\n                        return\
  \ word.substring(j, j + 1);\n                    }\n                }\n        \
  \        return \"\";\n            }\n        }\n        return \"\";"
- "        String vowels = \"aeiou\";\n        String consonants = \"bcdfghjklmnpqrstvwxyz\"\
  ;\n        int l = word.length();\n        int i = l - 1;\n        while (i >= 0)\
  \ {\n            if (consonants.contains(word.substring(i, i + 1))) {\n        \
  \        if (i > 0 && vowels.contains(word.substring(i - 1, i))) {\n           \
  \         return word.substring(i - 1, i);\n                }\n                i\
  \ -= 1;\n            } else {\n                i -= 1;\n            }\n        }\n\
  \        return \"\";"
language: java
name: HumanEval_118_get_closest_vowel
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a word. Your task is to find the closest vowel\
  \ that stands between \n    // two consonants from the right side of the word (case\
  \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return empty\
  \ string if you didn't\n    // find any vowel met the above condition. \n    //\
  \ You may assume that the given string contains English letter only.\n    // Example:\n\
  \    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"FULL\"\
  ) ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
  ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
  yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
  u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n\
  \    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
  most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n\
  \    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"i\"\
  )));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  Above\")).equals((\"o\")));\n    }\n\n}\n"
