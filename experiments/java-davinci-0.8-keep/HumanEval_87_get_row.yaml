name: HumanEval_87_get_row
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n\
  \    // which is similar to matrix, however, unlike matrices,\n    // each row may\
  \ contain a different number of columns.\n    // Given lst, and integer x, find\
  \ integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2)\
  \ ...] such that\n    // each tuple is a coordinate - (row, columns), starting with\
  \ 0.\n    // Sort coordinates initially by rows in ascending order.\n    // Also,\
  \ sort coordinates of the row by columns in descending order.\n    // Examples:\n\
  \    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n\
  \    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1)\
  \ == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static\
  \ ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>> lst, int\
  \ x) {\n"
tests: "return new ArrayList<Pair<Integer, Integer>>(Arrays.asList());\n    }\n  \
  \  public static void main(String[] args) {\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
  \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
  \ (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
  \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
  \ Integer>)Pair.with(1, 4), (Pair<Integer, Integer>)Pair.with(1, 0), (Pair<Integer,\
  \ Integer>)Pair.with(2, 5), (Pair<Integer, Integer>)Pair.with(2, 0))))));\n    assert(getRow((new\
  \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2, (int)3, (int)4, (int)5, (int)6))))), (2)).equals((new ArrayList<Pair<Integer,\
  \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 1), (Pair<Integer,\
  \ Integer>)Pair.with(1, 1), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
  \ Integer>)Pair.with(3, 1), (Pair<Integer, Integer>)Pair.with(4, 1), (Pair<Integer,\
  \ Integer>)Pair.with(5, 1))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6)),\
  \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
  \ (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)1, (int)3, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2, (int)1, (int)4, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2, (int)3, (int)1, (int)5, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2, (int)3, (int)4, (int)1, (int)6)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2, (int)3, (int)4, (int)5, (int)1))))), (1)).equals((new ArrayList<Pair<Integer,\
  \ Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(0, 0), (Pair<Integer,\
  \ Integer>)Pair.with(1, 0), (Pair<Integer, Integer>)Pair.with(2, 1), (Pair<Integer,\
  \ Integer>)Pair.with(2, 0), (Pair<Integer, Integer>)Pair.with(3, 2), (Pair<Integer,\
  \ Integer>)Pair.with(3, 0), (Pair<Integer, Integer>)Pair.with(4, 3), (Pair<Integer,\
  \ Integer>)Pair.with(4, 0), (Pair<Integer, Integer>)Pair.with(5, 4), (Pair<Integer,\
  \ Integer>)Pair.with(5, 0), (Pair<Integer, Integer>)Pair.with(6, 5), (Pair<Integer,\
  \ Integer>)Pair.with(6, 0))))));\n    assert(getRow((new ArrayList<ArrayList<Integer>>(Arrays.asList())),\
  \ (1)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n    assert(getRow((new\
  \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1))))),\
  \ (2)).equals((new ArrayList<Pair<Integer, Integer>>(Arrays.asList()))));\n    assert(getRow((new\
  \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList()),\
  \ (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1)), (ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3))))), (3)).equals((new\
  \ ArrayList<Pair<Integer, Integer>>(Arrays.asList((Pair<Integer, Integer>)Pair.with(2,\
  \ 2))))));\n    }\n\n}\n"
completions: []
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
